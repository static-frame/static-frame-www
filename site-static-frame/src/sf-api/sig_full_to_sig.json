{"Series.__init__(values, *, index, name, dtype, index_constructor, own_index)": "Series.__init__()", "Series.from_concat(containers, *, index, index_constructor, name)": "Series.from_concat()", "Series.from_concat_items(items, *, name, index_constructor)": "Series.from_concat_items()", "Series.from_delimited(delimited, *, delimiter, index, dtype, name, index_constructor, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, own_index)": "Series.from_delimited()", "Series.from_dict(mapping, *, dtype, name, index_constructor)": "Series.from_dict()", "Series.from_element(element, *, index, dtype, name, index_constructor, own_index)": "Series.from_element()", "Series.from_items(pairs, *, dtype, name, index_constructor)": "Series.from_items()", "Series.from_overlay(containers, *, index, union, name, func, fill_value)": "Series.from_overlay()", "Series.from_pandas(value, *, index, index_constructor, name, own_data)": "Series.from_pandas()", "Series.to_frame(axis, *, index, index_constructor, columns, columns_constructor, name)": "Series.to_frame()", "Series.to_frame_go(axis, *, index, index_constructor, columns, columns_constructor, name)": "Series.to_frame_go()", "Series.to_frame_he(axis, *, index, index_constructor, columns, columns_constructor, name)": "Series.to_frame_he()", "Series.to_html(config, style_config)": "Series.to_html()", "Series.to_html_datatables(fp, show, config)": "Series.to_html_datatables()", "Series.to_pairs()": "Series.to_pairs()", "Series.to_pandas()": "Series.to_pandas()", "Series.to_series_he()": "Series.to_series_he()", "Series.to_visidata()": "Series.to_visidata()", "Series.STATIC": "Series.STATIC", "Series.T": "Series.T", "Series.dtype": "Series.dtype", "Series.index": "Series.index", "Series.memory": "Series.memory", "Series.mloc": "Series.mloc", "Series.name": "Series.name", "Series.nbytes": "Series.nbytes", "Series.ndim": "Series.ndim", "Series.shape": "Series.shape", "Series.size": "Series.size", "Series.__array__(dtype)": "Series.__array__()", "Series.__array_ufunc__(ufunc, method, *args, **kwargs)": "Series.__array_ufunc__()", "Series.__bool__()": "Series.__bool__()", "Series.__deepcopy__(memo)": "Series.__deepcopy__()", "Series.__len__()": "Series.__len__()", "Series.__round__(decimals)": "Series.__round__()", "Series.all(axis, skipna, out)": "Series.all()", "Series.any(axis, skipna, out)": "Series.any()", "Series.astype(dtype)": "Series.astype()", "Series.clip(*, lower, upper)": "Series.clip()", "Series.corr(other)": "Series.corr()", "Series.count(*, skipna, skipfalsy, unique, axis)": "Series.count()", "Series.cov(other, *, ddof)": "Series.cov()", "Series.cumprod(axis, skipna)": "Series.cumprod()", "Series.cumsum(axis, skipna)": "Series.cumsum()", "Series.drop_duplicated(*, exclude_first, exclude_last)": "Series.drop_duplicated()", "Series.dropfalsy()": "Series.dropfalsy()", "Series.dropna()": "Series.dropna()", "Series.duplicated(*, exclude_first, exclude_last)": "Series.duplicated()", "Series.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "Series.equals()", "Series.fillfalsy(value)": "Series.fillfalsy()", "Series.fillfalsy_backward(limit)": "Series.fillfalsy_backward()", "Series.fillfalsy_forward(limit)": "Series.fillfalsy_forward()", "Series.fillfalsy_leading(value)": "Series.fillfalsy_leading()", "Series.fillfalsy_trailing(value)": "Series.fillfalsy_trailing()", "Series.fillna(value)": "Series.fillna()", "Series.fillna_backward(limit)": "Series.fillna_backward()", "Series.fillna_forward(limit)": "Series.fillna_forward()", "Series.fillna_leading(value)": "Series.fillna_leading()", "Series.fillna_trailing(value)": "Series.fillna_trailing()", "Series.head(count)": "Series.head()", "Series.iloc_max(*, skipna)": "Series.iloc_max()", "Series.iloc_min(*, skipna)": "Series.iloc_min()", "Series.iloc_notfalsy_first(*, fill_value)": "Series.iloc_notfalsy_first()", "Series.iloc_notfalsy_last(*, fill_value)": "Series.iloc_notfalsy_last()", "Series.iloc_notna_first(*, fill_value)": "Series.iloc_notna_first()", "Series.iloc_notna_last(*, fill_value)": "Series.iloc_notna_last()", "Series.iloc_searchsorted(values, *, side_left)": "Series.iloc_searchsorted()", "Series.insert_after(key, container)": "Series.insert_after()", "Series.insert_before(key, container)": "Series.insert_before()", "Series.isfalsy()": "Series.isfalsy()", "Series.isin(other)": "Series.isin()", "Series.isna()": "Series.isna()", "Series.loc_max(*, skipna)": "Series.loc_max()", "Series.loc_min(*, skipna)": "Series.loc_min()", "Series.loc_notfalsy_first(*, fill_value)": "Series.loc_notfalsy_first()", "Series.loc_notfalsy_last(*, fill_value)": "Series.loc_notfalsy_last()", "Series.loc_notna_first(*, fill_value)": "Series.loc_notna_first()", "Series.loc_notna_last(*, fill_value)": "Series.loc_notna_last()", "Series.loc_searchsorted(values, *, side_left, fill_value)": "Series.loc_searchsorted()", "Series.max(axis, skipna, out)": "Series.max()", "Series.mean(axis, skipna, out)": "Series.mean()", "Series.median(axis, skipna, out)": "Series.median()", "Series.min(axis, skipna, out)": "Series.min()", "Series.notfalsy()": "Series.notfalsy()", "Series.notna()": "Series.notna()", "Series.prod(axis, skipna, allna, out)": "Series.prod()", "Series.rank_dense(*, skipna, ascending, start, fill_value)": "Series.rank_dense()", "Series.rank_max(*, skipna, ascending, start, fill_value)": "Series.rank_max()", "Series.rank_mean(*, skipna, ascending, start, fill_value)": "Series.rank_mean()", "Series.rank_min(*, skipna, ascending, start, fill_value)": "Series.rank_min()", "Series.rank_ordinal(*, skipna, ascending, start, fill_value)": "Series.rank_ordinal()", "Series.rehierarch(depth_map, *, index_constructors)": "Series.rehierarch()", "Series.reindex(index, *, fill_value, own_index, check_equals)": "Series.reindex()", "Series.relabel(index, *, index_constructor)": "Series.relabel()", "Series.relabel_flat()": "Series.relabel_flat()", "Series.relabel_level_add(level, *, index_constructor)": "Series.relabel_level_add()", "Series.relabel_level_drop(count)": "Series.relabel_level_drop()", "Series.rename(name, *, index)": "Series.rename()", "Series.roll(shift, *, include_index)": "Series.roll()", "Series.sample(count, *, seed)": "Series.sample()", "Series.shift(shift, *, fill_value)": "Series.shift()", "Series.sort_index(*, ascending, kind, key)": "Series.sort_index()", "Series.sort_values(*, ascending, kind, key)": "Series.sort_values()", "Series.std(axis, skipna, ddof, out)": "Series.std()", "Series.sum(axis, skipna, allna, out)": "Series.sum()", "Series.tail(count)": "Series.tail()", "Series.transpose()": "Series.transpose()", "Series.unique()": "Series.unique()", "Series.unique_enumerated(*, retain_order, func)": "Series.unique_enumerated()", "Series.var(axis, skipna, ddof, out)": "Series.var()", "Series.__contains__(value)": "Series.__contains__()", "Series.__iter__()": "Series.__iter__()", "Series.__reversed__()": "Series.__reversed__()", "Series.get(key, default)": "Series.get()", "Series.items()": "Series.items()", "Series.keys()": "Series.keys()", "Series.values": "Series.values", "Series.interface": "Series.interface", "Series.__repr__()": "Series.__repr__()", "Series.__str__()": "Series.__str__()", "Series.display(config, *, style_config)": "Series.display()", "Series.display_tall(config)": "Series.display_tall()", "Series.display_wide(config)": "Series.display_wide()", "Series.assign[key](value, *, fill_value)": "Series.assign[]()", "Series.assign[key].apply(func, *, fill_value)": "Series.assign[].apply()", "Series.assign[key].apply_element(func, *, dtype, fill_value)": "Series.assign[].apply_element()", "Series.assign[key].apply_element_items(func, *, dtype, fill_value)": "Series.assign[].apply_element_items()", "Series.assign.iloc[key](value, *, fill_value)": "Series.assign.iloc[]()", "Series.assign.iloc[key].apply(func, *, fill_value)": "Series.assign.iloc[].apply()", "Series.assign.iloc[key].apply_element(func, *, dtype, fill_value)": "Series.assign.iloc[].apply_element()", "Series.assign.iloc[key].apply_element_items(func, *, dtype, fill_value)": "Series.assign.iloc[].apply_element_items()", "Series.assign.loc[key](value, *, fill_value)": "Series.assign.loc[]()", "Series.assign.loc[key].apply(func, *, fill_value)": "Series.assign.loc[].apply()", "Series.assign.loc[key].apply_element(func, *, dtype, fill_value)": "Series.assign.loc[].apply_element()", "Series.assign.loc[key].apply_element_items(func, *, dtype, fill_value)": "Series.assign.loc[].apply_element_items()", "Series.drop[key]": "Series.drop[]", "Series.drop.iloc[key]": "Series.drop.iloc[]", "Series.drop.loc[key]": "Series.drop.loc[]", "Series.mask[key]": "Series.mask[]", "Series.mask.iloc[key]": "Series.mask.iloc[]", "Series.mask.loc[key]": "Series.mask.loc[]", "Series.masked_array[key]": "Series.masked_array[]", "Series.masked_array.iloc[key]": "Series.masked_array.iloc[]", "Series.masked_array.loc[key]": "Series.masked_array.loc[]", "Series.[key]": "Series.[]", "Series.iloc[key]": "Series.iloc[]", "Series.loc[key]": "Series.loc[]", "Series.iter_element()": "Series.iter_element()", "Series.iter_element().apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_element().apply()", "Series.iter_element().apply_iter(func)": "Series.iter_element().apply_iter()", "Series.iter_element().apply_iter_items(func)": "Series.iter_element().apply_iter_items()", "Series.iter_element().apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_element().apply_pool()", "Series.iter_element().map_all(mapping, *, dtype, name, index_constructor)": "Series.iter_element().map_all()", "Series.iter_element().map_all_iter(mapping)": "Series.iter_element().map_all_iter()", "Series.iter_element().map_all_iter_items(mapping)": "Series.iter_element().map_all_iter_items()", "Series.iter_element().map_any(mapping, *, dtype, name, index_constructor)": "Series.iter_element().map_any()", "Series.iter_element().map_any_iter(mapping)": "Series.iter_element().map_any_iter()", "Series.iter_element().map_any_iter_items(mapping)": "Series.iter_element().map_any_iter_items()", "Series.iter_element().map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "Series.iter_element().map_fill()", "Series.iter_element().map_fill_iter(mapping, *, fill_value)": "Series.iter_element().map_fill_iter()", "Series.iter_element().map_fill_iter_items(mapping, *, fill_value)": "Series.iter_element().map_fill_iter_items()", "Series.iter_element_items()": "Series.iter_element_items()", "Series.iter_element_items().apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_element_items().apply()", "Series.iter_element_items().apply_iter(func)": "Series.iter_element_items().apply_iter()", "Series.iter_element_items().apply_iter_items(func)": "Series.iter_element_items().apply_iter_items()", "Series.iter_element_items().apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_element_items().apply_pool()", "Series.iter_element_items().map_all(mapping, *, dtype, name, index_constructor)": "Series.iter_element_items().map_all()", "Series.iter_element_items().map_all_iter(mapping)": "Series.iter_element_items().map_all_iter()", "Series.iter_element_items().map_all_iter_items(mapping)": "Series.iter_element_items().map_all_iter_items()", "Series.iter_element_items().map_any(mapping, *, dtype, name, index_constructor)": "Series.iter_element_items().map_any()", "Series.iter_element_items().map_any_iter(mapping)": "Series.iter_element_items().map_any_iter()", "Series.iter_element_items().map_any_iter_items(mapping)": "Series.iter_element_items().map_any_iter_items()", "Series.iter_element_items().map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "Series.iter_element_items().map_fill()", "Series.iter_element_items().map_fill_iter(mapping, *, fill_value)": "Series.iter_element_items().map_fill_iter()", "Series.iter_element_items().map_fill_iter_items(mapping, *, fill_value)": "Series.iter_element_items().map_fill_iter_items()", "Series.iter_group(*, axis)": "Series.iter_group()", "Series.iter_group(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_group().apply()", "Series.iter_group(*, axis).apply_iter(func)": "Series.iter_group().apply_iter()", "Series.iter_group(*, axis).apply_iter_items(func)": "Series.iter_group().apply_iter_items()", "Series.iter_group(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_group().apply_pool()", "Series.iter_group_array(*, axis)": "Series.iter_group_array()", "Series.iter_group_array(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_group_array().apply()", "Series.iter_group_array(*, axis).apply_iter(func)": "Series.iter_group_array().apply_iter()", "Series.iter_group_array(*, axis).apply_iter_items(func)": "Series.iter_group_array().apply_iter_items()", "Series.iter_group_array(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_group_array().apply_pool()", "Series.iter_group_array_items(*, axis)": "Series.iter_group_array_items()", "Series.iter_group_array_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_group_array_items().apply()", "Series.iter_group_array_items(*, axis).apply_iter(func)": "Series.iter_group_array_items().apply_iter()", "Series.iter_group_array_items(*, axis).apply_iter_items(func)": "Series.iter_group_array_items().apply_iter_items()", "Series.iter_group_array_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_group_array_items().apply_pool()", "Series.iter_group_items(*, axis)": "Series.iter_group_items()", "Series.iter_group_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_group_items().apply()", "Series.iter_group_items(*, axis).apply_iter(func)": "Series.iter_group_items().apply_iter()", "Series.iter_group_items(*, axis).apply_iter_items(func)": "Series.iter_group_items().apply_iter_items()", "Series.iter_group_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_group_items().apply_pool()", "Series.iter_group_labels(depth_level)": "Series.iter_group_labels()", "Series.iter_group_labels(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_group_labels().apply()", "Series.iter_group_labels(depth_level).apply_iter(func)": "Series.iter_group_labels().apply_iter()", "Series.iter_group_labels(depth_level).apply_iter_items(func)": "Series.iter_group_labels().apply_iter_items()", "Series.iter_group_labels(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_group_labels().apply_pool()", "Series.iter_group_labels_array(depth_level)": "Series.iter_group_labels_array()", "Series.iter_group_labels_array(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_group_labels_array().apply()", "Series.iter_group_labels_array(depth_level).apply_iter(func)": "Series.iter_group_labels_array().apply_iter()", "Series.iter_group_labels_array(depth_level).apply_iter_items(func)": "Series.iter_group_labels_array().apply_iter_items()", "Series.iter_group_labels_array(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_group_labels_array().apply_pool()", "Series.iter_group_labels_array_items(depth_level)": "Series.iter_group_labels_array_items()", "Series.iter_group_labels_array_items(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_group_labels_array_items().apply()", "Series.iter_group_labels_array_items(depth_level).apply_iter(func)": "Series.iter_group_labels_array_items().apply_iter()", "Series.iter_group_labels_array_items(depth_level).apply_iter_items(func)": "Series.iter_group_labels_array_items().apply_iter_items()", "Series.iter_group_labels_array_items(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_group_labels_array_items().apply_pool()", "Series.iter_group_labels_items(depth_level)": "Series.iter_group_labels_items()", "Series.iter_group_labels_items(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_group_labels_items().apply()", "Series.iter_group_labels_items(depth_level).apply_iter(func)": "Series.iter_group_labels_items().apply_iter()", "Series.iter_group_labels_items(depth_level).apply_iter_items(func)": "Series.iter_group_labels_items().apply_iter_items()", "Series.iter_group_labels_items(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_group_labels_items().apply_pool()", "Series.iter_group_other(other, *, fill_value, axis)": "Series.iter_group_other()", "Series.iter_group_other(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_group_other().apply()", "Series.iter_group_other(other, *, fill_value, axis).apply_iter(func)": "Series.iter_group_other().apply_iter()", "Series.iter_group_other(other, *, fill_value, axis).apply_iter_items(func)": "Series.iter_group_other().apply_iter_items()", "Series.iter_group_other(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_group_other().apply_pool()", "Series.iter_group_other_array(other, *, fill_value, axis)": "Series.iter_group_other_array()", "Series.iter_group_other_array(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_group_other_array().apply()", "Series.iter_group_other_array(other, *, fill_value, axis).apply_iter(func)": "Series.iter_group_other_array().apply_iter()", "Series.iter_group_other_array(other, *, fill_value, axis).apply_iter_items(func)": "Series.iter_group_other_array().apply_iter_items()", "Series.iter_group_other_array(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_group_other_array().apply_pool()", "Series.iter_group_other_array_items(other, *, fill_value, axis)": "Series.iter_group_other_array_items()", "Series.iter_group_other_array_items(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_group_other_array_items().apply()", "Series.iter_group_other_array_items(other, *, fill_value, axis).apply_iter(func)": "Series.iter_group_other_array_items().apply_iter()", "Series.iter_group_other_array_items(other, *, fill_value, axis).apply_iter_items(func)": "Series.iter_group_other_array_items().apply_iter_items()", "Series.iter_group_other_array_items(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_group_other_array_items().apply_pool()", "Series.iter_group_other_items(other, *, fill_value, axis)": "Series.iter_group_other_items()", "Series.iter_group_other_items(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_group_other_items().apply()", "Series.iter_group_other_items(other, *, fill_value, axis).apply_iter(func)": "Series.iter_group_other_items().apply_iter()", "Series.iter_group_other_items(other, *, fill_value, axis).apply_iter_items(func)": "Series.iter_group_other_items().apply_iter_items()", "Series.iter_group_other_items(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_group_other_items().apply_pool()", "Series.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "Series.iter_window()", "Series.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_window().apply()", "Series.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "Series.iter_window().apply_iter()", "Series.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "Series.iter_window().apply_iter_items()", "Series.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_window().apply_pool()", "Series.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "Series.iter_window_array()", "Series.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_window_array().apply()", "Series.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "Series.iter_window_array().apply_iter()", "Series.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "Series.iter_window_array().apply_iter_items()", "Series.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_window_array().apply_pool()", "Series.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "Series.iter_window_array_items()", "Series.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_window_array_items().apply()", "Series.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "Series.iter_window_array_items().apply_iter()", "Series.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "Series.iter_window_array_items().apply_iter_items()", "Series.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_window_array_items().apply_pool()", "Series.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "Series.iter_window_items()", "Series.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Series.iter_window_items().apply()", "Series.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "Series.iter_window_items().apply_iter()", "Series.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "Series.iter_window_items().apply_iter_items()", "Series.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Series.iter_window_items().apply_pool()", "Series.__add__(other)": "Series.__add__()", "Series.__and__(other)": "Series.__and__()", "Series.__eq__(other)": "Series.__eq__()", "Series.__floordiv__(other)": "Series.__floordiv__()", "Series.__ge__(other)": "Series.__ge__()", "Series.__gt__(other)": "Series.__gt__()", "Series.__le__(other)": "Series.__le__()", "Series.__lt__(other)": "Series.__lt__()", "Series.__matmul__(other)": "Series.__matmul__()", "Series.__mod__(other)": "Series.__mod__()", "Series.__mul__(other)": "Series.__mul__()", "Series.__ne__(other)": "Series.__ne__()", "Series.__or__(other)": "Series.__or__()", "Series.__pow__(other)": "Series.__pow__()", "Series.__radd__(other)": "Series.__radd__()", "Series.__rfloordiv__(other)": "Series.__rfloordiv__()", "Series.__rmatmul__(other)": "Series.__rmatmul__()", "Series.__rmul__(other)": "Series.__rmul__()", "Series.__rshift__(other)": "Series.__rshift__()", "Series.__rsub__(other)": "Series.__rsub__()", "Series.__rtruediv__(other)": "Series.__rtruediv__()", "Series.__sub__(other)": "Series.__sub__()", "Series.__truediv__(other)": "Series.__truediv__()", "Series.__xor__(other)": "Series.__xor__()", "Series.__abs__()": "Series.__abs__()", "Series.__invert__()": "Series.__invert__()", "Series.__neg__()": "Series.__neg__()", "Series.__pos__()": "Series.__pos__()", "Series.abs()": "Series.abs()", "Series.via_values.apply(func, *args, **kwargs)": "Series.via_values.apply()", "Series.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "Series.via_values.__array_ufunc__()", "Series.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "Series.via_values.__call__()", "Series.via_dt.__call__(*, fill_value)": "Series.via_dt.__call__()", "Series.via_dt.year": "Series.via_dt.year", "Series.via_dt.year_month": "Series.via_dt.year_month", "Series.via_dt.year_quarter": "Series.via_dt.year_quarter", "Series.via_dt.month": "Series.via_dt.month", "Series.via_dt.day": "Series.via_dt.day", "Series.via_dt.hour": "Series.via_dt.hour", "Series.via_dt.minute": "Series.via_dt.minute", "Series.via_dt.second": "Series.via_dt.second", "Series.via_dt.weekday()": "Series.via_dt.weekday()", "Series.via_dt.quarter()": "Series.via_dt.quarter()", "Series.via_dt.is_month_end()": "Series.via_dt.is_month_end()", "Series.via_dt.is_month_start()": "Series.via_dt.is_month_start()", "Series.via_dt.is_year_end()": "Series.via_dt.is_year_end()", "Series.via_dt.is_year_start()": "Series.via_dt.is_year_start()", "Series.via_dt.is_quarter_end()": "Series.via_dt.is_quarter_end()", "Series.via_dt.is_quarter_start()": "Series.via_dt.is_quarter_start()", "Series.via_dt.timetuple()": "Series.via_dt.timetuple()", "Series.via_dt.isoformat(sep, timespec)": "Series.via_dt.isoformat()", "Series.via_dt.fromisoformat()": "Series.via_dt.fromisoformat()", "Series.via_dt.strftime(format)": "Series.via_dt.strftime()", "Series.via_dt.strptime(format)": "Series.via_dt.strptime()", "Series.via_dt.strpdate(format)": "Series.via_dt.strpdate()", "Series.via_str.__getitem__(key)": "Series.via_str.__getitem__()", "Series.via_str.capitalize()": "Series.via_str.capitalize()", "Series.via_str.center(width, fillchar)": "Series.via_str.center()", "Series.via_str.contains(item)": "Series.via_str.contains()", "Series.via_str.count(sub, start, end)": "Series.via_str.count()", "Series.via_str.decode(encoding, errors)": "Series.via_str.decode()", "Series.via_str.encode(encoding, errors)": "Series.via_str.encode()", "Series.via_str.endswith(suffix, start, end)": "Series.via_str.endswith()", "Series.via_str.find(sub, start, end)": "Series.via_str.find()", "Series.via_str.format(format)": "Series.via_str.format()", "Series.via_str.index(sub, start, end)": "Series.via_str.index()", "Series.via_str.isalnum()": "Series.via_str.isalnum()", "Series.via_str.isalpha()": "Series.via_str.isalpha()", "Series.via_str.isdecimal()": "Series.via_str.isdecimal()", "Series.via_str.isdigit()": "Series.via_str.isdigit()", "Series.via_str.islower()": "Series.via_str.islower()", "Series.via_str.isnumeric()": "Series.via_str.isnumeric()", "Series.via_str.isspace()": "Series.via_str.isspace()", "Series.via_str.istitle()": "Series.via_str.istitle()", "Series.via_str.isupper()": "Series.via_str.isupper()", "Series.via_str.ljust(width, fillchar)": "Series.via_str.ljust()", "Series.via_str.len()": "Series.via_str.len()", "Series.via_str.lower()": "Series.via_str.lower()", "Series.via_str.lstrip(chars)": "Series.via_str.lstrip()", "Series.via_str.partition(sep)": "Series.via_str.partition()", "Series.via_str.replace(old, new, count)": "Series.via_str.replace()", "Series.via_str.rfind(sub, start, end)": "Series.via_str.rfind()", "Series.via_str.rindex(sub, start, end)": "Series.via_str.rindex()", "Series.via_str.rjust(width, fillchar)": "Series.via_str.rjust()", "Series.via_str.rpartition(sep)": "Series.via_str.rpartition()", "Series.via_str.rsplit(sep, maxsplit)": "Series.via_str.rsplit()", "Series.via_str.rstrip(chars)": "Series.via_str.rstrip()", "Series.via_str.split(sep, maxsplit)": "Series.via_str.split()", "Series.via_str.startswith(prefix, start, end)": "Series.via_str.startswith()", "Series.via_str.strip(chars)": "Series.via_str.strip()", "Series.via_str.swapcase()": "Series.via_str.swapcase()", "Series.via_str.title()": "Series.via_str.title()", "Series.via_str.upper()": "Series.via_str.upper()", "Series.via_str.zfill(width)": "Series.via_str.zfill()", "Series.via_fill_value(fill_value).loc": "Series.via_fill_value().loc", "Series.via_fill_value(fill_value).__getitem__(key)": "Series.via_fill_value().__getitem__()", "Series.via_fill_value(fill_value).via_T": "Series.via_fill_value().via_T", "Series.via_fill_value(fill_value).__add__(other)": "Series.via_fill_value().__add__()", "Series.via_fill_value(fill_value).__sub__(other)": "Series.via_fill_value().__sub__()", "Series.via_fill_value(fill_value).__mul__(other)": "Series.via_fill_value().__mul__()", "Series.via_fill_value(fill_value).__truediv__(other)": "Series.via_fill_value().__truediv__()", "Series.via_fill_value(fill_value).__floordiv__(other)": "Series.via_fill_value().__floordiv__()", "Series.via_fill_value(fill_value).__mod__(other)": "Series.via_fill_value().__mod__()", "Series.via_fill_value(fill_value).__pow__(other)": "Series.via_fill_value().__pow__()", "Series.via_fill_value(fill_value).__lshift__(other)": "Series.via_fill_value().__lshift__()", "Series.via_fill_value(fill_value).__rshift__(other)": "Series.via_fill_value().__rshift__()", "Series.via_fill_value(fill_value).__and__(other)": "Series.via_fill_value().__and__()", "Series.via_fill_value(fill_value).__xor__(other)": "Series.via_fill_value().__xor__()", "Series.via_fill_value(fill_value).__or__(other)": "Series.via_fill_value().__or__()", "Series.via_fill_value(fill_value).__lt__(other)": "Series.via_fill_value().__lt__()", "Series.via_fill_value(fill_value).__le__(other)": "Series.via_fill_value().__le__()", "Series.via_fill_value(fill_value).__eq__(other)": "Series.via_fill_value().__eq__()", "Series.via_fill_value(fill_value).__ne__(other)": "Series.via_fill_value().__ne__()", "Series.via_fill_value(fill_value).__gt__(other)": "Series.via_fill_value().__gt__()", "Series.via_fill_value(fill_value).__ge__(other)": "Series.via_fill_value().__ge__()", "Series.via_fill_value(fill_value).__radd__(other)": "Series.via_fill_value().__radd__()", "Series.via_fill_value(fill_value).__rsub__(other)": "Series.via_fill_value().__rsub__()", "Series.via_fill_value(fill_value).__rmul__(other)": "Series.via_fill_value().__rmul__()", "Series.via_fill_value(fill_value).__rtruediv__(other)": "Series.via_fill_value().__rtruediv__()", "Series.via_fill_value(fill_value).__rfloordiv__(other)": "Series.via_fill_value().__rfloordiv__()", "Series.via_re(pattern, flags).search(pos, endpos)": "Series.via_re().search()", "Series.via_re(pattern, flags).match(pos, endpos)": "Series.via_re().match()", "Series.via_re(pattern, flags).fullmatch(pos, endpos)": "Series.via_re().fullmatch()", "Series.via_re(pattern, flags).split(maxsplit)": "Series.via_re().split()", "Series.via_re(pattern, flags).findall(pos, endpos)": "Series.via_re().findall()", "Series.via_re(pattern, flags).sub(repl, count)": "Series.via_re().sub()", "Series.via_re(pattern, flags).subn(repl, count)": "Series.via_re().subn()", "Series.via_hashlib(include_name, include_class, encoding).to_bytes()": "Series.via_hashlib().to_bytes()", "Series.via_hashlib(include_name, include_class, encoding).md5()": "Series.via_hashlib().md5()", "Series.via_hashlib(include_name, include_class, encoding).sha256()": "Series.via_hashlib().sha256()", "Series.via_hashlib(include_name, include_class, encoding).sha512()": "Series.via_hashlib().sha512()", "Series.via_hashlib(include_name, include_class, encoding).sha3_256()": "Series.via_hashlib().sha3_256()", "Series.via_hashlib(include_name, include_class, encoding).sha3_512()": "Series.via_hashlib().sha3_512()", "Series.via_hashlib(include_name, include_class, encoding).shake_128()": "Series.via_hashlib().shake_128()", "Series.via_hashlib(include_name, include_class, encoding).shake_256()": "Series.via_hashlib().shake_256()", "Series.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Series.via_hashlib().blake2b()", "Series.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Series.via_hashlib().blake2s()", "Series.via_type_clinic.to_hint()": "Series.via_type_clinic.to_hint()", "Series.via_type_clinic.check(hint, *, fail_fast)": "Series.via_type_clinic.check()", "Series.via_type_clinic.warn(hint, *, fail_fast, category)": "Series.via_type_clinic.warn()", "Series.via_type_clinic.__call__(hint, *, fail_fast)": "Series.via_type_clinic.__call__()", "Series.via_type_clinic.__repr__()": "Series.via_type_clinic.__repr__()", "Series.via_mapping.__getitem__(key)": "Series.via_mapping.__getitem__()", "Series.via_mapping.__iter__()": "Series.via_mapping.__iter__()", "Series.via_mapping.__len__()": "Series.via_mapping.__len__()", "Series.via_mapping.__contains__(key)": "Series.via_mapping.__contains__()", "Series.via_mapping.__repr__()": "Series.via_mapping.__repr__()", "Series.via_mapping.keys()": "Series.via_mapping.keys()", "Series.via_mapping.values()": "Series.via_mapping.values()", "Series.via_mapping.items()": "Series.via_mapping.items()", "SeriesHE.__init__(values, *, index, name, dtype, index_constructor, own_index)": "SeriesHE.__init__()", "SeriesHE.from_concat(containers, *, index, index_constructor, name)": "SeriesHE.from_concat()", "SeriesHE.from_concat_items(items, *, name, index_constructor)": "SeriesHE.from_concat_items()", "SeriesHE.from_delimited(delimited, *, delimiter, index, dtype, name, index_constructor, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, own_index)": "SeriesHE.from_delimited()", "SeriesHE.from_dict(mapping, *, dtype, name, index_constructor)": "SeriesHE.from_dict()", "SeriesHE.from_element(element, *, index, dtype, name, index_constructor, own_index)": "SeriesHE.from_element()", "SeriesHE.from_items(pairs, *, dtype, name, index_constructor)": "SeriesHE.from_items()", "SeriesHE.from_overlay(containers, *, index, union, name, func, fill_value)": "SeriesHE.from_overlay()", "SeriesHE.from_pandas(value, *, index, index_constructor, name, own_data)": "SeriesHE.from_pandas()", "SeriesHE.to_frame(axis, *, index, index_constructor, columns, columns_constructor, name)": "SeriesHE.to_frame()", "SeriesHE.to_frame_go(axis, *, index, index_constructor, columns, columns_constructor, name)": "SeriesHE.to_frame_go()", "SeriesHE.to_frame_he(axis, *, index, index_constructor, columns, columns_constructor, name)": "SeriesHE.to_frame_he()", "SeriesHE.to_html(config, style_config)": "SeriesHE.to_html()", "SeriesHE.to_html_datatables(fp, show, config)": "SeriesHE.to_html_datatables()", "SeriesHE.to_pairs()": "SeriesHE.to_pairs()", "SeriesHE.to_pandas()": "SeriesHE.to_pandas()", "SeriesHE.to_series()": "SeriesHE.to_series()", "SeriesHE.to_series_he()": "SeriesHE.to_series_he()", "SeriesHE.to_visidata()": "SeriesHE.to_visidata()", "SeriesHE.STATIC": "SeriesHE.STATIC", "SeriesHE.T": "SeriesHE.T", "SeriesHE.dtype": "SeriesHE.dtype", "SeriesHE.index": "SeriesHE.index", "SeriesHE.memory": "SeriesHE.memory", "SeriesHE.mloc": "SeriesHE.mloc", "SeriesHE.name": "SeriesHE.name", "SeriesHE.nbytes": "SeriesHE.nbytes", "SeriesHE.ndim": "SeriesHE.ndim", "SeriesHE.shape": "SeriesHE.shape", "SeriesHE.size": "SeriesHE.size", "SeriesHE.__array__(dtype)": "SeriesHE.__array__()", "SeriesHE.__array_ufunc__(ufunc, method, *args, **kwargs)": "SeriesHE.__array_ufunc__()", "SeriesHE.__bool__()": "SeriesHE.__bool__()", "SeriesHE.__deepcopy__(memo)": "SeriesHE.__deepcopy__()", "SeriesHE.__len__()": "SeriesHE.__len__()", "SeriesHE.__round__(decimals)": "SeriesHE.__round__()", "SeriesHE.all(axis, skipna, out)": "SeriesHE.all()", "SeriesHE.any(axis, skipna, out)": "SeriesHE.any()", "SeriesHE.astype(dtype)": "SeriesHE.astype()", "SeriesHE.clip(*, lower, upper)": "SeriesHE.clip()", "SeriesHE.corr(other)": "SeriesHE.corr()", "SeriesHE.count(*, skipna, skipfalsy, unique, axis)": "SeriesHE.count()", "SeriesHE.cov(other, *, ddof)": "SeriesHE.cov()", "SeriesHE.cumprod(axis, skipna)": "SeriesHE.cumprod()", "SeriesHE.cumsum(axis, skipna)": "SeriesHE.cumsum()", "SeriesHE.drop_duplicated(*, exclude_first, exclude_last)": "SeriesHE.drop_duplicated()", "SeriesHE.dropfalsy()": "SeriesHE.dropfalsy()", "SeriesHE.dropna()": "SeriesHE.dropna()", "SeriesHE.duplicated(*, exclude_first, exclude_last)": "SeriesHE.duplicated()", "SeriesHE.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "SeriesHE.equals()", "SeriesHE.fillfalsy(value)": "SeriesHE.fillfalsy()", "SeriesHE.fillfalsy_backward(limit)": "SeriesHE.fillfalsy_backward()", "SeriesHE.fillfalsy_forward(limit)": "SeriesHE.fillfalsy_forward()", "SeriesHE.fillfalsy_leading(value)": "SeriesHE.fillfalsy_leading()", "SeriesHE.fillfalsy_trailing(value)": "SeriesHE.fillfalsy_trailing()", "SeriesHE.fillna(value)": "SeriesHE.fillna()", "SeriesHE.fillna_backward(limit)": "SeriesHE.fillna_backward()", "SeriesHE.fillna_forward(limit)": "SeriesHE.fillna_forward()", "SeriesHE.fillna_leading(value)": "SeriesHE.fillna_leading()", "SeriesHE.fillna_trailing(value)": "SeriesHE.fillna_trailing()", "SeriesHE.head(count)": "SeriesHE.head()", "SeriesHE.iloc_max(*, skipna)": "SeriesHE.iloc_max()", "SeriesHE.iloc_min(*, skipna)": "SeriesHE.iloc_min()", "SeriesHE.iloc_notfalsy_first(*, fill_value)": "SeriesHE.iloc_notfalsy_first()", "SeriesHE.iloc_notfalsy_last(*, fill_value)": "SeriesHE.iloc_notfalsy_last()", "SeriesHE.iloc_notna_first(*, fill_value)": "SeriesHE.iloc_notna_first()", "SeriesHE.iloc_notna_last(*, fill_value)": "SeriesHE.iloc_notna_last()", "SeriesHE.iloc_searchsorted(values, *, side_left)": "SeriesHE.iloc_searchsorted()", "SeriesHE.insert_after(key, container)": "SeriesHE.insert_after()", "SeriesHE.insert_before(key, container)": "SeriesHE.insert_before()", "SeriesHE.isfalsy()": "SeriesHE.isfalsy()", "SeriesHE.isin(other)": "SeriesHE.isin()", "SeriesHE.isna()": "SeriesHE.isna()", "SeriesHE.loc_max(*, skipna)": "SeriesHE.loc_max()", "SeriesHE.loc_min(*, skipna)": "SeriesHE.loc_min()", "SeriesHE.loc_notfalsy_first(*, fill_value)": "SeriesHE.loc_notfalsy_first()", "SeriesHE.loc_notfalsy_last(*, fill_value)": "SeriesHE.loc_notfalsy_last()", "SeriesHE.loc_notna_first(*, fill_value)": "SeriesHE.loc_notna_first()", "SeriesHE.loc_notna_last(*, fill_value)": "SeriesHE.loc_notna_last()", "SeriesHE.loc_searchsorted(values, *, side_left, fill_value)": "SeriesHE.loc_searchsorted()", "SeriesHE.max(axis, skipna, out)": "SeriesHE.max()", "SeriesHE.mean(axis, skipna, out)": "SeriesHE.mean()", "SeriesHE.median(axis, skipna, out)": "SeriesHE.median()", "SeriesHE.min(axis, skipna, out)": "SeriesHE.min()", "SeriesHE.notfalsy()": "SeriesHE.notfalsy()", "SeriesHE.notna()": "SeriesHE.notna()", "SeriesHE.prod(axis, skipna, allna, out)": "SeriesHE.prod()", "SeriesHE.rank_dense(*, skipna, ascending, start, fill_value)": "SeriesHE.rank_dense()", "SeriesHE.rank_max(*, skipna, ascending, start, fill_value)": "SeriesHE.rank_max()", "SeriesHE.rank_mean(*, skipna, ascending, start, fill_value)": "SeriesHE.rank_mean()", "SeriesHE.rank_min(*, skipna, ascending, start, fill_value)": "SeriesHE.rank_min()", "SeriesHE.rank_ordinal(*, skipna, ascending, start, fill_value)": "SeriesHE.rank_ordinal()", "SeriesHE.rehierarch(depth_map, *, index_constructors)": "SeriesHE.rehierarch()", "SeriesHE.reindex(index, *, fill_value, own_index, check_equals)": "SeriesHE.reindex()", "SeriesHE.relabel(index, *, index_constructor)": "SeriesHE.relabel()", "SeriesHE.relabel_flat()": "SeriesHE.relabel_flat()", "SeriesHE.relabel_level_add(level, *, index_constructor)": "SeriesHE.relabel_level_add()", "SeriesHE.relabel_level_drop(count)": "SeriesHE.relabel_level_drop()", "SeriesHE.rename(name, *, index)": "SeriesHE.rename()", "SeriesHE.roll(shift, *, include_index)": "SeriesHE.roll()", "SeriesHE.sample(count, *, seed)": "SeriesHE.sample()", "SeriesHE.shift(shift, *, fill_value)": "SeriesHE.shift()", "SeriesHE.sort_index(*, ascending, kind, key)": "SeriesHE.sort_index()", "SeriesHE.sort_values(*, ascending, kind, key)": "SeriesHE.sort_values()", "SeriesHE.std(axis, skipna, ddof, out)": "SeriesHE.std()", "SeriesHE.sum(axis, skipna, allna, out)": "SeriesHE.sum()", "SeriesHE.tail(count)": "SeriesHE.tail()", "SeriesHE.transpose()": "SeriesHE.transpose()", "SeriesHE.unique()": "SeriesHE.unique()", "SeriesHE.unique_enumerated(*, retain_order, func)": "SeriesHE.unique_enumerated()", "SeriesHE.var(axis, skipna, ddof, out)": "SeriesHE.var()", "SeriesHE.__contains__(value)": "SeriesHE.__contains__()", "SeriesHE.__iter__()": "SeriesHE.__iter__()", "SeriesHE.__reversed__()": "SeriesHE.__reversed__()", "SeriesHE.get(key, default)": "SeriesHE.get()", "SeriesHE.items()": "SeriesHE.items()", "SeriesHE.keys()": "SeriesHE.keys()", "SeriesHE.values": "SeriesHE.values", "SeriesHE.interface": "SeriesHE.interface", "SeriesHE.__repr__()": "SeriesHE.__repr__()", "SeriesHE.__str__()": "SeriesHE.__str__()", "SeriesHE.display(config, *, style_config)": "SeriesHE.display()", "SeriesHE.display_tall(config)": "SeriesHE.display_tall()", "SeriesHE.display_wide(config)": "SeriesHE.display_wide()", "SeriesHE.assign[key](value, *, fill_value)": "SeriesHE.assign[]()", "SeriesHE.assign[key].apply(func, *, fill_value)": "SeriesHE.assign[].apply()", "SeriesHE.assign[key].apply_element(func, *, dtype, fill_value)": "SeriesHE.assign[].apply_element()", "SeriesHE.assign[key].apply_element_items(func, *, dtype, fill_value)": "SeriesHE.assign[].apply_element_items()", "SeriesHE.assign.iloc[key](value, *, fill_value)": "SeriesHE.assign.iloc[]()", "SeriesHE.assign.iloc[key].apply(func, *, fill_value)": "SeriesHE.assign.iloc[].apply()", "SeriesHE.assign.iloc[key].apply_element(func, *, dtype, fill_value)": "SeriesHE.assign.iloc[].apply_element()", "SeriesHE.assign.iloc[key].apply_element_items(func, *, dtype, fill_value)": "SeriesHE.assign.iloc[].apply_element_items()", "SeriesHE.assign.loc[key](value, *, fill_value)": "SeriesHE.assign.loc[]()", "SeriesHE.assign.loc[key].apply(func, *, fill_value)": "SeriesHE.assign.loc[].apply()", "SeriesHE.assign.loc[key].apply_element(func, *, dtype, fill_value)": "SeriesHE.assign.loc[].apply_element()", "SeriesHE.assign.loc[key].apply_element_items(func, *, dtype, fill_value)": "SeriesHE.assign.loc[].apply_element_items()", "SeriesHE.drop[key]": "SeriesHE.drop[]", "SeriesHE.drop.iloc[key]": "SeriesHE.drop.iloc[]", "SeriesHE.drop.loc[key]": "SeriesHE.drop.loc[]", "SeriesHE.mask[key]": "SeriesHE.mask[]", "SeriesHE.mask.iloc[key]": "SeriesHE.mask.iloc[]", "SeriesHE.mask.loc[key]": "SeriesHE.mask.loc[]", "SeriesHE.masked_array[key]": "SeriesHE.masked_array[]", "SeriesHE.masked_array.iloc[key]": "SeriesHE.masked_array.iloc[]", "SeriesHE.masked_array.loc[key]": "SeriesHE.masked_array.loc[]", "SeriesHE.[key]": "SeriesHE.[]", "SeriesHE.iloc[key]": "SeriesHE.iloc[]", "SeriesHE.loc[key]": "SeriesHE.loc[]", "SeriesHE.iter_element()": "SeriesHE.iter_element()", "SeriesHE.iter_element().apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_element().apply()", "SeriesHE.iter_element().apply_iter(func)": "SeriesHE.iter_element().apply_iter()", "SeriesHE.iter_element().apply_iter_items(func)": "SeriesHE.iter_element().apply_iter_items()", "SeriesHE.iter_element().apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_element().apply_pool()", "SeriesHE.iter_element().map_all(mapping, *, dtype, name, index_constructor)": "SeriesHE.iter_element().map_all()", "SeriesHE.iter_element().map_all_iter(mapping)": "SeriesHE.iter_element().map_all_iter()", "SeriesHE.iter_element().map_all_iter_items(mapping)": "SeriesHE.iter_element().map_all_iter_items()", "SeriesHE.iter_element().map_any(mapping, *, dtype, name, index_constructor)": "SeriesHE.iter_element().map_any()", "SeriesHE.iter_element().map_any_iter(mapping)": "SeriesHE.iter_element().map_any_iter()", "SeriesHE.iter_element().map_any_iter_items(mapping)": "SeriesHE.iter_element().map_any_iter_items()", "SeriesHE.iter_element().map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "SeriesHE.iter_element().map_fill()", "SeriesHE.iter_element().map_fill_iter(mapping, *, fill_value)": "SeriesHE.iter_element().map_fill_iter()", "SeriesHE.iter_element().map_fill_iter_items(mapping, *, fill_value)": "SeriesHE.iter_element().map_fill_iter_items()", "SeriesHE.iter_element_items()": "SeriesHE.iter_element_items()", "SeriesHE.iter_element_items().apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_element_items().apply()", "SeriesHE.iter_element_items().apply_iter(func)": "SeriesHE.iter_element_items().apply_iter()", "SeriesHE.iter_element_items().apply_iter_items(func)": "SeriesHE.iter_element_items().apply_iter_items()", "SeriesHE.iter_element_items().apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_element_items().apply_pool()", "SeriesHE.iter_element_items().map_all(mapping, *, dtype, name, index_constructor)": "SeriesHE.iter_element_items().map_all()", "SeriesHE.iter_element_items().map_all_iter(mapping)": "SeriesHE.iter_element_items().map_all_iter()", "SeriesHE.iter_element_items().map_all_iter_items(mapping)": "SeriesHE.iter_element_items().map_all_iter_items()", "SeriesHE.iter_element_items().map_any(mapping, *, dtype, name, index_constructor)": "SeriesHE.iter_element_items().map_any()", "SeriesHE.iter_element_items().map_any_iter(mapping)": "SeriesHE.iter_element_items().map_any_iter()", "SeriesHE.iter_element_items().map_any_iter_items(mapping)": "SeriesHE.iter_element_items().map_any_iter_items()", "SeriesHE.iter_element_items().map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "SeriesHE.iter_element_items().map_fill()", "SeriesHE.iter_element_items().map_fill_iter(mapping, *, fill_value)": "SeriesHE.iter_element_items().map_fill_iter()", "SeriesHE.iter_element_items().map_fill_iter_items(mapping, *, fill_value)": "SeriesHE.iter_element_items().map_fill_iter_items()", "SeriesHE.iter_group(*, axis)": "SeriesHE.iter_group()", "SeriesHE.iter_group(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_group().apply()", "SeriesHE.iter_group(*, axis).apply_iter(func)": "SeriesHE.iter_group().apply_iter()", "SeriesHE.iter_group(*, axis).apply_iter_items(func)": "SeriesHE.iter_group().apply_iter_items()", "SeriesHE.iter_group(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_group().apply_pool()", "SeriesHE.iter_group_array(*, axis)": "SeriesHE.iter_group_array()", "SeriesHE.iter_group_array(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_group_array().apply()", "SeriesHE.iter_group_array(*, axis).apply_iter(func)": "SeriesHE.iter_group_array().apply_iter()", "SeriesHE.iter_group_array(*, axis).apply_iter_items(func)": "SeriesHE.iter_group_array().apply_iter_items()", "SeriesHE.iter_group_array(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_group_array().apply_pool()", "SeriesHE.iter_group_array_items(*, axis)": "SeriesHE.iter_group_array_items()", "SeriesHE.iter_group_array_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_group_array_items().apply()", "SeriesHE.iter_group_array_items(*, axis).apply_iter(func)": "SeriesHE.iter_group_array_items().apply_iter()", "SeriesHE.iter_group_array_items(*, axis).apply_iter_items(func)": "SeriesHE.iter_group_array_items().apply_iter_items()", "SeriesHE.iter_group_array_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_group_array_items().apply_pool()", "SeriesHE.iter_group_items(*, axis)": "SeriesHE.iter_group_items()", "SeriesHE.iter_group_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_group_items().apply()", "SeriesHE.iter_group_items(*, axis).apply_iter(func)": "SeriesHE.iter_group_items().apply_iter()", "SeriesHE.iter_group_items(*, axis).apply_iter_items(func)": "SeriesHE.iter_group_items().apply_iter_items()", "SeriesHE.iter_group_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_group_items().apply_pool()", "SeriesHE.iter_group_labels(depth_level)": "SeriesHE.iter_group_labels()", "SeriesHE.iter_group_labels(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_group_labels().apply()", "SeriesHE.iter_group_labels(depth_level).apply_iter(func)": "SeriesHE.iter_group_labels().apply_iter()", "SeriesHE.iter_group_labels(depth_level).apply_iter_items(func)": "SeriesHE.iter_group_labels().apply_iter_items()", "SeriesHE.iter_group_labels(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_group_labels().apply_pool()", "SeriesHE.iter_group_labels_array(depth_level)": "SeriesHE.iter_group_labels_array()", "SeriesHE.iter_group_labels_array(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_group_labels_array().apply()", "SeriesHE.iter_group_labels_array(depth_level).apply_iter(func)": "SeriesHE.iter_group_labels_array().apply_iter()", "SeriesHE.iter_group_labels_array(depth_level).apply_iter_items(func)": "SeriesHE.iter_group_labels_array().apply_iter_items()", "SeriesHE.iter_group_labels_array(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_group_labels_array().apply_pool()", "SeriesHE.iter_group_labels_array_items(depth_level)": "SeriesHE.iter_group_labels_array_items()", "SeriesHE.iter_group_labels_array_items(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_group_labels_array_items().apply()", "SeriesHE.iter_group_labels_array_items(depth_level).apply_iter(func)": "SeriesHE.iter_group_labels_array_items().apply_iter()", "SeriesHE.iter_group_labels_array_items(depth_level).apply_iter_items(func)": "SeriesHE.iter_group_labels_array_items().apply_iter_items()", "SeriesHE.iter_group_labels_array_items(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_group_labels_array_items().apply_pool()", "SeriesHE.iter_group_labels_items(depth_level)": "SeriesHE.iter_group_labels_items()", "SeriesHE.iter_group_labels_items(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_group_labels_items().apply()", "SeriesHE.iter_group_labels_items(depth_level).apply_iter(func)": "SeriesHE.iter_group_labels_items().apply_iter()", "SeriesHE.iter_group_labels_items(depth_level).apply_iter_items(func)": "SeriesHE.iter_group_labels_items().apply_iter_items()", "SeriesHE.iter_group_labels_items(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_group_labels_items().apply_pool()", "SeriesHE.iter_group_other(other, *, fill_value, axis)": "SeriesHE.iter_group_other()", "SeriesHE.iter_group_other(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_group_other().apply()", "SeriesHE.iter_group_other(other, *, fill_value, axis).apply_iter(func)": "SeriesHE.iter_group_other().apply_iter()", "SeriesHE.iter_group_other(other, *, fill_value, axis).apply_iter_items(func)": "SeriesHE.iter_group_other().apply_iter_items()", "SeriesHE.iter_group_other(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_group_other().apply_pool()", "SeriesHE.iter_group_other_array(other, *, fill_value, axis)": "SeriesHE.iter_group_other_array()", "SeriesHE.iter_group_other_array(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_group_other_array().apply()", "SeriesHE.iter_group_other_array(other, *, fill_value, axis).apply_iter(func)": "SeriesHE.iter_group_other_array().apply_iter()", "SeriesHE.iter_group_other_array(other, *, fill_value, axis).apply_iter_items(func)": "SeriesHE.iter_group_other_array().apply_iter_items()", "SeriesHE.iter_group_other_array(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_group_other_array().apply_pool()", "SeriesHE.iter_group_other_array_items(other, *, fill_value, axis)": "SeriesHE.iter_group_other_array_items()", "SeriesHE.iter_group_other_array_items(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_group_other_array_items().apply()", "SeriesHE.iter_group_other_array_items(other, *, fill_value, axis).apply_iter(func)": "SeriesHE.iter_group_other_array_items().apply_iter()", "SeriesHE.iter_group_other_array_items(other, *, fill_value, axis).apply_iter_items(func)": "SeriesHE.iter_group_other_array_items().apply_iter_items()", "SeriesHE.iter_group_other_array_items(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_group_other_array_items().apply_pool()", "SeriesHE.iter_group_other_items(other, *, fill_value, axis)": "SeriesHE.iter_group_other_items()", "SeriesHE.iter_group_other_items(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_group_other_items().apply()", "SeriesHE.iter_group_other_items(other, *, fill_value, axis).apply_iter(func)": "SeriesHE.iter_group_other_items().apply_iter()", "SeriesHE.iter_group_other_items(other, *, fill_value, axis).apply_iter_items(func)": "SeriesHE.iter_group_other_items().apply_iter_items()", "SeriesHE.iter_group_other_items(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_group_other_items().apply_pool()", "SeriesHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "SeriesHE.iter_window()", "SeriesHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_window().apply()", "SeriesHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "SeriesHE.iter_window().apply_iter()", "SeriesHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "SeriesHE.iter_window().apply_iter_items()", "SeriesHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_window().apply_pool()", "SeriesHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "SeriesHE.iter_window_array()", "SeriesHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_window_array().apply()", "SeriesHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "SeriesHE.iter_window_array().apply_iter()", "SeriesHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "SeriesHE.iter_window_array().apply_iter_items()", "SeriesHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_window_array().apply_pool()", "SeriesHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "SeriesHE.iter_window_array_items()", "SeriesHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_window_array_items().apply()", "SeriesHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "SeriesHE.iter_window_array_items().apply_iter()", "SeriesHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "SeriesHE.iter_window_array_items().apply_iter_items()", "SeriesHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_window_array_items().apply_pool()", "SeriesHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "SeriesHE.iter_window_items()", "SeriesHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "SeriesHE.iter_window_items().apply()", "SeriesHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "SeriesHE.iter_window_items().apply_iter()", "SeriesHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "SeriesHE.iter_window_items().apply_iter_items()", "SeriesHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "SeriesHE.iter_window_items().apply_pool()", "SeriesHE.__add__(other)": "SeriesHE.__add__()", "SeriesHE.__and__(other)": "SeriesHE.__and__()", "SeriesHE.__eq__(other)": "SeriesHE.__eq__()", "SeriesHE.__floordiv__(other)": "SeriesHE.__floordiv__()", "SeriesHE.__ge__(other)": "SeriesHE.__ge__()", "SeriesHE.__gt__(other)": "SeriesHE.__gt__()", "SeriesHE.__le__(other)": "SeriesHE.__le__()", "SeriesHE.__lt__(other)": "SeriesHE.__lt__()", "SeriesHE.__matmul__(other)": "SeriesHE.__matmul__()", "SeriesHE.__mod__(other)": "SeriesHE.__mod__()", "SeriesHE.__mul__(other)": "SeriesHE.__mul__()", "SeriesHE.__ne__(other)": "SeriesHE.__ne__()", "SeriesHE.__or__(other)": "SeriesHE.__or__()", "SeriesHE.__pow__(other)": "SeriesHE.__pow__()", "SeriesHE.__radd__(other)": "SeriesHE.__radd__()", "SeriesHE.__rfloordiv__(other)": "SeriesHE.__rfloordiv__()", "SeriesHE.__rmatmul__(other)": "SeriesHE.__rmatmul__()", "SeriesHE.__rmul__(other)": "SeriesHE.__rmul__()", "SeriesHE.__rshift__(other)": "SeriesHE.__rshift__()", "SeriesHE.__rsub__(other)": "SeriesHE.__rsub__()", "SeriesHE.__rtruediv__(other)": "SeriesHE.__rtruediv__()", "SeriesHE.__sub__(other)": "SeriesHE.__sub__()", "SeriesHE.__truediv__(other)": "SeriesHE.__truediv__()", "SeriesHE.__xor__(other)": "SeriesHE.__xor__()", "SeriesHE.__abs__()": "SeriesHE.__abs__()", "SeriesHE.__invert__()": "SeriesHE.__invert__()", "SeriesHE.__neg__()": "SeriesHE.__neg__()", "SeriesHE.__pos__()": "SeriesHE.__pos__()", "SeriesHE.abs()": "SeriesHE.abs()", "SeriesHE.via_values.apply(func, *args, **kwargs)": "SeriesHE.via_values.apply()", "SeriesHE.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "SeriesHE.via_values.__array_ufunc__()", "SeriesHE.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "SeriesHE.via_values.__call__()", "SeriesHE.via_dt.__call__(*, fill_value)": "SeriesHE.via_dt.__call__()", "SeriesHE.via_dt.year": "SeriesHE.via_dt.year", "SeriesHE.via_dt.year_month": "SeriesHE.via_dt.year_month", "SeriesHE.via_dt.year_quarter": "SeriesHE.via_dt.year_quarter", "SeriesHE.via_dt.month": "SeriesHE.via_dt.month", "SeriesHE.via_dt.day": "SeriesHE.via_dt.day", "SeriesHE.via_dt.hour": "SeriesHE.via_dt.hour", "SeriesHE.via_dt.minute": "SeriesHE.via_dt.minute", "SeriesHE.via_dt.second": "SeriesHE.via_dt.second", "SeriesHE.via_dt.weekday()": "SeriesHE.via_dt.weekday()", "SeriesHE.via_dt.quarter()": "SeriesHE.via_dt.quarter()", "SeriesHE.via_dt.is_month_end()": "SeriesHE.via_dt.is_month_end()", "SeriesHE.via_dt.is_month_start()": "SeriesHE.via_dt.is_month_start()", "SeriesHE.via_dt.is_year_end()": "SeriesHE.via_dt.is_year_end()", "SeriesHE.via_dt.is_year_start()": "SeriesHE.via_dt.is_year_start()", "SeriesHE.via_dt.is_quarter_end()": "SeriesHE.via_dt.is_quarter_end()", "SeriesHE.via_dt.is_quarter_start()": "SeriesHE.via_dt.is_quarter_start()", "SeriesHE.via_dt.timetuple()": "SeriesHE.via_dt.timetuple()", "SeriesHE.via_dt.isoformat(sep, timespec)": "SeriesHE.via_dt.isoformat()", "SeriesHE.via_dt.fromisoformat()": "SeriesHE.via_dt.fromisoformat()", "SeriesHE.via_dt.strftime(format)": "SeriesHE.via_dt.strftime()", "SeriesHE.via_dt.strptime(format)": "SeriesHE.via_dt.strptime()", "SeriesHE.via_dt.strpdate(format)": "SeriesHE.via_dt.strpdate()", "SeriesHE.via_str.__getitem__(key)": "SeriesHE.via_str.__getitem__()", "SeriesHE.via_str.capitalize()": "SeriesHE.via_str.capitalize()", "SeriesHE.via_str.center(width, fillchar)": "SeriesHE.via_str.center()", "SeriesHE.via_str.contains(item)": "SeriesHE.via_str.contains()", "SeriesHE.via_str.count(sub, start, end)": "SeriesHE.via_str.count()", "SeriesHE.via_str.decode(encoding, errors)": "SeriesHE.via_str.decode()", "SeriesHE.via_str.encode(encoding, errors)": "SeriesHE.via_str.encode()", "SeriesHE.via_str.endswith(suffix, start, end)": "SeriesHE.via_str.endswith()", "SeriesHE.via_str.find(sub, start, end)": "SeriesHE.via_str.find()", "SeriesHE.via_str.format(format)": "SeriesHE.via_str.format()", "SeriesHE.via_str.index(sub, start, end)": "SeriesHE.via_str.index()", "SeriesHE.via_str.isalnum()": "SeriesHE.via_str.isalnum()", "SeriesHE.via_str.isalpha()": "SeriesHE.via_str.isalpha()", "SeriesHE.via_str.isdecimal()": "SeriesHE.via_str.isdecimal()", "SeriesHE.via_str.isdigit()": "SeriesHE.via_str.isdigit()", "SeriesHE.via_str.islower()": "SeriesHE.via_str.islower()", "SeriesHE.via_str.isnumeric()": "SeriesHE.via_str.isnumeric()", "SeriesHE.via_str.isspace()": "SeriesHE.via_str.isspace()", "SeriesHE.via_str.istitle()": "SeriesHE.via_str.istitle()", "SeriesHE.via_str.isupper()": "SeriesHE.via_str.isupper()", "SeriesHE.via_str.ljust(width, fillchar)": "SeriesHE.via_str.ljust()", "SeriesHE.via_str.len()": "SeriesHE.via_str.len()", "SeriesHE.via_str.lower()": "SeriesHE.via_str.lower()", "SeriesHE.via_str.lstrip(chars)": "SeriesHE.via_str.lstrip()", "SeriesHE.via_str.partition(sep)": "SeriesHE.via_str.partition()", "SeriesHE.via_str.replace(old, new, count)": "SeriesHE.via_str.replace()", "SeriesHE.via_str.rfind(sub, start, end)": "SeriesHE.via_str.rfind()", "SeriesHE.via_str.rindex(sub, start, end)": "SeriesHE.via_str.rindex()", "SeriesHE.via_str.rjust(width, fillchar)": "SeriesHE.via_str.rjust()", "SeriesHE.via_str.rpartition(sep)": "SeriesHE.via_str.rpartition()", "SeriesHE.via_str.rsplit(sep, maxsplit)": "SeriesHE.via_str.rsplit()", "SeriesHE.via_str.rstrip(chars)": "SeriesHE.via_str.rstrip()", "SeriesHE.via_str.split(sep, maxsplit)": "SeriesHE.via_str.split()", "SeriesHE.via_str.startswith(prefix, start, end)": "SeriesHE.via_str.startswith()", "SeriesHE.via_str.strip(chars)": "SeriesHE.via_str.strip()", "SeriesHE.via_str.swapcase()": "SeriesHE.via_str.swapcase()", "SeriesHE.via_str.title()": "SeriesHE.via_str.title()", "SeriesHE.via_str.upper()": "SeriesHE.via_str.upper()", "SeriesHE.via_str.zfill(width)": "SeriesHE.via_str.zfill()", "SeriesHE.via_fill_value(fill_value).loc": "SeriesHE.via_fill_value().loc", "SeriesHE.via_fill_value(fill_value).__getitem__(key)": "SeriesHE.via_fill_value().__getitem__()", "SeriesHE.via_fill_value(fill_value).via_T": "SeriesHE.via_fill_value().via_T", "SeriesHE.via_fill_value(fill_value).__add__(other)": "SeriesHE.via_fill_value().__add__()", "SeriesHE.via_fill_value(fill_value).__sub__(other)": "SeriesHE.via_fill_value().__sub__()", "SeriesHE.via_fill_value(fill_value).__mul__(other)": "SeriesHE.via_fill_value().__mul__()", "SeriesHE.via_fill_value(fill_value).__truediv__(other)": "SeriesHE.via_fill_value().__truediv__()", "SeriesHE.via_fill_value(fill_value).__floordiv__(other)": "SeriesHE.via_fill_value().__floordiv__()", "SeriesHE.via_fill_value(fill_value).__mod__(other)": "SeriesHE.via_fill_value().__mod__()", "SeriesHE.via_fill_value(fill_value).__pow__(other)": "SeriesHE.via_fill_value().__pow__()", "SeriesHE.via_fill_value(fill_value).__lshift__(other)": "SeriesHE.via_fill_value().__lshift__()", "SeriesHE.via_fill_value(fill_value).__rshift__(other)": "SeriesHE.via_fill_value().__rshift__()", "SeriesHE.via_fill_value(fill_value).__and__(other)": "SeriesHE.via_fill_value().__and__()", "SeriesHE.via_fill_value(fill_value).__xor__(other)": "SeriesHE.via_fill_value().__xor__()", "SeriesHE.via_fill_value(fill_value).__or__(other)": "SeriesHE.via_fill_value().__or__()", "SeriesHE.via_fill_value(fill_value).__lt__(other)": "SeriesHE.via_fill_value().__lt__()", "SeriesHE.via_fill_value(fill_value).__le__(other)": "SeriesHE.via_fill_value().__le__()", "SeriesHE.via_fill_value(fill_value).__eq__(other)": "SeriesHE.via_fill_value().__eq__()", "SeriesHE.via_fill_value(fill_value).__ne__(other)": "SeriesHE.via_fill_value().__ne__()", "SeriesHE.via_fill_value(fill_value).__gt__(other)": "SeriesHE.via_fill_value().__gt__()", "SeriesHE.via_fill_value(fill_value).__ge__(other)": "SeriesHE.via_fill_value().__ge__()", "SeriesHE.via_fill_value(fill_value).__radd__(other)": "SeriesHE.via_fill_value().__radd__()", "SeriesHE.via_fill_value(fill_value).__rsub__(other)": "SeriesHE.via_fill_value().__rsub__()", "SeriesHE.via_fill_value(fill_value).__rmul__(other)": "SeriesHE.via_fill_value().__rmul__()", "SeriesHE.via_fill_value(fill_value).__rtruediv__(other)": "SeriesHE.via_fill_value().__rtruediv__()", "SeriesHE.via_fill_value(fill_value).__rfloordiv__(other)": "SeriesHE.via_fill_value().__rfloordiv__()", "SeriesHE.via_re(pattern, flags).search(pos, endpos)": "SeriesHE.via_re().search()", "SeriesHE.via_re(pattern, flags).match(pos, endpos)": "SeriesHE.via_re().match()", "SeriesHE.via_re(pattern, flags).fullmatch(pos, endpos)": "SeriesHE.via_re().fullmatch()", "SeriesHE.via_re(pattern, flags).split(maxsplit)": "SeriesHE.via_re().split()", "SeriesHE.via_re(pattern, flags).findall(pos, endpos)": "SeriesHE.via_re().findall()", "SeriesHE.via_re(pattern, flags).sub(repl, count)": "SeriesHE.via_re().sub()", "SeriesHE.via_re(pattern, flags).subn(repl, count)": "SeriesHE.via_re().subn()", "SeriesHE.via_hashlib(include_name, include_class, encoding).to_bytes()": "SeriesHE.via_hashlib().to_bytes()", "SeriesHE.via_hashlib(include_name, include_class, encoding).md5()": "SeriesHE.via_hashlib().md5()", "SeriesHE.via_hashlib(include_name, include_class, encoding).sha256()": "SeriesHE.via_hashlib().sha256()", "SeriesHE.via_hashlib(include_name, include_class, encoding).sha512()": "SeriesHE.via_hashlib().sha512()", "SeriesHE.via_hashlib(include_name, include_class, encoding).sha3_256()": "SeriesHE.via_hashlib().sha3_256()", "SeriesHE.via_hashlib(include_name, include_class, encoding).sha3_512()": "SeriesHE.via_hashlib().sha3_512()", "SeriesHE.via_hashlib(include_name, include_class, encoding).shake_128()": "SeriesHE.via_hashlib().shake_128()", "SeriesHE.via_hashlib(include_name, include_class, encoding).shake_256()": "SeriesHE.via_hashlib().shake_256()", "SeriesHE.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "SeriesHE.via_hashlib().blake2b()", "SeriesHE.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "SeriesHE.via_hashlib().blake2s()", "SeriesHE.via_type_clinic.to_hint()": "SeriesHE.via_type_clinic.to_hint()", "SeriesHE.via_type_clinic.check(hint, *, fail_fast)": "SeriesHE.via_type_clinic.check()", "SeriesHE.via_type_clinic.warn(hint, *, fail_fast, category)": "SeriesHE.via_type_clinic.warn()", "SeriesHE.via_type_clinic.__call__(hint, *, fail_fast)": "SeriesHE.via_type_clinic.__call__()", "SeriesHE.via_type_clinic.__repr__()": "SeriesHE.via_type_clinic.__repr__()", "SeriesHE.via_mapping.__getitem__(key)": "SeriesHE.via_mapping.__getitem__()", "SeriesHE.via_mapping.__iter__()": "SeriesHE.via_mapping.__iter__()", "SeriesHE.via_mapping.__len__()": "SeriesHE.via_mapping.__len__()", "SeriesHE.via_mapping.__contains__(key)": "SeriesHE.via_mapping.__contains__()", "SeriesHE.via_mapping.__repr__()": "SeriesHE.via_mapping.__repr__()", "SeriesHE.via_mapping.keys()": "SeriesHE.via_mapping.keys()", "SeriesHE.via_mapping.values()": "SeriesHE.via_mapping.values()", "SeriesHE.via_mapping.items()": "SeriesHE.via_mapping.items()", "Frame.__init__(data, *, index, columns, name, index_constructor, columns_constructor, own_data, own_index, own_columns)": "Frame.__init__()", "Frame.from_arrow(value, *, index_depth, index_name_depth_level, index_constructors, columns_depth, columns_name_depth_level, columns_constructors, dtypes, name, consolidate_blocks)": "Frame.from_arrow()", "Frame.from_clipboard(*, delimiter, index_depth, index_column_first, index_name_depth_level, index_constructors, index_continuation_token, columns_depth, columns_name_depth_level, columns_constructors, columns_continuation_token, columns_select, skip_header, skip_footer, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, encoding, dtypes, name, consolidate_blocks, store_filter)": "Frame.from_clipboard()", "Frame.from_concat(frames, *, axis, union, index, columns, index_constructor, columns_constructor, name, fill_value, consolidate_blocks)": "Frame.from_concat()", "Frame.from_concat_items(items, *, axis, union, name, fill_value, index_constructor, columns_constructor, consolidate_blocks)": "Frame.from_concat_items()", "Frame.from_csv(fp, *, index_depth, index_column_first, index_name_depth_level, index_constructors, index_continuation_token, columns_depth, columns_name_depth_level, columns_constructors, columns_continuation_token, columns_select, skip_header, skip_footer, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, encoding, dtypes, name, consolidate_blocks, store_filter)": "Frame.from_csv()", "Frame.from_delimited(fp, *, delimiter, index_depth, index_column_first, index_name_depth_level, index_constructors, index_continuation_token, columns_depth, columns_name_depth_level, columns_constructors, columns_continuation_token, columns_select, skip_header, skip_footer, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, encoding, dtypes, name, consolidate_blocks, store_filter)": "Frame.from_delimited()", "Frame.from_dict(mapping, *, index, fill_value, dtypes, name, index_constructor, columns_constructor, consolidate_blocks)": "Frame.from_dict()", "Frame.from_dict_fields(fields, *, columns, dtypes, name, fill_value, consolidate_blocks, index_constructor, columns_constructor, own_index)": "Frame.from_dict_fields()", "Frame.from_dict_records(records, *, index, dtypes, name, fill_value, consolidate_blocks, index_constructor, columns_constructor, own_index)": "Frame.from_dict_records()", "Frame.from_dict_records_items(items, *, dtypes, name, consolidate_blocks)": "Frame.from_dict_records_items()", "Frame.from_duckdb(fp, *, label, index_depth, index_constructors, columns_depth, columns_constructors, consolidate_blocks)": "Frame.from_duckdb()", "Frame.from_element(element, *, index, columns, dtype, name, index_constructor, columns_constructor, own_index, own_columns)": "Frame.from_element()", "Frame.from_element_items(items, *, index, columns, dtype, axis, name, fill_value, index_constructor, columns_constructor, own_index, own_columns)": "Frame.from_element_items()", "Frame.from_elements(elements, *, index, columns, dtype, name, index_constructor, columns_constructor, own_index, own_columns)": "Frame.from_elements()", "Frame.from_fields(fields, *, index, columns, fill_value, dtypes, name, index_constructor, columns_constructor, own_index, own_columns, consolidate_blocks)": "Frame.from_fields()", "Frame.from_hdf5(fp, *, label, index_depth, index_constructors, columns_depth, columns_constructors, name, consolidate_blocks)": "Frame.from_hdf5()", "Frame.from_items(pairs, *, index, fill_value, dtypes, name, index_constructor, columns_constructor, consolidate_blocks)": "Frame.from_items()", "Frame.from_json_columns(json_data, *, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "Frame.from_json_columns()", "Frame.from_json_index(json_data, *, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "Frame.from_json_index()", "Frame.from_json_records(json_data, *, index, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "Frame.from_json_records()", "Frame.from_json_split(json_data, *, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "Frame.from_json_split()", "Frame.from_json_typed(json_data, *, consolidate_blocks)": "Frame.from_json_typed()", "Frame.from_json_values(json_data, *, index, columns, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "Frame.from_json_values()", "Frame.from_msgpack(msgpack_data)": "Frame.from_msgpack()", "Frame.from_npy(fp)": "Frame.from_npy()", "Frame.from_npy_mmap(fp)": "Frame.from_npy_mmap()", "Frame.from_npz(fp)": "Frame.from_npz()", "Frame.from_overlay(containers, *, index, columns, union, name, func, fill_value)": "Frame.from_overlay()", "Frame.from_pandas(value, *, index, index_constructor, columns, columns_constructor, dtypes, name, consolidate_blocks, own_data)": "Frame.from_pandas()", "Frame.from_parquet(fp, *, index_depth, index_name_depth_level, index_constructors, columns_depth, columns_name_depth_level, columns_constructors, columns_select, dtypes, name, consolidate_blocks)": "Frame.from_parquet()", "Frame.from_pickle(fp)": "Frame.from_pickle()", "Frame.from_records(records, *, index, columns, dtypes, name, consolidate_blocks, index_constructor, columns_constructor, own_index, own_columns)": "Frame.from_records()", "Frame.from_records_items(items, *, columns, dtypes, name, consolidate_blocks, index_constructor, columns_constructor, own_columns)": "Frame.from_records_items()", "Frame.from_series(series, *, name, columns_constructor)": "Frame.from_series()", "Frame.from_sql(query, *, connection, index_depth, index_constructors, columns_depth, columns_select, columns_constructors, dtypes, name, consolidate_blocks, parameters)": "Frame.from_sql()", "Frame.from_sqlite(fp, *, label, index_depth, index_constructors, columns_depth, columns_constructors, dtypes, name, consolidate_blocks)": "Frame.from_sqlite()", "Frame.from_structured_array(array, *, index_depth, index_column_first, index_constructors, columns_depth, columns_constructors, dtypes, name, consolidate_blocks, store_filter)": "Frame.from_structured_array()", "Frame.from_tsv(fp, *, index_depth, index_column_first, index_name_depth_level, index_constructors, index_continuation_token, columns_depth, columns_name_depth_level, columns_constructors, columns_continuation_token, columns_select, skip_header, skip_footer, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, encoding, dtypes, name, consolidate_blocks, store_filter)": "Frame.from_tsv()", "Frame.from_xlsx(fp, *, label, index_depth, index_name_depth_level, index_constructors, columns_depth, columns_name_depth_level, columns_constructors, dtypes, name, consolidate_blocks, skip_header, skip_footer, trim_nadir, store_filter)": "Frame.from_xlsx()", "Frame.to_arrow(*, include_index, include_index_name, include_columns, include_columns_name)": "Frame.to_arrow()", "Frame.to_clipboard(*, delimiter, include_index, include_index_name, include_columns, include_columns_name, encoding, line_terminator, quote_char, quote_double, escape_char, quoting, store_filter)": "Frame.to_clipboard()", "Frame.to_csv(fp, *, include_index, include_index_name, include_columns, include_columns_name, encoding, line_terminator, quoting, quote_char, quote_double, escape_char, store_filter)": "Frame.to_csv()", "Frame.to_delimited(fp, *, delimiter, include_index, include_index_name, include_columns, include_columns_name, encoding, line_terminator, quote_char, quote_double, escape_char, quoting, store_filter)": "Frame.to_delimited()", "Frame.to_duckdb(fp, *, label, include_index, include_columns)": "Frame.to_duckdb()", "Frame.to_frame(*, name)": "Frame.to_frame()", "Frame.to_frame_go(*, name)": "Frame.to_frame_go()", "Frame.to_frame_he(*, name)": "Frame.to_frame_he()", "Frame.to_hdf5(fp, *, label, include_index, include_columns)": "Frame.to_hdf5()", "Frame.to_html(config, style_config)": "Frame.to_html()", "Frame.to_html_datatables(fp, show, config)": "Frame.to_html_datatables()", "Frame.to_json_columns(indent)": "Frame.to_json_columns()", "Frame.to_json_index(indent)": "Frame.to_json_index()", "Frame.to_json_records(indent)": "Frame.to_json_records()", "Frame.to_json_split(indent)": "Frame.to_json_split()", "Frame.to_json_typed(indent)": "Frame.to_json_typed()", "Frame.to_json_values(indent)": "Frame.to_json_values()", "Frame.to_latex(config)": "Frame.to_latex()", "Frame.to_markdown(config)": "Frame.to_markdown()", "Frame.to_msgpack()": "Frame.to_msgpack()", "Frame.to_npy(fp, *, include_index, include_columns, consolidate_blocks)": "Frame.to_npy()", "Frame.to_npz(fp, *, include_index, include_columns, consolidate_blocks)": "Frame.to_npz()", "Frame.to_pairs(axis)": "Frame.to_pairs()", "Frame.to_pandas()": "Frame.to_pandas()", "Frame.to_parquet(fp, *, include_index, include_index_name, include_columns, include_columns_name)": "Frame.to_parquet()", "Frame.to_pickle(fp, *, protocol)": "Frame.to_pickle()", "Frame.to_rst(config)": "Frame.to_rst()", "Frame.to_series(*, index_constructor, name)": "Frame.to_series()", "Frame.to_sql(connection, *, label, include_index, schema, placeholder, dtype_to_type_decl)": "Frame.to_sql()", "Frame.to_sqlite(fp, *, label, include_index, include_columns)": "Frame.to_sqlite()", "Frame.to_tsv(fp, *, include_index, include_index_name, include_columns, include_columns_name, encoding, line_terminator, quote_char, quote_double, escape_char, quoting, store_filter)": "Frame.to_tsv()", "Frame.to_visidata()": "Frame.to_visidata()", "Frame.to_xarray()": "Frame.to_xarray()", "Frame.to_xlsx(fp, *, label, include_index, include_index_name, include_columns, include_columns_name, merge_hierarchical_labels, store_filter)": "Frame.to_xlsx()", "Frame.STATIC": "Frame.STATIC", "Frame.T": "Frame.T", "Frame.columns": "Frame.columns", "Frame.dtypes": "Frame.dtypes", "Frame.index": "Frame.index", "Frame.memory": "Frame.memory", "Frame.mloc": "Frame.mloc", "Frame.name": "Frame.name", "Frame.nbytes": "Frame.nbytes", "Frame.ndim": "Frame.ndim", "Frame.shape": "Frame.shape", "Frame.size": "Frame.size", "Frame.__array__(dtype)": "Frame.__array__()", "Frame.__array_ufunc__(ufunc, method, *args, **kwargs)": "Frame.__array_ufunc__()", "Frame.__bool__()": "Frame.__bool__()", "Frame.__dataframe__(nan_as_null, allow_copy)": "Frame.__dataframe__()", "Frame.__deepcopy__(memo)": "Frame.__deepcopy__()", "Frame.__len__()": "Frame.__len__()", "Frame.__round__(decimals)": "Frame.__round__()", "Frame.all(axis, skipna, out)": "Frame.all()", "Frame.any(axis, skipna, out)": "Frame.any()", "Frame.astype[key](dtypes, *, consolidate_blocks)": "Frame.astype[]()", "Frame.astype(dtype, *, consolidate_blocks)": "Frame.astype()", "Frame.clip(*, lower, upper, axis)": "Frame.clip()", "Frame.consolidate[key]": "Frame.consolidate[]", "Frame.consolidate()": "Frame.consolidate()", "Frame.consolidate.status": "Frame.consolidate.status", "Frame.corr(*, axis)": "Frame.corr()", "Frame.count(*, skipna, skipfalsy, unique, axis)": "Frame.count()", "Frame.cov(*, axis, ddof)": "Frame.cov()", "Frame.cumprod(axis, skipna)": "Frame.cumprod()", "Frame.cumsum(axis, skipna)": "Frame.cumsum()", "Frame.drop_duplicated(*, axis, exclude_first, exclude_last)": "Frame.drop_duplicated()", "Frame.dropfalsy(axis, condition)": "Frame.dropfalsy()", "Frame.dropna(axis, condition)": "Frame.dropna()", "Frame.duplicated(*, axis, exclude_first, exclude_last)": "Frame.duplicated()", "Frame.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "Frame.equals()", "Frame.fillfalsy(value)": "Frame.fillfalsy()", "Frame.fillfalsy_backward(limit, *, axis)": "Frame.fillfalsy_backward()", "Frame.fillfalsy_forward(limit, *, axis)": "Frame.fillfalsy_forward()", "Frame.fillfalsy_leading(value, *, axis)": "Frame.fillfalsy_leading()", "Frame.fillfalsy_trailing(value, *, axis)": "Frame.fillfalsy_trailing()", "Frame.fillna(value)": "Frame.fillna()", "Frame.fillna_backward(limit, *, axis)": "Frame.fillna_backward()", "Frame.fillna_forward(limit, *, axis)": "Frame.fillna_forward()", "Frame.fillna_leading(value, *, axis)": "Frame.fillna_leading()", "Frame.fillna_trailing(value, *, axis)": "Frame.fillna_trailing()", "Frame.head(count)": "Frame.head()", "Frame.iloc_max(*, skipna, axis)": "Frame.iloc_max()", "Frame.iloc_min(*, skipna, axis)": "Frame.iloc_min()", "Frame.iloc_notfalsy_first(*, fill_value, axis)": "Frame.iloc_notfalsy_first()", "Frame.iloc_notfalsy_last(*, fill_value, axis)": "Frame.iloc_notfalsy_last()", "Frame.iloc_notna_first(*, fill_value, axis)": "Frame.iloc_notna_first()", "Frame.iloc_notna_last(*, fill_value, axis)": "Frame.iloc_notna_last()", "Frame.insert_after(key, container, *, fill_value)": "Frame.insert_after()", "Frame.insert_before(key, container, *, fill_value)": "Frame.insert_before()", "Frame.isfalsy()": "Frame.isfalsy()", "Frame.isin(other)": "Frame.isin()", "Frame.isna()": "Frame.isna()", "Frame.join_inner(other, *, left_depth_level, left_columns, right_depth_level, right_columns, left_template, right_template, fill_value, include_index)": "Frame.join_inner()", "Frame.join_left(other, *, left_depth_level, left_columns, right_depth_level, right_columns, left_template, right_template, fill_value, include_index)": "Frame.join_left()", "Frame.join_outer(other, *, left_depth_level, left_columns, right_depth_level, right_columns, left_template, right_template, fill_value, include_index)": "Frame.join_outer()", "Frame.join_right(other, *, left_depth_level, left_columns, right_depth_level, right_columns, left_template, right_template, fill_value, include_index)": "Frame.join_right()", "Frame.loc_max(*, skipna, axis)": "Frame.loc_max()", "Frame.loc_min(*, skipna, axis)": "Frame.loc_min()", "Frame.loc_notfalsy_first(*, fill_value, axis)": "Frame.loc_notfalsy_first()", "Frame.loc_notfalsy_last(*, fill_value, axis)": "Frame.loc_notfalsy_last()", "Frame.loc_notna_first(*, fill_value, axis)": "Frame.loc_notna_first()", "Frame.loc_notna_last(*, fill_value, axis)": "Frame.loc_notna_last()", "Frame.max(axis, skipna, out)": "Frame.max()", "Frame.mean(axis, skipna, out)": "Frame.mean()", "Frame.median(axis, skipna, out)": "Frame.median()", "Frame.merge_inner(other, *, left_depth_level, left_columns, right_depth_level, right_columns, merge_labels, left_template, right_template, fill_value, include_index)": "Frame.merge_inner()", "Frame.merge_left(other, *, left_depth_level, left_columns, right_depth_level, right_columns, merge_labels, left_template, right_template, fill_value, include_index)": "Frame.merge_left()", "Frame.merge_outer(other, *, left_depth_level, left_columns, right_depth_level, right_columns, merge_labels, left_template, right_template, fill_value, include_index)": "Frame.merge_outer()", "Frame.merge_right(other, *, left_depth_level, left_columns, right_depth_level, right_columns, merge_labels, left_template, right_template, fill_value, include_index)": "Frame.merge_right()", "Frame.min(axis, skipna, out)": "Frame.min()", "Frame.notfalsy()": "Frame.notfalsy()", "Frame.notna()": "Frame.notna()", "Frame.pivot(index_fields, columns_fields, data_fields, *, func, fill_value, index_constructor)": "Frame.pivot()", "Frame.pivot_stack(depth_level, *, fill_value)": "Frame.pivot_stack()", "Frame.pivot_unstack(depth_level, *, fill_value)": "Frame.pivot_unstack()", "Frame.prod(axis, skipna, allna, out)": "Frame.prod()", "Frame.rank_dense(*, axis, skipna, ascending, start, fill_value)": "Frame.rank_dense()", "Frame.rank_max(*, axis, skipna, ascending, start, fill_value)": "Frame.rank_max()", "Frame.rank_mean(*, axis, skipna, ascending, start, fill_value)": "Frame.rank_mean()", "Frame.rank_min(*, axis, skipna, ascending, start, fill_value)": "Frame.rank_min()", "Frame.rank_ordinal(*, axis, skipna, ascending, start, fill_value)": "Frame.rank_ordinal()", "Frame.rehierarch(index, columns, *, index_constructors, columns_constructors)": "Frame.rehierarch()", "Frame.reindex(index, columns, *, fill_value, own_index, own_columns, check_equals)": "Frame.reindex()", "Frame.relabel(index, columns, *, index_constructor, columns_constructor)": "Frame.relabel()", "Frame.relabel_flat(index, columns)": "Frame.relabel_flat()", "Frame.relabel_level_add(index, columns, *, index_constructor, columns_constructor)": "Frame.relabel_level_add()", "Frame.relabel_level_drop(index, columns)": "Frame.relabel_level_drop()", "Frame.relabel_shift_in(key, *, axis, index_constructors)": "Frame.relabel_shift_in()", "Frame.relabel_shift_out(depth_level, *, axis)": "Frame.relabel_shift_out()", "Frame.rename(name, *, index, columns)": "Frame.rename()", "Frame.roll(index, columns, *, include_index, include_columns)": "Frame.roll()", "Frame.sample(index, columns, *, seed)": "Frame.sample()", "Frame.set_columns(index, *, drop, columns_constructor)": "Frame.set_columns()", "Frame.set_columns_hierarchy(index, *, drop, columns_constructors, reorder_for_hierarchy)": "Frame.set_columns_hierarchy()", "Frame.set_index(column, *, drop, index_constructor)": "Frame.set_index()", "Frame.set_index_hierarchy(columns, *, drop, index_constructors, reorder_for_hierarchy)": "Frame.set_index_hierarchy()", "Frame.shift(index, columns, *, fill_value)": "Frame.shift()", "Frame.sort_columns(*, ascending, kind, key)": "Frame.sort_columns()", "Frame.sort_index(*, ascending, kind, key)": "Frame.sort_index()", "Frame.sort_values(label, *, ascending, axis, kind, key)": "Frame.sort_values()", "Frame.std(axis, skipna, ddof, out)": "Frame.std()", "Frame.sum(axis, skipna, allna, out)": "Frame.sum()", "Frame.tail(count)": "Frame.tail()", "Frame.transpose()": "Frame.transpose()", "Frame.unique(*, axis)": "Frame.unique()", "Frame.unique_enumerated(*, retain_order, func)": "Frame.unique_enumerated()", "Frame.unset_columns(*, names, drop, index_constructors)": "Frame.unset_columns()", "Frame.unset_index(*, names, drop, consolidate_blocks, columns_constructors)": "Frame.unset_index()", "Frame.var(axis, skipna, ddof, out)": "Frame.var()", "Frame.__contains__(value)": "Frame.__contains__()", "Frame.__iter__()": "Frame.__iter__()", "Frame.__reversed__()": "Frame.__reversed__()", "Frame.get(key, default)": "Frame.get()", "Frame.items()": "Frame.items()", "Frame.keys()": "Frame.keys()", "Frame.values": "Frame.values", "Frame.interface": "Frame.interface", "Frame.__repr__()": "Frame.__repr__()", "Frame.__str__()": "Frame.__str__()", "Frame.display(config, *, style_config)": "Frame.display()", "Frame.display_tall(config)": "Frame.display_tall()", "Frame.display_wide(config)": "Frame.display_wide()", "Frame.assign[key](value, *, fill_value)": "Frame.assign[]()", "Frame.assign[key].apply(func, *, fill_value)": "Frame.assign[].apply()", "Frame.assign[key].apply_element(func, *, dtype, fill_value)": "Frame.assign[].apply_element()", "Frame.assign[key].apply_element_items(func, *, dtype, fill_value)": "Frame.assign[].apply_element_items()", "Frame.assign.iloc[key](value, *, fill_value)": "Frame.assign.iloc[]()", "Frame.assign.iloc[key].apply(func, *, fill_value)": "Frame.assign.iloc[].apply()", "Frame.assign.iloc[key].apply_element(func, *, dtype, fill_value)": "Frame.assign.iloc[].apply_element()", "Frame.assign.iloc[key].apply_element_items(func, *, dtype, fill_value)": "Frame.assign.iloc[].apply_element_items()", "Frame.assign.loc[key](value, *, fill_value)": "Frame.assign.loc[]()", "Frame.assign.loc[key].apply(func, *, fill_value)": "Frame.assign.loc[].apply()", "Frame.assign.loc[key].apply_element(func, *, dtype, fill_value)": "Frame.assign.loc[].apply_element()", "Frame.assign.loc[key].apply_element_items(func, *, dtype, fill_value)": "Frame.assign.loc[].apply_element_items()", "Frame.assign.bloc[key](value, *, fill_value)": "Frame.assign.bloc[]()", "Frame.assign.bloc[key].apply(func, *, fill_value)": "Frame.assign.bloc[].apply()", "Frame.assign.bloc[key].apply_element(func, *, dtype, fill_value)": "Frame.assign.bloc[].apply_element()", "Frame.assign.bloc[key].apply_element_items(func, *, dtype, fill_value)": "Frame.assign.bloc[].apply_element_items()", "Frame.bloc[key]": "Frame.bloc[]", "Frame.drop[key]": "Frame.drop[]", "Frame.drop.iloc[key]": "Frame.drop.iloc[]", "Frame.drop.loc[key]": "Frame.drop.loc[]", "Frame.mask[key]": "Frame.mask[]", "Frame.mask.iloc[key]": "Frame.mask.iloc[]", "Frame.mask.loc[key]": "Frame.mask.loc[]", "Frame.masked_array[key]": "Frame.masked_array[]", "Frame.masked_array.iloc[key]": "Frame.masked_array.iloc[]", "Frame.masked_array.loc[key]": "Frame.masked_array.loc[]", "Frame.[key]": "Frame.[]", "Frame.iloc[key]": "Frame.iloc[]", "Frame.loc[key]": "Frame.loc[]", "Frame.iter_array(*, axis)": "Frame.iter_array()", "Frame.iter_array(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_array().apply()", "Frame.iter_array(*, axis).apply_iter(func)": "Frame.iter_array().apply_iter()", "Frame.iter_array(*, axis).apply_iter_items(func)": "Frame.iter_array().apply_iter_items()", "Frame.iter_array(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_array().apply_pool()", "Frame.iter_array_items(*, axis)": "Frame.iter_array_items()", "Frame.iter_array_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_array_items().apply()", "Frame.iter_array_items(*, axis).apply_iter(func)": "Frame.iter_array_items().apply_iter()", "Frame.iter_array_items(*, axis).apply_iter_items(func)": "Frame.iter_array_items().apply_iter_items()", "Frame.iter_array_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_array_items().apply_pool()", "Frame.iter_element(*, axis)": "Frame.iter_element()", "Frame.iter_element(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_element().apply()", "Frame.iter_element(*, axis).apply_iter(func)": "Frame.iter_element().apply_iter()", "Frame.iter_element(*, axis).apply_iter_items(func)": "Frame.iter_element().apply_iter_items()", "Frame.iter_element(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_element().apply_pool()", "Frame.iter_element(*, axis).map_all(mapping, *, dtype, name, index_constructor)": "Frame.iter_element().map_all()", "Frame.iter_element(*, axis).map_all_iter(mapping)": "Frame.iter_element().map_all_iter()", "Frame.iter_element(*, axis).map_all_iter_items(mapping)": "Frame.iter_element().map_all_iter_items()", "Frame.iter_element(*, axis).map_any(mapping, *, dtype, name, index_constructor)": "Frame.iter_element().map_any()", "Frame.iter_element(*, axis).map_any_iter(mapping)": "Frame.iter_element().map_any_iter()", "Frame.iter_element(*, axis).map_any_iter_items(mapping)": "Frame.iter_element().map_any_iter_items()", "Frame.iter_element(*, axis).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "Frame.iter_element().map_fill()", "Frame.iter_element(*, axis).map_fill_iter(mapping, *, fill_value)": "Frame.iter_element().map_fill_iter()", "Frame.iter_element(*, axis).map_fill_iter_items(mapping, *, fill_value)": "Frame.iter_element().map_fill_iter_items()", "Frame.iter_element_items(*, axis)": "Frame.iter_element_items()", "Frame.iter_element_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_element_items().apply()", "Frame.iter_element_items(*, axis).apply_iter(func)": "Frame.iter_element_items().apply_iter()", "Frame.iter_element_items(*, axis).apply_iter_items(func)": "Frame.iter_element_items().apply_iter_items()", "Frame.iter_element_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_element_items().apply_pool()", "Frame.iter_element_items(*, axis).map_all(mapping, *, dtype, name, index_constructor)": "Frame.iter_element_items().map_all()", "Frame.iter_element_items(*, axis).map_all_iter(mapping)": "Frame.iter_element_items().map_all_iter()", "Frame.iter_element_items(*, axis).map_all_iter_items(mapping)": "Frame.iter_element_items().map_all_iter_items()", "Frame.iter_element_items(*, axis).map_any(mapping, *, dtype, name, index_constructor)": "Frame.iter_element_items().map_any()", "Frame.iter_element_items(*, axis).map_any_iter(mapping)": "Frame.iter_element_items().map_any_iter()", "Frame.iter_element_items(*, axis).map_any_iter_items(mapping)": "Frame.iter_element_items().map_any_iter_items()", "Frame.iter_element_items(*, axis).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "Frame.iter_element_items().map_fill()", "Frame.iter_element_items(*, axis).map_fill_iter(mapping, *, fill_value)": "Frame.iter_element_items().map_fill_iter()", "Frame.iter_element_items(*, axis).map_fill_iter_items(mapping, *, fill_value)": "Frame.iter_element_items().map_fill_iter_items()", "Frame.iter_group(key, *, axis, drop)": "Frame.iter_group()", "Frame.iter_group(key, *, axis, drop).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_group().apply()", "Frame.iter_group(key, *, axis, drop).apply_iter(func)": "Frame.iter_group().apply_iter()", "Frame.iter_group(key, *, axis, drop).apply_iter_items(func)": "Frame.iter_group().apply_iter_items()", "Frame.iter_group(key, *, axis, drop).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_group().apply_pool()", "Frame.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).keys()": "Frame.iter_group().reduce.from_func().keys()", "Frame.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).__iter__()": "Frame.iter_group().reduce.from_func().__iter__()", "Frame.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).items()": "Frame.iter_group().reduce.from_func().items()", "Frame.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).values()": "Frame.iter_group().reduce.from_func().values()", "Frame.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group().reduce.from_func().to_frame()", "Frame.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).keys()": "Frame.iter_group().reduce.from_map_func().keys()", "Frame.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.iter_group().reduce.from_map_func().__iter__()", "Frame.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).items()": "Frame.iter_group().reduce.from_map_func().items()", "Frame.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).values()": "Frame.iter_group().reduce.from_map_func().values()", "Frame.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group().reduce.from_map_func().to_frame()", "Frame.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.iter_group().reduce.from_label_map().keys()", "Frame.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.iter_group().reduce.from_label_map().__iter__()", "Frame.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).items()": "Frame.iter_group().reduce.from_label_map().items()", "Frame.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).values()": "Frame.iter_group().reduce.from_label_map().values()", "Frame.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group().reduce.from_label_map().to_frame()", "Frame.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.iter_group().reduce.from_label_pair_map().keys()", "Frame.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.iter_group().reduce.from_label_pair_map().__iter__()", "Frame.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.iter_group().reduce.from_label_pair_map().items()", "Frame.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.iter_group().reduce.from_label_pair_map().values()", "Frame.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group().reduce.from_label_pair_map().to_frame()", "Frame.iter_group_array(key, *, axis, drop)": "Frame.iter_group_array()", "Frame.iter_group_array(key, *, axis, drop).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_group_array().apply()", "Frame.iter_group_array(key, *, axis, drop).apply_iter(func)": "Frame.iter_group_array().apply_iter()", "Frame.iter_group_array(key, *, axis, drop).apply_iter_items(func)": "Frame.iter_group_array().apply_iter_items()", "Frame.iter_group_array(key, *, axis, drop).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_group_array().apply_pool()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).keys()": "Frame.iter_group_array().reduce.from_func().keys()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).__iter__()": "Frame.iter_group_array().reduce.from_func().__iter__()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).items()": "Frame.iter_group_array().reduce.from_func().items()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).values()": "Frame.iter_group_array().reduce.from_func().values()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_array().reduce.from_func().to_frame()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).keys()": "Frame.iter_group_array().reduce.from_map_func().keys()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.iter_group_array().reduce.from_map_func().__iter__()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).items()": "Frame.iter_group_array().reduce.from_map_func().items()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).values()": "Frame.iter_group_array().reduce.from_map_func().values()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_array().reduce.from_map_func().to_frame()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.iter_group_array().reduce.from_label_map().keys()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_array().reduce.from_label_map().__iter__()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).items()": "Frame.iter_group_array().reduce.from_label_map().items()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).values()": "Frame.iter_group_array().reduce.from_label_map().values()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_array().reduce.from_label_map().to_frame()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.iter_group_array().reduce.from_label_pair_map().keys()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_array().reduce.from_label_pair_map().__iter__()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.iter_group_array().reduce.from_label_pair_map().items()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.iter_group_array().reduce.from_label_pair_map().values()", "Frame.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_array().reduce.from_label_pair_map().to_frame()", "Frame.iter_group_array_items(key, *, axis, drop)": "Frame.iter_group_array_items()", "Frame.iter_group_array_items(key, *, axis, drop).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_group_array_items().apply()", "Frame.iter_group_array_items(key, *, axis, drop).apply_iter(func)": "Frame.iter_group_array_items().apply_iter()", "Frame.iter_group_array_items(key, *, axis, drop).apply_iter_items(func)": "Frame.iter_group_array_items().apply_iter_items()", "Frame.iter_group_array_items(key, *, axis, drop).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_group_array_items().apply_pool()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).keys()": "Frame.iter_group_array_items().reduce.from_func().keys()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).__iter__()": "Frame.iter_group_array_items().reduce.from_func().__iter__()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).items()": "Frame.iter_group_array_items().reduce.from_func().items()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).values()": "Frame.iter_group_array_items().reduce.from_func().values()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_array_items().reduce.from_func().to_frame()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).keys()": "Frame.iter_group_array_items().reduce.from_map_func().keys()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.iter_group_array_items().reduce.from_map_func().__iter__()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).items()": "Frame.iter_group_array_items().reduce.from_map_func().items()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).values()": "Frame.iter_group_array_items().reduce.from_map_func().values()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_array_items().reduce.from_map_func().to_frame()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.iter_group_array_items().reduce.from_label_map().keys()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_array_items().reduce.from_label_map().__iter__()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).items()": "Frame.iter_group_array_items().reduce.from_label_map().items()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).values()": "Frame.iter_group_array_items().reduce.from_label_map().values()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_array_items().reduce.from_label_map().to_frame()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.iter_group_array_items().reduce.from_label_pair_map().keys()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_array_items().reduce.from_label_pair_map().__iter__()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.iter_group_array_items().reduce.from_label_pair_map().items()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.iter_group_array_items().reduce.from_label_pair_map().values()", "Frame.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_array_items().reduce.from_label_pair_map().to_frame()", "Frame.iter_group_items(key, *, axis, drop)": "Frame.iter_group_items()", "Frame.iter_group_items(key, *, axis, drop).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_group_items().apply()", "Frame.iter_group_items(key, *, axis, drop).apply_iter(func)": "Frame.iter_group_items().apply_iter()", "Frame.iter_group_items(key, *, axis, drop).apply_iter_items(func)": "Frame.iter_group_items().apply_iter_items()", "Frame.iter_group_items(key, *, axis, drop).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_group_items().apply_pool()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).keys()": "Frame.iter_group_items().reduce.from_func().keys()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).__iter__()": "Frame.iter_group_items().reduce.from_func().__iter__()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).items()": "Frame.iter_group_items().reduce.from_func().items()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).values()": "Frame.iter_group_items().reduce.from_func().values()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_items().reduce.from_func().to_frame()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).keys()": "Frame.iter_group_items().reduce.from_map_func().keys()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.iter_group_items().reduce.from_map_func().__iter__()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).items()": "Frame.iter_group_items().reduce.from_map_func().items()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).values()": "Frame.iter_group_items().reduce.from_map_func().values()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_items().reduce.from_map_func().to_frame()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.iter_group_items().reduce.from_label_map().keys()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_items().reduce.from_label_map().__iter__()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).items()": "Frame.iter_group_items().reduce.from_label_map().items()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).values()": "Frame.iter_group_items().reduce.from_label_map().values()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_items().reduce.from_label_map().to_frame()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.iter_group_items().reduce.from_label_pair_map().keys()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_items().reduce.from_label_pair_map().__iter__()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.iter_group_items().reduce.from_label_pair_map().items()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.iter_group_items().reduce.from_label_pair_map().values()", "Frame.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_items().reduce.from_label_pair_map().to_frame()", "Frame.iter_group_labels(depth_level, *, axis)": "Frame.iter_group_labels()", "Frame.iter_group_labels(depth_level, *, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_group_labels().apply()", "Frame.iter_group_labels(depth_level, *, axis).apply_iter(func)": "Frame.iter_group_labels().apply_iter()", "Frame.iter_group_labels(depth_level, *, axis).apply_iter_items(func)": "Frame.iter_group_labels().apply_iter_items()", "Frame.iter_group_labels(depth_level, *, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_group_labels().apply_pool()", "Frame.iter_group_labels_array(depth_level, *, axis)": "Frame.iter_group_labels_array()", "Frame.iter_group_labels_array(depth_level, *, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_group_labels_array().apply()", "Frame.iter_group_labels_array(depth_level, *, axis).apply_iter(func)": "Frame.iter_group_labels_array().apply_iter()", "Frame.iter_group_labels_array(depth_level, *, axis).apply_iter_items(func)": "Frame.iter_group_labels_array().apply_iter_items()", "Frame.iter_group_labels_array(depth_level, *, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_group_labels_array().apply_pool()", "Frame.iter_group_labels_array_items(depth_level, *, axis)": "Frame.iter_group_labels_array_items()", "Frame.iter_group_labels_array_items(depth_level, *, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_group_labels_array_items().apply()", "Frame.iter_group_labels_array_items(depth_level, *, axis).apply_iter(func)": "Frame.iter_group_labels_array_items().apply_iter()", "Frame.iter_group_labels_array_items(depth_level, *, axis).apply_iter_items(func)": "Frame.iter_group_labels_array_items().apply_iter_items()", "Frame.iter_group_labels_array_items(depth_level, *, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_group_labels_array_items().apply_pool()", "Frame.iter_group_labels_items(depth_level, *, axis)": "Frame.iter_group_labels_items()", "Frame.iter_group_labels_items(depth_level, *, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_group_labels_items().apply()", "Frame.iter_group_labels_items(depth_level, *, axis).apply_iter(func)": "Frame.iter_group_labels_items().apply_iter()", "Frame.iter_group_labels_items(depth_level, *, axis).apply_iter_items(func)": "Frame.iter_group_labels_items().apply_iter_items()", "Frame.iter_group_labels_items(depth_level, *, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_group_labels_items().apply_pool()", "Frame.iter_group_other(other, *, fill_value, axis)": "Frame.iter_group_other()", "Frame.iter_group_other(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_group_other().apply()", "Frame.iter_group_other(other, *, fill_value, axis).apply_iter(func)": "Frame.iter_group_other().apply_iter()", "Frame.iter_group_other(other, *, fill_value, axis).apply_iter_items(func)": "Frame.iter_group_other().apply_iter_items()", "Frame.iter_group_other(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_group_other().apply_pool()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).keys()": "Frame.iter_group_other().reduce.from_func().keys()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).__iter__()": "Frame.iter_group_other().reduce.from_func().__iter__()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).items()": "Frame.iter_group_other().reduce.from_func().items()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).values()": "Frame.iter_group_other().reduce.from_func().values()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other().reduce.from_func().to_frame()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).keys()": "Frame.iter_group_other().reduce.from_map_func().keys()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.iter_group_other().reduce.from_map_func().__iter__()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).items()": "Frame.iter_group_other().reduce.from_map_func().items()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).values()": "Frame.iter_group_other().reduce.from_map_func().values()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other().reduce.from_map_func().to_frame()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.iter_group_other().reduce.from_label_map().keys()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_other().reduce.from_label_map().__iter__()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).items()": "Frame.iter_group_other().reduce.from_label_map().items()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).values()": "Frame.iter_group_other().reduce.from_label_map().values()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other().reduce.from_label_map().to_frame()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.iter_group_other().reduce.from_label_pair_map().keys()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_other().reduce.from_label_pair_map().__iter__()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.iter_group_other().reduce.from_label_pair_map().items()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.iter_group_other().reduce.from_label_pair_map().values()", "Frame.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other().reduce.from_label_pair_map().to_frame()", "Frame.iter_group_other_array(other, *, fill_value, axis)": "Frame.iter_group_other_array()", "Frame.iter_group_other_array(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_group_other_array().apply()", "Frame.iter_group_other_array(other, *, fill_value, axis).apply_iter(func)": "Frame.iter_group_other_array().apply_iter()", "Frame.iter_group_other_array(other, *, fill_value, axis).apply_iter_items(func)": "Frame.iter_group_other_array().apply_iter_items()", "Frame.iter_group_other_array(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_group_other_array().apply_pool()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).keys()": "Frame.iter_group_other_array().reduce.from_func().keys()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).__iter__()": "Frame.iter_group_other_array().reduce.from_func().__iter__()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).items()": "Frame.iter_group_other_array().reduce.from_func().items()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).values()": "Frame.iter_group_other_array().reduce.from_func().values()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other_array().reduce.from_func().to_frame()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).keys()": "Frame.iter_group_other_array().reduce.from_map_func().keys()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.iter_group_other_array().reduce.from_map_func().__iter__()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).items()": "Frame.iter_group_other_array().reduce.from_map_func().items()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).values()": "Frame.iter_group_other_array().reduce.from_map_func().values()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other_array().reduce.from_map_func().to_frame()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.iter_group_other_array().reduce.from_label_map().keys()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_other_array().reduce.from_label_map().__iter__()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).items()": "Frame.iter_group_other_array().reduce.from_label_map().items()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).values()": "Frame.iter_group_other_array().reduce.from_label_map().values()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other_array().reduce.from_label_map().to_frame()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.iter_group_other_array().reduce.from_label_pair_map().keys()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_other_array().reduce.from_label_pair_map().__iter__()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.iter_group_other_array().reduce.from_label_pair_map().items()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.iter_group_other_array().reduce.from_label_pair_map().values()", "Frame.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other_array().reduce.from_label_pair_map().to_frame()", "Frame.iter_group_other_array_items(other, *, fill_value, axis)": "Frame.iter_group_other_array_items()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_group_other_array_items().apply()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).apply_iter(func)": "Frame.iter_group_other_array_items().apply_iter()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).apply_iter_items(func)": "Frame.iter_group_other_array_items().apply_iter_items()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_group_other_array_items().apply_pool()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).keys()": "Frame.iter_group_other_array_items().reduce.from_func().keys()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).__iter__()": "Frame.iter_group_other_array_items().reduce.from_func().__iter__()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).items()": "Frame.iter_group_other_array_items().reduce.from_func().items()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).values()": "Frame.iter_group_other_array_items().reduce.from_func().values()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other_array_items().reduce.from_func().to_frame()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).keys()": "Frame.iter_group_other_array_items().reduce.from_map_func().keys()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.iter_group_other_array_items().reduce.from_map_func().__iter__()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).items()": "Frame.iter_group_other_array_items().reduce.from_map_func().items()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).values()": "Frame.iter_group_other_array_items().reduce.from_map_func().values()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other_array_items().reduce.from_map_func().to_frame()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.iter_group_other_array_items().reduce.from_label_map().keys()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_other_array_items().reduce.from_label_map().__iter__()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).items()": "Frame.iter_group_other_array_items().reduce.from_label_map().items()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).values()": "Frame.iter_group_other_array_items().reduce.from_label_map().values()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other_array_items().reduce.from_label_map().to_frame()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.iter_group_other_array_items().reduce.from_label_pair_map().keys()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_other_array_items().reduce.from_label_pair_map().__iter__()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.iter_group_other_array_items().reduce.from_label_pair_map().items()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.iter_group_other_array_items().reduce.from_label_pair_map().values()", "Frame.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other_array_items().reduce.from_label_pair_map().to_frame()", "Frame.iter_group_other_items(other, *, fill_value, axis)": "Frame.iter_group_other_items()", "Frame.iter_group_other_items(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_group_other_items().apply()", "Frame.iter_group_other_items(other, *, fill_value, axis).apply_iter(func)": "Frame.iter_group_other_items().apply_iter()", "Frame.iter_group_other_items(other, *, fill_value, axis).apply_iter_items(func)": "Frame.iter_group_other_items().apply_iter_items()", "Frame.iter_group_other_items(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_group_other_items().apply_pool()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).keys()": "Frame.iter_group_other_items().reduce.from_func().keys()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).__iter__()": "Frame.iter_group_other_items().reduce.from_func().__iter__()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).items()": "Frame.iter_group_other_items().reduce.from_func().items()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).values()": "Frame.iter_group_other_items().reduce.from_func().values()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other_items().reduce.from_func().to_frame()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).keys()": "Frame.iter_group_other_items().reduce.from_map_func().keys()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.iter_group_other_items().reduce.from_map_func().__iter__()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).items()": "Frame.iter_group_other_items().reduce.from_map_func().items()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).values()": "Frame.iter_group_other_items().reduce.from_map_func().values()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other_items().reduce.from_map_func().to_frame()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.iter_group_other_items().reduce.from_label_map().keys()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_other_items().reduce.from_label_map().__iter__()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).items()": "Frame.iter_group_other_items().reduce.from_label_map().items()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).values()": "Frame.iter_group_other_items().reduce.from_label_map().values()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other_items().reduce.from_label_map().to_frame()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.iter_group_other_items().reduce.from_label_pair_map().keys()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.iter_group_other_items().reduce.from_label_pair_map().__iter__()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.iter_group_other_items().reduce.from_label_pair_map().items()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.iter_group_other_items().reduce.from_label_pair_map().values()", "Frame.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_group_other_items().reduce.from_label_pair_map().to_frame()", "Frame.iter_series(*, axis)": "Frame.iter_series()", "Frame.iter_series(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_series().apply()", "Frame.iter_series(*, axis).apply_iter(func)": "Frame.iter_series().apply_iter()", "Frame.iter_series(*, axis).apply_iter_items(func)": "Frame.iter_series().apply_iter_items()", "Frame.iter_series(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_series().apply_pool()", "Frame.iter_series_items(*, axis)": "Frame.iter_series_items()", "Frame.iter_series_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_series_items().apply()", "Frame.iter_series_items(*, axis).apply_iter(func)": "Frame.iter_series_items().apply_iter()", "Frame.iter_series_items(*, axis).apply_iter_items(func)": "Frame.iter_series_items().apply_iter_items()", "Frame.iter_series_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_series_items().apply_pool()", "Frame.iter_tuple(*, axis, constructor)": "Frame.iter_tuple()", "Frame.iter_tuple(*, axis, constructor).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_tuple().apply()", "Frame.iter_tuple(*, axis, constructor).apply_iter(func)": "Frame.iter_tuple().apply_iter()", "Frame.iter_tuple(*, axis, constructor).apply_iter_items(func)": "Frame.iter_tuple().apply_iter_items()", "Frame.iter_tuple(*, axis, constructor).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_tuple().apply_pool()", "Frame.iter_tuple(*, axis, constructor).map_all(mapping, *, dtype, name, index_constructor)": "Frame.iter_tuple().map_all()", "Frame.iter_tuple(*, axis, constructor).map_all_iter(mapping)": "Frame.iter_tuple().map_all_iter()", "Frame.iter_tuple(*, axis, constructor).map_all_iter_items(mapping)": "Frame.iter_tuple().map_all_iter_items()", "Frame.iter_tuple(*, axis, constructor).map_any(mapping, *, dtype, name, index_constructor)": "Frame.iter_tuple().map_any()", "Frame.iter_tuple(*, axis, constructor).map_any_iter(mapping)": "Frame.iter_tuple().map_any_iter()", "Frame.iter_tuple(*, axis, constructor).map_any_iter_items(mapping)": "Frame.iter_tuple().map_any_iter_items()", "Frame.iter_tuple(*, axis, constructor).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "Frame.iter_tuple().map_fill()", "Frame.iter_tuple(*, axis, constructor).map_fill_iter(mapping, *, fill_value)": "Frame.iter_tuple().map_fill_iter()", "Frame.iter_tuple(*, axis, constructor).map_fill_iter_items(mapping, *, fill_value)": "Frame.iter_tuple().map_fill_iter_items()", "Frame.iter_tuple_items(*, axis, constructor)": "Frame.iter_tuple_items()", "Frame.iter_tuple_items(*, axis, constructor).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_tuple_items().apply()", "Frame.iter_tuple_items(*, axis, constructor).apply_iter(func)": "Frame.iter_tuple_items().apply_iter()", "Frame.iter_tuple_items(*, axis, constructor).apply_iter_items(func)": "Frame.iter_tuple_items().apply_iter_items()", "Frame.iter_tuple_items(*, axis, constructor).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_tuple_items().apply_pool()", "Frame.iter_tuple_items(*, axis, constructor).map_all(mapping, *, dtype, name, index_constructor)": "Frame.iter_tuple_items().map_all()", "Frame.iter_tuple_items(*, axis, constructor).map_all_iter(mapping)": "Frame.iter_tuple_items().map_all_iter()", "Frame.iter_tuple_items(*, axis, constructor).map_all_iter_items(mapping)": "Frame.iter_tuple_items().map_all_iter_items()", "Frame.iter_tuple_items(*, axis, constructor).map_any(mapping, *, dtype, name, index_constructor)": "Frame.iter_tuple_items().map_any()", "Frame.iter_tuple_items(*, axis, constructor).map_any_iter(mapping)": "Frame.iter_tuple_items().map_any_iter()", "Frame.iter_tuple_items(*, axis, constructor).map_any_iter_items(mapping)": "Frame.iter_tuple_items().map_any_iter_items()", "Frame.iter_tuple_items(*, axis, constructor).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "Frame.iter_tuple_items().map_fill()", "Frame.iter_tuple_items(*, axis, constructor).map_fill_iter(mapping, *, fill_value)": "Frame.iter_tuple_items().map_fill_iter()", "Frame.iter_tuple_items(*, axis, constructor).map_fill_iter_items(mapping, *, fill_value)": "Frame.iter_tuple_items().map_fill_iter_items()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "Frame.iter_window()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_window().apply()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "Frame.iter_window().apply_iter()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "Frame.iter_window().apply_iter_items()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_window().apply_pool()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).keys()": "Frame.iter_window().reduce.from_func().keys()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).__iter__()": "Frame.iter_window().reduce.from_func().__iter__()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).items()": "Frame.iter_window().reduce.from_func().items()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).values()": "Frame.iter_window().reduce.from_func().values()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window().reduce.from_func().to_frame()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).keys()": "Frame.iter_window().reduce.from_map_func().keys()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.iter_window().reduce.from_map_func().__iter__()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).items()": "Frame.iter_window().reduce.from_map_func().items()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).values()": "Frame.iter_window().reduce.from_map_func().values()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window().reduce.from_map_func().to_frame()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.iter_window().reduce.from_label_map().keys()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.iter_window().reduce.from_label_map().__iter__()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).items()": "Frame.iter_window().reduce.from_label_map().items()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).values()": "Frame.iter_window().reduce.from_label_map().values()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window().reduce.from_label_map().to_frame()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.iter_window().reduce.from_label_pair_map().keys()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.iter_window().reduce.from_label_pair_map().__iter__()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.iter_window().reduce.from_label_pair_map().items()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.iter_window().reduce.from_label_pair_map().values()", "Frame.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window().reduce.from_label_pair_map().to_frame()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "Frame.iter_window_array()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_window_array().apply()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "Frame.iter_window_array().apply_iter()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "Frame.iter_window_array().apply_iter_items()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_window_array().apply_pool()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).keys()": "Frame.iter_window_array().reduce.from_func().keys()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).__iter__()": "Frame.iter_window_array().reduce.from_func().__iter__()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).items()": "Frame.iter_window_array().reduce.from_func().items()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).values()": "Frame.iter_window_array().reduce.from_func().values()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window_array().reduce.from_func().to_frame()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).keys()": "Frame.iter_window_array().reduce.from_map_func().keys()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.iter_window_array().reduce.from_map_func().__iter__()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).items()": "Frame.iter_window_array().reduce.from_map_func().items()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).values()": "Frame.iter_window_array().reduce.from_map_func().values()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window_array().reduce.from_map_func().to_frame()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.iter_window_array().reduce.from_label_map().keys()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.iter_window_array().reduce.from_label_map().__iter__()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).items()": "Frame.iter_window_array().reduce.from_label_map().items()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).values()": "Frame.iter_window_array().reduce.from_label_map().values()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window_array().reduce.from_label_map().to_frame()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.iter_window_array().reduce.from_label_pair_map().keys()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.iter_window_array().reduce.from_label_pair_map().__iter__()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.iter_window_array().reduce.from_label_pair_map().items()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.iter_window_array().reduce.from_label_pair_map().values()", "Frame.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window_array().reduce.from_label_pair_map().to_frame()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "Frame.iter_window_array_items()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_window_array_items().apply()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "Frame.iter_window_array_items().apply_iter()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "Frame.iter_window_array_items().apply_iter_items()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_window_array_items().apply_pool()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).keys()": "Frame.iter_window_array_items().reduce.from_func().keys()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).__iter__()": "Frame.iter_window_array_items().reduce.from_func().__iter__()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).items()": "Frame.iter_window_array_items().reduce.from_func().items()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).values()": "Frame.iter_window_array_items().reduce.from_func().values()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window_array_items().reduce.from_func().to_frame()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).keys()": "Frame.iter_window_array_items().reduce.from_map_func().keys()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.iter_window_array_items().reduce.from_map_func().__iter__()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).items()": "Frame.iter_window_array_items().reduce.from_map_func().items()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).values()": "Frame.iter_window_array_items().reduce.from_map_func().values()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window_array_items().reduce.from_map_func().to_frame()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.iter_window_array_items().reduce.from_label_map().keys()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.iter_window_array_items().reduce.from_label_map().__iter__()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).items()": "Frame.iter_window_array_items().reduce.from_label_map().items()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).values()": "Frame.iter_window_array_items().reduce.from_label_map().values()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window_array_items().reduce.from_label_map().to_frame()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.iter_window_array_items().reduce.from_label_pair_map().keys()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.iter_window_array_items().reduce.from_label_pair_map().__iter__()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.iter_window_array_items().reduce.from_label_pair_map().items()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.iter_window_array_items().reduce.from_label_pair_map().values()", "Frame.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window_array_items().reduce.from_label_pair_map().to_frame()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "Frame.iter_window_items()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Frame.iter_window_items().apply()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "Frame.iter_window_items().apply_iter()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "Frame.iter_window_items().apply_iter_items()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Frame.iter_window_items().apply_pool()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).keys()": "Frame.iter_window_items().reduce.from_func().keys()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).__iter__()": "Frame.iter_window_items().reduce.from_func().__iter__()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).items()": "Frame.iter_window_items().reduce.from_func().items()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).values()": "Frame.iter_window_items().reduce.from_func().values()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window_items().reduce.from_func().to_frame()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).keys()": "Frame.iter_window_items().reduce.from_map_func().keys()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.iter_window_items().reduce.from_map_func().__iter__()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).items()": "Frame.iter_window_items().reduce.from_map_func().items()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).values()": "Frame.iter_window_items().reduce.from_map_func().values()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window_items().reduce.from_map_func().to_frame()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.iter_window_items().reduce.from_label_map().keys()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.iter_window_items().reduce.from_label_map().__iter__()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).items()": "Frame.iter_window_items().reduce.from_label_map().items()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).values()": "Frame.iter_window_items().reduce.from_label_map().values()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window_items().reduce.from_label_map().to_frame()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.iter_window_items().reduce.from_label_pair_map().keys()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.iter_window_items().reduce.from_label_pair_map().__iter__()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.iter_window_items().reduce.from_label_pair_map().items()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.iter_window_items().reduce.from_label_pair_map().values()", "Frame.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.iter_window_items().reduce.from_label_pair_map().to_frame()", "Frame.__add__(other)": "Frame.__add__()", "Frame.__and__(other)": "Frame.__and__()", "Frame.__eq__(other)": "Frame.__eq__()", "Frame.__floordiv__(other)": "Frame.__floordiv__()", "Frame.__ge__(other)": "Frame.__ge__()", "Frame.__gt__(other)": "Frame.__gt__()", "Frame.__le__(other)": "Frame.__le__()", "Frame.__lt__(other)": "Frame.__lt__()", "Frame.__matmul__(other)": "Frame.__matmul__()", "Frame.__mod__(other)": "Frame.__mod__()", "Frame.__mul__(other)": "Frame.__mul__()", "Frame.__ne__(other)": "Frame.__ne__()", "Frame.__or__(other)": "Frame.__or__()", "Frame.__pow__(other)": "Frame.__pow__()", "Frame.__radd__(other)": "Frame.__radd__()", "Frame.__rfloordiv__(other)": "Frame.__rfloordiv__()", "Frame.__rmatmul__(other)": "Frame.__rmatmul__()", "Frame.__rmul__(other)": "Frame.__rmul__()", "Frame.__rshift__(other)": "Frame.__rshift__()", "Frame.__rsub__(other)": "Frame.__rsub__()", "Frame.__rtruediv__(other)": "Frame.__rtruediv__()", "Frame.__sub__(other)": "Frame.__sub__()", "Frame.__truediv__(other)": "Frame.__truediv__()", "Frame.__xor__(other)": "Frame.__xor__()", "Frame.__abs__()": "Frame.__abs__()", "Frame.__invert__()": "Frame.__invert__()", "Frame.__neg__()": "Frame.__neg__()", "Frame.__pos__()": "Frame.__pos__()", "Frame.abs()": "Frame.abs()", "Frame.via_values.apply(func, *args, **kwargs)": "Frame.via_values.apply()", "Frame.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "Frame.via_values.__array_ufunc__()", "Frame.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "Frame.via_values.__call__()", "Frame.via_dt.__call__(*, fill_value)": "Frame.via_dt.__call__()", "Frame.via_dt.year": "Frame.via_dt.year", "Frame.via_dt.year_month": "Frame.via_dt.year_month", "Frame.via_dt.year_quarter": "Frame.via_dt.year_quarter", "Frame.via_dt.month": "Frame.via_dt.month", "Frame.via_dt.day": "Frame.via_dt.day", "Frame.via_dt.hour": "Frame.via_dt.hour", "Frame.via_dt.minute": "Frame.via_dt.minute", "Frame.via_dt.second": "Frame.via_dt.second", "Frame.via_dt.weekday()": "Frame.via_dt.weekday()", "Frame.via_dt.quarter()": "Frame.via_dt.quarter()", "Frame.via_dt.is_month_end()": "Frame.via_dt.is_month_end()", "Frame.via_dt.is_month_start()": "Frame.via_dt.is_month_start()", "Frame.via_dt.is_year_end()": "Frame.via_dt.is_year_end()", "Frame.via_dt.is_year_start()": "Frame.via_dt.is_year_start()", "Frame.via_dt.is_quarter_end()": "Frame.via_dt.is_quarter_end()", "Frame.via_dt.is_quarter_start()": "Frame.via_dt.is_quarter_start()", "Frame.via_dt.timetuple()": "Frame.via_dt.timetuple()", "Frame.via_dt.isoformat(sep, timespec)": "Frame.via_dt.isoformat()", "Frame.via_dt.fromisoformat()": "Frame.via_dt.fromisoformat()", "Frame.via_dt.strftime(format)": "Frame.via_dt.strftime()", "Frame.via_dt.strptime(format)": "Frame.via_dt.strptime()", "Frame.via_dt.strpdate(format)": "Frame.via_dt.strpdate()", "Frame.via_str.__getitem__(key)": "Frame.via_str.__getitem__()", "Frame.via_str.capitalize()": "Frame.via_str.capitalize()", "Frame.via_str.center(width, fillchar)": "Frame.via_str.center()", "Frame.via_str.contains(item)": "Frame.via_str.contains()", "Frame.via_str.count(sub, start, end)": "Frame.via_str.count()", "Frame.via_str.decode(encoding, errors)": "Frame.via_str.decode()", "Frame.via_str.encode(encoding, errors)": "Frame.via_str.encode()", "Frame.via_str.endswith(suffix, start, end)": "Frame.via_str.endswith()", "Frame.via_str.find(sub, start, end)": "Frame.via_str.find()", "Frame.via_str.format(format)": "Frame.via_str.format()", "Frame.via_str.index(sub, start, end)": "Frame.via_str.index()", "Frame.via_str.isalnum()": "Frame.via_str.isalnum()", "Frame.via_str.isalpha()": "Frame.via_str.isalpha()", "Frame.via_str.isdecimal()": "Frame.via_str.isdecimal()", "Frame.via_str.isdigit()": "Frame.via_str.isdigit()", "Frame.via_str.islower()": "Frame.via_str.islower()", "Frame.via_str.isnumeric()": "Frame.via_str.isnumeric()", "Frame.via_str.isspace()": "Frame.via_str.isspace()", "Frame.via_str.istitle()": "Frame.via_str.istitle()", "Frame.via_str.isupper()": "Frame.via_str.isupper()", "Frame.via_str.ljust(width, fillchar)": "Frame.via_str.ljust()", "Frame.via_str.len()": "Frame.via_str.len()", "Frame.via_str.lower()": "Frame.via_str.lower()", "Frame.via_str.lstrip(chars)": "Frame.via_str.lstrip()", "Frame.via_str.partition(sep)": "Frame.via_str.partition()", "Frame.via_str.replace(old, new, count)": "Frame.via_str.replace()", "Frame.via_str.rfind(sub, start, end)": "Frame.via_str.rfind()", "Frame.via_str.rindex(sub, start, end)": "Frame.via_str.rindex()", "Frame.via_str.rjust(width, fillchar)": "Frame.via_str.rjust()", "Frame.via_str.rpartition(sep)": "Frame.via_str.rpartition()", "Frame.via_str.rsplit(sep, maxsplit)": "Frame.via_str.rsplit()", "Frame.via_str.rstrip(chars)": "Frame.via_str.rstrip()", "Frame.via_str.split(sep, maxsplit)": "Frame.via_str.split()", "Frame.via_str.startswith(prefix, start, end)": "Frame.via_str.startswith()", "Frame.via_str.strip(chars)": "Frame.via_str.strip()", "Frame.via_str.swapcase()": "Frame.via_str.swapcase()", "Frame.via_str.title()": "Frame.via_str.title()", "Frame.via_str.upper()": "Frame.via_str.upper()", "Frame.via_str.zfill(width)": "Frame.via_str.zfill()", "Frame.via_T.via_fill_value(fill_value)": "Frame.via_T.via_fill_value()", "Frame.via_T.__add__(other)": "Frame.via_T.__add__()", "Frame.via_T.__sub__(other)": "Frame.via_T.__sub__()", "Frame.via_T.__mul__(other)": "Frame.via_T.__mul__()", "Frame.via_T.__truediv__(other)": "Frame.via_T.__truediv__()", "Frame.via_T.__floordiv__(other)": "Frame.via_T.__floordiv__()", "Frame.via_T.__mod__(other)": "Frame.via_T.__mod__()", "Frame.via_T.__pow__(other)": "Frame.via_T.__pow__()", "Frame.via_T.__lshift__(other)": "Frame.via_T.__lshift__()", "Frame.via_T.__rshift__(other)": "Frame.via_T.__rshift__()", "Frame.via_T.__and__(other)": "Frame.via_T.__and__()", "Frame.via_T.__xor__(other)": "Frame.via_T.__xor__()", "Frame.via_T.__or__(other)": "Frame.via_T.__or__()", "Frame.via_T.__lt__(other)": "Frame.via_T.__lt__()", "Frame.via_T.__le__(other)": "Frame.via_T.__le__()", "Frame.via_T.__eq__(other)": "Frame.via_T.__eq__()", "Frame.via_T.__ne__(other)": "Frame.via_T.__ne__()", "Frame.via_T.__gt__(other)": "Frame.via_T.__gt__()", "Frame.via_T.__ge__(other)": "Frame.via_T.__ge__()", "Frame.via_T.__radd__(other)": "Frame.via_T.__radd__()", "Frame.via_T.__rsub__(other)": "Frame.via_T.__rsub__()", "Frame.via_T.__rmul__(other)": "Frame.via_T.__rmul__()", "Frame.via_T.__rtruediv__(other)": "Frame.via_T.__rtruediv__()", "Frame.via_T.__rfloordiv__(other)": "Frame.via_T.__rfloordiv__()", "Frame.via_fill_value(fill_value).loc": "Frame.via_fill_value().loc", "Frame.via_fill_value(fill_value).__getitem__(key)": "Frame.via_fill_value().__getitem__()", "Frame.via_fill_value(fill_value).via_T": "Frame.via_fill_value().via_T", "Frame.via_fill_value(fill_value).__add__(other)": "Frame.via_fill_value().__add__()", "Frame.via_fill_value(fill_value).__sub__(other)": "Frame.via_fill_value().__sub__()", "Frame.via_fill_value(fill_value).__mul__(other)": "Frame.via_fill_value().__mul__()", "Frame.via_fill_value(fill_value).__truediv__(other)": "Frame.via_fill_value().__truediv__()", "Frame.via_fill_value(fill_value).__floordiv__(other)": "Frame.via_fill_value().__floordiv__()", "Frame.via_fill_value(fill_value).__mod__(other)": "Frame.via_fill_value().__mod__()", "Frame.via_fill_value(fill_value).__pow__(other)": "Frame.via_fill_value().__pow__()", "Frame.via_fill_value(fill_value).__lshift__(other)": "Frame.via_fill_value().__lshift__()", "Frame.via_fill_value(fill_value).__rshift__(other)": "Frame.via_fill_value().__rshift__()", "Frame.via_fill_value(fill_value).__and__(other)": "Frame.via_fill_value().__and__()", "Frame.via_fill_value(fill_value).__xor__(other)": "Frame.via_fill_value().__xor__()", "Frame.via_fill_value(fill_value).__or__(other)": "Frame.via_fill_value().__or__()", "Frame.via_fill_value(fill_value).__lt__(other)": "Frame.via_fill_value().__lt__()", "Frame.via_fill_value(fill_value).__le__(other)": "Frame.via_fill_value().__le__()", "Frame.via_fill_value(fill_value).__eq__(other)": "Frame.via_fill_value().__eq__()", "Frame.via_fill_value(fill_value).__ne__(other)": "Frame.via_fill_value().__ne__()", "Frame.via_fill_value(fill_value).__gt__(other)": "Frame.via_fill_value().__gt__()", "Frame.via_fill_value(fill_value).__ge__(other)": "Frame.via_fill_value().__ge__()", "Frame.via_fill_value(fill_value).__radd__(other)": "Frame.via_fill_value().__radd__()", "Frame.via_fill_value(fill_value).__rsub__(other)": "Frame.via_fill_value().__rsub__()", "Frame.via_fill_value(fill_value).__rmul__(other)": "Frame.via_fill_value().__rmul__()", "Frame.via_fill_value(fill_value).__rtruediv__(other)": "Frame.via_fill_value().__rtruediv__()", "Frame.via_fill_value(fill_value).__rfloordiv__(other)": "Frame.via_fill_value().__rfloordiv__()", "Frame.via_re(pattern, flags).search(pos, endpos)": "Frame.via_re().search()", "Frame.via_re(pattern, flags).match(pos, endpos)": "Frame.via_re().match()", "Frame.via_re(pattern, flags).fullmatch(pos, endpos)": "Frame.via_re().fullmatch()", "Frame.via_re(pattern, flags).split(maxsplit)": "Frame.via_re().split()", "Frame.via_re(pattern, flags).findall(pos, endpos)": "Frame.via_re().findall()", "Frame.via_re(pattern, flags).sub(repl, count)": "Frame.via_re().sub()", "Frame.via_re(pattern, flags).subn(repl, count)": "Frame.via_re().subn()", "Frame.via_hashlib(include_name, include_class, encoding).to_bytes()": "Frame.via_hashlib().to_bytes()", "Frame.via_hashlib(include_name, include_class, encoding).md5()": "Frame.via_hashlib().md5()", "Frame.via_hashlib(include_name, include_class, encoding).sha256()": "Frame.via_hashlib().sha256()", "Frame.via_hashlib(include_name, include_class, encoding).sha512()": "Frame.via_hashlib().sha512()", "Frame.via_hashlib(include_name, include_class, encoding).sha3_256()": "Frame.via_hashlib().sha3_256()", "Frame.via_hashlib(include_name, include_class, encoding).sha3_512()": "Frame.via_hashlib().sha3_512()", "Frame.via_hashlib(include_name, include_class, encoding).shake_128()": "Frame.via_hashlib().shake_128()", "Frame.via_hashlib(include_name, include_class, encoding).shake_256()": "Frame.via_hashlib().shake_256()", "Frame.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Frame.via_hashlib().blake2b()", "Frame.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Frame.via_hashlib().blake2s()", "Frame.via_type_clinic.to_hint()": "Frame.via_type_clinic.to_hint()", "Frame.via_type_clinic.check(hint, *, fail_fast)": "Frame.via_type_clinic.check()", "Frame.via_type_clinic.warn(hint, *, fail_fast, category)": "Frame.via_type_clinic.warn()", "Frame.via_type_clinic.__call__(hint, *, fail_fast)": "Frame.via_type_clinic.__call__()", "Frame.via_type_clinic.__repr__()": "Frame.via_type_clinic.__repr__()", "Frame.reduce.from_func(func, *, fill_value).keys()": "Frame.reduce.from_func().keys()", "Frame.reduce.from_func(func, *, fill_value).__iter__()": "Frame.reduce.from_func().__iter__()", "Frame.reduce.from_func(func, *, fill_value).items()": "Frame.reduce.from_func().items()", "Frame.reduce.from_func(func, *, fill_value).values()": "Frame.reduce.from_func().values()", "Frame.reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.reduce.from_func().to_frame()", "Frame.reduce.from_map_func(func, *, fill_value).keys()": "Frame.reduce.from_map_func().keys()", "Frame.reduce.from_map_func(func, *, fill_value).__iter__()": "Frame.reduce.from_map_func().__iter__()", "Frame.reduce.from_map_func(func, *, fill_value).items()": "Frame.reduce.from_map_func().items()", "Frame.reduce.from_map_func(func, *, fill_value).values()": "Frame.reduce.from_map_func().values()", "Frame.reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.reduce.from_map_func().to_frame()", "Frame.reduce.from_label_map(func_map, *, fill_value).keys()": "Frame.reduce.from_label_map().keys()", "Frame.reduce.from_label_map(func_map, *, fill_value).__iter__()": "Frame.reduce.from_label_map().__iter__()", "Frame.reduce.from_label_map(func_map, *, fill_value).items()": "Frame.reduce.from_label_map().items()", "Frame.reduce.from_label_map(func_map, *, fill_value).values()": "Frame.reduce.from_label_map().values()", "Frame.reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.reduce.from_label_map().to_frame()", "Frame.reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Frame.reduce.from_label_pair_map().keys()", "Frame.reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Frame.reduce.from_label_pair_map().__iter__()", "Frame.reduce.from_label_pair_map(func_map, *, fill_value).items()": "Frame.reduce.from_label_pair_map().items()", "Frame.reduce.from_label_pair_map(func_map, *, fill_value).values()": "Frame.reduce.from_label_pair_map().values()", "Frame.reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Frame.reduce.from_label_pair_map().to_frame()", "FrameGO.__init__(data, *, index, columns, name, index_constructor, columns_constructor, own_data, own_index, own_columns)": "FrameGO.__init__()", "FrameGO.from_arrow(value, *, index_depth, index_name_depth_level, index_constructors, columns_depth, columns_name_depth_level, columns_constructors, dtypes, name, consolidate_blocks)": "FrameGO.from_arrow()", "FrameGO.from_clipboard(*, delimiter, index_depth, index_column_first, index_name_depth_level, index_constructors, index_continuation_token, columns_depth, columns_name_depth_level, columns_constructors, columns_continuation_token, columns_select, skip_header, skip_footer, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, encoding, dtypes, name, consolidate_blocks, store_filter)": "FrameGO.from_clipboard()", "FrameGO.from_concat(frames, *, axis, union, index, columns, index_constructor, columns_constructor, name, fill_value, consolidate_blocks)": "FrameGO.from_concat()", "FrameGO.from_concat_items(items, *, axis, union, name, fill_value, index_constructor, columns_constructor, consolidate_blocks)": "FrameGO.from_concat_items()", "FrameGO.from_csv(fp, *, index_depth, index_column_first, index_name_depth_level, index_constructors, index_continuation_token, columns_depth, columns_name_depth_level, columns_constructors, columns_continuation_token, columns_select, skip_header, skip_footer, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, encoding, dtypes, name, consolidate_blocks, store_filter)": "FrameGO.from_csv()", "FrameGO.from_delimited(fp, *, delimiter, index_depth, index_column_first, index_name_depth_level, index_constructors, index_continuation_token, columns_depth, columns_name_depth_level, columns_constructors, columns_continuation_token, columns_select, skip_header, skip_footer, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, encoding, dtypes, name, consolidate_blocks, store_filter)": "FrameGO.from_delimited()", "FrameGO.from_dict(mapping, *, index, fill_value, dtypes, name, index_constructor, columns_constructor, consolidate_blocks)": "FrameGO.from_dict()", "FrameGO.from_dict_fields(fields, *, columns, dtypes, name, fill_value, consolidate_blocks, index_constructor, columns_constructor, own_index)": "FrameGO.from_dict_fields()", "FrameGO.from_dict_records(records, *, index, dtypes, name, fill_value, consolidate_blocks, index_constructor, columns_constructor, own_index)": "FrameGO.from_dict_records()", "FrameGO.from_dict_records_items(items, *, dtypes, name, consolidate_blocks)": "FrameGO.from_dict_records_items()", "FrameGO.from_duckdb(fp, *, label, index_depth, index_constructors, columns_depth, columns_constructors, consolidate_blocks)": "FrameGO.from_duckdb()", "FrameGO.from_element(element, *, index, columns, dtype, name, index_constructor, columns_constructor, own_index, own_columns)": "FrameGO.from_element()", "FrameGO.from_element_items(items, *, index, columns, dtype, axis, name, fill_value, index_constructor, columns_constructor, own_index, own_columns)": "FrameGO.from_element_items()", "FrameGO.from_elements(elements, *, index, columns, dtype, name, index_constructor, columns_constructor, own_index, own_columns)": "FrameGO.from_elements()", "FrameGO.from_fields(fields, *, index, columns, fill_value, dtypes, name, index_constructor, columns_constructor, own_index, own_columns, consolidate_blocks)": "FrameGO.from_fields()", "FrameGO.from_hdf5(fp, *, label, index_depth, index_constructors, columns_depth, columns_constructors, name, consolidate_blocks)": "FrameGO.from_hdf5()", "FrameGO.from_items(pairs, *, index, fill_value, dtypes, name, index_constructor, columns_constructor, consolidate_blocks)": "FrameGO.from_items()", "FrameGO.from_json_columns(json_data, *, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "FrameGO.from_json_columns()", "FrameGO.from_json_index(json_data, *, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "FrameGO.from_json_index()", "FrameGO.from_json_records(json_data, *, index, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "FrameGO.from_json_records()", "FrameGO.from_json_split(json_data, *, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "FrameGO.from_json_split()", "FrameGO.from_json_typed(json_data, *, consolidate_blocks)": "FrameGO.from_json_typed()", "FrameGO.from_json_values(json_data, *, index, columns, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "FrameGO.from_json_values()", "FrameGO.from_msgpack(msgpack_data)": "FrameGO.from_msgpack()", "FrameGO.from_npy(fp)": "FrameGO.from_npy()", "FrameGO.from_npy_mmap(fp)": "FrameGO.from_npy_mmap()", "FrameGO.from_npz(fp)": "FrameGO.from_npz()", "FrameGO.from_overlay(containers, *, index, columns, union, name, func, fill_value)": "FrameGO.from_overlay()", "FrameGO.from_pandas(value, *, index, index_constructor, columns, columns_constructor, dtypes, name, consolidate_blocks, own_data)": "FrameGO.from_pandas()", "FrameGO.from_parquet(fp, *, index_depth, index_name_depth_level, index_constructors, columns_depth, columns_name_depth_level, columns_constructors, columns_select, dtypes, name, consolidate_blocks)": "FrameGO.from_parquet()", "FrameGO.from_pickle(fp)": "FrameGO.from_pickle()", "FrameGO.from_records(records, *, index, columns, dtypes, name, consolidate_blocks, index_constructor, columns_constructor, own_index, own_columns)": "FrameGO.from_records()", "FrameGO.from_records_items(items, *, columns, dtypes, name, consolidate_blocks, index_constructor, columns_constructor, own_columns)": "FrameGO.from_records_items()", "FrameGO.from_series(series, *, name, columns_constructor)": "FrameGO.from_series()", "FrameGO.from_sql(query, *, connection, index_depth, index_constructors, columns_depth, columns_select, columns_constructors, dtypes, name, consolidate_blocks, parameters)": "FrameGO.from_sql()", "FrameGO.from_sqlite(fp, *, label, index_depth, index_constructors, columns_depth, columns_constructors, dtypes, name, consolidate_blocks)": "FrameGO.from_sqlite()", "FrameGO.from_structured_array(array, *, index_depth, index_column_first, index_constructors, columns_depth, columns_constructors, dtypes, name, consolidate_blocks, store_filter)": "FrameGO.from_structured_array()", "FrameGO.from_tsv(fp, *, index_depth, index_column_first, index_name_depth_level, index_constructors, index_continuation_token, columns_depth, columns_name_depth_level, columns_constructors, columns_continuation_token, columns_select, skip_header, skip_footer, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, encoding, dtypes, name, consolidate_blocks, store_filter)": "FrameGO.from_tsv()", "FrameGO.from_xlsx(fp, *, label, index_depth, index_name_depth_level, index_constructors, columns_depth, columns_name_depth_level, columns_constructors, dtypes, name, consolidate_blocks, skip_header, skip_footer, trim_nadir, store_filter)": "FrameGO.from_xlsx()", "FrameGO.to_arrow(*, include_index, include_index_name, include_columns, include_columns_name)": "FrameGO.to_arrow()", "FrameGO.to_clipboard(*, delimiter, include_index, include_index_name, include_columns, include_columns_name, encoding, line_terminator, quote_char, quote_double, escape_char, quoting, store_filter)": "FrameGO.to_clipboard()", "FrameGO.to_csv(fp, *, include_index, include_index_name, include_columns, include_columns_name, encoding, line_terminator, quoting, quote_char, quote_double, escape_char, store_filter)": "FrameGO.to_csv()", "FrameGO.to_delimited(fp, *, delimiter, include_index, include_index_name, include_columns, include_columns_name, encoding, line_terminator, quote_char, quote_double, escape_char, quoting, store_filter)": "FrameGO.to_delimited()", "FrameGO.to_duckdb(fp, *, label, include_index, include_columns)": "FrameGO.to_duckdb()", "FrameGO.to_frame(*, name)": "FrameGO.to_frame()", "FrameGO.to_frame_go(*, name)": "FrameGO.to_frame_go()", "FrameGO.to_frame_he(*, name)": "FrameGO.to_frame_he()", "FrameGO.to_hdf5(fp, *, label, include_index, include_columns)": "FrameGO.to_hdf5()", "FrameGO.to_html(config, style_config)": "FrameGO.to_html()", "FrameGO.to_html_datatables(fp, show, config)": "FrameGO.to_html_datatables()", "FrameGO.to_json_columns(indent)": "FrameGO.to_json_columns()", "FrameGO.to_json_index(indent)": "FrameGO.to_json_index()", "FrameGO.to_json_records(indent)": "FrameGO.to_json_records()", "FrameGO.to_json_split(indent)": "FrameGO.to_json_split()", "FrameGO.to_json_typed(indent)": "FrameGO.to_json_typed()", "FrameGO.to_json_values(indent)": "FrameGO.to_json_values()", "FrameGO.to_latex(config)": "FrameGO.to_latex()", "FrameGO.to_markdown(config)": "FrameGO.to_markdown()", "FrameGO.to_msgpack()": "FrameGO.to_msgpack()", "FrameGO.to_npy(fp, *, include_index, include_columns, consolidate_blocks)": "FrameGO.to_npy()", "FrameGO.to_npz(fp, *, include_index, include_columns, consolidate_blocks)": "FrameGO.to_npz()", "FrameGO.to_pairs(axis)": "FrameGO.to_pairs()", "FrameGO.to_pandas()": "FrameGO.to_pandas()", "FrameGO.to_parquet(fp, *, include_index, include_index_name, include_columns, include_columns_name)": "FrameGO.to_parquet()", "FrameGO.to_pickle(fp, *, protocol)": "FrameGO.to_pickle()", "FrameGO.to_rst(config)": "FrameGO.to_rst()", "FrameGO.to_series(*, index_constructor, name)": "FrameGO.to_series()", "FrameGO.to_sql(connection, *, label, include_index, schema, placeholder, dtype_to_type_decl)": "FrameGO.to_sql()", "FrameGO.to_sqlite(fp, *, label, include_index, include_columns)": "FrameGO.to_sqlite()", "FrameGO.to_tsv(fp, *, include_index, include_index_name, include_columns, include_columns_name, encoding, line_terminator, quote_char, quote_double, escape_char, quoting, store_filter)": "FrameGO.to_tsv()", "FrameGO.to_visidata()": "FrameGO.to_visidata()", "FrameGO.to_xarray()": "FrameGO.to_xarray()", "FrameGO.to_xlsx(fp, *, label, include_index, include_index_name, include_columns, include_columns_name, merge_hierarchical_labels, store_filter)": "FrameGO.to_xlsx()", "FrameGO.STATIC": "FrameGO.STATIC", "FrameGO.T": "FrameGO.T", "FrameGO.columns": "FrameGO.columns", "FrameGO.dtypes": "FrameGO.dtypes", "FrameGO.index": "FrameGO.index", "FrameGO.memory": "FrameGO.memory", "FrameGO.mloc": "FrameGO.mloc", "FrameGO.name": "FrameGO.name", "FrameGO.nbytes": "FrameGO.nbytes", "FrameGO.ndim": "FrameGO.ndim", "FrameGO.shape": "FrameGO.shape", "FrameGO.size": "FrameGO.size", "FrameGO.__array__(dtype)": "FrameGO.__array__()", "FrameGO.__array_ufunc__(ufunc, method, *args, **kwargs)": "FrameGO.__array_ufunc__()", "FrameGO.__bool__()": "FrameGO.__bool__()", "FrameGO.__dataframe__(nan_as_null, allow_copy)": "FrameGO.__dataframe__()", "FrameGO.__deepcopy__(memo)": "FrameGO.__deepcopy__()", "FrameGO.__len__()": "FrameGO.__len__()", "FrameGO.__round__(decimals)": "FrameGO.__round__()", "FrameGO.all(axis, skipna, out)": "FrameGO.all()", "FrameGO.any(axis, skipna, out)": "FrameGO.any()", "FrameGO.astype[key](dtypes, *, consolidate_blocks)": "FrameGO.astype[]()", "FrameGO.astype(dtype, *, consolidate_blocks)": "FrameGO.astype()", "FrameGO.clip(*, lower, upper, axis)": "FrameGO.clip()", "FrameGO.consolidate[key]": "FrameGO.consolidate[]", "FrameGO.consolidate()": "FrameGO.consolidate()", "FrameGO.consolidate.status": "FrameGO.consolidate.status", "FrameGO.corr(*, axis)": "FrameGO.corr()", "FrameGO.count(*, skipna, skipfalsy, unique, axis)": "FrameGO.count()", "FrameGO.cov(*, axis, ddof)": "FrameGO.cov()", "FrameGO.cumprod(axis, skipna)": "FrameGO.cumprod()", "FrameGO.cumsum(axis, skipna)": "FrameGO.cumsum()", "FrameGO.drop_duplicated(*, axis, exclude_first, exclude_last)": "FrameGO.drop_duplicated()", "FrameGO.dropfalsy(axis, condition)": "FrameGO.dropfalsy()", "FrameGO.dropna(axis, condition)": "FrameGO.dropna()", "FrameGO.duplicated(*, axis, exclude_first, exclude_last)": "FrameGO.duplicated()", "FrameGO.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "FrameGO.equals()", "FrameGO.extend(container, fill_value)": "FrameGO.extend()", "FrameGO.extend_items(pairs, fill_value)": "FrameGO.extend_items()", "FrameGO.fillfalsy(value)": "FrameGO.fillfalsy()", "FrameGO.fillfalsy_backward(limit, *, axis)": "FrameGO.fillfalsy_backward()", "FrameGO.fillfalsy_forward(limit, *, axis)": "FrameGO.fillfalsy_forward()", "FrameGO.fillfalsy_leading(value, *, axis)": "FrameGO.fillfalsy_leading()", "FrameGO.fillfalsy_trailing(value, *, axis)": "FrameGO.fillfalsy_trailing()", "FrameGO.fillna(value)": "FrameGO.fillna()", "FrameGO.fillna_backward(limit, *, axis)": "FrameGO.fillna_backward()", "FrameGO.fillna_forward(limit, *, axis)": "FrameGO.fillna_forward()", "FrameGO.fillna_leading(value, *, axis)": "FrameGO.fillna_leading()", "FrameGO.fillna_trailing(value, *, axis)": "FrameGO.fillna_trailing()", "FrameGO.head(count)": "FrameGO.head()", "FrameGO.iloc_max(*, skipna, axis)": "FrameGO.iloc_max()", "FrameGO.iloc_min(*, skipna, axis)": "FrameGO.iloc_min()", "FrameGO.iloc_notfalsy_first(*, fill_value, axis)": "FrameGO.iloc_notfalsy_first()", "FrameGO.iloc_notfalsy_last(*, fill_value, axis)": "FrameGO.iloc_notfalsy_last()", "FrameGO.iloc_notna_first(*, fill_value, axis)": "FrameGO.iloc_notna_first()", "FrameGO.iloc_notna_last(*, fill_value, axis)": "FrameGO.iloc_notna_last()", "FrameGO.insert_after(key, container, *, fill_value)": "FrameGO.insert_after()", "FrameGO.insert_before(key, container, *, fill_value)": "FrameGO.insert_before()", "FrameGO.isfalsy()": "FrameGO.isfalsy()", "FrameGO.isin(other)": "FrameGO.isin()", "FrameGO.isna()": "FrameGO.isna()", "FrameGO.join_inner(other, *, left_depth_level, left_columns, right_depth_level, right_columns, left_template, right_template, fill_value, include_index)": "FrameGO.join_inner()", "FrameGO.join_left(other, *, left_depth_level, left_columns, right_depth_level, right_columns, left_template, right_template, fill_value, include_index)": "FrameGO.join_left()", "FrameGO.join_outer(other, *, left_depth_level, left_columns, right_depth_level, right_columns, left_template, right_template, fill_value, include_index)": "FrameGO.join_outer()", "FrameGO.join_right(other, *, left_depth_level, left_columns, right_depth_level, right_columns, left_template, right_template, fill_value, include_index)": "FrameGO.join_right()", "FrameGO.loc_max(*, skipna, axis)": "FrameGO.loc_max()", "FrameGO.loc_min(*, skipna, axis)": "FrameGO.loc_min()", "FrameGO.loc_notfalsy_first(*, fill_value, axis)": "FrameGO.loc_notfalsy_first()", "FrameGO.loc_notfalsy_last(*, fill_value, axis)": "FrameGO.loc_notfalsy_last()", "FrameGO.loc_notna_first(*, fill_value, axis)": "FrameGO.loc_notna_first()", "FrameGO.loc_notna_last(*, fill_value, axis)": "FrameGO.loc_notna_last()", "FrameGO.max(axis, skipna, out)": "FrameGO.max()", "FrameGO.mean(axis, skipna, out)": "FrameGO.mean()", "FrameGO.median(axis, skipna, out)": "FrameGO.median()", "FrameGO.merge_inner(other, *, left_depth_level, left_columns, right_depth_level, right_columns, merge_labels, left_template, right_template, fill_value, include_index)": "FrameGO.merge_inner()", "FrameGO.merge_left(other, *, left_depth_level, left_columns, right_depth_level, right_columns, merge_labels, left_template, right_template, fill_value, include_index)": "FrameGO.merge_left()", "FrameGO.merge_outer(other, *, left_depth_level, left_columns, right_depth_level, right_columns, merge_labels, left_template, right_template, fill_value, include_index)": "FrameGO.merge_outer()", "FrameGO.merge_right(other, *, left_depth_level, left_columns, right_depth_level, right_columns, merge_labels, left_template, right_template, fill_value, include_index)": "FrameGO.merge_right()", "FrameGO.min(axis, skipna, out)": "FrameGO.min()", "FrameGO.notfalsy()": "FrameGO.notfalsy()", "FrameGO.notna()": "FrameGO.notna()", "FrameGO.pivot(index_fields, columns_fields, data_fields, *, func, fill_value, index_constructor)": "FrameGO.pivot()", "FrameGO.pivot_stack(depth_level, *, fill_value)": "FrameGO.pivot_stack()", "FrameGO.pivot_unstack(depth_level, *, fill_value)": "FrameGO.pivot_unstack()", "FrameGO.prod(axis, skipna, allna, out)": "FrameGO.prod()", "FrameGO.rank_dense(*, axis, skipna, ascending, start, fill_value)": "FrameGO.rank_dense()", "FrameGO.rank_max(*, axis, skipna, ascending, start, fill_value)": "FrameGO.rank_max()", "FrameGO.rank_mean(*, axis, skipna, ascending, start, fill_value)": "FrameGO.rank_mean()", "FrameGO.rank_min(*, axis, skipna, ascending, start, fill_value)": "FrameGO.rank_min()", "FrameGO.rank_ordinal(*, axis, skipna, ascending, start, fill_value)": "FrameGO.rank_ordinal()", "FrameGO.rehierarch(index, columns, *, index_constructors, columns_constructors)": "FrameGO.rehierarch()", "FrameGO.reindex(index, columns, *, fill_value, own_index, own_columns, check_equals)": "FrameGO.reindex()", "FrameGO.relabel(index, columns, *, index_constructor, columns_constructor)": "FrameGO.relabel()", "FrameGO.relabel_flat(index, columns)": "FrameGO.relabel_flat()", "FrameGO.relabel_level_add(index, columns, *, index_constructor, columns_constructor)": "FrameGO.relabel_level_add()", "FrameGO.relabel_level_drop(index, columns)": "FrameGO.relabel_level_drop()", "FrameGO.relabel_shift_in(key, *, axis, index_constructors)": "FrameGO.relabel_shift_in()", "FrameGO.relabel_shift_out(depth_level, *, axis)": "FrameGO.relabel_shift_out()", "FrameGO.rename(name, *, index, columns)": "FrameGO.rename()", "FrameGO.roll(index, columns, *, include_index, include_columns)": "FrameGO.roll()", "FrameGO.sample(index, columns, *, seed)": "FrameGO.sample()", "FrameGO.set_columns(index, *, drop, columns_constructor)": "FrameGO.set_columns()", "FrameGO.set_columns_hierarchy(index, *, drop, columns_constructors, reorder_for_hierarchy)": "FrameGO.set_columns_hierarchy()", "FrameGO.set_index(column, *, drop, index_constructor)": "FrameGO.set_index()", "FrameGO.set_index_hierarchy(columns, *, drop, index_constructors, reorder_for_hierarchy)": "FrameGO.set_index_hierarchy()", "FrameGO.shift(index, columns, *, fill_value)": "FrameGO.shift()", "FrameGO.sort_columns(*, ascending, kind, key)": "FrameGO.sort_columns()", "FrameGO.sort_index(*, ascending, kind, key)": "FrameGO.sort_index()", "FrameGO.sort_values(label, *, ascending, axis, kind, key)": "FrameGO.sort_values()", "FrameGO.std(axis, skipna, ddof, out)": "FrameGO.std()", "FrameGO.sum(axis, skipna, allna, out)": "FrameGO.sum()", "FrameGO.tail(count)": "FrameGO.tail()", "FrameGO.transpose()": "FrameGO.transpose()", "FrameGO.unique(*, axis)": "FrameGO.unique()", "FrameGO.unique_enumerated(*, retain_order, func)": "FrameGO.unique_enumerated()", "FrameGO.unset_columns(*, names, drop, index_constructors)": "FrameGO.unset_columns()", "FrameGO.unset_index(*, names, drop, consolidate_blocks, columns_constructors)": "FrameGO.unset_index()", "FrameGO.var(axis, skipna, ddof, out)": "FrameGO.var()", "FrameGO.__contains__(value)": "FrameGO.__contains__()", "FrameGO.__iter__()": "FrameGO.__iter__()", "FrameGO.__reversed__()": "FrameGO.__reversed__()", "FrameGO.get(key, default)": "FrameGO.get()", "FrameGO.items()": "FrameGO.items()", "FrameGO.keys()": "FrameGO.keys()", "FrameGO.values": "FrameGO.values", "FrameGO.interface": "FrameGO.interface", "FrameGO.__repr__()": "FrameGO.__repr__()", "FrameGO.__str__()": "FrameGO.__str__()", "FrameGO.display(config, *, style_config)": "FrameGO.display()", "FrameGO.display_tall(config)": "FrameGO.display_tall()", "FrameGO.display_wide(config)": "FrameGO.display_wide()", "FrameGO.assign[key](value, *, fill_value)": "FrameGO.assign[]()", "FrameGO.assign[key].apply(func, *, fill_value)": "FrameGO.assign[].apply()", "FrameGO.assign[key].apply_element(func, *, dtype, fill_value)": "FrameGO.assign[].apply_element()", "FrameGO.assign[key].apply_element_items(func, *, dtype, fill_value)": "FrameGO.assign[].apply_element_items()", "FrameGO.assign.iloc[key](value, *, fill_value)": "FrameGO.assign.iloc[]()", "FrameGO.assign.iloc[key].apply(func, *, fill_value)": "FrameGO.assign.iloc[].apply()", "FrameGO.assign.iloc[key].apply_element(func, *, dtype, fill_value)": "FrameGO.assign.iloc[].apply_element()", "FrameGO.assign.iloc[key].apply_element_items(func, *, dtype, fill_value)": "FrameGO.assign.iloc[].apply_element_items()", "FrameGO.assign.loc[key](value, *, fill_value)": "FrameGO.assign.loc[]()", "FrameGO.assign.loc[key].apply(func, *, fill_value)": "FrameGO.assign.loc[].apply()", "FrameGO.assign.loc[key].apply_element(func, *, dtype, fill_value)": "FrameGO.assign.loc[].apply_element()", "FrameGO.assign.loc[key].apply_element_items(func, *, dtype, fill_value)": "FrameGO.assign.loc[].apply_element_items()", "FrameGO.assign.bloc[key](value, *, fill_value)": "FrameGO.assign.bloc[]()", "FrameGO.assign.bloc[key].apply(func, *, fill_value)": "FrameGO.assign.bloc[].apply()", "FrameGO.assign.bloc[key].apply_element(func, *, dtype, fill_value)": "FrameGO.assign.bloc[].apply_element()", "FrameGO.assign.bloc[key].apply_element_items(func, *, dtype, fill_value)": "FrameGO.assign.bloc[].apply_element_items()", "FrameGO.bloc[key]": "FrameGO.bloc[]", "FrameGO.drop[key]": "FrameGO.drop[]", "FrameGO.drop.iloc[key]": "FrameGO.drop.iloc[]", "FrameGO.drop.loc[key]": "FrameGO.drop.loc[]", "FrameGO.mask[key]": "FrameGO.mask[]", "FrameGO.mask.iloc[key]": "FrameGO.mask.iloc[]", "FrameGO.mask.loc[key]": "FrameGO.mask.loc[]", "FrameGO.masked_array[key]": "FrameGO.masked_array[]", "FrameGO.masked_array.iloc[key]": "FrameGO.masked_array.iloc[]", "FrameGO.masked_array.loc[key]": "FrameGO.masked_array.loc[]", "FrameGO.[key]": "FrameGO.[]", "FrameGO.iloc[key]": "FrameGO.iloc[]", "FrameGO.loc[key]": "FrameGO.loc[]", "FrameGO.iter_array(*, axis)": "FrameGO.iter_array()", "FrameGO.iter_array(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_array().apply()", "FrameGO.iter_array(*, axis).apply_iter(func)": "FrameGO.iter_array().apply_iter()", "FrameGO.iter_array(*, axis).apply_iter_items(func)": "FrameGO.iter_array().apply_iter_items()", "FrameGO.iter_array(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_array().apply_pool()", "FrameGO.iter_array_items(*, axis)": "FrameGO.iter_array_items()", "FrameGO.iter_array_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_array_items().apply()", "FrameGO.iter_array_items(*, axis).apply_iter(func)": "FrameGO.iter_array_items().apply_iter()", "FrameGO.iter_array_items(*, axis).apply_iter_items(func)": "FrameGO.iter_array_items().apply_iter_items()", "FrameGO.iter_array_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_array_items().apply_pool()", "FrameGO.iter_element(*, axis)": "FrameGO.iter_element()", "FrameGO.iter_element(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_element().apply()", "FrameGO.iter_element(*, axis).apply_iter(func)": "FrameGO.iter_element().apply_iter()", "FrameGO.iter_element(*, axis).apply_iter_items(func)": "FrameGO.iter_element().apply_iter_items()", "FrameGO.iter_element(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_element().apply_pool()", "FrameGO.iter_element(*, axis).map_all(mapping, *, dtype, name, index_constructor)": "FrameGO.iter_element().map_all()", "FrameGO.iter_element(*, axis).map_all_iter(mapping)": "FrameGO.iter_element().map_all_iter()", "FrameGO.iter_element(*, axis).map_all_iter_items(mapping)": "FrameGO.iter_element().map_all_iter_items()", "FrameGO.iter_element(*, axis).map_any(mapping, *, dtype, name, index_constructor)": "FrameGO.iter_element().map_any()", "FrameGO.iter_element(*, axis).map_any_iter(mapping)": "FrameGO.iter_element().map_any_iter()", "FrameGO.iter_element(*, axis).map_any_iter_items(mapping)": "FrameGO.iter_element().map_any_iter_items()", "FrameGO.iter_element(*, axis).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "FrameGO.iter_element().map_fill()", "FrameGO.iter_element(*, axis).map_fill_iter(mapping, *, fill_value)": "FrameGO.iter_element().map_fill_iter()", "FrameGO.iter_element(*, axis).map_fill_iter_items(mapping, *, fill_value)": "FrameGO.iter_element().map_fill_iter_items()", "FrameGO.iter_element_items(*, axis)": "FrameGO.iter_element_items()", "FrameGO.iter_element_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_element_items().apply()", "FrameGO.iter_element_items(*, axis).apply_iter(func)": "FrameGO.iter_element_items().apply_iter()", "FrameGO.iter_element_items(*, axis).apply_iter_items(func)": "FrameGO.iter_element_items().apply_iter_items()", "FrameGO.iter_element_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_element_items().apply_pool()", "FrameGO.iter_element_items(*, axis).map_all(mapping, *, dtype, name, index_constructor)": "FrameGO.iter_element_items().map_all()", "FrameGO.iter_element_items(*, axis).map_all_iter(mapping)": "FrameGO.iter_element_items().map_all_iter()", "FrameGO.iter_element_items(*, axis).map_all_iter_items(mapping)": "FrameGO.iter_element_items().map_all_iter_items()", "FrameGO.iter_element_items(*, axis).map_any(mapping, *, dtype, name, index_constructor)": "FrameGO.iter_element_items().map_any()", "FrameGO.iter_element_items(*, axis).map_any_iter(mapping)": "FrameGO.iter_element_items().map_any_iter()", "FrameGO.iter_element_items(*, axis).map_any_iter_items(mapping)": "FrameGO.iter_element_items().map_any_iter_items()", "FrameGO.iter_element_items(*, axis).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "FrameGO.iter_element_items().map_fill()", "FrameGO.iter_element_items(*, axis).map_fill_iter(mapping, *, fill_value)": "FrameGO.iter_element_items().map_fill_iter()", "FrameGO.iter_element_items(*, axis).map_fill_iter_items(mapping, *, fill_value)": "FrameGO.iter_element_items().map_fill_iter_items()", "FrameGO.iter_group(key, *, axis, drop)": "FrameGO.iter_group()", "FrameGO.iter_group(key, *, axis, drop).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_group().apply()", "FrameGO.iter_group(key, *, axis, drop).apply_iter(func)": "FrameGO.iter_group().apply_iter()", "FrameGO.iter_group(key, *, axis, drop).apply_iter_items(func)": "FrameGO.iter_group().apply_iter_items()", "FrameGO.iter_group(key, *, axis, drop).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_group().apply_pool()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).keys()": "FrameGO.iter_group().reduce.from_func().keys()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.iter_group().reduce.from_func().__iter__()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).items()": "FrameGO.iter_group().reduce.from_func().items()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).values()": "FrameGO.iter_group().reduce.from_func().values()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group().reduce.from_func().to_frame()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.iter_group().reduce.from_map_func().keys()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.iter_group().reduce.from_map_func().__iter__()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).items()": "FrameGO.iter_group().reduce.from_map_func().items()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).values()": "FrameGO.iter_group().reduce.from_map_func().values()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group().reduce.from_map_func().to_frame()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.iter_group().reduce.from_label_map().keys()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group().reduce.from_label_map().__iter__()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.iter_group().reduce.from_label_map().items()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.iter_group().reduce.from_label_map().values()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group().reduce.from_label_map().to_frame()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.iter_group().reduce.from_label_pair_map().keys()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group().reduce.from_label_pair_map().__iter__()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.iter_group().reduce.from_label_pair_map().items()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.iter_group().reduce.from_label_pair_map().values()", "FrameGO.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group().reduce.from_label_pair_map().to_frame()", "FrameGO.iter_group_array(key, *, axis, drop)": "FrameGO.iter_group_array()", "FrameGO.iter_group_array(key, *, axis, drop).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_group_array().apply()", "FrameGO.iter_group_array(key, *, axis, drop).apply_iter(func)": "FrameGO.iter_group_array().apply_iter()", "FrameGO.iter_group_array(key, *, axis, drop).apply_iter_items(func)": "FrameGO.iter_group_array().apply_iter_items()", "FrameGO.iter_group_array(key, *, axis, drop).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_group_array().apply_pool()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).keys()": "FrameGO.iter_group_array().reduce.from_func().keys()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_array().reduce.from_func().__iter__()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).items()": "FrameGO.iter_group_array().reduce.from_func().items()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).values()": "FrameGO.iter_group_array().reduce.from_func().values()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_array().reduce.from_func().to_frame()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.iter_group_array().reduce.from_map_func().keys()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_array().reduce.from_map_func().__iter__()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).items()": "FrameGO.iter_group_array().reduce.from_map_func().items()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).values()": "FrameGO.iter_group_array().reduce.from_map_func().values()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_array().reduce.from_map_func().to_frame()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_array().reduce.from_label_map().keys()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_array().reduce.from_label_map().__iter__()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.iter_group_array().reduce.from_label_map().items()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.iter_group_array().reduce.from_label_map().values()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_array().reduce.from_label_map().to_frame()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_array().reduce.from_label_pair_map().keys()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_array().reduce.from_label_pair_map().__iter__()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.iter_group_array().reduce.from_label_pair_map().items()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.iter_group_array().reduce.from_label_pair_map().values()", "FrameGO.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_array().reduce.from_label_pair_map().to_frame()", "FrameGO.iter_group_array_items(key, *, axis, drop)": "FrameGO.iter_group_array_items()", "FrameGO.iter_group_array_items(key, *, axis, drop).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_group_array_items().apply()", "FrameGO.iter_group_array_items(key, *, axis, drop).apply_iter(func)": "FrameGO.iter_group_array_items().apply_iter()", "FrameGO.iter_group_array_items(key, *, axis, drop).apply_iter_items(func)": "FrameGO.iter_group_array_items().apply_iter_items()", "FrameGO.iter_group_array_items(key, *, axis, drop).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_group_array_items().apply_pool()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).keys()": "FrameGO.iter_group_array_items().reduce.from_func().keys()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_array_items().reduce.from_func().__iter__()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).items()": "FrameGO.iter_group_array_items().reduce.from_func().items()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).values()": "FrameGO.iter_group_array_items().reduce.from_func().values()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_array_items().reduce.from_func().to_frame()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.iter_group_array_items().reduce.from_map_func().keys()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_array_items().reduce.from_map_func().__iter__()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).items()": "FrameGO.iter_group_array_items().reduce.from_map_func().items()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).values()": "FrameGO.iter_group_array_items().reduce.from_map_func().values()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_array_items().reduce.from_map_func().to_frame()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_array_items().reduce.from_label_map().keys()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_array_items().reduce.from_label_map().__iter__()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.iter_group_array_items().reduce.from_label_map().items()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.iter_group_array_items().reduce.from_label_map().values()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_array_items().reduce.from_label_map().to_frame()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_array_items().reduce.from_label_pair_map().keys()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_array_items().reduce.from_label_pair_map().__iter__()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.iter_group_array_items().reduce.from_label_pair_map().items()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.iter_group_array_items().reduce.from_label_pair_map().values()", "FrameGO.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_array_items().reduce.from_label_pair_map().to_frame()", "FrameGO.iter_group_items(key, *, axis, drop)": "FrameGO.iter_group_items()", "FrameGO.iter_group_items(key, *, axis, drop).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_group_items().apply()", "FrameGO.iter_group_items(key, *, axis, drop).apply_iter(func)": "FrameGO.iter_group_items().apply_iter()", "FrameGO.iter_group_items(key, *, axis, drop).apply_iter_items(func)": "FrameGO.iter_group_items().apply_iter_items()", "FrameGO.iter_group_items(key, *, axis, drop).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_group_items().apply_pool()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).keys()": "FrameGO.iter_group_items().reduce.from_func().keys()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_items().reduce.from_func().__iter__()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).items()": "FrameGO.iter_group_items().reduce.from_func().items()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).values()": "FrameGO.iter_group_items().reduce.from_func().values()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_items().reduce.from_func().to_frame()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.iter_group_items().reduce.from_map_func().keys()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_items().reduce.from_map_func().__iter__()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).items()": "FrameGO.iter_group_items().reduce.from_map_func().items()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).values()": "FrameGO.iter_group_items().reduce.from_map_func().values()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_items().reduce.from_map_func().to_frame()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_items().reduce.from_label_map().keys()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_items().reduce.from_label_map().__iter__()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.iter_group_items().reduce.from_label_map().items()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.iter_group_items().reduce.from_label_map().values()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_items().reduce.from_label_map().to_frame()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_items().reduce.from_label_pair_map().keys()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_items().reduce.from_label_pair_map().__iter__()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.iter_group_items().reduce.from_label_pair_map().items()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.iter_group_items().reduce.from_label_pair_map().values()", "FrameGO.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_items().reduce.from_label_pair_map().to_frame()", "FrameGO.iter_group_labels(depth_level, *, axis)": "FrameGO.iter_group_labels()", "FrameGO.iter_group_labels(depth_level, *, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_group_labels().apply()", "FrameGO.iter_group_labels(depth_level, *, axis).apply_iter(func)": "FrameGO.iter_group_labels().apply_iter()", "FrameGO.iter_group_labels(depth_level, *, axis).apply_iter_items(func)": "FrameGO.iter_group_labels().apply_iter_items()", "FrameGO.iter_group_labels(depth_level, *, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_group_labels().apply_pool()", "FrameGO.iter_group_labels_array(depth_level, *, axis)": "FrameGO.iter_group_labels_array()", "FrameGO.iter_group_labels_array(depth_level, *, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_group_labels_array().apply()", "FrameGO.iter_group_labels_array(depth_level, *, axis).apply_iter(func)": "FrameGO.iter_group_labels_array().apply_iter()", "FrameGO.iter_group_labels_array(depth_level, *, axis).apply_iter_items(func)": "FrameGO.iter_group_labels_array().apply_iter_items()", "FrameGO.iter_group_labels_array(depth_level, *, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_group_labels_array().apply_pool()", "FrameGO.iter_group_labels_array_items(depth_level, *, axis)": "FrameGO.iter_group_labels_array_items()", "FrameGO.iter_group_labels_array_items(depth_level, *, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_group_labels_array_items().apply()", "FrameGO.iter_group_labels_array_items(depth_level, *, axis).apply_iter(func)": "FrameGO.iter_group_labels_array_items().apply_iter()", "FrameGO.iter_group_labels_array_items(depth_level, *, axis).apply_iter_items(func)": "FrameGO.iter_group_labels_array_items().apply_iter_items()", "FrameGO.iter_group_labels_array_items(depth_level, *, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_group_labels_array_items().apply_pool()", "FrameGO.iter_group_labels_items(depth_level, *, axis)": "FrameGO.iter_group_labels_items()", "FrameGO.iter_group_labels_items(depth_level, *, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_group_labels_items().apply()", "FrameGO.iter_group_labels_items(depth_level, *, axis).apply_iter(func)": "FrameGO.iter_group_labels_items().apply_iter()", "FrameGO.iter_group_labels_items(depth_level, *, axis).apply_iter_items(func)": "FrameGO.iter_group_labels_items().apply_iter_items()", "FrameGO.iter_group_labels_items(depth_level, *, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_group_labels_items().apply_pool()", "FrameGO.iter_group_other(other, *, fill_value, axis)": "FrameGO.iter_group_other()", "FrameGO.iter_group_other(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_group_other().apply()", "FrameGO.iter_group_other(other, *, fill_value, axis).apply_iter(func)": "FrameGO.iter_group_other().apply_iter()", "FrameGO.iter_group_other(other, *, fill_value, axis).apply_iter_items(func)": "FrameGO.iter_group_other().apply_iter_items()", "FrameGO.iter_group_other(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_group_other().apply_pool()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).keys()": "FrameGO.iter_group_other().reduce.from_func().keys()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_other().reduce.from_func().__iter__()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).items()": "FrameGO.iter_group_other().reduce.from_func().items()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).values()": "FrameGO.iter_group_other().reduce.from_func().values()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other().reduce.from_func().to_frame()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.iter_group_other().reduce.from_map_func().keys()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_other().reduce.from_map_func().__iter__()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).items()": "FrameGO.iter_group_other().reduce.from_map_func().items()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).values()": "FrameGO.iter_group_other().reduce.from_map_func().values()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other().reduce.from_map_func().to_frame()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_other().reduce.from_label_map().keys()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_other().reduce.from_label_map().__iter__()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.iter_group_other().reduce.from_label_map().items()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.iter_group_other().reduce.from_label_map().values()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other().reduce.from_label_map().to_frame()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_other().reduce.from_label_pair_map().keys()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_other().reduce.from_label_pair_map().__iter__()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.iter_group_other().reduce.from_label_pair_map().items()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.iter_group_other().reduce.from_label_pair_map().values()", "FrameGO.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other().reduce.from_label_pair_map().to_frame()", "FrameGO.iter_group_other_array(other, *, fill_value, axis)": "FrameGO.iter_group_other_array()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_group_other_array().apply()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).apply_iter(func)": "FrameGO.iter_group_other_array().apply_iter()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).apply_iter_items(func)": "FrameGO.iter_group_other_array().apply_iter_items()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_group_other_array().apply_pool()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).keys()": "FrameGO.iter_group_other_array().reduce.from_func().keys()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_other_array().reduce.from_func().__iter__()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).items()": "FrameGO.iter_group_other_array().reduce.from_func().items()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).values()": "FrameGO.iter_group_other_array().reduce.from_func().values()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other_array().reduce.from_func().to_frame()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.iter_group_other_array().reduce.from_map_func().keys()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_other_array().reduce.from_map_func().__iter__()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).items()": "FrameGO.iter_group_other_array().reduce.from_map_func().items()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).values()": "FrameGO.iter_group_other_array().reduce.from_map_func().values()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other_array().reduce.from_map_func().to_frame()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_other_array().reduce.from_label_map().keys()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_other_array().reduce.from_label_map().__iter__()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.iter_group_other_array().reduce.from_label_map().items()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.iter_group_other_array().reduce.from_label_map().values()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other_array().reduce.from_label_map().to_frame()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_other_array().reduce.from_label_pair_map().keys()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_other_array().reduce.from_label_pair_map().__iter__()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.iter_group_other_array().reduce.from_label_pair_map().items()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.iter_group_other_array().reduce.from_label_pair_map().values()", "FrameGO.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other_array().reduce.from_label_pair_map().to_frame()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis)": "FrameGO.iter_group_other_array_items()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_group_other_array_items().apply()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).apply_iter(func)": "FrameGO.iter_group_other_array_items().apply_iter()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).apply_iter_items(func)": "FrameGO.iter_group_other_array_items().apply_iter_items()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_group_other_array_items().apply_pool()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).keys()": "FrameGO.iter_group_other_array_items().reduce.from_func().keys()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_other_array_items().reduce.from_func().__iter__()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).items()": "FrameGO.iter_group_other_array_items().reduce.from_func().items()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).values()": "FrameGO.iter_group_other_array_items().reduce.from_func().values()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other_array_items().reduce.from_func().to_frame()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.iter_group_other_array_items().reduce.from_map_func().keys()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_other_array_items().reduce.from_map_func().__iter__()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).items()": "FrameGO.iter_group_other_array_items().reduce.from_map_func().items()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).values()": "FrameGO.iter_group_other_array_items().reduce.from_map_func().values()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other_array_items().reduce.from_map_func().to_frame()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_other_array_items().reduce.from_label_map().keys()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_other_array_items().reduce.from_label_map().__iter__()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.iter_group_other_array_items().reduce.from_label_map().items()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.iter_group_other_array_items().reduce.from_label_map().values()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other_array_items().reduce.from_label_map().to_frame()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_other_array_items().reduce.from_label_pair_map().keys()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_other_array_items().reduce.from_label_pair_map().__iter__()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.iter_group_other_array_items().reduce.from_label_pair_map().items()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.iter_group_other_array_items().reduce.from_label_pair_map().values()", "FrameGO.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other_array_items().reduce.from_label_pair_map().to_frame()", "FrameGO.iter_group_other_items(other, *, fill_value, axis)": "FrameGO.iter_group_other_items()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_group_other_items().apply()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).apply_iter(func)": "FrameGO.iter_group_other_items().apply_iter()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).apply_iter_items(func)": "FrameGO.iter_group_other_items().apply_iter_items()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_group_other_items().apply_pool()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).keys()": "FrameGO.iter_group_other_items().reduce.from_func().keys()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_other_items().reduce.from_func().__iter__()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).items()": "FrameGO.iter_group_other_items().reduce.from_func().items()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).values()": "FrameGO.iter_group_other_items().reduce.from_func().values()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other_items().reduce.from_func().to_frame()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.iter_group_other_items().reduce.from_map_func().keys()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.iter_group_other_items().reduce.from_map_func().__iter__()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).items()": "FrameGO.iter_group_other_items().reduce.from_map_func().items()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).values()": "FrameGO.iter_group_other_items().reduce.from_map_func().values()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other_items().reduce.from_map_func().to_frame()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_other_items().reduce.from_label_map().keys()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_other_items().reduce.from_label_map().__iter__()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.iter_group_other_items().reduce.from_label_map().items()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.iter_group_other_items().reduce.from_label_map().values()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other_items().reduce.from_label_map().to_frame()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.iter_group_other_items().reduce.from_label_pair_map().keys()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_group_other_items().reduce.from_label_pair_map().__iter__()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.iter_group_other_items().reduce.from_label_pair_map().items()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.iter_group_other_items().reduce.from_label_pair_map().values()", "FrameGO.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_group_other_items().reduce.from_label_pair_map().to_frame()", "FrameGO.iter_series(*, axis)": "FrameGO.iter_series()", "FrameGO.iter_series(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_series().apply()", "FrameGO.iter_series(*, axis).apply_iter(func)": "FrameGO.iter_series().apply_iter()", "FrameGO.iter_series(*, axis).apply_iter_items(func)": "FrameGO.iter_series().apply_iter_items()", "FrameGO.iter_series(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_series().apply_pool()", "FrameGO.iter_series_items(*, axis)": "FrameGO.iter_series_items()", "FrameGO.iter_series_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_series_items().apply()", "FrameGO.iter_series_items(*, axis).apply_iter(func)": "FrameGO.iter_series_items().apply_iter()", "FrameGO.iter_series_items(*, axis).apply_iter_items(func)": "FrameGO.iter_series_items().apply_iter_items()", "FrameGO.iter_series_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_series_items().apply_pool()", "FrameGO.iter_tuple(*, axis, constructor)": "FrameGO.iter_tuple()", "FrameGO.iter_tuple(*, axis, constructor).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_tuple().apply()", "FrameGO.iter_tuple(*, axis, constructor).apply_iter(func)": "FrameGO.iter_tuple().apply_iter()", "FrameGO.iter_tuple(*, axis, constructor).apply_iter_items(func)": "FrameGO.iter_tuple().apply_iter_items()", "FrameGO.iter_tuple(*, axis, constructor).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_tuple().apply_pool()", "FrameGO.iter_tuple(*, axis, constructor).map_all(mapping, *, dtype, name, index_constructor)": "FrameGO.iter_tuple().map_all()", "FrameGO.iter_tuple(*, axis, constructor).map_all_iter(mapping)": "FrameGO.iter_tuple().map_all_iter()", "FrameGO.iter_tuple(*, axis, constructor).map_all_iter_items(mapping)": "FrameGO.iter_tuple().map_all_iter_items()", "FrameGO.iter_tuple(*, axis, constructor).map_any(mapping, *, dtype, name, index_constructor)": "FrameGO.iter_tuple().map_any()", "FrameGO.iter_tuple(*, axis, constructor).map_any_iter(mapping)": "FrameGO.iter_tuple().map_any_iter()", "FrameGO.iter_tuple(*, axis, constructor).map_any_iter_items(mapping)": "FrameGO.iter_tuple().map_any_iter_items()", "FrameGO.iter_tuple(*, axis, constructor).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "FrameGO.iter_tuple().map_fill()", "FrameGO.iter_tuple(*, axis, constructor).map_fill_iter(mapping, *, fill_value)": "FrameGO.iter_tuple().map_fill_iter()", "FrameGO.iter_tuple(*, axis, constructor).map_fill_iter_items(mapping, *, fill_value)": "FrameGO.iter_tuple().map_fill_iter_items()", "FrameGO.iter_tuple_items(*, axis, constructor)": "FrameGO.iter_tuple_items()", "FrameGO.iter_tuple_items(*, axis, constructor).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_tuple_items().apply()", "FrameGO.iter_tuple_items(*, axis, constructor).apply_iter(func)": "FrameGO.iter_tuple_items().apply_iter()", "FrameGO.iter_tuple_items(*, axis, constructor).apply_iter_items(func)": "FrameGO.iter_tuple_items().apply_iter_items()", "FrameGO.iter_tuple_items(*, axis, constructor).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_tuple_items().apply_pool()", "FrameGO.iter_tuple_items(*, axis, constructor).map_all(mapping, *, dtype, name, index_constructor)": "FrameGO.iter_tuple_items().map_all()", "FrameGO.iter_tuple_items(*, axis, constructor).map_all_iter(mapping)": "FrameGO.iter_tuple_items().map_all_iter()", "FrameGO.iter_tuple_items(*, axis, constructor).map_all_iter_items(mapping)": "FrameGO.iter_tuple_items().map_all_iter_items()", "FrameGO.iter_tuple_items(*, axis, constructor).map_any(mapping, *, dtype, name, index_constructor)": "FrameGO.iter_tuple_items().map_any()", "FrameGO.iter_tuple_items(*, axis, constructor).map_any_iter(mapping)": "FrameGO.iter_tuple_items().map_any_iter()", "FrameGO.iter_tuple_items(*, axis, constructor).map_any_iter_items(mapping)": "FrameGO.iter_tuple_items().map_any_iter_items()", "FrameGO.iter_tuple_items(*, axis, constructor).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "FrameGO.iter_tuple_items().map_fill()", "FrameGO.iter_tuple_items(*, axis, constructor).map_fill_iter(mapping, *, fill_value)": "FrameGO.iter_tuple_items().map_fill_iter()", "FrameGO.iter_tuple_items(*, axis, constructor).map_fill_iter_items(mapping, *, fill_value)": "FrameGO.iter_tuple_items().map_fill_iter_items()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "FrameGO.iter_window()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_window().apply()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "FrameGO.iter_window().apply_iter()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "FrameGO.iter_window().apply_iter_items()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_window().apply_pool()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).keys()": "FrameGO.iter_window().reduce.from_func().keys()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.iter_window().reduce.from_func().__iter__()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).items()": "FrameGO.iter_window().reduce.from_func().items()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).values()": "FrameGO.iter_window().reduce.from_func().values()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window().reduce.from_func().to_frame()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.iter_window().reduce.from_map_func().keys()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.iter_window().reduce.from_map_func().__iter__()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).items()": "FrameGO.iter_window().reduce.from_map_func().items()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).values()": "FrameGO.iter_window().reduce.from_map_func().values()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window().reduce.from_map_func().to_frame()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.iter_window().reduce.from_label_map().keys()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_window().reduce.from_label_map().__iter__()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.iter_window().reduce.from_label_map().items()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.iter_window().reduce.from_label_map().values()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window().reduce.from_label_map().to_frame()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.iter_window().reduce.from_label_pair_map().keys()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_window().reduce.from_label_pair_map().__iter__()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.iter_window().reduce.from_label_pair_map().items()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.iter_window().reduce.from_label_pair_map().values()", "FrameGO.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window().reduce.from_label_pair_map().to_frame()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "FrameGO.iter_window_array()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_window_array().apply()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "FrameGO.iter_window_array().apply_iter()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "FrameGO.iter_window_array().apply_iter_items()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_window_array().apply_pool()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).keys()": "FrameGO.iter_window_array().reduce.from_func().keys()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.iter_window_array().reduce.from_func().__iter__()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).items()": "FrameGO.iter_window_array().reduce.from_func().items()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).values()": "FrameGO.iter_window_array().reduce.from_func().values()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window_array().reduce.from_func().to_frame()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.iter_window_array().reduce.from_map_func().keys()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.iter_window_array().reduce.from_map_func().__iter__()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).items()": "FrameGO.iter_window_array().reduce.from_map_func().items()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).values()": "FrameGO.iter_window_array().reduce.from_map_func().values()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window_array().reduce.from_map_func().to_frame()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.iter_window_array().reduce.from_label_map().keys()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_window_array().reduce.from_label_map().__iter__()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.iter_window_array().reduce.from_label_map().items()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.iter_window_array().reduce.from_label_map().values()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window_array().reduce.from_label_map().to_frame()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.iter_window_array().reduce.from_label_pair_map().keys()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_window_array().reduce.from_label_pair_map().__iter__()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.iter_window_array().reduce.from_label_pair_map().items()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.iter_window_array().reduce.from_label_pair_map().values()", "FrameGO.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window_array().reduce.from_label_pair_map().to_frame()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "FrameGO.iter_window_array_items()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_window_array_items().apply()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "FrameGO.iter_window_array_items().apply_iter()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "FrameGO.iter_window_array_items().apply_iter_items()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_window_array_items().apply_pool()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).keys()": "FrameGO.iter_window_array_items().reduce.from_func().keys()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.iter_window_array_items().reduce.from_func().__iter__()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).items()": "FrameGO.iter_window_array_items().reduce.from_func().items()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).values()": "FrameGO.iter_window_array_items().reduce.from_func().values()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window_array_items().reduce.from_func().to_frame()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.iter_window_array_items().reduce.from_map_func().keys()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.iter_window_array_items().reduce.from_map_func().__iter__()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).items()": "FrameGO.iter_window_array_items().reduce.from_map_func().items()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).values()": "FrameGO.iter_window_array_items().reduce.from_map_func().values()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window_array_items().reduce.from_map_func().to_frame()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.iter_window_array_items().reduce.from_label_map().keys()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_window_array_items().reduce.from_label_map().__iter__()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.iter_window_array_items().reduce.from_label_map().items()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.iter_window_array_items().reduce.from_label_map().values()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window_array_items().reduce.from_label_map().to_frame()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.iter_window_array_items().reduce.from_label_pair_map().keys()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_window_array_items().reduce.from_label_pair_map().__iter__()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.iter_window_array_items().reduce.from_label_pair_map().items()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.iter_window_array_items().reduce.from_label_pair_map().values()", "FrameGO.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window_array_items().reduce.from_label_pair_map().to_frame()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "FrameGO.iter_window_items()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameGO.iter_window_items().apply()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "FrameGO.iter_window_items().apply_iter()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "FrameGO.iter_window_items().apply_iter_items()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameGO.iter_window_items().apply_pool()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).keys()": "FrameGO.iter_window_items().reduce.from_func().keys()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.iter_window_items().reduce.from_func().__iter__()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).items()": "FrameGO.iter_window_items().reduce.from_func().items()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).values()": "FrameGO.iter_window_items().reduce.from_func().values()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window_items().reduce.from_func().to_frame()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.iter_window_items().reduce.from_map_func().keys()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.iter_window_items().reduce.from_map_func().__iter__()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).items()": "FrameGO.iter_window_items().reduce.from_map_func().items()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).values()": "FrameGO.iter_window_items().reduce.from_map_func().values()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window_items().reduce.from_map_func().to_frame()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.iter_window_items().reduce.from_label_map().keys()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_window_items().reduce.from_label_map().__iter__()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.iter_window_items().reduce.from_label_map().items()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.iter_window_items().reduce.from_label_map().values()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window_items().reduce.from_label_map().to_frame()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.iter_window_items().reduce.from_label_pair_map().keys()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.iter_window_items().reduce.from_label_pair_map().__iter__()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.iter_window_items().reduce.from_label_pair_map().items()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.iter_window_items().reduce.from_label_pair_map().values()", "FrameGO.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.iter_window_items().reduce.from_label_pair_map().to_frame()", "FrameGO.__add__(other)": "FrameGO.__add__()", "FrameGO.__and__(other)": "FrameGO.__and__()", "FrameGO.__eq__(other)": "FrameGO.__eq__()", "FrameGO.__floordiv__(other)": "FrameGO.__floordiv__()", "FrameGO.__ge__(other)": "FrameGO.__ge__()", "FrameGO.__gt__(other)": "FrameGO.__gt__()", "FrameGO.__le__(other)": "FrameGO.__le__()", "FrameGO.__lt__(other)": "FrameGO.__lt__()", "FrameGO.__matmul__(other)": "FrameGO.__matmul__()", "FrameGO.__mod__(other)": "FrameGO.__mod__()", "FrameGO.__mul__(other)": "FrameGO.__mul__()", "FrameGO.__ne__(other)": "FrameGO.__ne__()", "FrameGO.__or__(other)": "FrameGO.__or__()", "FrameGO.__pow__(other)": "FrameGO.__pow__()", "FrameGO.__radd__(other)": "FrameGO.__radd__()", "FrameGO.__rfloordiv__(other)": "FrameGO.__rfloordiv__()", "FrameGO.__rmatmul__(other)": "FrameGO.__rmatmul__()", "FrameGO.__rmul__(other)": "FrameGO.__rmul__()", "FrameGO.__rshift__(other)": "FrameGO.__rshift__()", "FrameGO.__rsub__(other)": "FrameGO.__rsub__()", "FrameGO.__rtruediv__(other)": "FrameGO.__rtruediv__()", "FrameGO.__sub__(other)": "FrameGO.__sub__()", "FrameGO.__truediv__(other)": "FrameGO.__truediv__()", "FrameGO.__xor__(other)": "FrameGO.__xor__()", "FrameGO.__abs__()": "FrameGO.__abs__()", "FrameGO.__invert__()": "FrameGO.__invert__()", "FrameGO.__neg__()": "FrameGO.__neg__()", "FrameGO.__pos__()": "FrameGO.__pos__()", "FrameGO.abs()": "FrameGO.abs()", "FrameGO.via_values.apply(func, *args, **kwargs)": "FrameGO.via_values.apply()", "FrameGO.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "FrameGO.via_values.__array_ufunc__()", "FrameGO.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "FrameGO.via_values.__call__()", "FrameGO.via_dt.__call__(*, fill_value)": "FrameGO.via_dt.__call__()", "FrameGO.via_dt.year": "FrameGO.via_dt.year", "FrameGO.via_dt.year_month": "FrameGO.via_dt.year_month", "FrameGO.via_dt.year_quarter": "FrameGO.via_dt.year_quarter", "FrameGO.via_dt.month": "FrameGO.via_dt.month", "FrameGO.via_dt.day": "FrameGO.via_dt.day", "FrameGO.via_dt.hour": "FrameGO.via_dt.hour", "FrameGO.via_dt.minute": "FrameGO.via_dt.minute", "FrameGO.via_dt.second": "FrameGO.via_dt.second", "FrameGO.via_dt.weekday()": "FrameGO.via_dt.weekday()", "FrameGO.via_dt.quarter()": "FrameGO.via_dt.quarter()", "FrameGO.via_dt.is_month_end()": "FrameGO.via_dt.is_month_end()", "FrameGO.via_dt.is_month_start()": "FrameGO.via_dt.is_month_start()", "FrameGO.via_dt.is_year_end()": "FrameGO.via_dt.is_year_end()", "FrameGO.via_dt.is_year_start()": "FrameGO.via_dt.is_year_start()", "FrameGO.via_dt.is_quarter_end()": "FrameGO.via_dt.is_quarter_end()", "FrameGO.via_dt.is_quarter_start()": "FrameGO.via_dt.is_quarter_start()", "FrameGO.via_dt.timetuple()": "FrameGO.via_dt.timetuple()", "FrameGO.via_dt.isoformat(sep, timespec)": "FrameGO.via_dt.isoformat()", "FrameGO.via_dt.fromisoformat()": "FrameGO.via_dt.fromisoformat()", "FrameGO.via_dt.strftime(format)": "FrameGO.via_dt.strftime()", "FrameGO.via_dt.strptime(format)": "FrameGO.via_dt.strptime()", "FrameGO.via_dt.strpdate(format)": "FrameGO.via_dt.strpdate()", "FrameGO.via_str.__getitem__(key)": "FrameGO.via_str.__getitem__()", "FrameGO.via_str.capitalize()": "FrameGO.via_str.capitalize()", "FrameGO.via_str.center(width, fillchar)": "FrameGO.via_str.center()", "FrameGO.via_str.contains(item)": "FrameGO.via_str.contains()", "FrameGO.via_str.count(sub, start, end)": "FrameGO.via_str.count()", "FrameGO.via_str.decode(encoding, errors)": "FrameGO.via_str.decode()", "FrameGO.via_str.encode(encoding, errors)": "FrameGO.via_str.encode()", "FrameGO.via_str.endswith(suffix, start, end)": "FrameGO.via_str.endswith()", "FrameGO.via_str.find(sub, start, end)": "FrameGO.via_str.find()", "FrameGO.via_str.format(format)": "FrameGO.via_str.format()", "FrameGO.via_str.index(sub, start, end)": "FrameGO.via_str.index()", "FrameGO.via_str.isalnum()": "FrameGO.via_str.isalnum()", "FrameGO.via_str.isalpha()": "FrameGO.via_str.isalpha()", "FrameGO.via_str.isdecimal()": "FrameGO.via_str.isdecimal()", "FrameGO.via_str.isdigit()": "FrameGO.via_str.isdigit()", "FrameGO.via_str.islower()": "FrameGO.via_str.islower()", "FrameGO.via_str.isnumeric()": "FrameGO.via_str.isnumeric()", "FrameGO.via_str.isspace()": "FrameGO.via_str.isspace()", "FrameGO.via_str.istitle()": "FrameGO.via_str.istitle()", "FrameGO.via_str.isupper()": "FrameGO.via_str.isupper()", "FrameGO.via_str.ljust(width, fillchar)": "FrameGO.via_str.ljust()", "FrameGO.via_str.len()": "FrameGO.via_str.len()", "FrameGO.via_str.lower()": "FrameGO.via_str.lower()", "FrameGO.via_str.lstrip(chars)": "FrameGO.via_str.lstrip()", "FrameGO.via_str.partition(sep)": "FrameGO.via_str.partition()", "FrameGO.via_str.replace(old, new, count)": "FrameGO.via_str.replace()", "FrameGO.via_str.rfind(sub, start, end)": "FrameGO.via_str.rfind()", "FrameGO.via_str.rindex(sub, start, end)": "FrameGO.via_str.rindex()", "FrameGO.via_str.rjust(width, fillchar)": "FrameGO.via_str.rjust()", "FrameGO.via_str.rpartition(sep)": "FrameGO.via_str.rpartition()", "FrameGO.via_str.rsplit(sep, maxsplit)": "FrameGO.via_str.rsplit()", "FrameGO.via_str.rstrip(chars)": "FrameGO.via_str.rstrip()", "FrameGO.via_str.split(sep, maxsplit)": "FrameGO.via_str.split()", "FrameGO.via_str.startswith(prefix, start, end)": "FrameGO.via_str.startswith()", "FrameGO.via_str.strip(chars)": "FrameGO.via_str.strip()", "FrameGO.via_str.swapcase()": "FrameGO.via_str.swapcase()", "FrameGO.via_str.title()": "FrameGO.via_str.title()", "FrameGO.via_str.upper()": "FrameGO.via_str.upper()", "FrameGO.via_str.zfill(width)": "FrameGO.via_str.zfill()", "FrameGO.via_T.via_fill_value(fill_value)": "FrameGO.via_T.via_fill_value()", "FrameGO.via_T.__add__(other)": "FrameGO.via_T.__add__()", "FrameGO.via_T.__sub__(other)": "FrameGO.via_T.__sub__()", "FrameGO.via_T.__mul__(other)": "FrameGO.via_T.__mul__()", "FrameGO.via_T.__truediv__(other)": "FrameGO.via_T.__truediv__()", "FrameGO.via_T.__floordiv__(other)": "FrameGO.via_T.__floordiv__()", "FrameGO.via_T.__mod__(other)": "FrameGO.via_T.__mod__()", "FrameGO.via_T.__pow__(other)": "FrameGO.via_T.__pow__()", "FrameGO.via_T.__lshift__(other)": "FrameGO.via_T.__lshift__()", "FrameGO.via_T.__rshift__(other)": "FrameGO.via_T.__rshift__()", "FrameGO.via_T.__and__(other)": "FrameGO.via_T.__and__()", "FrameGO.via_T.__xor__(other)": "FrameGO.via_T.__xor__()", "FrameGO.via_T.__or__(other)": "FrameGO.via_T.__or__()", "FrameGO.via_T.__lt__(other)": "FrameGO.via_T.__lt__()", "FrameGO.via_T.__le__(other)": "FrameGO.via_T.__le__()", "FrameGO.via_T.__eq__(other)": "FrameGO.via_T.__eq__()", "FrameGO.via_T.__ne__(other)": "FrameGO.via_T.__ne__()", "FrameGO.via_T.__gt__(other)": "FrameGO.via_T.__gt__()", "FrameGO.via_T.__ge__(other)": "FrameGO.via_T.__ge__()", "FrameGO.via_T.__radd__(other)": "FrameGO.via_T.__radd__()", "FrameGO.via_T.__rsub__(other)": "FrameGO.via_T.__rsub__()", "FrameGO.via_T.__rmul__(other)": "FrameGO.via_T.__rmul__()", "FrameGO.via_T.__rtruediv__(other)": "FrameGO.via_T.__rtruediv__()", "FrameGO.via_T.__rfloordiv__(other)": "FrameGO.via_T.__rfloordiv__()", "FrameGO.via_fill_value(fill_value).loc": "FrameGO.via_fill_value().loc", "FrameGO.via_fill_value(fill_value).__getitem__(key)": "FrameGO.via_fill_value().__getitem__()", "FrameGO.via_fill_value(fill_value).via_T": "FrameGO.via_fill_value().via_T", "FrameGO.via_fill_value(fill_value).__add__(other)": "FrameGO.via_fill_value().__add__()", "FrameGO.via_fill_value(fill_value).__sub__(other)": "FrameGO.via_fill_value().__sub__()", "FrameGO.via_fill_value(fill_value).__mul__(other)": "FrameGO.via_fill_value().__mul__()", "FrameGO.via_fill_value(fill_value).__truediv__(other)": "FrameGO.via_fill_value().__truediv__()", "FrameGO.via_fill_value(fill_value).__floordiv__(other)": "FrameGO.via_fill_value().__floordiv__()", "FrameGO.via_fill_value(fill_value).__mod__(other)": "FrameGO.via_fill_value().__mod__()", "FrameGO.via_fill_value(fill_value).__pow__(other)": "FrameGO.via_fill_value().__pow__()", "FrameGO.via_fill_value(fill_value).__lshift__(other)": "FrameGO.via_fill_value().__lshift__()", "FrameGO.via_fill_value(fill_value).__rshift__(other)": "FrameGO.via_fill_value().__rshift__()", "FrameGO.via_fill_value(fill_value).__and__(other)": "FrameGO.via_fill_value().__and__()", "FrameGO.via_fill_value(fill_value).__xor__(other)": "FrameGO.via_fill_value().__xor__()", "FrameGO.via_fill_value(fill_value).__or__(other)": "FrameGO.via_fill_value().__or__()", "FrameGO.via_fill_value(fill_value).__lt__(other)": "FrameGO.via_fill_value().__lt__()", "FrameGO.via_fill_value(fill_value).__le__(other)": "FrameGO.via_fill_value().__le__()", "FrameGO.via_fill_value(fill_value).__eq__(other)": "FrameGO.via_fill_value().__eq__()", "FrameGO.via_fill_value(fill_value).__ne__(other)": "FrameGO.via_fill_value().__ne__()", "FrameGO.via_fill_value(fill_value).__gt__(other)": "FrameGO.via_fill_value().__gt__()", "FrameGO.via_fill_value(fill_value).__ge__(other)": "FrameGO.via_fill_value().__ge__()", "FrameGO.via_fill_value(fill_value).__radd__(other)": "FrameGO.via_fill_value().__radd__()", "FrameGO.via_fill_value(fill_value).__rsub__(other)": "FrameGO.via_fill_value().__rsub__()", "FrameGO.via_fill_value(fill_value).__rmul__(other)": "FrameGO.via_fill_value().__rmul__()", "FrameGO.via_fill_value(fill_value).__rtruediv__(other)": "FrameGO.via_fill_value().__rtruediv__()", "FrameGO.via_fill_value(fill_value).__rfloordiv__(other)": "FrameGO.via_fill_value().__rfloordiv__()", "FrameGO.via_re(pattern, flags).search(pos, endpos)": "FrameGO.via_re().search()", "FrameGO.via_re(pattern, flags).match(pos, endpos)": "FrameGO.via_re().match()", "FrameGO.via_re(pattern, flags).fullmatch(pos, endpos)": "FrameGO.via_re().fullmatch()", "FrameGO.via_re(pattern, flags).split(maxsplit)": "FrameGO.via_re().split()", "FrameGO.via_re(pattern, flags).findall(pos, endpos)": "FrameGO.via_re().findall()", "FrameGO.via_re(pattern, flags).sub(repl, count)": "FrameGO.via_re().sub()", "FrameGO.via_re(pattern, flags).subn(repl, count)": "FrameGO.via_re().subn()", "FrameGO.via_hashlib(include_name, include_class, encoding).to_bytes()": "FrameGO.via_hashlib().to_bytes()", "FrameGO.via_hashlib(include_name, include_class, encoding).md5()": "FrameGO.via_hashlib().md5()", "FrameGO.via_hashlib(include_name, include_class, encoding).sha256()": "FrameGO.via_hashlib().sha256()", "FrameGO.via_hashlib(include_name, include_class, encoding).sha512()": "FrameGO.via_hashlib().sha512()", "FrameGO.via_hashlib(include_name, include_class, encoding).sha3_256()": "FrameGO.via_hashlib().sha3_256()", "FrameGO.via_hashlib(include_name, include_class, encoding).sha3_512()": "FrameGO.via_hashlib().sha3_512()", "FrameGO.via_hashlib(include_name, include_class, encoding).shake_128()": "FrameGO.via_hashlib().shake_128()", "FrameGO.via_hashlib(include_name, include_class, encoding).shake_256()": "FrameGO.via_hashlib().shake_256()", "FrameGO.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "FrameGO.via_hashlib().blake2b()", "FrameGO.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "FrameGO.via_hashlib().blake2s()", "FrameGO.via_type_clinic.to_hint()": "FrameGO.via_type_clinic.to_hint()", "FrameGO.via_type_clinic.check(hint, *, fail_fast)": "FrameGO.via_type_clinic.check()", "FrameGO.via_type_clinic.warn(hint, *, fail_fast, category)": "FrameGO.via_type_clinic.warn()", "FrameGO.via_type_clinic.__call__(hint, *, fail_fast)": "FrameGO.via_type_clinic.__call__()", "FrameGO.via_type_clinic.__repr__()": "FrameGO.via_type_clinic.__repr__()", "FrameGO.reduce.from_func(func, *, fill_value).keys()": "FrameGO.reduce.from_func().keys()", "FrameGO.reduce.from_func(func, *, fill_value).__iter__()": "FrameGO.reduce.from_func().__iter__()", "FrameGO.reduce.from_func(func, *, fill_value).items()": "FrameGO.reduce.from_func().items()", "FrameGO.reduce.from_func(func, *, fill_value).values()": "FrameGO.reduce.from_func().values()", "FrameGO.reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.reduce.from_func().to_frame()", "FrameGO.reduce.from_map_func(func, *, fill_value).keys()": "FrameGO.reduce.from_map_func().keys()", "FrameGO.reduce.from_map_func(func, *, fill_value).__iter__()": "FrameGO.reduce.from_map_func().__iter__()", "FrameGO.reduce.from_map_func(func, *, fill_value).items()": "FrameGO.reduce.from_map_func().items()", "FrameGO.reduce.from_map_func(func, *, fill_value).values()": "FrameGO.reduce.from_map_func().values()", "FrameGO.reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.reduce.from_map_func().to_frame()", "FrameGO.reduce.from_label_map(func_map, *, fill_value).keys()": "FrameGO.reduce.from_label_map().keys()", "FrameGO.reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameGO.reduce.from_label_map().__iter__()", "FrameGO.reduce.from_label_map(func_map, *, fill_value).items()": "FrameGO.reduce.from_label_map().items()", "FrameGO.reduce.from_label_map(func_map, *, fill_value).values()": "FrameGO.reduce.from_label_map().values()", "FrameGO.reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.reduce.from_label_map().to_frame()", "FrameGO.reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameGO.reduce.from_label_pair_map().keys()", "FrameGO.reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameGO.reduce.from_label_pair_map().__iter__()", "FrameGO.reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameGO.reduce.from_label_pair_map().items()", "FrameGO.reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameGO.reduce.from_label_pair_map().values()", "FrameGO.reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameGO.reduce.from_label_pair_map().to_frame()", "FrameHE.__init__(data, *, index, columns, name, index_constructor, columns_constructor, own_data, own_index, own_columns)": "FrameHE.__init__()", "FrameHE.from_arrow(value, *, index_depth, index_name_depth_level, index_constructors, columns_depth, columns_name_depth_level, columns_constructors, dtypes, name, consolidate_blocks)": "FrameHE.from_arrow()", "FrameHE.from_clipboard(*, delimiter, index_depth, index_column_first, index_name_depth_level, index_constructors, index_continuation_token, columns_depth, columns_name_depth_level, columns_constructors, columns_continuation_token, columns_select, skip_header, skip_footer, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, encoding, dtypes, name, consolidate_blocks, store_filter)": "FrameHE.from_clipboard()", "FrameHE.from_concat(frames, *, axis, union, index, columns, index_constructor, columns_constructor, name, fill_value, consolidate_blocks)": "FrameHE.from_concat()", "FrameHE.from_concat_items(items, *, axis, union, name, fill_value, index_constructor, columns_constructor, consolidate_blocks)": "FrameHE.from_concat_items()", "FrameHE.from_csv(fp, *, index_depth, index_column_first, index_name_depth_level, index_constructors, index_continuation_token, columns_depth, columns_name_depth_level, columns_constructors, columns_continuation_token, columns_select, skip_header, skip_footer, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, encoding, dtypes, name, consolidate_blocks, store_filter)": "FrameHE.from_csv()", "FrameHE.from_delimited(fp, *, delimiter, index_depth, index_column_first, index_name_depth_level, index_constructors, index_continuation_token, columns_depth, columns_name_depth_level, columns_constructors, columns_continuation_token, columns_select, skip_header, skip_footer, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, encoding, dtypes, name, consolidate_blocks, store_filter)": "FrameHE.from_delimited()", "FrameHE.from_dict(mapping, *, index, fill_value, dtypes, name, index_constructor, columns_constructor, consolidate_blocks)": "FrameHE.from_dict()", "FrameHE.from_dict_fields(fields, *, columns, dtypes, name, fill_value, consolidate_blocks, index_constructor, columns_constructor, own_index)": "FrameHE.from_dict_fields()", "FrameHE.from_dict_records(records, *, index, dtypes, name, fill_value, consolidate_blocks, index_constructor, columns_constructor, own_index)": "FrameHE.from_dict_records()", "FrameHE.from_dict_records_items(items, *, dtypes, name, consolidate_blocks)": "FrameHE.from_dict_records_items()", "FrameHE.from_duckdb(fp, *, label, index_depth, index_constructors, columns_depth, columns_constructors, consolidate_blocks)": "FrameHE.from_duckdb()", "FrameHE.from_element(element, *, index, columns, dtype, name, index_constructor, columns_constructor, own_index, own_columns)": "FrameHE.from_element()", "FrameHE.from_element_items(items, *, index, columns, dtype, axis, name, fill_value, index_constructor, columns_constructor, own_index, own_columns)": "FrameHE.from_element_items()", "FrameHE.from_elements(elements, *, index, columns, dtype, name, index_constructor, columns_constructor, own_index, own_columns)": "FrameHE.from_elements()", "FrameHE.from_fields(fields, *, index, columns, fill_value, dtypes, name, index_constructor, columns_constructor, own_index, own_columns, consolidate_blocks)": "FrameHE.from_fields()", "FrameHE.from_hdf5(fp, *, label, index_depth, index_constructors, columns_depth, columns_constructors, name, consolidate_blocks)": "FrameHE.from_hdf5()", "FrameHE.from_items(pairs, *, index, fill_value, dtypes, name, index_constructor, columns_constructor, consolidate_blocks)": "FrameHE.from_items()", "FrameHE.from_json_columns(json_data, *, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "FrameHE.from_json_columns()", "FrameHE.from_json_index(json_data, *, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "FrameHE.from_json_index()", "FrameHE.from_json_records(json_data, *, index, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "FrameHE.from_json_records()", "FrameHE.from_json_split(json_data, *, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "FrameHE.from_json_split()", "FrameHE.from_json_typed(json_data, *, consolidate_blocks)": "FrameHE.from_json_typed()", "FrameHE.from_json_values(json_data, *, index, columns, dtypes, name, consolidate_blocks, index_constructor, columns_constructor)": "FrameHE.from_json_values()", "FrameHE.from_msgpack(msgpack_data)": "FrameHE.from_msgpack()", "FrameHE.from_npy(fp)": "FrameHE.from_npy()", "FrameHE.from_npy_mmap(fp)": "FrameHE.from_npy_mmap()", "FrameHE.from_npz(fp)": "FrameHE.from_npz()", "FrameHE.from_overlay(containers, *, index, columns, union, name, func, fill_value)": "FrameHE.from_overlay()", "FrameHE.from_pandas(value, *, index, index_constructor, columns, columns_constructor, dtypes, name, consolidate_blocks, own_data)": "FrameHE.from_pandas()", "FrameHE.from_parquet(fp, *, index_depth, index_name_depth_level, index_constructors, columns_depth, columns_name_depth_level, columns_constructors, columns_select, dtypes, name, consolidate_blocks)": "FrameHE.from_parquet()", "FrameHE.from_pickle(fp)": "FrameHE.from_pickle()", "FrameHE.from_records(records, *, index, columns, dtypes, name, consolidate_blocks, index_constructor, columns_constructor, own_index, own_columns)": "FrameHE.from_records()", "FrameHE.from_records_items(items, *, columns, dtypes, name, consolidate_blocks, index_constructor, columns_constructor, own_columns)": "FrameHE.from_records_items()", "FrameHE.from_series(series, *, name, columns_constructor)": "FrameHE.from_series()", "FrameHE.from_sql(query, *, connection, index_depth, index_constructors, columns_depth, columns_select, columns_constructors, dtypes, name, consolidate_blocks, parameters)": "FrameHE.from_sql()", "FrameHE.from_sqlite(fp, *, label, index_depth, index_constructors, columns_depth, columns_constructors, dtypes, name, consolidate_blocks)": "FrameHE.from_sqlite()", "FrameHE.from_structured_array(array, *, index_depth, index_column_first, index_constructors, columns_depth, columns_constructors, dtypes, name, consolidate_blocks, store_filter)": "FrameHE.from_structured_array()", "FrameHE.from_tsv(fp, *, index_depth, index_column_first, index_name_depth_level, index_constructors, index_continuation_token, columns_depth, columns_name_depth_level, columns_constructors, columns_continuation_token, columns_select, skip_header, skip_footer, skip_initial_space, quoting, quote_char, quote_double, escape_char, thousands_char, decimal_char, encoding, dtypes, name, consolidate_blocks, store_filter)": "FrameHE.from_tsv()", "FrameHE.from_xlsx(fp, *, label, index_depth, index_name_depth_level, index_constructors, columns_depth, columns_name_depth_level, columns_constructors, dtypes, name, consolidate_blocks, skip_header, skip_footer, trim_nadir, store_filter)": "FrameHE.from_xlsx()", "FrameHE.to_arrow(*, include_index, include_index_name, include_columns, include_columns_name)": "FrameHE.to_arrow()", "FrameHE.to_clipboard(*, delimiter, include_index, include_index_name, include_columns, include_columns_name, encoding, line_terminator, quote_char, quote_double, escape_char, quoting, store_filter)": "FrameHE.to_clipboard()", "FrameHE.to_csv(fp, *, include_index, include_index_name, include_columns, include_columns_name, encoding, line_terminator, quoting, quote_char, quote_double, escape_char, store_filter)": "FrameHE.to_csv()", "FrameHE.to_delimited(fp, *, delimiter, include_index, include_index_name, include_columns, include_columns_name, encoding, line_terminator, quote_char, quote_double, escape_char, quoting, store_filter)": "FrameHE.to_delimited()", "FrameHE.to_duckdb(fp, *, label, include_index, include_columns)": "FrameHE.to_duckdb()", "FrameHE.to_frame(*, name)": "FrameHE.to_frame()", "FrameHE.to_frame_go(*, name)": "FrameHE.to_frame_go()", "FrameHE.to_frame_he(*, name)": "FrameHE.to_frame_he()", "FrameHE.to_hdf5(fp, *, label, include_index, include_columns)": "FrameHE.to_hdf5()", "FrameHE.to_html(config, style_config)": "FrameHE.to_html()", "FrameHE.to_html_datatables(fp, show, config)": "FrameHE.to_html_datatables()", "FrameHE.to_json_columns(indent)": "FrameHE.to_json_columns()", "FrameHE.to_json_index(indent)": "FrameHE.to_json_index()", "FrameHE.to_json_records(indent)": "FrameHE.to_json_records()", "FrameHE.to_json_split(indent)": "FrameHE.to_json_split()", "FrameHE.to_json_typed(indent)": "FrameHE.to_json_typed()", "FrameHE.to_json_values(indent)": "FrameHE.to_json_values()", "FrameHE.to_latex(config)": "FrameHE.to_latex()", "FrameHE.to_markdown(config)": "FrameHE.to_markdown()", "FrameHE.to_msgpack()": "FrameHE.to_msgpack()", "FrameHE.to_npy(fp, *, include_index, include_columns, consolidate_blocks)": "FrameHE.to_npy()", "FrameHE.to_npz(fp, *, include_index, include_columns, consolidate_blocks)": "FrameHE.to_npz()", "FrameHE.to_pairs(axis)": "FrameHE.to_pairs()", "FrameHE.to_pandas()": "FrameHE.to_pandas()", "FrameHE.to_parquet(fp, *, include_index, include_index_name, include_columns, include_columns_name)": "FrameHE.to_parquet()", "FrameHE.to_pickle(fp, *, protocol)": "FrameHE.to_pickle()", "FrameHE.to_rst(config)": "FrameHE.to_rst()", "FrameHE.to_series(*, index_constructor, name)": "FrameHE.to_series()", "FrameHE.to_sql(connection, *, label, include_index, schema, placeholder, dtype_to_type_decl)": "FrameHE.to_sql()", "FrameHE.to_sqlite(fp, *, label, include_index, include_columns)": "FrameHE.to_sqlite()", "FrameHE.to_tsv(fp, *, include_index, include_index_name, include_columns, include_columns_name, encoding, line_terminator, quote_char, quote_double, escape_char, quoting, store_filter)": "FrameHE.to_tsv()", "FrameHE.to_visidata()": "FrameHE.to_visidata()", "FrameHE.to_xarray()": "FrameHE.to_xarray()", "FrameHE.to_xlsx(fp, *, label, include_index, include_index_name, include_columns, include_columns_name, merge_hierarchical_labels, store_filter)": "FrameHE.to_xlsx()", "FrameHE.STATIC": "FrameHE.STATIC", "FrameHE.T": "FrameHE.T", "FrameHE.columns": "FrameHE.columns", "FrameHE.dtypes": "FrameHE.dtypes", "FrameHE.index": "FrameHE.index", "FrameHE.memory": "FrameHE.memory", "FrameHE.mloc": "FrameHE.mloc", "FrameHE.name": "FrameHE.name", "FrameHE.nbytes": "FrameHE.nbytes", "FrameHE.ndim": "FrameHE.ndim", "FrameHE.shape": "FrameHE.shape", "FrameHE.size": "FrameHE.size", "FrameHE.__array__(dtype)": "FrameHE.__array__()", "FrameHE.__array_ufunc__(ufunc, method, *args, **kwargs)": "FrameHE.__array_ufunc__()", "FrameHE.__bool__()": "FrameHE.__bool__()", "FrameHE.__dataframe__(nan_as_null, allow_copy)": "FrameHE.__dataframe__()", "FrameHE.__deepcopy__(memo)": "FrameHE.__deepcopy__()", "FrameHE.__len__()": "FrameHE.__len__()", "FrameHE.__round__(decimals)": "FrameHE.__round__()", "FrameHE.all(axis, skipna, out)": "FrameHE.all()", "FrameHE.any(axis, skipna, out)": "FrameHE.any()", "FrameHE.astype[key](dtypes, *, consolidate_blocks)": "FrameHE.astype[]()", "FrameHE.astype(dtype, *, consolidate_blocks)": "FrameHE.astype()", "FrameHE.clip(*, lower, upper, axis)": "FrameHE.clip()", "FrameHE.consolidate[key]": "FrameHE.consolidate[]", "FrameHE.consolidate()": "FrameHE.consolidate()", "FrameHE.consolidate.status": "FrameHE.consolidate.status", "FrameHE.corr(*, axis)": "FrameHE.corr()", "FrameHE.count(*, skipna, skipfalsy, unique, axis)": "FrameHE.count()", "FrameHE.cov(*, axis, ddof)": "FrameHE.cov()", "FrameHE.cumprod(axis, skipna)": "FrameHE.cumprod()", "FrameHE.cumsum(axis, skipna)": "FrameHE.cumsum()", "FrameHE.drop_duplicated(*, axis, exclude_first, exclude_last)": "FrameHE.drop_duplicated()", "FrameHE.dropfalsy(axis, condition)": "FrameHE.dropfalsy()", "FrameHE.dropna(axis, condition)": "FrameHE.dropna()", "FrameHE.duplicated(*, axis, exclude_first, exclude_last)": "FrameHE.duplicated()", "FrameHE.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "FrameHE.equals()", "FrameHE.fillfalsy(value)": "FrameHE.fillfalsy()", "FrameHE.fillfalsy_backward(limit, *, axis)": "FrameHE.fillfalsy_backward()", "FrameHE.fillfalsy_forward(limit, *, axis)": "FrameHE.fillfalsy_forward()", "FrameHE.fillfalsy_leading(value, *, axis)": "FrameHE.fillfalsy_leading()", "FrameHE.fillfalsy_trailing(value, *, axis)": "FrameHE.fillfalsy_trailing()", "FrameHE.fillna(value)": "FrameHE.fillna()", "FrameHE.fillna_backward(limit, *, axis)": "FrameHE.fillna_backward()", "FrameHE.fillna_forward(limit, *, axis)": "FrameHE.fillna_forward()", "FrameHE.fillna_leading(value, *, axis)": "FrameHE.fillna_leading()", "FrameHE.fillna_trailing(value, *, axis)": "FrameHE.fillna_trailing()", "FrameHE.head(count)": "FrameHE.head()", "FrameHE.iloc_max(*, skipna, axis)": "FrameHE.iloc_max()", "FrameHE.iloc_min(*, skipna, axis)": "FrameHE.iloc_min()", "FrameHE.iloc_notfalsy_first(*, fill_value, axis)": "FrameHE.iloc_notfalsy_first()", "FrameHE.iloc_notfalsy_last(*, fill_value, axis)": "FrameHE.iloc_notfalsy_last()", "FrameHE.iloc_notna_first(*, fill_value, axis)": "FrameHE.iloc_notna_first()", "FrameHE.iloc_notna_last(*, fill_value, axis)": "FrameHE.iloc_notna_last()", "FrameHE.insert_after(key, container, *, fill_value)": "FrameHE.insert_after()", "FrameHE.insert_before(key, container, *, fill_value)": "FrameHE.insert_before()", "FrameHE.isfalsy()": "FrameHE.isfalsy()", "FrameHE.isin(other)": "FrameHE.isin()", "FrameHE.isna()": "FrameHE.isna()", "FrameHE.join_inner(other, *, left_depth_level, left_columns, right_depth_level, right_columns, left_template, right_template, fill_value, include_index)": "FrameHE.join_inner()", "FrameHE.join_left(other, *, left_depth_level, left_columns, right_depth_level, right_columns, left_template, right_template, fill_value, include_index)": "FrameHE.join_left()", "FrameHE.join_outer(other, *, left_depth_level, left_columns, right_depth_level, right_columns, left_template, right_template, fill_value, include_index)": "FrameHE.join_outer()", "FrameHE.join_right(other, *, left_depth_level, left_columns, right_depth_level, right_columns, left_template, right_template, fill_value, include_index)": "FrameHE.join_right()", "FrameHE.loc_max(*, skipna, axis)": "FrameHE.loc_max()", "FrameHE.loc_min(*, skipna, axis)": "FrameHE.loc_min()", "FrameHE.loc_notfalsy_first(*, fill_value, axis)": "FrameHE.loc_notfalsy_first()", "FrameHE.loc_notfalsy_last(*, fill_value, axis)": "FrameHE.loc_notfalsy_last()", "FrameHE.loc_notna_first(*, fill_value, axis)": "FrameHE.loc_notna_first()", "FrameHE.loc_notna_last(*, fill_value, axis)": "FrameHE.loc_notna_last()", "FrameHE.max(axis, skipna, out)": "FrameHE.max()", "FrameHE.mean(axis, skipna, out)": "FrameHE.mean()", "FrameHE.median(axis, skipna, out)": "FrameHE.median()", "FrameHE.merge_inner(other, *, left_depth_level, left_columns, right_depth_level, right_columns, merge_labels, left_template, right_template, fill_value, include_index)": "FrameHE.merge_inner()", "FrameHE.merge_left(other, *, left_depth_level, left_columns, right_depth_level, right_columns, merge_labels, left_template, right_template, fill_value, include_index)": "FrameHE.merge_left()", "FrameHE.merge_outer(other, *, left_depth_level, left_columns, right_depth_level, right_columns, merge_labels, left_template, right_template, fill_value, include_index)": "FrameHE.merge_outer()", "FrameHE.merge_right(other, *, left_depth_level, left_columns, right_depth_level, right_columns, merge_labels, left_template, right_template, fill_value, include_index)": "FrameHE.merge_right()", "FrameHE.min(axis, skipna, out)": "FrameHE.min()", "FrameHE.notfalsy()": "FrameHE.notfalsy()", "FrameHE.notna()": "FrameHE.notna()", "FrameHE.pivot(index_fields, columns_fields, data_fields, *, func, fill_value, index_constructor)": "FrameHE.pivot()", "FrameHE.pivot_stack(depth_level, *, fill_value)": "FrameHE.pivot_stack()", "FrameHE.pivot_unstack(depth_level, *, fill_value)": "FrameHE.pivot_unstack()", "FrameHE.prod(axis, skipna, allna, out)": "FrameHE.prod()", "FrameHE.rank_dense(*, axis, skipna, ascending, start, fill_value)": "FrameHE.rank_dense()", "FrameHE.rank_max(*, axis, skipna, ascending, start, fill_value)": "FrameHE.rank_max()", "FrameHE.rank_mean(*, axis, skipna, ascending, start, fill_value)": "FrameHE.rank_mean()", "FrameHE.rank_min(*, axis, skipna, ascending, start, fill_value)": "FrameHE.rank_min()", "FrameHE.rank_ordinal(*, axis, skipna, ascending, start, fill_value)": "FrameHE.rank_ordinal()", "FrameHE.rehierarch(index, columns, *, index_constructors, columns_constructors)": "FrameHE.rehierarch()", "FrameHE.reindex(index, columns, *, fill_value, own_index, own_columns, check_equals)": "FrameHE.reindex()", "FrameHE.relabel(index, columns, *, index_constructor, columns_constructor)": "FrameHE.relabel()", "FrameHE.relabel_flat(index, columns)": "FrameHE.relabel_flat()", "FrameHE.relabel_level_add(index, columns, *, index_constructor, columns_constructor)": "FrameHE.relabel_level_add()", "FrameHE.relabel_level_drop(index, columns)": "FrameHE.relabel_level_drop()", "FrameHE.relabel_shift_in(key, *, axis, index_constructors)": "FrameHE.relabel_shift_in()", "FrameHE.relabel_shift_out(depth_level, *, axis)": "FrameHE.relabel_shift_out()", "FrameHE.rename(name, *, index, columns)": "FrameHE.rename()", "FrameHE.roll(index, columns, *, include_index, include_columns)": "FrameHE.roll()", "FrameHE.sample(index, columns, *, seed)": "FrameHE.sample()", "FrameHE.set_columns(index, *, drop, columns_constructor)": "FrameHE.set_columns()", "FrameHE.set_columns_hierarchy(index, *, drop, columns_constructors, reorder_for_hierarchy)": "FrameHE.set_columns_hierarchy()", "FrameHE.set_index(column, *, drop, index_constructor)": "FrameHE.set_index()", "FrameHE.set_index_hierarchy(columns, *, drop, index_constructors, reorder_for_hierarchy)": "FrameHE.set_index_hierarchy()", "FrameHE.shift(index, columns, *, fill_value)": "FrameHE.shift()", "FrameHE.sort_columns(*, ascending, kind, key)": "FrameHE.sort_columns()", "FrameHE.sort_index(*, ascending, kind, key)": "FrameHE.sort_index()", "FrameHE.sort_values(label, *, ascending, axis, kind, key)": "FrameHE.sort_values()", "FrameHE.std(axis, skipna, ddof, out)": "FrameHE.std()", "FrameHE.sum(axis, skipna, allna, out)": "FrameHE.sum()", "FrameHE.tail(count)": "FrameHE.tail()", "FrameHE.transpose()": "FrameHE.transpose()", "FrameHE.unique(*, axis)": "FrameHE.unique()", "FrameHE.unique_enumerated(*, retain_order, func)": "FrameHE.unique_enumerated()", "FrameHE.unset_columns(*, names, drop, index_constructors)": "FrameHE.unset_columns()", "FrameHE.unset_index(*, names, drop, consolidate_blocks, columns_constructors)": "FrameHE.unset_index()", "FrameHE.var(axis, skipna, ddof, out)": "FrameHE.var()", "FrameHE.__contains__(value)": "FrameHE.__contains__()", "FrameHE.__iter__()": "FrameHE.__iter__()", "FrameHE.__reversed__()": "FrameHE.__reversed__()", "FrameHE.get(key, default)": "FrameHE.get()", "FrameHE.items()": "FrameHE.items()", "FrameHE.keys()": "FrameHE.keys()", "FrameHE.values": "FrameHE.values", "FrameHE.interface": "FrameHE.interface", "FrameHE.__repr__()": "FrameHE.__repr__()", "FrameHE.__str__()": "FrameHE.__str__()", "FrameHE.display(config, *, style_config)": "FrameHE.display()", "FrameHE.display_tall(config)": "FrameHE.display_tall()", "FrameHE.display_wide(config)": "FrameHE.display_wide()", "FrameHE.assign[key](value, *, fill_value)": "FrameHE.assign[]()", "FrameHE.assign[key].apply(func, *, fill_value)": "FrameHE.assign[].apply()", "FrameHE.assign[key].apply_element(func, *, dtype, fill_value)": "FrameHE.assign[].apply_element()", "FrameHE.assign[key].apply_element_items(func, *, dtype, fill_value)": "FrameHE.assign[].apply_element_items()", "FrameHE.assign.iloc[key](value, *, fill_value)": "FrameHE.assign.iloc[]()", "FrameHE.assign.iloc[key].apply(func, *, fill_value)": "FrameHE.assign.iloc[].apply()", "FrameHE.assign.iloc[key].apply_element(func, *, dtype, fill_value)": "FrameHE.assign.iloc[].apply_element()", "FrameHE.assign.iloc[key].apply_element_items(func, *, dtype, fill_value)": "FrameHE.assign.iloc[].apply_element_items()", "FrameHE.assign.loc[key](value, *, fill_value)": "FrameHE.assign.loc[]()", "FrameHE.assign.loc[key].apply(func, *, fill_value)": "FrameHE.assign.loc[].apply()", "FrameHE.assign.loc[key].apply_element(func, *, dtype, fill_value)": "FrameHE.assign.loc[].apply_element()", "FrameHE.assign.loc[key].apply_element_items(func, *, dtype, fill_value)": "FrameHE.assign.loc[].apply_element_items()", "FrameHE.assign.bloc[key](value, *, fill_value)": "FrameHE.assign.bloc[]()", "FrameHE.assign.bloc[key].apply(func, *, fill_value)": "FrameHE.assign.bloc[].apply()", "FrameHE.assign.bloc[key].apply_element(func, *, dtype, fill_value)": "FrameHE.assign.bloc[].apply_element()", "FrameHE.assign.bloc[key].apply_element_items(func, *, dtype, fill_value)": "FrameHE.assign.bloc[].apply_element_items()", "FrameHE.bloc[key]": "FrameHE.bloc[]", "FrameHE.drop[key]": "FrameHE.drop[]", "FrameHE.drop.iloc[key]": "FrameHE.drop.iloc[]", "FrameHE.drop.loc[key]": "FrameHE.drop.loc[]", "FrameHE.mask[key]": "FrameHE.mask[]", "FrameHE.mask.iloc[key]": "FrameHE.mask.iloc[]", "FrameHE.mask.loc[key]": "FrameHE.mask.loc[]", "FrameHE.masked_array[key]": "FrameHE.masked_array[]", "FrameHE.masked_array.iloc[key]": "FrameHE.masked_array.iloc[]", "FrameHE.masked_array.loc[key]": "FrameHE.masked_array.loc[]", "FrameHE.[key]": "FrameHE.[]", "FrameHE.iloc[key]": "FrameHE.iloc[]", "FrameHE.loc[key]": "FrameHE.loc[]", "FrameHE.iter_array(*, axis)": "FrameHE.iter_array()", "FrameHE.iter_array(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_array().apply()", "FrameHE.iter_array(*, axis).apply_iter(func)": "FrameHE.iter_array().apply_iter()", "FrameHE.iter_array(*, axis).apply_iter_items(func)": "FrameHE.iter_array().apply_iter_items()", "FrameHE.iter_array(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_array().apply_pool()", "FrameHE.iter_array_items(*, axis)": "FrameHE.iter_array_items()", "FrameHE.iter_array_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_array_items().apply()", "FrameHE.iter_array_items(*, axis).apply_iter(func)": "FrameHE.iter_array_items().apply_iter()", "FrameHE.iter_array_items(*, axis).apply_iter_items(func)": "FrameHE.iter_array_items().apply_iter_items()", "FrameHE.iter_array_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_array_items().apply_pool()", "FrameHE.iter_element(*, axis)": "FrameHE.iter_element()", "FrameHE.iter_element(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_element().apply()", "FrameHE.iter_element(*, axis).apply_iter(func)": "FrameHE.iter_element().apply_iter()", "FrameHE.iter_element(*, axis).apply_iter_items(func)": "FrameHE.iter_element().apply_iter_items()", "FrameHE.iter_element(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_element().apply_pool()", "FrameHE.iter_element(*, axis).map_all(mapping, *, dtype, name, index_constructor)": "FrameHE.iter_element().map_all()", "FrameHE.iter_element(*, axis).map_all_iter(mapping)": "FrameHE.iter_element().map_all_iter()", "FrameHE.iter_element(*, axis).map_all_iter_items(mapping)": "FrameHE.iter_element().map_all_iter_items()", "FrameHE.iter_element(*, axis).map_any(mapping, *, dtype, name, index_constructor)": "FrameHE.iter_element().map_any()", "FrameHE.iter_element(*, axis).map_any_iter(mapping)": "FrameHE.iter_element().map_any_iter()", "FrameHE.iter_element(*, axis).map_any_iter_items(mapping)": "FrameHE.iter_element().map_any_iter_items()", "FrameHE.iter_element(*, axis).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "FrameHE.iter_element().map_fill()", "FrameHE.iter_element(*, axis).map_fill_iter(mapping, *, fill_value)": "FrameHE.iter_element().map_fill_iter()", "FrameHE.iter_element(*, axis).map_fill_iter_items(mapping, *, fill_value)": "FrameHE.iter_element().map_fill_iter_items()", "FrameHE.iter_element_items(*, axis)": "FrameHE.iter_element_items()", "FrameHE.iter_element_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_element_items().apply()", "FrameHE.iter_element_items(*, axis).apply_iter(func)": "FrameHE.iter_element_items().apply_iter()", "FrameHE.iter_element_items(*, axis).apply_iter_items(func)": "FrameHE.iter_element_items().apply_iter_items()", "FrameHE.iter_element_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_element_items().apply_pool()", "FrameHE.iter_element_items(*, axis).map_all(mapping, *, dtype, name, index_constructor)": "FrameHE.iter_element_items().map_all()", "FrameHE.iter_element_items(*, axis).map_all_iter(mapping)": "FrameHE.iter_element_items().map_all_iter()", "FrameHE.iter_element_items(*, axis).map_all_iter_items(mapping)": "FrameHE.iter_element_items().map_all_iter_items()", "FrameHE.iter_element_items(*, axis).map_any(mapping, *, dtype, name, index_constructor)": "FrameHE.iter_element_items().map_any()", "FrameHE.iter_element_items(*, axis).map_any_iter(mapping)": "FrameHE.iter_element_items().map_any_iter()", "FrameHE.iter_element_items(*, axis).map_any_iter_items(mapping)": "FrameHE.iter_element_items().map_any_iter_items()", "FrameHE.iter_element_items(*, axis).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "FrameHE.iter_element_items().map_fill()", "FrameHE.iter_element_items(*, axis).map_fill_iter(mapping, *, fill_value)": "FrameHE.iter_element_items().map_fill_iter()", "FrameHE.iter_element_items(*, axis).map_fill_iter_items(mapping, *, fill_value)": "FrameHE.iter_element_items().map_fill_iter_items()", "FrameHE.iter_group(key, *, axis, drop)": "FrameHE.iter_group()", "FrameHE.iter_group(key, *, axis, drop).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_group().apply()", "FrameHE.iter_group(key, *, axis, drop).apply_iter(func)": "FrameHE.iter_group().apply_iter()", "FrameHE.iter_group(key, *, axis, drop).apply_iter_items(func)": "FrameHE.iter_group().apply_iter_items()", "FrameHE.iter_group(key, *, axis, drop).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_group().apply_pool()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).keys()": "FrameHE.iter_group().reduce.from_func().keys()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.iter_group().reduce.from_func().__iter__()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).items()": "FrameHE.iter_group().reduce.from_func().items()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).values()": "FrameHE.iter_group().reduce.from_func().values()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group().reduce.from_func().to_frame()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.iter_group().reduce.from_map_func().keys()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.iter_group().reduce.from_map_func().__iter__()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).items()": "FrameHE.iter_group().reduce.from_map_func().items()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).values()": "FrameHE.iter_group().reduce.from_map_func().values()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group().reduce.from_map_func().to_frame()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.iter_group().reduce.from_label_map().keys()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group().reduce.from_label_map().__iter__()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.iter_group().reduce.from_label_map().items()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.iter_group().reduce.from_label_map().values()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group().reduce.from_label_map().to_frame()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.iter_group().reduce.from_label_pair_map().keys()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group().reduce.from_label_pair_map().__iter__()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.iter_group().reduce.from_label_pair_map().items()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.iter_group().reduce.from_label_pair_map().values()", "FrameHE.iter_group(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group().reduce.from_label_pair_map().to_frame()", "FrameHE.iter_group_array(key, *, axis, drop)": "FrameHE.iter_group_array()", "FrameHE.iter_group_array(key, *, axis, drop).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_group_array().apply()", "FrameHE.iter_group_array(key, *, axis, drop).apply_iter(func)": "FrameHE.iter_group_array().apply_iter()", "FrameHE.iter_group_array(key, *, axis, drop).apply_iter_items(func)": "FrameHE.iter_group_array().apply_iter_items()", "FrameHE.iter_group_array(key, *, axis, drop).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_group_array().apply_pool()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).keys()": "FrameHE.iter_group_array().reduce.from_func().keys()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_array().reduce.from_func().__iter__()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).items()": "FrameHE.iter_group_array().reduce.from_func().items()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).values()": "FrameHE.iter_group_array().reduce.from_func().values()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_array().reduce.from_func().to_frame()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.iter_group_array().reduce.from_map_func().keys()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_array().reduce.from_map_func().__iter__()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).items()": "FrameHE.iter_group_array().reduce.from_map_func().items()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).values()": "FrameHE.iter_group_array().reduce.from_map_func().values()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_array().reduce.from_map_func().to_frame()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_array().reduce.from_label_map().keys()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_array().reduce.from_label_map().__iter__()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.iter_group_array().reduce.from_label_map().items()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.iter_group_array().reduce.from_label_map().values()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_array().reduce.from_label_map().to_frame()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_array().reduce.from_label_pair_map().keys()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_array().reduce.from_label_pair_map().__iter__()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.iter_group_array().reduce.from_label_pair_map().items()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.iter_group_array().reduce.from_label_pair_map().values()", "FrameHE.iter_group_array(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_array().reduce.from_label_pair_map().to_frame()", "FrameHE.iter_group_array_items(key, *, axis, drop)": "FrameHE.iter_group_array_items()", "FrameHE.iter_group_array_items(key, *, axis, drop).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_group_array_items().apply()", "FrameHE.iter_group_array_items(key, *, axis, drop).apply_iter(func)": "FrameHE.iter_group_array_items().apply_iter()", "FrameHE.iter_group_array_items(key, *, axis, drop).apply_iter_items(func)": "FrameHE.iter_group_array_items().apply_iter_items()", "FrameHE.iter_group_array_items(key, *, axis, drop).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_group_array_items().apply_pool()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).keys()": "FrameHE.iter_group_array_items().reduce.from_func().keys()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_array_items().reduce.from_func().__iter__()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).items()": "FrameHE.iter_group_array_items().reduce.from_func().items()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).values()": "FrameHE.iter_group_array_items().reduce.from_func().values()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_array_items().reduce.from_func().to_frame()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.iter_group_array_items().reduce.from_map_func().keys()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_array_items().reduce.from_map_func().__iter__()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).items()": "FrameHE.iter_group_array_items().reduce.from_map_func().items()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).values()": "FrameHE.iter_group_array_items().reduce.from_map_func().values()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_array_items().reduce.from_map_func().to_frame()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_array_items().reduce.from_label_map().keys()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_array_items().reduce.from_label_map().__iter__()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.iter_group_array_items().reduce.from_label_map().items()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.iter_group_array_items().reduce.from_label_map().values()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_array_items().reduce.from_label_map().to_frame()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_array_items().reduce.from_label_pair_map().keys()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_array_items().reduce.from_label_pair_map().__iter__()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.iter_group_array_items().reduce.from_label_pair_map().items()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.iter_group_array_items().reduce.from_label_pair_map().values()", "FrameHE.iter_group_array_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_array_items().reduce.from_label_pair_map().to_frame()", "FrameHE.iter_group_items(key, *, axis, drop)": "FrameHE.iter_group_items()", "FrameHE.iter_group_items(key, *, axis, drop).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_group_items().apply()", "FrameHE.iter_group_items(key, *, axis, drop).apply_iter(func)": "FrameHE.iter_group_items().apply_iter()", "FrameHE.iter_group_items(key, *, axis, drop).apply_iter_items(func)": "FrameHE.iter_group_items().apply_iter_items()", "FrameHE.iter_group_items(key, *, axis, drop).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_group_items().apply_pool()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).keys()": "FrameHE.iter_group_items().reduce.from_func().keys()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_items().reduce.from_func().__iter__()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).items()": "FrameHE.iter_group_items().reduce.from_func().items()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).values()": "FrameHE.iter_group_items().reduce.from_func().values()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_items().reduce.from_func().to_frame()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.iter_group_items().reduce.from_map_func().keys()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_items().reduce.from_map_func().__iter__()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).items()": "FrameHE.iter_group_items().reduce.from_map_func().items()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).values()": "FrameHE.iter_group_items().reduce.from_map_func().values()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_items().reduce.from_map_func().to_frame()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_items().reduce.from_label_map().keys()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_items().reduce.from_label_map().__iter__()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.iter_group_items().reduce.from_label_map().items()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.iter_group_items().reduce.from_label_map().values()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_items().reduce.from_label_map().to_frame()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_items().reduce.from_label_pair_map().keys()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_items().reduce.from_label_pair_map().__iter__()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.iter_group_items().reduce.from_label_pair_map().items()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.iter_group_items().reduce.from_label_pair_map().values()", "FrameHE.iter_group_items(key, *, axis, drop).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_items().reduce.from_label_pair_map().to_frame()", "FrameHE.iter_group_labels(depth_level, *, axis)": "FrameHE.iter_group_labels()", "FrameHE.iter_group_labels(depth_level, *, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_group_labels().apply()", "FrameHE.iter_group_labels(depth_level, *, axis).apply_iter(func)": "FrameHE.iter_group_labels().apply_iter()", "FrameHE.iter_group_labels(depth_level, *, axis).apply_iter_items(func)": "FrameHE.iter_group_labels().apply_iter_items()", "FrameHE.iter_group_labels(depth_level, *, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_group_labels().apply_pool()", "FrameHE.iter_group_labels_array(depth_level, *, axis)": "FrameHE.iter_group_labels_array()", "FrameHE.iter_group_labels_array(depth_level, *, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_group_labels_array().apply()", "FrameHE.iter_group_labels_array(depth_level, *, axis).apply_iter(func)": "FrameHE.iter_group_labels_array().apply_iter()", "FrameHE.iter_group_labels_array(depth_level, *, axis).apply_iter_items(func)": "FrameHE.iter_group_labels_array().apply_iter_items()", "FrameHE.iter_group_labels_array(depth_level, *, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_group_labels_array().apply_pool()", "FrameHE.iter_group_labels_array_items(depth_level, *, axis)": "FrameHE.iter_group_labels_array_items()", "FrameHE.iter_group_labels_array_items(depth_level, *, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_group_labels_array_items().apply()", "FrameHE.iter_group_labels_array_items(depth_level, *, axis).apply_iter(func)": "FrameHE.iter_group_labels_array_items().apply_iter()", "FrameHE.iter_group_labels_array_items(depth_level, *, axis).apply_iter_items(func)": "FrameHE.iter_group_labels_array_items().apply_iter_items()", "FrameHE.iter_group_labels_array_items(depth_level, *, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_group_labels_array_items().apply_pool()", "FrameHE.iter_group_labels_items(depth_level, *, axis)": "FrameHE.iter_group_labels_items()", "FrameHE.iter_group_labels_items(depth_level, *, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_group_labels_items().apply()", "FrameHE.iter_group_labels_items(depth_level, *, axis).apply_iter(func)": "FrameHE.iter_group_labels_items().apply_iter()", "FrameHE.iter_group_labels_items(depth_level, *, axis).apply_iter_items(func)": "FrameHE.iter_group_labels_items().apply_iter_items()", "FrameHE.iter_group_labels_items(depth_level, *, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_group_labels_items().apply_pool()", "FrameHE.iter_group_other(other, *, fill_value, axis)": "FrameHE.iter_group_other()", "FrameHE.iter_group_other(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_group_other().apply()", "FrameHE.iter_group_other(other, *, fill_value, axis).apply_iter(func)": "FrameHE.iter_group_other().apply_iter()", "FrameHE.iter_group_other(other, *, fill_value, axis).apply_iter_items(func)": "FrameHE.iter_group_other().apply_iter_items()", "FrameHE.iter_group_other(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_group_other().apply_pool()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).keys()": "FrameHE.iter_group_other().reduce.from_func().keys()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_other().reduce.from_func().__iter__()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).items()": "FrameHE.iter_group_other().reduce.from_func().items()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).values()": "FrameHE.iter_group_other().reduce.from_func().values()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other().reduce.from_func().to_frame()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.iter_group_other().reduce.from_map_func().keys()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_other().reduce.from_map_func().__iter__()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).items()": "FrameHE.iter_group_other().reduce.from_map_func().items()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).values()": "FrameHE.iter_group_other().reduce.from_map_func().values()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other().reduce.from_map_func().to_frame()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_other().reduce.from_label_map().keys()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_other().reduce.from_label_map().__iter__()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.iter_group_other().reduce.from_label_map().items()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.iter_group_other().reduce.from_label_map().values()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other().reduce.from_label_map().to_frame()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_other().reduce.from_label_pair_map().keys()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_other().reduce.from_label_pair_map().__iter__()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.iter_group_other().reduce.from_label_pair_map().items()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.iter_group_other().reduce.from_label_pair_map().values()", "FrameHE.iter_group_other(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other().reduce.from_label_pair_map().to_frame()", "FrameHE.iter_group_other_array(other, *, fill_value, axis)": "FrameHE.iter_group_other_array()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_group_other_array().apply()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).apply_iter(func)": "FrameHE.iter_group_other_array().apply_iter()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).apply_iter_items(func)": "FrameHE.iter_group_other_array().apply_iter_items()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_group_other_array().apply_pool()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).keys()": "FrameHE.iter_group_other_array().reduce.from_func().keys()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_other_array().reduce.from_func().__iter__()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).items()": "FrameHE.iter_group_other_array().reduce.from_func().items()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).values()": "FrameHE.iter_group_other_array().reduce.from_func().values()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other_array().reduce.from_func().to_frame()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.iter_group_other_array().reduce.from_map_func().keys()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_other_array().reduce.from_map_func().__iter__()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).items()": "FrameHE.iter_group_other_array().reduce.from_map_func().items()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).values()": "FrameHE.iter_group_other_array().reduce.from_map_func().values()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other_array().reduce.from_map_func().to_frame()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_other_array().reduce.from_label_map().keys()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_other_array().reduce.from_label_map().__iter__()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.iter_group_other_array().reduce.from_label_map().items()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.iter_group_other_array().reduce.from_label_map().values()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other_array().reduce.from_label_map().to_frame()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_other_array().reduce.from_label_pair_map().keys()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_other_array().reduce.from_label_pair_map().__iter__()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.iter_group_other_array().reduce.from_label_pair_map().items()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.iter_group_other_array().reduce.from_label_pair_map().values()", "FrameHE.iter_group_other_array(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other_array().reduce.from_label_pair_map().to_frame()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis)": "FrameHE.iter_group_other_array_items()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_group_other_array_items().apply()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).apply_iter(func)": "FrameHE.iter_group_other_array_items().apply_iter()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).apply_iter_items(func)": "FrameHE.iter_group_other_array_items().apply_iter_items()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_group_other_array_items().apply_pool()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).keys()": "FrameHE.iter_group_other_array_items().reduce.from_func().keys()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_other_array_items().reduce.from_func().__iter__()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).items()": "FrameHE.iter_group_other_array_items().reduce.from_func().items()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).values()": "FrameHE.iter_group_other_array_items().reduce.from_func().values()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other_array_items().reduce.from_func().to_frame()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.iter_group_other_array_items().reduce.from_map_func().keys()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_other_array_items().reduce.from_map_func().__iter__()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).items()": "FrameHE.iter_group_other_array_items().reduce.from_map_func().items()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).values()": "FrameHE.iter_group_other_array_items().reduce.from_map_func().values()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other_array_items().reduce.from_map_func().to_frame()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_other_array_items().reduce.from_label_map().keys()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_other_array_items().reduce.from_label_map().__iter__()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.iter_group_other_array_items().reduce.from_label_map().items()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.iter_group_other_array_items().reduce.from_label_map().values()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other_array_items().reduce.from_label_map().to_frame()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_other_array_items().reduce.from_label_pair_map().keys()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_other_array_items().reduce.from_label_pair_map().__iter__()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.iter_group_other_array_items().reduce.from_label_pair_map().items()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.iter_group_other_array_items().reduce.from_label_pair_map().values()", "FrameHE.iter_group_other_array_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other_array_items().reduce.from_label_pair_map().to_frame()", "FrameHE.iter_group_other_items(other, *, fill_value, axis)": "FrameHE.iter_group_other_items()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_group_other_items().apply()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).apply_iter(func)": "FrameHE.iter_group_other_items().apply_iter()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).apply_iter_items(func)": "FrameHE.iter_group_other_items().apply_iter_items()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_group_other_items().apply_pool()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).keys()": "FrameHE.iter_group_other_items().reduce.from_func().keys()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_other_items().reduce.from_func().__iter__()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).items()": "FrameHE.iter_group_other_items().reduce.from_func().items()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).values()": "FrameHE.iter_group_other_items().reduce.from_func().values()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other_items().reduce.from_func().to_frame()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.iter_group_other_items().reduce.from_map_func().keys()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.iter_group_other_items().reduce.from_map_func().__iter__()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).items()": "FrameHE.iter_group_other_items().reduce.from_map_func().items()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).values()": "FrameHE.iter_group_other_items().reduce.from_map_func().values()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other_items().reduce.from_map_func().to_frame()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_other_items().reduce.from_label_map().keys()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_other_items().reduce.from_label_map().__iter__()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.iter_group_other_items().reduce.from_label_map().items()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.iter_group_other_items().reduce.from_label_map().values()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other_items().reduce.from_label_map().to_frame()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.iter_group_other_items().reduce.from_label_pair_map().keys()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_group_other_items().reduce.from_label_pair_map().__iter__()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.iter_group_other_items().reduce.from_label_pair_map().items()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.iter_group_other_items().reduce.from_label_pair_map().values()", "FrameHE.iter_group_other_items(other, *, fill_value, axis).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_group_other_items().reduce.from_label_pair_map().to_frame()", "FrameHE.iter_series(*, axis)": "FrameHE.iter_series()", "FrameHE.iter_series(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_series().apply()", "FrameHE.iter_series(*, axis).apply_iter(func)": "FrameHE.iter_series().apply_iter()", "FrameHE.iter_series(*, axis).apply_iter_items(func)": "FrameHE.iter_series().apply_iter_items()", "FrameHE.iter_series(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_series().apply_pool()", "FrameHE.iter_series_items(*, axis)": "FrameHE.iter_series_items()", "FrameHE.iter_series_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_series_items().apply()", "FrameHE.iter_series_items(*, axis).apply_iter(func)": "FrameHE.iter_series_items().apply_iter()", "FrameHE.iter_series_items(*, axis).apply_iter_items(func)": "FrameHE.iter_series_items().apply_iter_items()", "FrameHE.iter_series_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_series_items().apply_pool()", "FrameHE.iter_tuple(*, axis, constructor)": "FrameHE.iter_tuple()", "FrameHE.iter_tuple(*, axis, constructor).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_tuple().apply()", "FrameHE.iter_tuple(*, axis, constructor).apply_iter(func)": "FrameHE.iter_tuple().apply_iter()", "FrameHE.iter_tuple(*, axis, constructor).apply_iter_items(func)": "FrameHE.iter_tuple().apply_iter_items()", "FrameHE.iter_tuple(*, axis, constructor).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_tuple().apply_pool()", "FrameHE.iter_tuple(*, axis, constructor).map_all(mapping, *, dtype, name, index_constructor)": "FrameHE.iter_tuple().map_all()", "FrameHE.iter_tuple(*, axis, constructor).map_all_iter(mapping)": "FrameHE.iter_tuple().map_all_iter()", "FrameHE.iter_tuple(*, axis, constructor).map_all_iter_items(mapping)": "FrameHE.iter_tuple().map_all_iter_items()", "FrameHE.iter_tuple(*, axis, constructor).map_any(mapping, *, dtype, name, index_constructor)": "FrameHE.iter_tuple().map_any()", "FrameHE.iter_tuple(*, axis, constructor).map_any_iter(mapping)": "FrameHE.iter_tuple().map_any_iter()", "FrameHE.iter_tuple(*, axis, constructor).map_any_iter_items(mapping)": "FrameHE.iter_tuple().map_any_iter_items()", "FrameHE.iter_tuple(*, axis, constructor).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "FrameHE.iter_tuple().map_fill()", "FrameHE.iter_tuple(*, axis, constructor).map_fill_iter(mapping, *, fill_value)": "FrameHE.iter_tuple().map_fill_iter()", "FrameHE.iter_tuple(*, axis, constructor).map_fill_iter_items(mapping, *, fill_value)": "FrameHE.iter_tuple().map_fill_iter_items()", "FrameHE.iter_tuple_items(*, axis, constructor)": "FrameHE.iter_tuple_items()", "FrameHE.iter_tuple_items(*, axis, constructor).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_tuple_items().apply()", "FrameHE.iter_tuple_items(*, axis, constructor).apply_iter(func)": "FrameHE.iter_tuple_items().apply_iter()", "FrameHE.iter_tuple_items(*, axis, constructor).apply_iter_items(func)": "FrameHE.iter_tuple_items().apply_iter_items()", "FrameHE.iter_tuple_items(*, axis, constructor).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_tuple_items().apply_pool()", "FrameHE.iter_tuple_items(*, axis, constructor).map_all(mapping, *, dtype, name, index_constructor)": "FrameHE.iter_tuple_items().map_all()", "FrameHE.iter_tuple_items(*, axis, constructor).map_all_iter(mapping)": "FrameHE.iter_tuple_items().map_all_iter()", "FrameHE.iter_tuple_items(*, axis, constructor).map_all_iter_items(mapping)": "FrameHE.iter_tuple_items().map_all_iter_items()", "FrameHE.iter_tuple_items(*, axis, constructor).map_any(mapping, *, dtype, name, index_constructor)": "FrameHE.iter_tuple_items().map_any()", "FrameHE.iter_tuple_items(*, axis, constructor).map_any_iter(mapping)": "FrameHE.iter_tuple_items().map_any_iter()", "FrameHE.iter_tuple_items(*, axis, constructor).map_any_iter_items(mapping)": "FrameHE.iter_tuple_items().map_any_iter_items()", "FrameHE.iter_tuple_items(*, axis, constructor).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "FrameHE.iter_tuple_items().map_fill()", "FrameHE.iter_tuple_items(*, axis, constructor).map_fill_iter(mapping, *, fill_value)": "FrameHE.iter_tuple_items().map_fill_iter()", "FrameHE.iter_tuple_items(*, axis, constructor).map_fill_iter_items(mapping, *, fill_value)": "FrameHE.iter_tuple_items().map_fill_iter_items()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "FrameHE.iter_window()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_window().apply()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "FrameHE.iter_window().apply_iter()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "FrameHE.iter_window().apply_iter_items()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_window().apply_pool()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).keys()": "FrameHE.iter_window().reduce.from_func().keys()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.iter_window().reduce.from_func().__iter__()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).items()": "FrameHE.iter_window().reduce.from_func().items()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).values()": "FrameHE.iter_window().reduce.from_func().values()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window().reduce.from_func().to_frame()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.iter_window().reduce.from_map_func().keys()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.iter_window().reduce.from_map_func().__iter__()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).items()": "FrameHE.iter_window().reduce.from_map_func().items()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).values()": "FrameHE.iter_window().reduce.from_map_func().values()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window().reduce.from_map_func().to_frame()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.iter_window().reduce.from_label_map().keys()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_window().reduce.from_label_map().__iter__()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.iter_window().reduce.from_label_map().items()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.iter_window().reduce.from_label_map().values()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window().reduce.from_label_map().to_frame()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.iter_window().reduce.from_label_pair_map().keys()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_window().reduce.from_label_pair_map().__iter__()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.iter_window().reduce.from_label_pair_map().items()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.iter_window().reduce.from_label_pair_map().values()", "FrameHE.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window().reduce.from_label_pair_map().to_frame()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "FrameHE.iter_window_array()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_window_array().apply()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "FrameHE.iter_window_array().apply_iter()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "FrameHE.iter_window_array().apply_iter_items()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_window_array().apply_pool()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).keys()": "FrameHE.iter_window_array().reduce.from_func().keys()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.iter_window_array().reduce.from_func().__iter__()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).items()": "FrameHE.iter_window_array().reduce.from_func().items()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).values()": "FrameHE.iter_window_array().reduce.from_func().values()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window_array().reduce.from_func().to_frame()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.iter_window_array().reduce.from_map_func().keys()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.iter_window_array().reduce.from_map_func().__iter__()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).items()": "FrameHE.iter_window_array().reduce.from_map_func().items()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).values()": "FrameHE.iter_window_array().reduce.from_map_func().values()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window_array().reduce.from_map_func().to_frame()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.iter_window_array().reduce.from_label_map().keys()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_window_array().reduce.from_label_map().__iter__()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.iter_window_array().reduce.from_label_map().items()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.iter_window_array().reduce.from_label_map().values()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window_array().reduce.from_label_map().to_frame()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.iter_window_array().reduce.from_label_pair_map().keys()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_window_array().reduce.from_label_pair_map().__iter__()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.iter_window_array().reduce.from_label_pair_map().items()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.iter_window_array().reduce.from_label_pair_map().values()", "FrameHE.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window_array().reduce.from_label_pair_map().to_frame()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "FrameHE.iter_window_array_items()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_window_array_items().apply()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "FrameHE.iter_window_array_items().apply_iter()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "FrameHE.iter_window_array_items().apply_iter_items()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_window_array_items().apply_pool()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).keys()": "FrameHE.iter_window_array_items().reduce.from_func().keys()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.iter_window_array_items().reduce.from_func().__iter__()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).items()": "FrameHE.iter_window_array_items().reduce.from_func().items()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).values()": "FrameHE.iter_window_array_items().reduce.from_func().values()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window_array_items().reduce.from_func().to_frame()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.iter_window_array_items().reduce.from_map_func().keys()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.iter_window_array_items().reduce.from_map_func().__iter__()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).items()": "FrameHE.iter_window_array_items().reduce.from_map_func().items()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).values()": "FrameHE.iter_window_array_items().reduce.from_map_func().values()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window_array_items().reduce.from_map_func().to_frame()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.iter_window_array_items().reduce.from_label_map().keys()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_window_array_items().reduce.from_label_map().__iter__()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.iter_window_array_items().reduce.from_label_map().items()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.iter_window_array_items().reduce.from_label_map().values()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window_array_items().reduce.from_label_map().to_frame()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.iter_window_array_items().reduce.from_label_pair_map().keys()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_window_array_items().reduce.from_label_pair_map().__iter__()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.iter_window_array_items().reduce.from_label_pair_map().items()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.iter_window_array_items().reduce.from_label_pair_map().values()", "FrameHE.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window_array_items().reduce.from_label_pair_map().to_frame()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "FrameHE.iter_window_items()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "FrameHE.iter_window_items().apply()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "FrameHE.iter_window_items().apply_iter()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "FrameHE.iter_window_items().apply_iter_items()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "FrameHE.iter_window_items().apply_pool()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).keys()": "FrameHE.iter_window_items().reduce.from_func().keys()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.iter_window_items().reduce.from_func().__iter__()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).items()": "FrameHE.iter_window_items().reduce.from_func().items()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).values()": "FrameHE.iter_window_items().reduce.from_func().values()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window_items().reduce.from_func().to_frame()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.iter_window_items().reduce.from_map_func().keys()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.iter_window_items().reduce.from_map_func().__iter__()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).items()": "FrameHE.iter_window_items().reduce.from_map_func().items()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).values()": "FrameHE.iter_window_items().reduce.from_map_func().values()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window_items().reduce.from_map_func().to_frame()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.iter_window_items().reduce.from_label_map().keys()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_window_items().reduce.from_label_map().__iter__()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.iter_window_items().reduce.from_label_map().items()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.iter_window_items().reduce.from_label_map().values()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window_items().reduce.from_label_map().to_frame()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.iter_window_items().reduce.from_label_pair_map().keys()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.iter_window_items().reduce.from_label_pair_map().__iter__()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.iter_window_items().reduce.from_label_pair_map().items()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.iter_window_items().reduce.from_label_pair_map().values()", "FrameHE.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.iter_window_items().reduce.from_label_pair_map().to_frame()", "FrameHE.__add__(other)": "FrameHE.__add__()", "FrameHE.__and__(other)": "FrameHE.__and__()", "FrameHE.__eq__(other)": "FrameHE.__eq__()", "FrameHE.__floordiv__(other)": "FrameHE.__floordiv__()", "FrameHE.__ge__(other)": "FrameHE.__ge__()", "FrameHE.__gt__(other)": "FrameHE.__gt__()", "FrameHE.__le__(other)": "FrameHE.__le__()", "FrameHE.__lt__(other)": "FrameHE.__lt__()", "FrameHE.__matmul__(other)": "FrameHE.__matmul__()", "FrameHE.__mod__(other)": "FrameHE.__mod__()", "FrameHE.__mul__(other)": "FrameHE.__mul__()", "FrameHE.__ne__(other)": "FrameHE.__ne__()", "FrameHE.__or__(other)": "FrameHE.__or__()", "FrameHE.__pow__(other)": "FrameHE.__pow__()", "FrameHE.__radd__(other)": "FrameHE.__radd__()", "FrameHE.__rfloordiv__(other)": "FrameHE.__rfloordiv__()", "FrameHE.__rmatmul__(other)": "FrameHE.__rmatmul__()", "FrameHE.__rmul__(other)": "FrameHE.__rmul__()", "FrameHE.__rshift__(other)": "FrameHE.__rshift__()", "FrameHE.__rsub__(other)": "FrameHE.__rsub__()", "FrameHE.__rtruediv__(other)": "FrameHE.__rtruediv__()", "FrameHE.__sub__(other)": "FrameHE.__sub__()", "FrameHE.__truediv__(other)": "FrameHE.__truediv__()", "FrameHE.__xor__(other)": "FrameHE.__xor__()", "FrameHE.__abs__()": "FrameHE.__abs__()", "FrameHE.__invert__()": "FrameHE.__invert__()", "FrameHE.__neg__()": "FrameHE.__neg__()", "FrameHE.__pos__()": "FrameHE.__pos__()", "FrameHE.abs()": "FrameHE.abs()", "FrameHE.via_values.apply(func, *args, **kwargs)": "FrameHE.via_values.apply()", "FrameHE.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "FrameHE.via_values.__array_ufunc__()", "FrameHE.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "FrameHE.via_values.__call__()", "FrameHE.via_dt.__call__(*, fill_value)": "FrameHE.via_dt.__call__()", "FrameHE.via_dt.year": "FrameHE.via_dt.year", "FrameHE.via_dt.year_month": "FrameHE.via_dt.year_month", "FrameHE.via_dt.year_quarter": "FrameHE.via_dt.year_quarter", "FrameHE.via_dt.month": "FrameHE.via_dt.month", "FrameHE.via_dt.day": "FrameHE.via_dt.day", "FrameHE.via_dt.hour": "FrameHE.via_dt.hour", "FrameHE.via_dt.minute": "FrameHE.via_dt.minute", "FrameHE.via_dt.second": "FrameHE.via_dt.second", "FrameHE.via_dt.weekday()": "FrameHE.via_dt.weekday()", "FrameHE.via_dt.quarter()": "FrameHE.via_dt.quarter()", "FrameHE.via_dt.is_month_end()": "FrameHE.via_dt.is_month_end()", "FrameHE.via_dt.is_month_start()": "FrameHE.via_dt.is_month_start()", "FrameHE.via_dt.is_year_end()": "FrameHE.via_dt.is_year_end()", "FrameHE.via_dt.is_year_start()": "FrameHE.via_dt.is_year_start()", "FrameHE.via_dt.is_quarter_end()": "FrameHE.via_dt.is_quarter_end()", "FrameHE.via_dt.is_quarter_start()": "FrameHE.via_dt.is_quarter_start()", "FrameHE.via_dt.timetuple()": "FrameHE.via_dt.timetuple()", "FrameHE.via_dt.isoformat(sep, timespec)": "FrameHE.via_dt.isoformat()", "FrameHE.via_dt.fromisoformat()": "FrameHE.via_dt.fromisoformat()", "FrameHE.via_dt.strftime(format)": "FrameHE.via_dt.strftime()", "FrameHE.via_dt.strptime(format)": "FrameHE.via_dt.strptime()", "FrameHE.via_dt.strpdate(format)": "FrameHE.via_dt.strpdate()", "FrameHE.via_str.__getitem__(key)": "FrameHE.via_str.__getitem__()", "FrameHE.via_str.capitalize()": "FrameHE.via_str.capitalize()", "FrameHE.via_str.center(width, fillchar)": "FrameHE.via_str.center()", "FrameHE.via_str.contains(item)": "FrameHE.via_str.contains()", "FrameHE.via_str.count(sub, start, end)": "FrameHE.via_str.count()", "FrameHE.via_str.decode(encoding, errors)": "FrameHE.via_str.decode()", "FrameHE.via_str.encode(encoding, errors)": "FrameHE.via_str.encode()", "FrameHE.via_str.endswith(suffix, start, end)": "FrameHE.via_str.endswith()", "FrameHE.via_str.find(sub, start, end)": "FrameHE.via_str.find()", "FrameHE.via_str.format(format)": "FrameHE.via_str.format()", "FrameHE.via_str.index(sub, start, end)": "FrameHE.via_str.index()", "FrameHE.via_str.isalnum()": "FrameHE.via_str.isalnum()", "FrameHE.via_str.isalpha()": "FrameHE.via_str.isalpha()", "FrameHE.via_str.isdecimal()": "FrameHE.via_str.isdecimal()", "FrameHE.via_str.isdigit()": "FrameHE.via_str.isdigit()", "FrameHE.via_str.islower()": "FrameHE.via_str.islower()", "FrameHE.via_str.isnumeric()": "FrameHE.via_str.isnumeric()", "FrameHE.via_str.isspace()": "FrameHE.via_str.isspace()", "FrameHE.via_str.istitle()": "FrameHE.via_str.istitle()", "FrameHE.via_str.isupper()": "FrameHE.via_str.isupper()", "FrameHE.via_str.ljust(width, fillchar)": "FrameHE.via_str.ljust()", "FrameHE.via_str.len()": "FrameHE.via_str.len()", "FrameHE.via_str.lower()": "FrameHE.via_str.lower()", "FrameHE.via_str.lstrip(chars)": "FrameHE.via_str.lstrip()", "FrameHE.via_str.partition(sep)": "FrameHE.via_str.partition()", "FrameHE.via_str.replace(old, new, count)": "FrameHE.via_str.replace()", "FrameHE.via_str.rfind(sub, start, end)": "FrameHE.via_str.rfind()", "FrameHE.via_str.rindex(sub, start, end)": "FrameHE.via_str.rindex()", "FrameHE.via_str.rjust(width, fillchar)": "FrameHE.via_str.rjust()", "FrameHE.via_str.rpartition(sep)": "FrameHE.via_str.rpartition()", "FrameHE.via_str.rsplit(sep, maxsplit)": "FrameHE.via_str.rsplit()", "FrameHE.via_str.rstrip(chars)": "FrameHE.via_str.rstrip()", "FrameHE.via_str.split(sep, maxsplit)": "FrameHE.via_str.split()", "FrameHE.via_str.startswith(prefix, start, end)": "FrameHE.via_str.startswith()", "FrameHE.via_str.strip(chars)": "FrameHE.via_str.strip()", "FrameHE.via_str.swapcase()": "FrameHE.via_str.swapcase()", "FrameHE.via_str.title()": "FrameHE.via_str.title()", "FrameHE.via_str.upper()": "FrameHE.via_str.upper()", "FrameHE.via_str.zfill(width)": "FrameHE.via_str.zfill()", "FrameHE.via_T.via_fill_value(fill_value)": "FrameHE.via_T.via_fill_value()", "FrameHE.via_T.__add__(other)": "FrameHE.via_T.__add__()", "FrameHE.via_T.__sub__(other)": "FrameHE.via_T.__sub__()", "FrameHE.via_T.__mul__(other)": "FrameHE.via_T.__mul__()", "FrameHE.via_T.__truediv__(other)": "FrameHE.via_T.__truediv__()", "FrameHE.via_T.__floordiv__(other)": "FrameHE.via_T.__floordiv__()", "FrameHE.via_T.__mod__(other)": "FrameHE.via_T.__mod__()", "FrameHE.via_T.__pow__(other)": "FrameHE.via_T.__pow__()", "FrameHE.via_T.__lshift__(other)": "FrameHE.via_T.__lshift__()", "FrameHE.via_T.__rshift__(other)": "FrameHE.via_T.__rshift__()", "FrameHE.via_T.__and__(other)": "FrameHE.via_T.__and__()", "FrameHE.via_T.__xor__(other)": "FrameHE.via_T.__xor__()", "FrameHE.via_T.__or__(other)": "FrameHE.via_T.__or__()", "FrameHE.via_T.__lt__(other)": "FrameHE.via_T.__lt__()", "FrameHE.via_T.__le__(other)": "FrameHE.via_T.__le__()", "FrameHE.via_T.__eq__(other)": "FrameHE.via_T.__eq__()", "FrameHE.via_T.__ne__(other)": "FrameHE.via_T.__ne__()", "FrameHE.via_T.__gt__(other)": "FrameHE.via_T.__gt__()", "FrameHE.via_T.__ge__(other)": "FrameHE.via_T.__ge__()", "FrameHE.via_T.__radd__(other)": "FrameHE.via_T.__radd__()", "FrameHE.via_T.__rsub__(other)": "FrameHE.via_T.__rsub__()", "FrameHE.via_T.__rmul__(other)": "FrameHE.via_T.__rmul__()", "FrameHE.via_T.__rtruediv__(other)": "FrameHE.via_T.__rtruediv__()", "FrameHE.via_T.__rfloordiv__(other)": "FrameHE.via_T.__rfloordiv__()", "FrameHE.via_fill_value(fill_value).loc": "FrameHE.via_fill_value().loc", "FrameHE.via_fill_value(fill_value).__getitem__(key)": "FrameHE.via_fill_value().__getitem__()", "FrameHE.via_fill_value(fill_value).via_T": "FrameHE.via_fill_value().via_T", "FrameHE.via_fill_value(fill_value).__add__(other)": "FrameHE.via_fill_value().__add__()", "FrameHE.via_fill_value(fill_value).__sub__(other)": "FrameHE.via_fill_value().__sub__()", "FrameHE.via_fill_value(fill_value).__mul__(other)": "FrameHE.via_fill_value().__mul__()", "FrameHE.via_fill_value(fill_value).__truediv__(other)": "FrameHE.via_fill_value().__truediv__()", "FrameHE.via_fill_value(fill_value).__floordiv__(other)": "FrameHE.via_fill_value().__floordiv__()", "FrameHE.via_fill_value(fill_value).__mod__(other)": "FrameHE.via_fill_value().__mod__()", "FrameHE.via_fill_value(fill_value).__pow__(other)": "FrameHE.via_fill_value().__pow__()", "FrameHE.via_fill_value(fill_value).__lshift__(other)": "FrameHE.via_fill_value().__lshift__()", "FrameHE.via_fill_value(fill_value).__rshift__(other)": "FrameHE.via_fill_value().__rshift__()", "FrameHE.via_fill_value(fill_value).__and__(other)": "FrameHE.via_fill_value().__and__()", "FrameHE.via_fill_value(fill_value).__xor__(other)": "FrameHE.via_fill_value().__xor__()", "FrameHE.via_fill_value(fill_value).__or__(other)": "FrameHE.via_fill_value().__or__()", "FrameHE.via_fill_value(fill_value).__lt__(other)": "FrameHE.via_fill_value().__lt__()", "FrameHE.via_fill_value(fill_value).__le__(other)": "FrameHE.via_fill_value().__le__()", "FrameHE.via_fill_value(fill_value).__eq__(other)": "FrameHE.via_fill_value().__eq__()", "FrameHE.via_fill_value(fill_value).__ne__(other)": "FrameHE.via_fill_value().__ne__()", "FrameHE.via_fill_value(fill_value).__gt__(other)": "FrameHE.via_fill_value().__gt__()", "FrameHE.via_fill_value(fill_value).__ge__(other)": "FrameHE.via_fill_value().__ge__()", "FrameHE.via_fill_value(fill_value).__radd__(other)": "FrameHE.via_fill_value().__radd__()", "FrameHE.via_fill_value(fill_value).__rsub__(other)": "FrameHE.via_fill_value().__rsub__()", "FrameHE.via_fill_value(fill_value).__rmul__(other)": "FrameHE.via_fill_value().__rmul__()", "FrameHE.via_fill_value(fill_value).__rtruediv__(other)": "FrameHE.via_fill_value().__rtruediv__()", "FrameHE.via_fill_value(fill_value).__rfloordiv__(other)": "FrameHE.via_fill_value().__rfloordiv__()", "FrameHE.via_re(pattern, flags).search(pos, endpos)": "FrameHE.via_re().search()", "FrameHE.via_re(pattern, flags).match(pos, endpos)": "FrameHE.via_re().match()", "FrameHE.via_re(pattern, flags).fullmatch(pos, endpos)": "FrameHE.via_re().fullmatch()", "FrameHE.via_re(pattern, flags).split(maxsplit)": "FrameHE.via_re().split()", "FrameHE.via_re(pattern, flags).findall(pos, endpos)": "FrameHE.via_re().findall()", "FrameHE.via_re(pattern, flags).sub(repl, count)": "FrameHE.via_re().sub()", "FrameHE.via_re(pattern, flags).subn(repl, count)": "FrameHE.via_re().subn()", "FrameHE.via_hashlib(include_name, include_class, encoding).to_bytes()": "FrameHE.via_hashlib().to_bytes()", "FrameHE.via_hashlib(include_name, include_class, encoding).md5()": "FrameHE.via_hashlib().md5()", "FrameHE.via_hashlib(include_name, include_class, encoding).sha256()": "FrameHE.via_hashlib().sha256()", "FrameHE.via_hashlib(include_name, include_class, encoding).sha512()": "FrameHE.via_hashlib().sha512()", "FrameHE.via_hashlib(include_name, include_class, encoding).sha3_256()": "FrameHE.via_hashlib().sha3_256()", "FrameHE.via_hashlib(include_name, include_class, encoding).sha3_512()": "FrameHE.via_hashlib().sha3_512()", "FrameHE.via_hashlib(include_name, include_class, encoding).shake_128()": "FrameHE.via_hashlib().shake_128()", "FrameHE.via_hashlib(include_name, include_class, encoding).shake_256()": "FrameHE.via_hashlib().shake_256()", "FrameHE.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "FrameHE.via_hashlib().blake2b()", "FrameHE.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "FrameHE.via_hashlib().blake2s()", "FrameHE.via_type_clinic.to_hint()": "FrameHE.via_type_clinic.to_hint()", "FrameHE.via_type_clinic.check(hint, *, fail_fast)": "FrameHE.via_type_clinic.check()", "FrameHE.via_type_clinic.warn(hint, *, fail_fast, category)": "FrameHE.via_type_clinic.warn()", "FrameHE.via_type_clinic.__call__(hint, *, fail_fast)": "FrameHE.via_type_clinic.__call__()", "FrameHE.via_type_clinic.__repr__()": "FrameHE.via_type_clinic.__repr__()", "FrameHE.reduce.from_func(func, *, fill_value).keys()": "FrameHE.reduce.from_func().keys()", "FrameHE.reduce.from_func(func, *, fill_value).__iter__()": "FrameHE.reduce.from_func().__iter__()", "FrameHE.reduce.from_func(func, *, fill_value).items()": "FrameHE.reduce.from_func().items()", "FrameHE.reduce.from_func(func, *, fill_value).values()": "FrameHE.reduce.from_func().values()", "FrameHE.reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.reduce.from_func().to_frame()", "FrameHE.reduce.from_map_func(func, *, fill_value).keys()": "FrameHE.reduce.from_map_func().keys()", "FrameHE.reduce.from_map_func(func, *, fill_value).__iter__()": "FrameHE.reduce.from_map_func().__iter__()", "FrameHE.reduce.from_map_func(func, *, fill_value).items()": "FrameHE.reduce.from_map_func().items()", "FrameHE.reduce.from_map_func(func, *, fill_value).values()": "FrameHE.reduce.from_map_func().values()", "FrameHE.reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.reduce.from_map_func().to_frame()", "FrameHE.reduce.from_label_map(func_map, *, fill_value).keys()": "FrameHE.reduce.from_label_map().keys()", "FrameHE.reduce.from_label_map(func_map, *, fill_value).__iter__()": "FrameHE.reduce.from_label_map().__iter__()", "FrameHE.reduce.from_label_map(func_map, *, fill_value).items()": "FrameHE.reduce.from_label_map().items()", "FrameHE.reduce.from_label_map(func_map, *, fill_value).values()": "FrameHE.reduce.from_label_map().values()", "FrameHE.reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.reduce.from_label_map().to_frame()", "FrameHE.reduce.from_label_pair_map(func_map, *, fill_value).keys()": "FrameHE.reduce.from_label_pair_map().keys()", "FrameHE.reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "FrameHE.reduce.from_label_pair_map().__iter__()", "FrameHE.reduce.from_label_pair_map(func_map, *, fill_value).items()": "FrameHE.reduce.from_label_pair_map().items()", "FrameHE.reduce.from_label_pair_map(func_map, *, fill_value).values()": "FrameHE.reduce.from_label_pair_map().values()", "FrameHE.reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "FrameHE.reduce.from_label_pair_map().to_frame()", "Bus.__init__(frames, *, index, index_constructor, name, store, config, max_persist, own_index, own_data)": "Bus.__init__()", "Bus.from_concat(containers, *, index, name)": "Bus.from_concat()", "Bus.from_dict(mapping, *, name, index_constructor)": "Bus.from_dict()", "Bus.from_duckdb(fp, *, config, max_persist, index_constructor)": "Bus.from_duckdb()", "Bus.from_frames(frames, *, index_constructor, config, name)": "Bus.from_frames()", "Bus.from_hdf5(fp, *, config, max_persist, index_constructor)": "Bus.from_hdf5()", "Bus.from_items(pairs, *, config, name, index_constructor)": "Bus.from_items()", "Bus.from_series(series, *, store, config, max_persist, own_data)": "Bus.from_series()", "Bus.from_sqlite(fp, *, config, max_persist, index_constructor)": "Bus.from_sqlite()", "Bus.from_xlsx(fp, *, config, max_persist, index_constructor)": "Bus.from_xlsx()", "Bus.from_zip_csv(fp, *, config, max_persist, index_constructor)": "Bus.from_zip_csv()", "Bus.from_zip_npy(fp, *, config, max_persist, index_constructor)": "Bus.from_zip_npy()", "Bus.from_zip_npz(fp, *, config, max_persist, index_constructor)": "Bus.from_zip_npz()", "Bus.from_zip_parquet(fp, *, config, max_persist, index_constructor)": "Bus.from_zip_parquet()", "Bus.from_zip_pickle(fp, *, config, max_persist, index_constructor)": "Bus.from_zip_pickle()", "Bus.from_zip_tsv(fp, *, config, max_persist, index_constructor)": "Bus.from_zip_tsv()", "Bus.to_duckdb(fp, *, config)": "Bus.to_duckdb()", "Bus.to_hdf5(fp, *, config)": "Bus.to_hdf5()", "Bus.to_series()": "Bus.to_series()", "Bus.to_sqlite(fp, *, config)": "Bus.to_sqlite()", "Bus.to_visidata()": "Bus.to_visidata()", "Bus.to_xlsx(fp, *, config)": "Bus.to_xlsx()", "Bus.to_zip_csv(fp, *, config, compression)": "Bus.to_zip_csv()", "Bus.to_zip_npy(fp, *, config, compression)": "Bus.to_zip_npy()", "Bus.to_zip_npz(fp, *, config, compression)": "Bus.to_zip_npz()", "Bus.to_zip_parquet(fp, *, config, compression)": "Bus.to_zip_parquet()", "Bus.to_zip_pickle(fp, *, config, compression)": "Bus.to_zip_pickle()", "Bus.to_zip_tsv(fp, *, config, compression)": "Bus.to_zip_tsv()", "Bus.STATIC": "Bus.STATIC", "Bus.dtype": "Bus.dtype", "Bus.dtypes": "Bus.dtypes", "Bus.index": "Bus.index", "Bus.memory": "Bus.memory", "Bus.mloc": "Bus.mloc", "Bus.name": "Bus.name", "Bus.nbytes": "Bus.nbytes", "Bus.ndim": "Bus.ndim", "Bus.shape": "Bus.shape", "Bus.shapes": "Bus.shapes", "Bus.size": "Bus.size", "Bus.status": "Bus.status", "Bus.__bool__()": "Bus.__bool__()", "Bus.__len__()": "Bus.__len__()", "Bus.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "Bus.equals()", "Bus.head(count)": "Bus.head()", "Bus.rehierarch(depth_map, *, index_constructors)": "Bus.rehierarch()", "Bus.reindex(index, *, fill_value, own_index, check_equals)": "Bus.reindex()", "Bus.relabel(index, *, index_constructor)": "Bus.relabel()", "Bus.relabel_flat()": "Bus.relabel_flat()", "Bus.relabel_level_add(level)": "Bus.relabel_level_add()", "Bus.relabel_level_drop(count)": "Bus.relabel_level_drop()", "Bus.rename(name)": "Bus.rename()", "Bus.roll(shift, *, include_index)": "Bus.roll()", "Bus.shift(shift, *, fill_value)": "Bus.shift()", "Bus.sort_index(*, ascending, kind, key)": "Bus.sort_index()", "Bus.sort_values(*, ascending, kind, key)": "Bus.sort_values()", "Bus.tail(count)": "Bus.tail()", "Bus.unpersist()": "Bus.unpersist()", "Bus.__contains__(value)": "Bus.__contains__()", "Bus.__iter__()": "Bus.__iter__()", "Bus.__reversed__()": "Bus.__reversed__()", "Bus.get(key, default)": "Bus.get()", "Bus.items()": "Bus.items()", "Bus.keys()": "Bus.keys()", "Bus.values": "Bus.values", "Bus.interface": "Bus.interface", "Bus.__repr__()": "Bus.__repr__()", "Bus.__str__()": "Bus.__str__()", "Bus.display(config, *, style_config)": "Bus.display()", "Bus.display_tall(config)": "Bus.display_tall()", "Bus.display_wide(config)": "Bus.display_wide()", "Bus.drop[key]": "Bus.drop[]", "Bus.drop.iloc[key]": "Bus.drop.iloc[]", "Bus.drop.loc[key]": "Bus.drop.loc[]", "Bus.[key]": "Bus.[]", "Bus.iloc[key]": "Bus.iloc[]", "Bus.loc[key]": "Bus.loc[]", "Bus.iter_element()": "Bus.iter_element()", "Bus.iter_element().apply(func, *, dtype, name, index_constructor, columns_constructor)": "Bus.iter_element().apply()", "Bus.iter_element().apply_iter(func)": "Bus.iter_element().apply_iter()", "Bus.iter_element().apply_iter_items(func)": "Bus.iter_element().apply_iter_items()", "Bus.iter_element().apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Bus.iter_element().apply_pool()", "Bus.iter_element().reduce.from_func(func, *, fill_value).keys()": "Bus.iter_element().reduce.from_func().keys()", "Bus.iter_element().reduce.from_func(func, *, fill_value).__iter__()": "Bus.iter_element().reduce.from_func().__iter__()", "Bus.iter_element().reduce.from_func(func, *, fill_value).items()": "Bus.iter_element().reduce.from_func().items()", "Bus.iter_element().reduce.from_func(func, *, fill_value).values()": "Bus.iter_element().reduce.from_func().values()", "Bus.iter_element().reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Bus.iter_element().reduce.from_func().to_frame()", "Bus.iter_element().reduce.from_map_func(func, *, fill_value).keys()": "Bus.iter_element().reduce.from_map_func().keys()", "Bus.iter_element().reduce.from_map_func(func, *, fill_value).__iter__()": "Bus.iter_element().reduce.from_map_func().__iter__()", "Bus.iter_element().reduce.from_map_func(func, *, fill_value).items()": "Bus.iter_element().reduce.from_map_func().items()", "Bus.iter_element().reduce.from_map_func(func, *, fill_value).values()": "Bus.iter_element().reduce.from_map_func().values()", "Bus.iter_element().reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Bus.iter_element().reduce.from_map_func().to_frame()", "Bus.iter_element().reduce.from_label_map(func_map, *, fill_value).keys()": "Bus.iter_element().reduce.from_label_map().keys()", "Bus.iter_element().reduce.from_label_map(func_map, *, fill_value).__iter__()": "Bus.iter_element().reduce.from_label_map().__iter__()", "Bus.iter_element().reduce.from_label_map(func_map, *, fill_value).items()": "Bus.iter_element().reduce.from_label_map().items()", "Bus.iter_element().reduce.from_label_map(func_map, *, fill_value).values()": "Bus.iter_element().reduce.from_label_map().values()", "Bus.iter_element().reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Bus.iter_element().reduce.from_label_map().to_frame()", "Bus.iter_element().reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Bus.iter_element().reduce.from_label_pair_map().keys()", "Bus.iter_element().reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Bus.iter_element().reduce.from_label_pair_map().__iter__()", "Bus.iter_element().reduce.from_label_pair_map(func_map, *, fill_value).items()": "Bus.iter_element().reduce.from_label_pair_map().items()", "Bus.iter_element().reduce.from_label_pair_map(func_map, *, fill_value).values()": "Bus.iter_element().reduce.from_label_pair_map().values()", "Bus.iter_element().reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Bus.iter_element().reduce.from_label_pair_map().to_frame()", "Bus.iter_element_items()": "Bus.iter_element_items()", "Bus.iter_element_items().apply(func, *, dtype, name, index_constructor, columns_constructor)": "Bus.iter_element_items().apply()", "Bus.iter_element_items().apply_iter(func)": "Bus.iter_element_items().apply_iter()", "Bus.iter_element_items().apply_iter_items(func)": "Bus.iter_element_items().apply_iter_items()", "Bus.iter_element_items().apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Bus.iter_element_items().apply_pool()", "Bus.iter_element_items().reduce.from_func(func, *, fill_value).keys()": "Bus.iter_element_items().reduce.from_func().keys()", "Bus.iter_element_items().reduce.from_func(func, *, fill_value).__iter__()": "Bus.iter_element_items().reduce.from_func().__iter__()", "Bus.iter_element_items().reduce.from_func(func, *, fill_value).items()": "Bus.iter_element_items().reduce.from_func().items()", "Bus.iter_element_items().reduce.from_func(func, *, fill_value).values()": "Bus.iter_element_items().reduce.from_func().values()", "Bus.iter_element_items().reduce.from_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Bus.iter_element_items().reduce.from_func().to_frame()", "Bus.iter_element_items().reduce.from_map_func(func, *, fill_value).keys()": "Bus.iter_element_items().reduce.from_map_func().keys()", "Bus.iter_element_items().reduce.from_map_func(func, *, fill_value).__iter__()": "Bus.iter_element_items().reduce.from_map_func().__iter__()", "Bus.iter_element_items().reduce.from_map_func(func, *, fill_value).items()": "Bus.iter_element_items().reduce.from_map_func().items()", "Bus.iter_element_items().reduce.from_map_func(func, *, fill_value).values()": "Bus.iter_element_items().reduce.from_map_func().values()", "Bus.iter_element_items().reduce.from_map_func(func, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Bus.iter_element_items().reduce.from_map_func().to_frame()", "Bus.iter_element_items().reduce.from_label_map(func_map, *, fill_value).keys()": "Bus.iter_element_items().reduce.from_label_map().keys()", "Bus.iter_element_items().reduce.from_label_map(func_map, *, fill_value).__iter__()": "Bus.iter_element_items().reduce.from_label_map().__iter__()", "Bus.iter_element_items().reduce.from_label_map(func_map, *, fill_value).items()": "Bus.iter_element_items().reduce.from_label_map().items()", "Bus.iter_element_items().reduce.from_label_map(func_map, *, fill_value).values()": "Bus.iter_element_items().reduce.from_label_map().values()", "Bus.iter_element_items().reduce.from_label_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Bus.iter_element_items().reduce.from_label_map().to_frame()", "Bus.iter_element_items().reduce.from_label_pair_map(func_map, *, fill_value).keys()": "Bus.iter_element_items().reduce.from_label_pair_map().keys()", "Bus.iter_element_items().reduce.from_label_pair_map(func_map, *, fill_value).__iter__()": "Bus.iter_element_items().reduce.from_label_pair_map().__iter__()", "Bus.iter_element_items().reduce.from_label_pair_map(func_map, *, fill_value).items()": "Bus.iter_element_items().reduce.from_label_pair_map().items()", "Bus.iter_element_items().reduce.from_label_pair_map(func_map, *, fill_value).values()": "Bus.iter_element_items().reduce.from_label_pair_map().values()", "Bus.iter_element_items().reduce.from_label_pair_map(func_map, *, fill_value).to_frame(*, index, columns, index_constructor, columns_constructor, name, consolidate_blocks)": "Bus.iter_element_items().reduce.from_label_pair_map().to_frame()", "Bus.via_hashlib(include_name, include_class, encoding).to_bytes()": "Bus.via_hashlib().to_bytes()", "Bus.via_hashlib(include_name, include_class, encoding).md5()": "Bus.via_hashlib().md5()", "Bus.via_hashlib(include_name, include_class, encoding).sha256()": "Bus.via_hashlib().sha256()", "Bus.via_hashlib(include_name, include_class, encoding).sha512()": "Bus.via_hashlib().sha512()", "Bus.via_hashlib(include_name, include_class, encoding).sha3_256()": "Bus.via_hashlib().sha3_256()", "Bus.via_hashlib(include_name, include_class, encoding).sha3_512()": "Bus.via_hashlib().sha3_512()", "Bus.via_hashlib(include_name, include_class, encoding).shake_128()": "Bus.via_hashlib().shake_128()", "Bus.via_hashlib(include_name, include_class, encoding).shake_256()": "Bus.via_hashlib().shake_256()", "Bus.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Bus.via_hashlib().blake2b()", "Bus.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Bus.via_hashlib().blake2s()", "Bus.via_type_clinic.to_hint()": "Bus.via_type_clinic.to_hint()", "Bus.via_type_clinic.check(hint, *, fail_fast)": "Bus.via_type_clinic.check()", "Bus.via_type_clinic.warn(hint, *, fail_fast, category)": "Bus.via_type_clinic.warn()", "Bus.via_type_clinic.__call__(hint, *, fail_fast)": "Bus.via_type_clinic.__call__()", "Bus.via_type_clinic.__repr__()": "Bus.via_type_clinic.__repr__()", "Batch.__init__(items, *, name, config, max_workers, chunksize, use_threads, mp_context)": "Batch.__init__()", "Batch.from_duckdb(fp, *, config, max_workers, chunksize, use_threads, mp_context)": "Batch.from_duckdb()", "Batch.from_frames(frames, *, name, config, max_workers, chunksize, use_threads, mp_context)": "Batch.from_frames()", "Batch.from_hdf5(fp, *, config, max_workers, chunksize, use_threads, mp_context)": "Batch.from_hdf5()", "Batch.from_sqlite(fp, *, config, max_workers, chunksize, use_threads, mp_context)": "Batch.from_sqlite()", "Batch.from_xlsx(fp, *, config, max_workers, chunksize, use_threads, mp_context)": "Batch.from_xlsx()", "Batch.from_zip_csv(fp, *, config, max_workers, chunksize, use_threads, mp_context)": "Batch.from_zip_csv()", "Batch.from_zip_npy(fp, *, config, max_workers, chunksize, use_threads, mp_context)": "Batch.from_zip_npy()", "Batch.from_zip_npz(fp, *, config, max_workers, chunksize, use_threads, mp_context)": "Batch.from_zip_npz()", "Batch.from_zip_parquet(fp, *, config, max_workers, chunksize, use_threads, mp_context)": "Batch.from_zip_parquet()", "Batch.from_zip_pickle(fp, *, config, max_workers, chunksize, use_threads, mp_context)": "Batch.from_zip_pickle()", "Batch.from_zip_tsv(fp, *, config, max_workers, chunksize, use_threads, mp_context)": "Batch.from_zip_tsv()", "Batch.to_bus(*, index_constructor)": "Batch.to_bus()", "Batch.to_duckdb(fp, *, config)": "Batch.to_duckdb()", "Batch.to_frame(*, axis, union, index, columns, index_constructor, columns_constructor, name, fill_value, consolidate_blocks)": "Batch.to_frame()", "Batch.to_hdf5(fp, *, config)": "Batch.to_hdf5()", "Batch.to_series(*, dtype, name, index_constructor)": "Batch.to_series()", "Batch.to_sqlite(fp, *, config)": "Batch.to_sqlite()", "Batch.to_visidata()": "Batch.to_visidata()", "Batch.to_xlsx(fp, *, config)": "Batch.to_xlsx()", "Batch.to_zip_csv(fp, *, config, compression)": "Batch.to_zip_csv()", "Batch.to_zip_npy(fp, *, config, compression)": "Batch.to_zip_npy()", "Batch.to_zip_npz(fp, *, config, compression)": "Batch.to_zip_npz()", "Batch.to_zip_parquet(fp, *, config, compression)": "Batch.to_zip_parquet()", "Batch.to_zip_pickle(fp, *, config, compression)": "Batch.to_zip_pickle()", "Batch.to_zip_tsv(fp, *, config, compression)": "Batch.to_zip_tsv()", "Batch.STATIC": "Batch.STATIC", "Batch.T": "Batch.T", "Batch.memory": "Batch.memory", "Batch.name": "Batch.name", "Batch.shapes": "Batch.shapes", "Batch.via_container": "Batch.via_container", "Batch.__array__(dtype)": "Batch.__array__()", "Batch.__array_ufunc__(ufunc, method, *args, **kwargs)": "Batch.__array_ufunc__()", "Batch.__bool__()": "Batch.__bool__()", "Batch.__round__(decimals)": "Batch.__round__()", "Batch.all(axis, skipna, out)": "Batch.all()", "Batch.any(axis, skipna, out)": "Batch.any()", "Batch.apply(func)": "Batch.apply()", "Batch.apply_except(func, exception)": "Batch.apply_except()", "Batch.apply_items(func)": "Batch.apply_items()", "Batch.apply_items_except(func, exception)": "Batch.apply_items_except()", "Batch.astype[key](dtypes, *, consolidate_blocks)": "Batch.astype[]()", "Batch.astype(dtype)": "Batch.astype()", "Batch.clip(*, lower, upper, axis)": "Batch.clip()", "Batch.corr(*, axis)": "Batch.corr()", "Batch.count(*, skipna, skipfalsy, unique, axis)": "Batch.count()", "Batch.cov(*, axis, ddof)": "Batch.cov()", "Batch.cumprod(axis, skipna)": "Batch.cumprod()", "Batch.cumsum(axis, skipna)": "Batch.cumsum()", "Batch.drop_duplicated(*, axis, exclude_first, exclude_last)": "Batch.drop_duplicated()", "Batch.dropfalsy(axis, condition)": "Batch.dropfalsy()", "Batch.dropna(axis, condition)": "Batch.dropna()", "Batch.duplicated(*, axis, exclude_first, exclude_last)": "Batch.duplicated()", "Batch.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "Batch.equals()", "Batch.fillfalsy(value)": "Batch.fillfalsy()", "Batch.fillfalsy_backward(limit, *, axis)": "Batch.fillfalsy_backward()", "Batch.fillfalsy_forward(limit, axis)": "Batch.fillfalsy_forward()", "Batch.fillfalsy_leading(value, *, axis)": "Batch.fillfalsy_leading()", "Batch.fillfalsy_trailing(value, *, axis)": "Batch.fillfalsy_trailing()", "Batch.fillna(value)": "Batch.fillna()", "Batch.fillna_backward(limit, *, axis)": "Batch.fillna_backward()", "Batch.fillna_forward(limit, *, axis)": "Batch.fillna_forward()", "Batch.fillna_leading(value, *, axis)": "Batch.fillna_leading()", "Batch.fillna_trailing(value, *, axis)": "Batch.fillna_trailing()", "Batch.head(count)": "Batch.head()", "Batch.iloc_max(*, skipna, axis)": "Batch.iloc_max()", "Batch.iloc_min(*, skipna, axis)": "Batch.iloc_min()", "Batch.isfalsy()": "Batch.isfalsy()", "Batch.isin(other)": "Batch.isin()", "Batch.isna()": "Batch.isna()", "Batch.loc_max(*, skipna, axis)": "Batch.loc_max()", "Batch.loc_min(*, skipna, axis)": "Batch.loc_min()", "Batch.max(axis, skipna, out)": "Batch.max()", "Batch.mean(axis, skipna, out)": "Batch.mean()", "Batch.median(axis, skipna, out)": "Batch.median()", "Batch.min(axis, skipna, out)": "Batch.min()", "Batch.notfalsy()": "Batch.notfalsy()", "Batch.notna()": "Batch.notna()", "Batch.prod(axis, skipna, allna, out)": "Batch.prod()", "Batch.rank_dense(*, axis, skipna, ascending, start, fill_value)": "Batch.rank_dense()", "Batch.rank_max(*, axis, skipna, ascending, start, fill_value)": "Batch.rank_max()", "Batch.rank_mean(*, axis, skipna, ascending, start, fill_value)": "Batch.rank_mean()", "Batch.rank_min(*, axis, skipna, ascending, start, fill_value)": "Batch.rank_min()", "Batch.rank_ordinal(*, axis, skipna, ascending, start, fill_value)": "Batch.rank_ordinal()", "Batch.reindex(index, columns, *, fill_value, own_index, own_columns, check_equals)": "Batch.reindex()", "Batch.relabel(index, columns, *, index_constructor, columns_constructor)": "Batch.relabel()", "Batch.relabel_flat(index, columns)": "Batch.relabel_flat()", "Batch.relabel_level_add(index, columns, *, index_constructor, columns_constructor)": "Batch.relabel_level_add()", "Batch.relabel_level_drop(index, columns)": "Batch.relabel_level_drop()", "Batch.relabel_shift_in(key, *, axis)": "Batch.relabel_shift_in()", "Batch.rename(name, *, index, columns)": "Batch.rename()", "Batch.roll(index, columns, *, include_index, include_columns)": "Batch.roll()", "Batch.sample(index, columns, *, seed)": "Batch.sample()", "Batch.shift(index, columns, fill_value)": "Batch.shift()", "Batch.sort_columns(*, ascending, kind)": "Batch.sort_columns()", "Batch.sort_index(*, ascending, kind)": "Batch.sort_index()", "Batch.sort_values(label, *, ascending, axis, kind)": "Batch.sort_values()", "Batch.std(axis, skipna, ddof, out)": "Batch.std()", "Batch.sum(axis, skipna, allna, out)": "Batch.sum()", "Batch.tail(count)": "Batch.tail()", "Batch.transpose()": "Batch.transpose()", "Batch.unique(*, axis)": "Batch.unique()", "Batch.unset_index(*, names, consolidate_blocks, columns_constructors)": "Batch.unset_index()", "Batch.var(axis, skipna, ddof, out)": "Batch.var()", "Batch.__iter__()": "Batch.__iter__()", "Batch.items()": "Batch.items()", "Batch.keys()": "Batch.keys()", "Batch.values": "Batch.values", "Batch.interface": "Batch.interface", "Batch.__repr__()": "Batch.__repr__()", "Batch.__str__()": "Batch.__str__()", "Batch.display(config, *, style_config)": "Batch.display()", "Batch.display_tall(config)": "Batch.display_tall()", "Batch.display_wide(config)": "Batch.display_wide()", "Batch.bloc[key]": "Batch.bloc[]", "Batch.drop[key]": "Batch.drop[]", "Batch.drop.iloc[key]": "Batch.drop.iloc[]", "Batch.drop.loc[key]": "Batch.drop.loc[]", "Batch.[key]": "Batch.[]", "Batch.iloc[key]": "Batch.iloc[]", "Batch.loc[key]": "Batch.loc[]", "Batch.__add__(other)": "Batch.__add__()", "Batch.__and__(other)": "Batch.__and__()", "Batch.__eq__(other)": "Batch.__eq__()", "Batch.__floordiv__(other)": "Batch.__floordiv__()", "Batch.__ge__(other)": "Batch.__ge__()", "Batch.__gt__(other)": "Batch.__gt__()", "Batch.__le__(other)": "Batch.__le__()", "Batch.__lt__(other)": "Batch.__lt__()", "Batch.__matmul__(other)": "Batch.__matmul__()", "Batch.__mod__(other)": "Batch.__mod__()", "Batch.__mul__(other)": "Batch.__mul__()", "Batch.__ne__(other)": "Batch.__ne__()", "Batch.__or__(other)": "Batch.__or__()", "Batch.__pow__(other)": "Batch.__pow__()", "Batch.__radd__(other)": "Batch.__radd__()", "Batch.__rfloordiv__(other)": "Batch.__rfloordiv__()", "Batch.__rmatmul__(other)": "Batch.__rmatmul__()", "Batch.__rmul__(other)": "Batch.__rmul__()", "Batch.__rshift__(other)": "Batch.__rshift__()", "Batch.__rsub__(other)": "Batch.__rsub__()", "Batch.__rtruediv__(other)": "Batch.__rtruediv__()", "Batch.__sub__(other)": "Batch.__sub__()", "Batch.__truediv__(other)": "Batch.__truediv__()", "Batch.__xor__(other)": "Batch.__xor__()", "Batch.__abs__()": "Batch.__abs__()", "Batch.__invert__()": "Batch.__invert__()", "Batch.__neg__()": "Batch.__neg__()", "Batch.__pos__()": "Batch.__pos__()", "Batch.abs()": "Batch.abs()", "Batch.via_values.apply(func, *args, **kwargs)": "Batch.via_values.apply()", "Batch.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "Batch.via_values.__array_ufunc__()", "Batch.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "Batch.via_values.__call__()", "Batch.via_dt.__call__(*, fill_value)": "Batch.via_dt.__call__()", "Batch.via_dt.year": "Batch.via_dt.year", "Batch.via_dt.year_month": "Batch.via_dt.year_month", "Batch.via_dt.year_quarter": "Batch.via_dt.year_quarter", "Batch.via_dt.month": "Batch.via_dt.month", "Batch.via_dt.day": "Batch.via_dt.day", "Batch.via_dt.hour": "Batch.via_dt.hour", "Batch.via_dt.minute": "Batch.via_dt.minute", "Batch.via_dt.second": "Batch.via_dt.second", "Batch.via_dt.weekday()": "Batch.via_dt.weekday()", "Batch.via_dt.quarter()": "Batch.via_dt.quarter()", "Batch.via_dt.is_month_end()": "Batch.via_dt.is_month_end()", "Batch.via_dt.is_month_start()": "Batch.via_dt.is_month_start()", "Batch.via_dt.is_year_end()": "Batch.via_dt.is_year_end()", "Batch.via_dt.is_year_start()": "Batch.via_dt.is_year_start()", "Batch.via_dt.is_quarter_end()": "Batch.via_dt.is_quarter_end()", "Batch.via_dt.is_quarter_start()": "Batch.via_dt.is_quarter_start()", "Batch.via_dt.timetuple()": "Batch.via_dt.timetuple()", "Batch.via_dt.isoformat(sep, timespec)": "Batch.via_dt.isoformat()", "Batch.via_dt.fromisoformat()": "Batch.via_dt.fromisoformat()", "Batch.via_dt.strftime(format)": "Batch.via_dt.strftime()", "Batch.via_dt.strptime(format)": "Batch.via_dt.strptime()", "Batch.via_dt.strpdate(format)": "Batch.via_dt.strpdate()", "Batch.via_str.__getitem__(key)": "Batch.via_str.__getitem__()", "Batch.via_str.capitalize()": "Batch.via_str.capitalize()", "Batch.via_str.center(width, fillchar)": "Batch.via_str.center()", "Batch.via_str.contains(item)": "Batch.via_str.contains()", "Batch.via_str.count(sub, start, end)": "Batch.via_str.count()", "Batch.via_str.decode(encoding, errors)": "Batch.via_str.decode()", "Batch.via_str.encode(encoding, errors)": "Batch.via_str.encode()", "Batch.via_str.endswith(suffix, start, end)": "Batch.via_str.endswith()", "Batch.via_str.find(sub, start, end)": "Batch.via_str.find()", "Batch.via_str.format(format)": "Batch.via_str.format()", "Batch.via_str.index(sub, start, end)": "Batch.via_str.index()", "Batch.via_str.isalnum()": "Batch.via_str.isalnum()", "Batch.via_str.isalpha()": "Batch.via_str.isalpha()", "Batch.via_str.isdecimal()": "Batch.via_str.isdecimal()", "Batch.via_str.isdigit()": "Batch.via_str.isdigit()", "Batch.via_str.islower()": "Batch.via_str.islower()", "Batch.via_str.isnumeric()": "Batch.via_str.isnumeric()", "Batch.via_str.isspace()": "Batch.via_str.isspace()", "Batch.via_str.istitle()": "Batch.via_str.istitle()", "Batch.via_str.isupper()": "Batch.via_str.isupper()", "Batch.via_str.ljust(width, fillchar)": "Batch.via_str.ljust()", "Batch.via_str.len()": "Batch.via_str.len()", "Batch.via_str.lower()": "Batch.via_str.lower()", "Batch.via_str.lstrip(chars)": "Batch.via_str.lstrip()", "Batch.via_str.partition(sep)": "Batch.via_str.partition()", "Batch.via_str.replace(old, new, count)": "Batch.via_str.replace()", "Batch.via_str.rfind(sub, start, end)": "Batch.via_str.rfind()", "Batch.via_str.rindex(sub, start, end)": "Batch.via_str.rindex()", "Batch.via_str.rjust(width, fillchar)": "Batch.via_str.rjust()", "Batch.via_str.rpartition(sep)": "Batch.via_str.rpartition()", "Batch.via_str.rsplit(sep, maxsplit)": "Batch.via_str.rsplit()", "Batch.via_str.rstrip(chars)": "Batch.via_str.rstrip()", "Batch.via_str.split(sep, maxsplit)": "Batch.via_str.split()", "Batch.via_str.startswith(prefix, start, end)": "Batch.via_str.startswith()", "Batch.via_str.strip(chars)": "Batch.via_str.strip()", "Batch.via_str.swapcase()": "Batch.via_str.swapcase()", "Batch.via_str.title()": "Batch.via_str.title()", "Batch.via_str.upper()": "Batch.via_str.upper()", "Batch.via_str.zfill(width)": "Batch.via_str.zfill()", "Batch.via_T.via_fill_value(fill_value)": "Batch.via_T.via_fill_value()", "Batch.via_T.__add__(other)": "Batch.via_T.__add__()", "Batch.via_T.__sub__(other)": "Batch.via_T.__sub__()", "Batch.via_T.__mul__(other)": "Batch.via_T.__mul__()", "Batch.via_T.__truediv__(other)": "Batch.via_T.__truediv__()", "Batch.via_T.__floordiv__(other)": "Batch.via_T.__floordiv__()", "Batch.via_T.__mod__(other)": "Batch.via_T.__mod__()", "Batch.via_T.__pow__(other)": "Batch.via_T.__pow__()", "Batch.via_T.__lshift__(other)": "Batch.via_T.__lshift__()", "Batch.via_T.__rshift__(other)": "Batch.via_T.__rshift__()", "Batch.via_T.__and__(other)": "Batch.via_T.__and__()", "Batch.via_T.__xor__(other)": "Batch.via_T.__xor__()", "Batch.via_T.__or__(other)": "Batch.via_T.__or__()", "Batch.via_T.__lt__(other)": "Batch.via_T.__lt__()", "Batch.via_T.__le__(other)": "Batch.via_T.__le__()", "Batch.via_T.__eq__(other)": "Batch.via_T.__eq__()", "Batch.via_T.__ne__(other)": "Batch.via_T.__ne__()", "Batch.via_T.__gt__(other)": "Batch.via_T.__gt__()", "Batch.via_T.__ge__(other)": "Batch.via_T.__ge__()", "Batch.via_T.__radd__(other)": "Batch.via_T.__radd__()", "Batch.via_T.__rsub__(other)": "Batch.via_T.__rsub__()", "Batch.via_T.__rmul__(other)": "Batch.via_T.__rmul__()", "Batch.via_T.__rtruediv__(other)": "Batch.via_T.__rtruediv__()", "Batch.via_T.__rfloordiv__(other)": "Batch.via_T.__rfloordiv__()", "Batch.via_fill_value(fill_value).loc": "Batch.via_fill_value().loc", "Batch.via_fill_value(fill_value).__getitem__(key)": "Batch.via_fill_value().__getitem__()", "Batch.via_fill_value(fill_value).via_T": "Batch.via_fill_value().via_T", "Batch.via_fill_value(fill_value).__add__(other)": "Batch.via_fill_value().__add__()", "Batch.via_fill_value(fill_value).__sub__(other)": "Batch.via_fill_value().__sub__()", "Batch.via_fill_value(fill_value).__mul__(other)": "Batch.via_fill_value().__mul__()", "Batch.via_fill_value(fill_value).__truediv__(other)": "Batch.via_fill_value().__truediv__()", "Batch.via_fill_value(fill_value).__floordiv__(other)": "Batch.via_fill_value().__floordiv__()", "Batch.via_fill_value(fill_value).__mod__(other)": "Batch.via_fill_value().__mod__()", "Batch.via_fill_value(fill_value).__pow__(other)": "Batch.via_fill_value().__pow__()", "Batch.via_fill_value(fill_value).__lshift__(other)": "Batch.via_fill_value().__lshift__()", "Batch.via_fill_value(fill_value).__rshift__(other)": "Batch.via_fill_value().__rshift__()", "Batch.via_fill_value(fill_value).__and__(other)": "Batch.via_fill_value().__and__()", "Batch.via_fill_value(fill_value).__xor__(other)": "Batch.via_fill_value().__xor__()", "Batch.via_fill_value(fill_value).__or__(other)": "Batch.via_fill_value().__or__()", "Batch.via_fill_value(fill_value).__lt__(other)": "Batch.via_fill_value().__lt__()", "Batch.via_fill_value(fill_value).__le__(other)": "Batch.via_fill_value().__le__()", "Batch.via_fill_value(fill_value).__eq__(other)": "Batch.via_fill_value().__eq__()", "Batch.via_fill_value(fill_value).__ne__(other)": "Batch.via_fill_value().__ne__()", "Batch.via_fill_value(fill_value).__gt__(other)": "Batch.via_fill_value().__gt__()", "Batch.via_fill_value(fill_value).__ge__(other)": "Batch.via_fill_value().__ge__()", "Batch.via_fill_value(fill_value).__radd__(other)": "Batch.via_fill_value().__radd__()", "Batch.via_fill_value(fill_value).__rsub__(other)": "Batch.via_fill_value().__rsub__()", "Batch.via_fill_value(fill_value).__rmul__(other)": "Batch.via_fill_value().__rmul__()", "Batch.via_fill_value(fill_value).__rtruediv__(other)": "Batch.via_fill_value().__rtruediv__()", "Batch.via_fill_value(fill_value).__rfloordiv__(other)": "Batch.via_fill_value().__rfloordiv__()", "Batch.via_re(pattern, flags).search(pos, endpos)": "Batch.via_re().search()", "Batch.via_re(pattern, flags).match(pos, endpos)": "Batch.via_re().match()", "Batch.via_re(pattern, flags).fullmatch(pos, endpos)": "Batch.via_re().fullmatch()", "Batch.via_re(pattern, flags).split(maxsplit)": "Batch.via_re().split()", "Batch.via_re(pattern, flags).findall(pos, endpos)": "Batch.via_re().findall()", "Batch.via_re(pattern, flags).sub(repl, count)": "Batch.via_re().sub()", "Batch.via_re(pattern, flags).subn(repl, count)": "Batch.via_re().subn()", "Batch.via_hashlib(include_name, include_class, encoding).to_bytes()": "Batch.via_hashlib().to_bytes()", "Batch.via_hashlib(include_name, include_class, encoding).md5()": "Batch.via_hashlib().md5()", "Batch.via_hashlib(include_name, include_class, encoding).sha256()": "Batch.via_hashlib().sha256()", "Batch.via_hashlib(include_name, include_class, encoding).sha512()": "Batch.via_hashlib().sha512()", "Batch.via_hashlib(include_name, include_class, encoding).sha3_256()": "Batch.via_hashlib().sha3_256()", "Batch.via_hashlib(include_name, include_class, encoding).sha3_512()": "Batch.via_hashlib().sha3_512()", "Batch.via_hashlib(include_name, include_class, encoding).shake_128()": "Batch.via_hashlib().shake_128()", "Batch.via_hashlib(include_name, include_class, encoding).shake_256()": "Batch.via_hashlib().shake_256()", "Batch.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Batch.via_hashlib().blake2b()", "Batch.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Batch.via_hashlib().blake2s()", "Batch.via_type_clinic.to_hint()": "Batch.via_type_clinic.to_hint()", "Batch.via_type_clinic.check(hint, *, fail_fast)": "Batch.via_type_clinic.check()", "Batch.via_type_clinic.warn(hint, *, fail_fast, category)": "Batch.via_type_clinic.warn()", "Batch.via_type_clinic.__call__(hint, *, fail_fast)": "Batch.via_type_clinic.__call__()", "Batch.via_type_clinic.__repr__()": "Batch.via_type_clinic.__repr__()", "Batch.reduce.from_func(func, *, fill_value)": "Batch.reduce.from_func()", "Batch.reduce.from_map_func(func, *, fill_value)": "Batch.reduce.from_map_func()", "Batch.reduce.from_label_map(func_map, *, fill_value)": "Batch.reduce.from_label_map()", "Batch.reduce.from_label_pair_map(func_map, *, fill_value)": "Batch.reduce.from_label_pair_map()", "Yarn.__init__(series, *, index, index_constructor, deepcopy_from_bus, indexer, hierarchy, name, own_index)": "Yarn.__init__()", "Yarn.from_buses(buses, *, name, retain_labels, deepcopy_from_bus)": "Yarn.from_buses()", "Yarn.from_concat(containers, *, index, name, deepcopy_from_bus)": "Yarn.from_concat()", "Yarn.to_duckdb(fp, *, config)": "Yarn.to_duckdb()", "Yarn.to_hdf5(fp, *, config)": "Yarn.to_hdf5()", "Yarn.to_series()": "Yarn.to_series()", "Yarn.to_sqlite(fp, *, config)": "Yarn.to_sqlite()", "Yarn.to_visidata()": "Yarn.to_visidata()", "Yarn.to_xlsx(fp, *, config)": "Yarn.to_xlsx()", "Yarn.to_zip_csv(fp, *, config, compression)": "Yarn.to_zip_csv()", "Yarn.to_zip_npy(fp, *, config, compression)": "Yarn.to_zip_npy()", "Yarn.to_zip_npz(fp, *, config, compression)": "Yarn.to_zip_npz()", "Yarn.to_zip_parquet(fp, *, config, compression)": "Yarn.to_zip_parquet()", "Yarn.to_zip_pickle(fp, *, config, compression)": "Yarn.to_zip_pickle()", "Yarn.to_zip_tsv(fp, *, config, compression)": "Yarn.to_zip_tsv()", "Yarn.STATIC": "Yarn.STATIC", "Yarn.dtype": "Yarn.dtype", "Yarn.dtypes": "Yarn.dtypes", "Yarn.index": "Yarn.index", "Yarn.memory": "Yarn.memory", "Yarn.mloc": "Yarn.mloc", "Yarn.name": "Yarn.name", "Yarn.nbytes": "Yarn.nbytes", "Yarn.ndim": "Yarn.ndim", "Yarn.shape": "Yarn.shape", "Yarn.shapes": "Yarn.shapes", "Yarn.size": "Yarn.size", "Yarn.status": "Yarn.status", "Yarn.__bool__()": "Yarn.__bool__()", "Yarn.__len__()": "Yarn.__len__()", "Yarn.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "Yarn.equals()", "Yarn.head(count)": "Yarn.head()", "Yarn.rehierarch(depth_map, *, index_constructors)": "Yarn.rehierarch()", "Yarn.reindex(index, *, fill_value, own_index, check_equals)": "Yarn.reindex()", "Yarn.relabel(index)": "Yarn.relabel()", "Yarn.relabel_flat()": "Yarn.relabel_flat()", "Yarn.relabel_level_add(level)": "Yarn.relabel_level_add()", "Yarn.relabel_level_drop(count)": "Yarn.relabel_level_drop()", "Yarn.rename(name)": "Yarn.rename()", "Yarn.roll(shift, *, include_index)": "Yarn.roll()", "Yarn.shift(shift, *, fill_value)": "Yarn.shift()", "Yarn.sort_index(*, ascending, kind, key)": "Yarn.sort_index()", "Yarn.sort_values(*, ascending, kind, key)": "Yarn.sort_values()", "Yarn.tail(count)": "Yarn.tail()", "Yarn.unpersist()": "Yarn.unpersist()", "Yarn.__contains__(value)": "Yarn.__contains__()", "Yarn.__iter__()": "Yarn.__iter__()", "Yarn.__reversed__()": "Yarn.__reversed__()", "Yarn.get(key, default)": "Yarn.get()", "Yarn.items()": "Yarn.items()", "Yarn.keys()": "Yarn.keys()", "Yarn.values": "Yarn.values", "Yarn.interface": "Yarn.interface", "Yarn.__repr__()": "Yarn.__repr__()", "Yarn.__str__()": "Yarn.__str__()", "Yarn.display(config, *, style_config)": "Yarn.display()", "Yarn.display_tall(config)": "Yarn.display_tall()", "Yarn.display_wide(config)": "Yarn.display_wide()", "Yarn.drop[key]": "Yarn.drop[]", "Yarn.drop.iloc[key]": "Yarn.drop.iloc[]", "Yarn.drop.loc[key]": "Yarn.drop.loc[]", "Yarn.[key]": "Yarn.[]", "Yarn.iloc[key]": "Yarn.iloc[]", "Yarn.loc[key]": "Yarn.loc[]", "Yarn.iter_element()": "Yarn.iter_element()", "Yarn.iter_element().apply(func, *, dtype, name, index_constructor, columns_constructor)": "Yarn.iter_element().apply()", "Yarn.iter_element().apply_iter(func)": "Yarn.iter_element().apply_iter()", "Yarn.iter_element().apply_iter_items(func)": "Yarn.iter_element().apply_iter_items()", "Yarn.iter_element().apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Yarn.iter_element().apply_pool()", "Yarn.iter_element_items()": "Yarn.iter_element_items()", "Yarn.iter_element_items().apply(func, *, dtype, name, index_constructor, columns_constructor)": "Yarn.iter_element_items().apply()", "Yarn.iter_element_items().apply_iter(func)": "Yarn.iter_element_items().apply_iter()", "Yarn.iter_element_items().apply_iter_items(func)": "Yarn.iter_element_items().apply_iter_items()", "Yarn.iter_element_items().apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Yarn.iter_element_items().apply_pool()", "Yarn.via_hashlib(include_name, include_class, encoding).to_bytes()": "Yarn.via_hashlib().to_bytes()", "Yarn.via_hashlib(include_name, include_class, encoding).md5()": "Yarn.via_hashlib().md5()", "Yarn.via_hashlib(include_name, include_class, encoding).sha256()": "Yarn.via_hashlib().sha256()", "Yarn.via_hashlib(include_name, include_class, encoding).sha512()": "Yarn.via_hashlib().sha512()", "Yarn.via_hashlib(include_name, include_class, encoding).sha3_256()": "Yarn.via_hashlib().sha3_256()", "Yarn.via_hashlib(include_name, include_class, encoding).sha3_512()": "Yarn.via_hashlib().sha3_512()", "Yarn.via_hashlib(include_name, include_class, encoding).shake_128()": "Yarn.via_hashlib().shake_128()", "Yarn.via_hashlib(include_name, include_class, encoding).shake_256()": "Yarn.via_hashlib().shake_256()", "Yarn.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Yarn.via_hashlib().blake2b()", "Yarn.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Yarn.via_hashlib().blake2s()", "Yarn.via_type_clinic.to_hint()": "Yarn.via_type_clinic.to_hint()", "Yarn.via_type_clinic.check(hint, *, fail_fast)": "Yarn.via_type_clinic.check()", "Yarn.via_type_clinic.warn(hint, *, fail_fast, category)": "Yarn.via_type_clinic.warn()", "Yarn.via_type_clinic.__call__(hint, *, fail_fast)": "Yarn.via_type_clinic.__call__()", "Yarn.via_type_clinic.__repr__()": "Yarn.via_type_clinic.__repr__()", "Quilt.__init__(bus, *, axis, retain_labels, axis_hierarchy, axis_opposite, deepcopy_from_bus)": "Quilt.__init__()", "Quilt.from_duckdb(fp, *, config, axis, retain_labels, deepcopy_from_bus, max_persist)": "Quilt.from_duckdb()", "Quilt.from_frame(frame, *, chunksize, retain_labels, axis, name, label_extractor, config, deepcopy_from_bus)": "Quilt.from_frame()", "Quilt.from_frames(frames, *, axis, name, retain_labels, deepcopy_from_bus)": "Quilt.from_frames()", "Quilt.from_hdf5(fp, *, config, axis, retain_labels, deepcopy_from_bus, max_persist)": "Quilt.from_hdf5()", "Quilt.from_items(items, *, axis, name, retain_labels, deepcopy_from_bus)": "Quilt.from_items()", "Quilt.from_sqlite(fp, *, config, axis, retain_labels, deepcopy_from_bus, max_persist)": "Quilt.from_sqlite()", "Quilt.from_xlsx(fp, *, config, axis, retain_labels, deepcopy_from_bus, max_persist)": "Quilt.from_xlsx()", "Quilt.from_zip_csv(fp, *, config, axis, retain_labels, deepcopy_from_bus, max_persist)": "Quilt.from_zip_csv()", "Quilt.from_zip_npy(fp, *, config, axis, retain_labels, deepcopy_from_bus, max_persist)": "Quilt.from_zip_npy()", "Quilt.from_zip_npz(fp, *, config, axis, retain_labels, deepcopy_from_bus, max_persist)": "Quilt.from_zip_npz()", "Quilt.from_zip_parquet(fp, *, config, axis, retain_labels, deepcopy_from_bus, max_persist)": "Quilt.from_zip_parquet()", "Quilt.from_zip_pickle(fp, *, config, axis, retain_labels, deepcopy_from_bus, max_persist)": "Quilt.from_zip_pickle()", "Quilt.from_zip_tsv(fp, *, config, axis, retain_labels, deepcopy_from_bus, max_persist)": "Quilt.from_zip_tsv()", "Quilt.to_duckdb(fp, *, config)": "Quilt.to_duckdb()", "Quilt.to_frame()": "Quilt.to_frame()", "Quilt.to_hdf5(fp, *, config)": "Quilt.to_hdf5()", "Quilt.to_sqlite(fp, *, config)": "Quilt.to_sqlite()", "Quilt.to_visidata()": "Quilt.to_visidata()", "Quilt.to_xlsx(fp, *, config)": "Quilt.to_xlsx()", "Quilt.to_zip_csv(fp, *, config, compression)": "Quilt.to_zip_csv()", "Quilt.to_zip_npy(fp, *, config, compression)": "Quilt.to_zip_npy()", "Quilt.to_zip_npz(fp, *, config, compression)": "Quilt.to_zip_npz()", "Quilt.to_zip_parquet(fp, *, config, compression)": "Quilt.to_zip_parquet()", "Quilt.to_zip_pickle(fp, *, config, compression)": "Quilt.to_zip_pickle()", "Quilt.to_zip_tsv(fp, *, config, compression)": "Quilt.to_zip_tsv()", "Quilt.STATIC": "Quilt.STATIC", "Quilt.bus": "Quilt.bus", "Quilt.columns": "Quilt.columns", "Quilt.index": "Quilt.index", "Quilt.memory": "Quilt.memory", "Quilt.name": "Quilt.name", "Quilt.nbytes": "Quilt.nbytes", "Quilt.ndim": "Quilt.ndim", "Quilt.shape": "Quilt.shape", "Quilt.size": "Quilt.size", "Quilt.status": "Quilt.status", "Quilt.__bool__()": "Quilt.__bool__()", "Quilt.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "Quilt.equals()", "Quilt.head(count)": "Quilt.head()", "Quilt.rename(name)": "Quilt.rename()", "Quilt.sample(index, columns, *, seed)": "Quilt.sample()", "Quilt.tail(count)": "Quilt.tail()", "Quilt.unpersist()": "Quilt.unpersist()", "Quilt.__contains__(value)": "Quilt.__contains__()", "Quilt.__iter__()": "Quilt.__iter__()", "Quilt.get(key, default)": "Quilt.get()", "Quilt.items()": "Quilt.items()", "Quilt.keys()": "Quilt.keys()", "Quilt.values": "Quilt.values", "Quilt.interface": "Quilt.interface", "Quilt.__repr__()": "Quilt.__repr__()", "Quilt.__str__()": "Quilt.__str__()", "Quilt.display(config, *, style_config)": "Quilt.display()", "Quilt.display_tall(config)": "Quilt.display_tall()", "Quilt.display_wide(config)": "Quilt.display_wide()", "Quilt.[key]": "Quilt.[]", "Quilt.iloc[key]": "Quilt.iloc[]", "Quilt.loc[key]": "Quilt.loc[]", "Quilt.iter_array(*, axis)": "Quilt.iter_array()", "Quilt.iter_array(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Quilt.iter_array().apply()", "Quilt.iter_array(*, axis).apply_iter(func)": "Quilt.iter_array().apply_iter()", "Quilt.iter_array(*, axis).apply_iter_items(func)": "Quilt.iter_array().apply_iter_items()", "Quilt.iter_array(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Quilt.iter_array().apply_pool()", "Quilt.iter_array_items(*, axis)": "Quilt.iter_array_items()", "Quilt.iter_array_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Quilt.iter_array_items().apply()", "Quilt.iter_array_items(*, axis).apply_iter(func)": "Quilt.iter_array_items().apply_iter()", "Quilt.iter_array_items(*, axis).apply_iter_items(func)": "Quilt.iter_array_items().apply_iter_items()", "Quilt.iter_array_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Quilt.iter_array_items().apply_pool()", "Quilt.iter_series(*, axis)": "Quilt.iter_series()", "Quilt.iter_series(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Quilt.iter_series().apply()", "Quilt.iter_series(*, axis).apply_iter(func)": "Quilt.iter_series().apply_iter()", "Quilt.iter_series(*, axis).apply_iter_items(func)": "Quilt.iter_series().apply_iter_items()", "Quilt.iter_series(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Quilt.iter_series().apply_pool()", "Quilt.iter_series_items(*, axis)": "Quilt.iter_series_items()", "Quilt.iter_series_items(*, axis).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Quilt.iter_series_items().apply()", "Quilt.iter_series_items(*, axis).apply_iter(func)": "Quilt.iter_series_items().apply_iter()", "Quilt.iter_series_items(*, axis).apply_iter_items(func)": "Quilt.iter_series_items().apply_iter_items()", "Quilt.iter_series_items(*, axis).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Quilt.iter_series_items().apply_pool()", "Quilt.iter_tuple(*, axis, constructor)": "Quilt.iter_tuple()", "Quilt.iter_tuple(*, axis, constructor).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Quilt.iter_tuple().apply()", "Quilt.iter_tuple(*, axis, constructor).apply_iter(func)": "Quilt.iter_tuple().apply_iter()", "Quilt.iter_tuple(*, axis, constructor).apply_iter_items(func)": "Quilt.iter_tuple().apply_iter_items()", "Quilt.iter_tuple(*, axis, constructor).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Quilt.iter_tuple().apply_pool()", "Quilt.iter_tuple(*, axis, constructor).map_all(mapping, *, dtype, name, index_constructor)": "Quilt.iter_tuple().map_all()", "Quilt.iter_tuple(*, axis, constructor).map_all_iter(mapping)": "Quilt.iter_tuple().map_all_iter()", "Quilt.iter_tuple(*, axis, constructor).map_all_iter_items(mapping)": "Quilt.iter_tuple().map_all_iter_items()", "Quilt.iter_tuple(*, axis, constructor).map_any(mapping, *, dtype, name, index_constructor)": "Quilt.iter_tuple().map_any()", "Quilt.iter_tuple(*, axis, constructor).map_any_iter(mapping)": "Quilt.iter_tuple().map_any_iter()", "Quilt.iter_tuple(*, axis, constructor).map_any_iter_items(mapping)": "Quilt.iter_tuple().map_any_iter_items()", "Quilt.iter_tuple(*, axis, constructor).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "Quilt.iter_tuple().map_fill()", "Quilt.iter_tuple(*, axis, constructor).map_fill_iter(mapping, *, fill_value)": "Quilt.iter_tuple().map_fill_iter()", "Quilt.iter_tuple(*, axis, constructor).map_fill_iter_items(mapping, *, fill_value)": "Quilt.iter_tuple().map_fill_iter_items()", "Quilt.iter_tuple_items(*, axis, constructor)": "Quilt.iter_tuple_items()", "Quilt.iter_tuple_items(*, axis, constructor).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Quilt.iter_tuple_items().apply()", "Quilt.iter_tuple_items(*, axis, constructor).apply_iter(func)": "Quilt.iter_tuple_items().apply_iter()", "Quilt.iter_tuple_items(*, axis, constructor).apply_iter_items(func)": "Quilt.iter_tuple_items().apply_iter_items()", "Quilt.iter_tuple_items(*, axis, constructor).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Quilt.iter_tuple_items().apply_pool()", "Quilt.iter_tuple_items(*, axis, constructor).map_all(mapping, *, dtype, name, index_constructor)": "Quilt.iter_tuple_items().map_all()", "Quilt.iter_tuple_items(*, axis, constructor).map_all_iter(mapping)": "Quilt.iter_tuple_items().map_all_iter()", "Quilt.iter_tuple_items(*, axis, constructor).map_all_iter_items(mapping)": "Quilt.iter_tuple_items().map_all_iter_items()", "Quilt.iter_tuple_items(*, axis, constructor).map_any(mapping, *, dtype, name, index_constructor)": "Quilt.iter_tuple_items().map_any()", "Quilt.iter_tuple_items(*, axis, constructor).map_any_iter(mapping)": "Quilt.iter_tuple_items().map_any_iter()", "Quilt.iter_tuple_items(*, axis, constructor).map_any_iter_items(mapping)": "Quilt.iter_tuple_items().map_any_iter_items()", "Quilt.iter_tuple_items(*, axis, constructor).map_fill(mapping, *, fill_value, dtype, name, index_constructor)": "Quilt.iter_tuple_items().map_fill()", "Quilt.iter_tuple_items(*, axis, constructor).map_fill_iter(mapping, *, fill_value)": "Quilt.iter_tuple_items().map_fill_iter()", "Quilt.iter_tuple_items(*, axis, constructor).map_fill_iter_items(mapping, *, fill_value)": "Quilt.iter_tuple_items().map_fill_iter_items()", "Quilt.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "Quilt.iter_window()", "Quilt.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Quilt.iter_window().apply()", "Quilt.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "Quilt.iter_window().apply_iter()", "Quilt.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "Quilt.iter_window().apply_iter_items()", "Quilt.iter_window(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Quilt.iter_window().apply_pool()", "Quilt.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "Quilt.iter_window_array()", "Quilt.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Quilt.iter_window_array().apply()", "Quilt.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "Quilt.iter_window_array().apply_iter()", "Quilt.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "Quilt.iter_window_array().apply_iter_items()", "Quilt.iter_window_array(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Quilt.iter_window_array().apply_pool()", "Quilt.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "Quilt.iter_window_array_items()", "Quilt.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Quilt.iter_window_array_items().apply()", "Quilt.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "Quilt.iter_window_array_items().apply_iter()", "Quilt.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "Quilt.iter_window_array_items().apply_iter_items()", "Quilt.iter_window_array_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Quilt.iter_window_array_items().apply_pool()", "Quilt.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment)": "Quilt.iter_window_items()", "Quilt.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Quilt.iter_window_items().apply()", "Quilt.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter(func)": "Quilt.iter_window_items().apply_iter()", "Quilt.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_iter_items(func)": "Quilt.iter_window_items().apply_iter_items()", "Quilt.iter_window_items(*, size, axis, step, window_sized, window_func, window_valid, label_shift, label_missing_skips, label_missing_raises, start_shift, size_increment).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Quilt.iter_window_items().apply_pool()", "Quilt.via_hashlib(include_name, include_class, encoding).to_bytes()": "Quilt.via_hashlib().to_bytes()", "Quilt.via_hashlib(include_name, include_class, encoding).md5()": "Quilt.via_hashlib().md5()", "Quilt.via_hashlib(include_name, include_class, encoding).sha256()": "Quilt.via_hashlib().sha256()", "Quilt.via_hashlib(include_name, include_class, encoding).sha512()": "Quilt.via_hashlib().sha512()", "Quilt.via_hashlib(include_name, include_class, encoding).sha3_256()": "Quilt.via_hashlib().sha3_256()", "Quilt.via_hashlib(include_name, include_class, encoding).sha3_512()": "Quilt.via_hashlib().sha3_512()", "Quilt.via_hashlib(include_name, include_class, encoding).shake_128()": "Quilt.via_hashlib().shake_128()", "Quilt.via_hashlib(include_name, include_class, encoding).shake_256()": "Quilt.via_hashlib().shake_256()", "Quilt.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Quilt.via_hashlib().blake2b()", "Quilt.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Quilt.via_hashlib().blake2s()", "Quilt.via_type_clinic.to_hint()": "Quilt.via_type_clinic.to_hint()", "Quilt.via_type_clinic.check(hint, *, fail_fast)": "Quilt.via_type_clinic.check()", "Quilt.via_type_clinic.warn(hint, *, fail_fast, category)": "Quilt.via_type_clinic.warn()", "Quilt.via_type_clinic.__call__(hint, *, fail_fast)": "Quilt.via_type_clinic.__call__()", "Quilt.via_type_clinic.__repr__()": "Quilt.via_type_clinic.__repr__()", "Index.__init__(labels, *, loc_is_iloc, name, dtype)": "Index.__init__()", "Index.from_labels(labels, *, name)": "Index.from_labels()", "Index.from_pandas(value)": "Index.from_pandas()", "Index.to_html(config, style_config)": "Index.to_html()", "Index.to_html_datatables(fp, *, show, config)": "Index.to_html_datatables()", "Index.to_pandas()": "Index.to_pandas()", "Index.to_series()": "Index.to_series()", "Index.to_visidata()": "Index.to_visidata()", "Index.STATIC": "Index.STATIC", "Index.depth": "Index.depth", "Index.dtype": "Index.dtype", "Index.index_types": "Index.index_types", "Index.memory": "Index.memory", "Index.mloc": "Index.mloc", "Index.name": "Index.name", "Index.names": "Index.names", "Index.nbytes": "Index.nbytes", "Index.ndim": "Index.ndim", "Index.positions": "Index.positions", "Index.shape": "Index.shape", "Index.size": "Index.size", "Index.__array__(dtype)": "Index.__array__()", "Index.__array_ufunc__(ufunc, method, *args, **kwargs)": "Index.__array_ufunc__()", "Index.__bool__()": "Index.__bool__()", "Index.__copy__()": "Index.__copy__()", "Index.__deepcopy__(memo)": "Index.__deepcopy__()", "Index.__len__()": "Index.__len__()", "Index.all(axis, skipna, out)": "Index.all()", "Index.any(axis, skipna, out)": "Index.any()", "Index.astype(dtype)": "Index.astype()", "Index.copy()": "Index.copy()", "Index.cumprod(axis, skipna)": "Index.cumprod()", "Index.cumsum(axis, skipna)": "Index.cumsum()", "Index.difference(*others)": "Index.difference()", "Index.dropfalsy()": "Index.dropfalsy()", "Index.dropna()": "Index.dropna()", "Index.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "Index.equals()", "Index.fillfalsy(value)": "Index.fillfalsy()", "Index.fillna(value)": "Index.fillna()", "Index.head(count)": "Index.head()", "Index.iloc_searchsorted(values, *, side_left)": "Index.iloc_searchsorted()", "Index.intersection(*others)": "Index.intersection()", "Index.isfalsy()": "Index.isfalsy()", "Index.isin(other)": "Index.isin()", "Index.isna()": "Index.isna()", "Index.label_widths_at_depth(depth_level)": "Index.label_widths_at_depth()", "Index.level_add(level, *, index_constructor)": "Index.level_add()", "Index.loc_searchsorted(values, *, side_left, fill_value)": "Index.loc_searchsorted()", "Index.loc_to_iloc(key)": "Index.loc_to_iloc()", "Index.max(axis, skipna, out)": "Index.max()", "Index.mean(axis, skipna, out)": "Index.mean()", "Index.median(axis, skipna, out)": "Index.median()", "Index.min(axis, skipna, out)": "Index.min()", "Index.notfalsy()": "Index.notfalsy()", "Index.notna()": "Index.notna()", "Index.prod(axis, skipna, allna, out)": "Index.prod()", "Index.relabel(mapper)": "Index.relabel()", "Index.rename(name)": "Index.rename()", "Index.roll(shift)": "Index.roll()", "Index.sample(count, *, seed)": "Index.sample()", "Index.sort(ascending, kind, key)": "Index.sort()", "Index.std(axis, skipna, ddof, out)": "Index.std()", "Index.sum(axis, skipna, allna, out)": "Index.sum()", "Index.tail(count)": "Index.tail()", "Index.union(*others)": "Index.union()", "Index.unique(depth_level, order_by_occurrence)": "Index.unique()", "Index.values_at_depth(depth_level)": "Index.values_at_depth()", "Index.var(axis, skipna, ddof, out)": "Index.var()", "Index.__contains__(value)": "Index.__contains__()", "Index.__iter__()": "Index.__iter__()", "Index.__reversed__()": "Index.__reversed__()", "Index.values": "Index.values", "Index.interface": "Index.interface", "Index.__repr__()": "Index.__repr__()", "Index.__str__()": "Index.__str__()", "Index.display(config, *, style_config)": "Index.display()", "Index.display_tall(config)": "Index.display_tall()", "Index.display_wide(config)": "Index.display_wide()", "Index.drop.iloc[key]": "Index.drop.iloc[]", "Index.drop.loc[key]": "Index.drop.loc[]", "Index.[key]": "Index.[]", "Index.iloc[key]": "Index.iloc[]", "Index.loc[key]": "Index.loc[]", "Index.iter_label(depth_level)": "Index.iter_label()", "Index.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "Index.iter_label().apply()", "Index.iter_label(depth_level).apply_iter(func)": "Index.iter_label().apply_iter()", "Index.iter_label(depth_level).apply_iter_items(func)": "Index.iter_label().apply_iter_items()", "Index.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "Index.iter_label().apply_pool()", "Index.__add__(other)": "Index.__add__()", "Index.__and__(other)": "Index.__and__()", "Index.__eq__(other)": "Index.__eq__()", "Index.__floordiv__(other)": "Index.__floordiv__()", "Index.__ge__(other)": "Index.__ge__()", "Index.__gt__(other)": "Index.__gt__()", "Index.__le__(other)": "Index.__le__()", "Index.__lt__(other)": "Index.__lt__()", "Index.__matmul__(other)": "Index.__matmul__()", "Index.__mod__(other)": "Index.__mod__()", "Index.__mul__(other)": "Index.__mul__()", "Index.__ne__(other)": "Index.__ne__()", "Index.__or__(other)": "Index.__or__()", "Index.__pow__(other)": "Index.__pow__()", "Index.__radd__(other)": "Index.__radd__()", "Index.__rfloordiv__(other)": "Index.__rfloordiv__()", "Index.__rmatmul__(other)": "Index.__rmatmul__()", "Index.__rmul__(other)": "Index.__rmul__()", "Index.__rshift__(other)": "Index.__rshift__()", "Index.__rsub__(other)": "Index.__rsub__()", "Index.__rtruediv__(other)": "Index.__rtruediv__()", "Index.__sub__(other)": "Index.__sub__()", "Index.__truediv__(other)": "Index.__truediv__()", "Index.__xor__(other)": "Index.__xor__()", "Index.__abs__()": "Index.__abs__()", "Index.__invert__()": "Index.__invert__()", "Index.__neg__()": "Index.__neg__()", "Index.__pos__()": "Index.__pos__()", "Index.via_values.apply(func, *args, **kwargs)": "Index.via_values.apply()", "Index.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "Index.via_values.__array_ufunc__()", "Index.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "Index.via_values.__call__()", "Index.via_dt.__call__(*, fill_value)": "Index.via_dt.__call__()", "Index.via_dt.year": "Index.via_dt.year", "Index.via_dt.year_month": "Index.via_dt.year_month", "Index.via_dt.year_quarter": "Index.via_dt.year_quarter", "Index.via_dt.month": "Index.via_dt.month", "Index.via_dt.day": "Index.via_dt.day", "Index.via_dt.hour": "Index.via_dt.hour", "Index.via_dt.minute": "Index.via_dt.minute", "Index.via_dt.second": "Index.via_dt.second", "Index.via_dt.weekday()": "Index.via_dt.weekday()", "Index.via_dt.quarter()": "Index.via_dt.quarter()", "Index.via_dt.is_month_end()": "Index.via_dt.is_month_end()", "Index.via_dt.is_month_start()": "Index.via_dt.is_month_start()", "Index.via_dt.is_year_end()": "Index.via_dt.is_year_end()", "Index.via_dt.is_year_start()": "Index.via_dt.is_year_start()", "Index.via_dt.is_quarter_end()": "Index.via_dt.is_quarter_end()", "Index.via_dt.is_quarter_start()": "Index.via_dt.is_quarter_start()", "Index.via_dt.timetuple()": "Index.via_dt.timetuple()", "Index.via_dt.isoformat(sep, timespec)": "Index.via_dt.isoformat()", "Index.via_dt.fromisoformat()": "Index.via_dt.fromisoformat()", "Index.via_dt.strftime(format)": "Index.via_dt.strftime()", "Index.via_dt.strptime(format)": "Index.via_dt.strptime()", "Index.via_dt.strpdate(format)": "Index.via_dt.strpdate()", "Index.via_str.__getitem__(key)": "Index.via_str.__getitem__()", "Index.via_str.capitalize()": "Index.via_str.capitalize()", "Index.via_str.center(width, fillchar)": "Index.via_str.center()", "Index.via_str.contains(item)": "Index.via_str.contains()", "Index.via_str.count(sub, start, end)": "Index.via_str.count()", "Index.via_str.decode(encoding, errors)": "Index.via_str.decode()", "Index.via_str.encode(encoding, errors)": "Index.via_str.encode()", "Index.via_str.endswith(suffix, start, end)": "Index.via_str.endswith()", "Index.via_str.find(sub, start, end)": "Index.via_str.find()", "Index.via_str.format(format)": "Index.via_str.format()", "Index.via_str.index(sub, start, end)": "Index.via_str.index()", "Index.via_str.isalnum()": "Index.via_str.isalnum()", "Index.via_str.isalpha()": "Index.via_str.isalpha()", "Index.via_str.isdecimal()": "Index.via_str.isdecimal()", "Index.via_str.isdigit()": "Index.via_str.isdigit()", "Index.via_str.islower()": "Index.via_str.islower()", "Index.via_str.isnumeric()": "Index.via_str.isnumeric()", "Index.via_str.isspace()": "Index.via_str.isspace()", "Index.via_str.istitle()": "Index.via_str.istitle()", "Index.via_str.isupper()": "Index.via_str.isupper()", "Index.via_str.ljust(width, fillchar)": "Index.via_str.ljust()", "Index.via_str.len()": "Index.via_str.len()", "Index.via_str.lower()": "Index.via_str.lower()", "Index.via_str.lstrip(chars)": "Index.via_str.lstrip()", "Index.via_str.partition(sep)": "Index.via_str.partition()", "Index.via_str.replace(old, new, count)": "Index.via_str.replace()", "Index.via_str.rfind(sub, start, end)": "Index.via_str.rfind()", "Index.via_str.rindex(sub, start, end)": "Index.via_str.rindex()", "Index.via_str.rjust(width, fillchar)": "Index.via_str.rjust()", "Index.via_str.rpartition(sep)": "Index.via_str.rpartition()", "Index.via_str.rsplit(sep, maxsplit)": "Index.via_str.rsplit()", "Index.via_str.rstrip(chars)": "Index.via_str.rstrip()", "Index.via_str.split(sep, maxsplit)": "Index.via_str.split()", "Index.via_str.startswith(prefix, start, end)": "Index.via_str.startswith()", "Index.via_str.strip(chars)": "Index.via_str.strip()", "Index.via_str.swapcase()": "Index.via_str.swapcase()", "Index.via_str.title()": "Index.via_str.title()", "Index.via_str.upper()": "Index.via_str.upper()", "Index.via_str.zfill(width)": "Index.via_str.zfill()", "Index.via_re(pattern, flags).search(pos, endpos)": "Index.via_re().search()", "Index.via_re(pattern, flags).match(pos, endpos)": "Index.via_re().match()", "Index.via_re(pattern, flags).fullmatch(pos, endpos)": "Index.via_re().fullmatch()", "Index.via_re(pattern, flags).split(maxsplit)": "Index.via_re().split()", "Index.via_re(pattern, flags).findall(pos, endpos)": "Index.via_re().findall()", "Index.via_re(pattern, flags).sub(repl, count)": "Index.via_re().sub()", "Index.via_re(pattern, flags).subn(repl, count)": "Index.via_re().subn()", "Index.via_hashlib(include_name, include_class, encoding).to_bytes()": "Index.via_hashlib().to_bytes()", "Index.via_hashlib(include_name, include_class, encoding).md5()": "Index.via_hashlib().md5()", "Index.via_hashlib(include_name, include_class, encoding).sha256()": "Index.via_hashlib().sha256()", "Index.via_hashlib(include_name, include_class, encoding).sha512()": "Index.via_hashlib().sha512()", "Index.via_hashlib(include_name, include_class, encoding).sha3_256()": "Index.via_hashlib().sha3_256()", "Index.via_hashlib(include_name, include_class, encoding).sha3_512()": "Index.via_hashlib().sha3_512()", "Index.via_hashlib(include_name, include_class, encoding).shake_128()": "Index.via_hashlib().shake_128()", "Index.via_hashlib(include_name, include_class, encoding).shake_256()": "Index.via_hashlib().shake_256()", "Index.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Index.via_hashlib().blake2b()", "Index.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "Index.via_hashlib().blake2s()", "Index.via_type_clinic.to_hint()": "Index.via_type_clinic.to_hint()", "Index.via_type_clinic.check(hint, *, fail_fast)": "Index.via_type_clinic.check()", "Index.via_type_clinic.warn(hint, *, fail_fast, category)": "Index.via_type_clinic.warn()", "Index.via_type_clinic.__call__(hint, *, fail_fast)": "Index.via_type_clinic.__call__()", "Index.via_type_clinic.__repr__()": "Index.via_type_clinic.__repr__()", "IndexGO.__init__(labels, *, loc_is_iloc, name, dtype)": "IndexGO.__init__()", "IndexGO.from_labels(labels, *, name)": "IndexGO.from_labels()", "IndexGO.from_pandas(value)": "IndexGO.from_pandas()", "IndexGO.to_html(config, style_config)": "IndexGO.to_html()", "IndexGO.to_html_datatables(fp, *, show, config)": "IndexGO.to_html_datatables()", "IndexGO.to_pandas()": "IndexGO.to_pandas()", "IndexGO.to_series()": "IndexGO.to_series()", "IndexGO.to_visidata()": "IndexGO.to_visidata()", "IndexGO.STATIC": "IndexGO.STATIC", "IndexGO.depth": "IndexGO.depth", "IndexGO.dtype": "IndexGO.dtype", "IndexGO.index_types": "IndexGO.index_types", "IndexGO.memory": "IndexGO.memory", "IndexGO.mloc": "IndexGO.mloc", "IndexGO.name": "IndexGO.name", "IndexGO.names": "IndexGO.names", "IndexGO.nbytes": "IndexGO.nbytes", "IndexGO.ndim": "IndexGO.ndim", "IndexGO.positions": "IndexGO.positions", "IndexGO.shape": "IndexGO.shape", "IndexGO.size": "IndexGO.size", "IndexGO.__array__(dtype)": "IndexGO.__array__()", "IndexGO.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexGO.__array_ufunc__()", "IndexGO.__bool__()": "IndexGO.__bool__()", "IndexGO.__copy__()": "IndexGO.__copy__()", "IndexGO.__deepcopy__(memo)": "IndexGO.__deepcopy__()", "IndexGO.__len__()": "IndexGO.__len__()", "IndexGO.all(axis, skipna, out)": "IndexGO.all()", "IndexGO.any(axis, skipna, out)": "IndexGO.any()", "IndexGO.append(value)": "IndexGO.append()", "IndexGO.astype(dtype)": "IndexGO.astype()", "IndexGO.copy()": "IndexGO.copy()", "IndexGO.cumprod(axis, skipna)": "IndexGO.cumprod()", "IndexGO.cumsum(axis, skipna)": "IndexGO.cumsum()", "IndexGO.difference(*others)": "IndexGO.difference()", "IndexGO.dropfalsy()": "IndexGO.dropfalsy()", "IndexGO.dropna()": "IndexGO.dropna()", "IndexGO.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexGO.equals()", "IndexGO.extend(values)": "IndexGO.extend()", "IndexGO.fillfalsy(value)": "IndexGO.fillfalsy()", "IndexGO.fillna(value)": "IndexGO.fillna()", "IndexGO.head(count)": "IndexGO.head()", "IndexGO.iloc_searchsorted(values, *, side_left)": "IndexGO.iloc_searchsorted()", "IndexGO.intersection(*others)": "IndexGO.intersection()", "IndexGO.isfalsy()": "IndexGO.isfalsy()", "IndexGO.isin(other)": "IndexGO.isin()", "IndexGO.isna()": "IndexGO.isna()", "IndexGO.label_widths_at_depth(depth_level)": "IndexGO.label_widths_at_depth()", "IndexGO.level_add(level, *, index_constructor)": "IndexGO.level_add()", "IndexGO.loc_searchsorted(values, *, side_left, fill_value)": "IndexGO.loc_searchsorted()", "IndexGO.loc_to_iloc(key)": "IndexGO.loc_to_iloc()", "IndexGO.max(axis, skipna, out)": "IndexGO.max()", "IndexGO.mean(axis, skipna, out)": "IndexGO.mean()", "IndexGO.median(axis, skipna, out)": "IndexGO.median()", "IndexGO.min(axis, skipna, out)": "IndexGO.min()", "IndexGO.notfalsy()": "IndexGO.notfalsy()", "IndexGO.notna()": "IndexGO.notna()", "IndexGO.prod(axis, skipna, allna, out)": "IndexGO.prod()", "IndexGO.relabel(mapper)": "IndexGO.relabel()", "IndexGO.rename(name)": "IndexGO.rename()", "IndexGO.roll(shift)": "IndexGO.roll()", "IndexGO.sample(count, *, seed)": "IndexGO.sample()", "IndexGO.sort(ascending, kind, key)": "IndexGO.sort()", "IndexGO.std(axis, skipna, ddof, out)": "IndexGO.std()", "IndexGO.sum(axis, skipna, allna, out)": "IndexGO.sum()", "IndexGO.tail(count)": "IndexGO.tail()", "IndexGO.union(*others)": "IndexGO.union()", "IndexGO.unique(depth_level, order_by_occurrence)": "IndexGO.unique()", "IndexGO.values_at_depth(depth_level)": "IndexGO.values_at_depth()", "IndexGO.var(axis, skipna, ddof, out)": "IndexGO.var()", "IndexGO.__contains__(value)": "IndexGO.__contains__()", "IndexGO.__iter__()": "IndexGO.__iter__()", "IndexGO.__reversed__()": "IndexGO.__reversed__()", "IndexGO.values": "IndexGO.values", "IndexGO.interface": "IndexGO.interface", "IndexGO.__repr__()": "IndexGO.__repr__()", "IndexGO.__str__()": "IndexGO.__str__()", "IndexGO.display(config, *, style_config)": "IndexGO.display()", "IndexGO.display_tall(config)": "IndexGO.display_tall()", "IndexGO.display_wide(config)": "IndexGO.display_wide()", "IndexGO.drop.iloc[key]": "IndexGO.drop.iloc[]", "IndexGO.drop.loc[key]": "IndexGO.drop.loc[]", "IndexGO.[key]": "IndexGO.[]", "IndexGO.iloc[key]": "IndexGO.iloc[]", "IndexGO.loc[key]": "IndexGO.loc[]", "IndexGO.iter_label(depth_level)": "IndexGO.iter_label()", "IndexGO.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexGO.iter_label().apply()", "IndexGO.iter_label(depth_level).apply_iter(func)": "IndexGO.iter_label().apply_iter()", "IndexGO.iter_label(depth_level).apply_iter_items(func)": "IndexGO.iter_label().apply_iter_items()", "IndexGO.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexGO.iter_label().apply_pool()", "IndexGO.__add__(other)": "IndexGO.__add__()", "IndexGO.__and__(other)": "IndexGO.__and__()", "IndexGO.__eq__(other)": "IndexGO.__eq__()", "IndexGO.__floordiv__(other)": "IndexGO.__floordiv__()", "IndexGO.__ge__(other)": "IndexGO.__ge__()", "IndexGO.__gt__(other)": "IndexGO.__gt__()", "IndexGO.__le__(other)": "IndexGO.__le__()", "IndexGO.__lt__(other)": "IndexGO.__lt__()", "IndexGO.__matmul__(other)": "IndexGO.__matmul__()", "IndexGO.__mod__(other)": "IndexGO.__mod__()", "IndexGO.__mul__(other)": "IndexGO.__mul__()", "IndexGO.__ne__(other)": "IndexGO.__ne__()", "IndexGO.__or__(other)": "IndexGO.__or__()", "IndexGO.__pow__(other)": "IndexGO.__pow__()", "IndexGO.__radd__(other)": "IndexGO.__radd__()", "IndexGO.__rfloordiv__(other)": "IndexGO.__rfloordiv__()", "IndexGO.__rmatmul__(other)": "IndexGO.__rmatmul__()", "IndexGO.__rmul__(other)": "IndexGO.__rmul__()", "IndexGO.__rshift__(other)": "IndexGO.__rshift__()", "IndexGO.__rsub__(other)": "IndexGO.__rsub__()", "IndexGO.__rtruediv__(other)": "IndexGO.__rtruediv__()", "IndexGO.__sub__(other)": "IndexGO.__sub__()", "IndexGO.__truediv__(other)": "IndexGO.__truediv__()", "IndexGO.__xor__(other)": "IndexGO.__xor__()", "IndexGO.__abs__()": "IndexGO.__abs__()", "IndexGO.__invert__()": "IndexGO.__invert__()", "IndexGO.__neg__()": "IndexGO.__neg__()", "IndexGO.__pos__()": "IndexGO.__pos__()", "IndexGO.via_values.apply(func, *args, **kwargs)": "IndexGO.via_values.apply()", "IndexGO.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexGO.via_values.__array_ufunc__()", "IndexGO.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexGO.via_values.__call__()", "IndexGO.via_dt.__call__(*, fill_value)": "IndexGO.via_dt.__call__()", "IndexGO.via_dt.year": "IndexGO.via_dt.year", "IndexGO.via_dt.year_month": "IndexGO.via_dt.year_month", "IndexGO.via_dt.year_quarter": "IndexGO.via_dt.year_quarter", "IndexGO.via_dt.month": "IndexGO.via_dt.month", "IndexGO.via_dt.day": "IndexGO.via_dt.day", "IndexGO.via_dt.hour": "IndexGO.via_dt.hour", "IndexGO.via_dt.minute": "IndexGO.via_dt.minute", "IndexGO.via_dt.second": "IndexGO.via_dt.second", "IndexGO.via_dt.weekday()": "IndexGO.via_dt.weekday()", "IndexGO.via_dt.quarter()": "IndexGO.via_dt.quarter()", "IndexGO.via_dt.is_month_end()": "IndexGO.via_dt.is_month_end()", "IndexGO.via_dt.is_month_start()": "IndexGO.via_dt.is_month_start()", "IndexGO.via_dt.is_year_end()": "IndexGO.via_dt.is_year_end()", "IndexGO.via_dt.is_year_start()": "IndexGO.via_dt.is_year_start()", "IndexGO.via_dt.is_quarter_end()": "IndexGO.via_dt.is_quarter_end()", "IndexGO.via_dt.is_quarter_start()": "IndexGO.via_dt.is_quarter_start()", "IndexGO.via_dt.timetuple()": "IndexGO.via_dt.timetuple()", "IndexGO.via_dt.isoformat(sep, timespec)": "IndexGO.via_dt.isoformat()", "IndexGO.via_dt.fromisoformat()": "IndexGO.via_dt.fromisoformat()", "IndexGO.via_dt.strftime(format)": "IndexGO.via_dt.strftime()", "IndexGO.via_dt.strptime(format)": "IndexGO.via_dt.strptime()", "IndexGO.via_dt.strpdate(format)": "IndexGO.via_dt.strpdate()", "IndexGO.via_str.__getitem__(key)": "IndexGO.via_str.__getitem__()", "IndexGO.via_str.capitalize()": "IndexGO.via_str.capitalize()", "IndexGO.via_str.center(width, fillchar)": "IndexGO.via_str.center()", "IndexGO.via_str.contains(item)": "IndexGO.via_str.contains()", "IndexGO.via_str.count(sub, start, end)": "IndexGO.via_str.count()", "IndexGO.via_str.decode(encoding, errors)": "IndexGO.via_str.decode()", "IndexGO.via_str.encode(encoding, errors)": "IndexGO.via_str.encode()", "IndexGO.via_str.endswith(suffix, start, end)": "IndexGO.via_str.endswith()", "IndexGO.via_str.find(sub, start, end)": "IndexGO.via_str.find()", "IndexGO.via_str.format(format)": "IndexGO.via_str.format()", "IndexGO.via_str.index(sub, start, end)": "IndexGO.via_str.index()", "IndexGO.via_str.isalnum()": "IndexGO.via_str.isalnum()", "IndexGO.via_str.isalpha()": "IndexGO.via_str.isalpha()", "IndexGO.via_str.isdecimal()": "IndexGO.via_str.isdecimal()", "IndexGO.via_str.isdigit()": "IndexGO.via_str.isdigit()", "IndexGO.via_str.islower()": "IndexGO.via_str.islower()", "IndexGO.via_str.isnumeric()": "IndexGO.via_str.isnumeric()", "IndexGO.via_str.isspace()": "IndexGO.via_str.isspace()", "IndexGO.via_str.istitle()": "IndexGO.via_str.istitle()", "IndexGO.via_str.isupper()": "IndexGO.via_str.isupper()", "IndexGO.via_str.ljust(width, fillchar)": "IndexGO.via_str.ljust()", "IndexGO.via_str.len()": "IndexGO.via_str.len()", "IndexGO.via_str.lower()": "IndexGO.via_str.lower()", "IndexGO.via_str.lstrip(chars)": "IndexGO.via_str.lstrip()", "IndexGO.via_str.partition(sep)": "IndexGO.via_str.partition()", "IndexGO.via_str.replace(old, new, count)": "IndexGO.via_str.replace()", "IndexGO.via_str.rfind(sub, start, end)": "IndexGO.via_str.rfind()", "IndexGO.via_str.rindex(sub, start, end)": "IndexGO.via_str.rindex()", "IndexGO.via_str.rjust(width, fillchar)": "IndexGO.via_str.rjust()", "IndexGO.via_str.rpartition(sep)": "IndexGO.via_str.rpartition()", "IndexGO.via_str.rsplit(sep, maxsplit)": "IndexGO.via_str.rsplit()", "IndexGO.via_str.rstrip(chars)": "IndexGO.via_str.rstrip()", "IndexGO.via_str.split(sep, maxsplit)": "IndexGO.via_str.split()", "IndexGO.via_str.startswith(prefix, start, end)": "IndexGO.via_str.startswith()", "IndexGO.via_str.strip(chars)": "IndexGO.via_str.strip()", "IndexGO.via_str.swapcase()": "IndexGO.via_str.swapcase()", "IndexGO.via_str.title()": "IndexGO.via_str.title()", "IndexGO.via_str.upper()": "IndexGO.via_str.upper()", "IndexGO.via_str.zfill(width)": "IndexGO.via_str.zfill()", "IndexGO.via_re(pattern, flags).search(pos, endpos)": "IndexGO.via_re().search()", "IndexGO.via_re(pattern, flags).match(pos, endpos)": "IndexGO.via_re().match()", "IndexGO.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexGO.via_re().fullmatch()", "IndexGO.via_re(pattern, flags).split(maxsplit)": "IndexGO.via_re().split()", "IndexGO.via_re(pattern, flags).findall(pos, endpos)": "IndexGO.via_re().findall()", "IndexGO.via_re(pattern, flags).sub(repl, count)": "IndexGO.via_re().sub()", "IndexGO.via_re(pattern, flags).subn(repl, count)": "IndexGO.via_re().subn()", "IndexGO.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexGO.via_hashlib().to_bytes()", "IndexGO.via_hashlib(include_name, include_class, encoding).md5()": "IndexGO.via_hashlib().md5()", "IndexGO.via_hashlib(include_name, include_class, encoding).sha256()": "IndexGO.via_hashlib().sha256()", "IndexGO.via_hashlib(include_name, include_class, encoding).sha512()": "IndexGO.via_hashlib().sha512()", "IndexGO.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexGO.via_hashlib().sha3_256()", "IndexGO.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexGO.via_hashlib().sha3_512()", "IndexGO.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexGO.via_hashlib().shake_128()", "IndexGO.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexGO.via_hashlib().shake_256()", "IndexGO.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexGO.via_hashlib().blake2b()", "IndexGO.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexGO.via_hashlib().blake2s()", "IndexGO.via_type_clinic.to_hint()": "IndexGO.via_type_clinic.to_hint()", "IndexGO.via_type_clinic.check(hint, *, fail_fast)": "IndexGO.via_type_clinic.check()", "IndexGO.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexGO.via_type_clinic.warn()", "IndexGO.via_type_clinic.__call__(hint, *, fail_fast)": "IndexGO.via_type_clinic.__call__()", "IndexGO.via_type_clinic.__repr__()": "IndexGO.via_type_clinic.__repr__()", "IndexHierarchy.__init__(indices, *, indexers, name, blocks, own_blocks)": "IndexHierarchy.__init__()", "IndexHierarchy.from_index_items(items, *, index_constructor, name)": "IndexHierarchy.from_index_items()", "IndexHierarchy.from_labels(labels, *, name, reorder_for_hierarchy, index_constructors, depth_reference, continuation_token)": "IndexHierarchy.from_labels()", "IndexHierarchy.from_labels_delimited(labels, *, delimiter, name, index_constructors)": "IndexHierarchy.from_labels_delimited()", "IndexHierarchy.from_names(names)": "IndexHierarchy.from_names()", "IndexHierarchy.from_pandas(value)": "IndexHierarchy.from_pandas()", "IndexHierarchy.from_product(*, name, index_constructors, *levels)": "IndexHierarchy.from_product()", "IndexHierarchy.from_tree(tree, *, name, index_constructors)": "IndexHierarchy.from_tree()", "IndexHierarchy.from_values_per_depth(values, *, name, depth_reference, index_constructors)": "IndexHierarchy.from_values_per_depth()", "IndexHierarchy.to_frame()": "IndexHierarchy.to_frame()", "IndexHierarchy.to_frame_go()": "IndexHierarchy.to_frame_go()", "IndexHierarchy.to_html(config, style_config)": "IndexHierarchy.to_html()", "IndexHierarchy.to_html_datatables(fp, *, show, config)": "IndexHierarchy.to_html_datatables()", "IndexHierarchy.to_pandas()": "IndexHierarchy.to_pandas()", "IndexHierarchy.to_tree()": "IndexHierarchy.to_tree()", "IndexHierarchy.to_visidata()": "IndexHierarchy.to_visidata()", "IndexHierarchy.STATIC": "IndexHierarchy.STATIC", "IndexHierarchy.depth": "IndexHierarchy.depth", "IndexHierarchy.dtypes": "IndexHierarchy.dtypes", "IndexHierarchy.index_types": "IndexHierarchy.index_types", "IndexHierarchy.memory": "IndexHierarchy.memory", "IndexHierarchy.mloc": "IndexHierarchy.mloc", "IndexHierarchy.name": "IndexHierarchy.name", "IndexHierarchy.names": "IndexHierarchy.names", "IndexHierarchy.nbytes": "IndexHierarchy.nbytes", "IndexHierarchy.ndim": "IndexHierarchy.ndim", "IndexHierarchy.positions": "IndexHierarchy.positions", "IndexHierarchy.shape": "IndexHierarchy.shape", "IndexHierarchy.size": "IndexHierarchy.size", "IndexHierarchy.__array__(dtype)": "IndexHierarchy.__array__()", "IndexHierarchy.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexHierarchy.__array_ufunc__()", "IndexHierarchy.__bool__()": "IndexHierarchy.__bool__()", "IndexHierarchy.__copy__()": "IndexHierarchy.__copy__()", "IndexHierarchy.__deepcopy__(memo)": "IndexHierarchy.__deepcopy__()", "IndexHierarchy.__len__()": "IndexHierarchy.__len__()", "IndexHierarchy.all(axis, skipna, out)": "IndexHierarchy.all()", "IndexHierarchy.any(axis, skipna, out)": "IndexHierarchy.any()", "IndexHierarchy.astype[key](dtypes, *, consolidate_blocks)": "IndexHierarchy.astype[]()", "IndexHierarchy.astype(dtype, *, consolidate_blocks)": "IndexHierarchy.astype()", "IndexHierarchy.copy()": "IndexHierarchy.copy()", "IndexHierarchy.cumprod(axis, skipna)": "IndexHierarchy.cumprod()", "IndexHierarchy.cumsum(axis, skipna)": "IndexHierarchy.cumsum()", "IndexHierarchy.difference(*others)": "IndexHierarchy.difference()", "IndexHierarchy.dropfalsy(*, condition)": "IndexHierarchy.dropfalsy()", "IndexHierarchy.dropna(*, condition)": "IndexHierarchy.dropna()", "IndexHierarchy.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexHierarchy.equals()", "IndexHierarchy.fillfalsy(value)": "IndexHierarchy.fillfalsy()", "IndexHierarchy.fillna(value)": "IndexHierarchy.fillna()", "IndexHierarchy.flat()": "IndexHierarchy.flat()", "IndexHierarchy.head(count)": "IndexHierarchy.head()", "IndexHierarchy.iloc_searchsorted(values, *, side_left)": "IndexHierarchy.iloc_searchsorted()", "IndexHierarchy.index_at_depth(depth_level)": "IndexHierarchy.index_at_depth()", "IndexHierarchy.indexer_at_depth(depth_level)": "IndexHierarchy.indexer_at_depth()", "IndexHierarchy.intersection(*others)": "IndexHierarchy.intersection()", "IndexHierarchy.isfalsy()": "IndexHierarchy.isfalsy()", "IndexHierarchy.isin(other)": "IndexHierarchy.isin()", "IndexHierarchy.isna()": "IndexHierarchy.isna()", "IndexHierarchy.label_widths_at_depth(depth_level)": "IndexHierarchy.label_widths_at_depth()", "IndexHierarchy.level_add(level, *, index_constructor)": "IndexHierarchy.level_add()", "IndexHierarchy.level_drop(count)": "IndexHierarchy.level_drop()", "IndexHierarchy.loc_searchsorted(values, *, side_left, fill_value)": "IndexHierarchy.loc_searchsorted()", "IndexHierarchy.loc_to_iloc(key)": "IndexHierarchy.loc_to_iloc()", "IndexHierarchy.max(axis, skipna, out)": "IndexHierarchy.max()", "IndexHierarchy.mean(axis, skipna, out)": "IndexHierarchy.mean()", "IndexHierarchy.median(axis, skipna, out)": "IndexHierarchy.median()", "IndexHierarchy.min(axis, skipna, out)": "IndexHierarchy.min()", "IndexHierarchy.notfalsy()": "IndexHierarchy.notfalsy()", "IndexHierarchy.notna()": "IndexHierarchy.notna()", "IndexHierarchy.prod(axis, skipna, allna, out)": "IndexHierarchy.prod()", "IndexHierarchy.rehierarch(depth_map, *, index_constructors)": "IndexHierarchy.rehierarch()", "IndexHierarchy.relabel(mapper)": "IndexHierarchy.relabel()", "IndexHierarchy.relabel_at_depth(mapper, depth_level)": "IndexHierarchy.relabel_at_depth()", "IndexHierarchy.rename(name)": "IndexHierarchy.rename()", "IndexHierarchy.roll(shift)": "IndexHierarchy.roll()", "IndexHierarchy.sample(count, *, seed)": "IndexHierarchy.sample()", "IndexHierarchy.sort(*, ascending, kind, key)": "IndexHierarchy.sort()", "IndexHierarchy.std(axis, skipna, ddof, out)": "IndexHierarchy.std()", "IndexHierarchy.sum(axis, skipna, allna, out)": "IndexHierarchy.sum()", "IndexHierarchy.tail(count)": "IndexHierarchy.tail()", "IndexHierarchy.union(*others)": "IndexHierarchy.union()", "IndexHierarchy.unique(depth_level, order_by_occurrence)": "IndexHierarchy.unique()", "IndexHierarchy.values_at_depth(depth_level)": "IndexHierarchy.values_at_depth()", "IndexHierarchy.var(axis, skipna, ddof, out)": "IndexHierarchy.var()", "IndexHierarchy.__contains__(value)": "IndexHierarchy.__contains__()", "IndexHierarchy.__iter__()": "IndexHierarchy.__iter__()", "IndexHierarchy.__reversed__()": "IndexHierarchy.__reversed__()", "IndexHierarchy.values": "IndexHierarchy.values", "IndexHierarchy.interface": "IndexHierarchy.interface", "IndexHierarchy.__repr__()": "IndexHierarchy.__repr__()", "IndexHierarchy.__str__()": "IndexHierarchy.__str__()", "IndexHierarchy.display(config, *, style_config)": "IndexHierarchy.display()", "IndexHierarchy.display_tall(config)": "IndexHierarchy.display_tall()", "IndexHierarchy.display_wide(config)": "IndexHierarchy.display_wide()", "IndexHierarchy.[key]": "IndexHierarchy.[]", "IndexHierarchy.iloc[key]": "IndexHierarchy.iloc[]", "IndexHierarchy.loc[key]": "IndexHierarchy.loc[]", "IndexHierarchy.iter_label(depth_level)": "IndexHierarchy.iter_label()", "IndexHierarchy.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexHierarchy.iter_label().apply()", "IndexHierarchy.iter_label(depth_level).apply_iter(func)": "IndexHierarchy.iter_label().apply_iter()", "IndexHierarchy.iter_label(depth_level).apply_iter_items(func)": "IndexHierarchy.iter_label().apply_iter_items()", "IndexHierarchy.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexHierarchy.iter_label().apply_pool()", "IndexHierarchy.__add__(other)": "IndexHierarchy.__add__()", "IndexHierarchy.__and__(other)": "IndexHierarchy.__and__()", "IndexHierarchy.__eq__(other)": "IndexHierarchy.__eq__()", "IndexHierarchy.__floordiv__(other)": "IndexHierarchy.__floordiv__()", "IndexHierarchy.__ge__(other)": "IndexHierarchy.__ge__()", "IndexHierarchy.__gt__(other)": "IndexHierarchy.__gt__()", "IndexHierarchy.__le__(other)": "IndexHierarchy.__le__()", "IndexHierarchy.__lt__(other)": "IndexHierarchy.__lt__()", "IndexHierarchy.__matmul__(other)": "IndexHierarchy.__matmul__()", "IndexHierarchy.__mod__(other)": "IndexHierarchy.__mod__()", "IndexHierarchy.__mul__(other)": "IndexHierarchy.__mul__()", "IndexHierarchy.__ne__(other)": "IndexHierarchy.__ne__()", "IndexHierarchy.__or__(other)": "IndexHierarchy.__or__()", "IndexHierarchy.__pow__(other)": "IndexHierarchy.__pow__()", "IndexHierarchy.__radd__(other)": "IndexHierarchy.__radd__()", "IndexHierarchy.__rfloordiv__(other)": "IndexHierarchy.__rfloordiv__()", "IndexHierarchy.__rmatmul__(other)": "IndexHierarchy.__rmatmul__()", "IndexHierarchy.__rmul__(other)": "IndexHierarchy.__rmul__()", "IndexHierarchy.__rshift__(other)": "IndexHierarchy.__rshift__()", "IndexHierarchy.__rsub__(other)": "IndexHierarchy.__rsub__()", "IndexHierarchy.__rtruediv__(other)": "IndexHierarchy.__rtruediv__()", "IndexHierarchy.__sub__(other)": "IndexHierarchy.__sub__()", "IndexHierarchy.__truediv__(other)": "IndexHierarchy.__truediv__()", "IndexHierarchy.__xor__(other)": "IndexHierarchy.__xor__()", "IndexHierarchy.__abs__()": "IndexHierarchy.__abs__()", "IndexHierarchy.__invert__()": "IndexHierarchy.__invert__()", "IndexHierarchy.__neg__()": "IndexHierarchy.__neg__()", "IndexHierarchy.__pos__()": "IndexHierarchy.__pos__()", "IndexHierarchy.via_values.apply(func, *args, **kwargs)": "IndexHierarchy.via_values.apply()", "IndexHierarchy.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexHierarchy.via_values.__array_ufunc__()", "IndexHierarchy.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexHierarchy.via_values.__call__()", "IndexHierarchy.via_dt.__call__(*, fill_value)": "IndexHierarchy.via_dt.__call__()", "IndexHierarchy.via_dt.year": "IndexHierarchy.via_dt.year", "IndexHierarchy.via_dt.year_month": "IndexHierarchy.via_dt.year_month", "IndexHierarchy.via_dt.year_quarter": "IndexHierarchy.via_dt.year_quarter", "IndexHierarchy.via_dt.month": "IndexHierarchy.via_dt.month", "IndexHierarchy.via_dt.day": "IndexHierarchy.via_dt.day", "IndexHierarchy.via_dt.hour": "IndexHierarchy.via_dt.hour", "IndexHierarchy.via_dt.minute": "IndexHierarchy.via_dt.minute", "IndexHierarchy.via_dt.second": "IndexHierarchy.via_dt.second", "IndexHierarchy.via_dt.weekday()": "IndexHierarchy.via_dt.weekday()", "IndexHierarchy.via_dt.quarter()": "IndexHierarchy.via_dt.quarter()", "IndexHierarchy.via_dt.is_month_end()": "IndexHierarchy.via_dt.is_month_end()", "IndexHierarchy.via_dt.is_month_start()": "IndexHierarchy.via_dt.is_month_start()", "IndexHierarchy.via_dt.is_year_end()": "IndexHierarchy.via_dt.is_year_end()", "IndexHierarchy.via_dt.is_year_start()": "IndexHierarchy.via_dt.is_year_start()", "IndexHierarchy.via_dt.is_quarter_end()": "IndexHierarchy.via_dt.is_quarter_end()", "IndexHierarchy.via_dt.is_quarter_start()": "IndexHierarchy.via_dt.is_quarter_start()", "IndexHierarchy.via_dt.timetuple()": "IndexHierarchy.via_dt.timetuple()", "IndexHierarchy.via_dt.isoformat(sep, timespec)": "IndexHierarchy.via_dt.isoformat()", "IndexHierarchy.via_dt.fromisoformat()": "IndexHierarchy.via_dt.fromisoformat()", "IndexHierarchy.via_dt.strftime(format)": "IndexHierarchy.via_dt.strftime()", "IndexHierarchy.via_dt.strptime(format)": "IndexHierarchy.via_dt.strptime()", "IndexHierarchy.via_dt.strpdate(format)": "IndexHierarchy.via_dt.strpdate()", "IndexHierarchy.via_str.__getitem__(key)": "IndexHierarchy.via_str.__getitem__()", "IndexHierarchy.via_str.capitalize()": "IndexHierarchy.via_str.capitalize()", "IndexHierarchy.via_str.center(width, fillchar)": "IndexHierarchy.via_str.center()", "IndexHierarchy.via_str.contains(item)": "IndexHierarchy.via_str.contains()", "IndexHierarchy.via_str.count(sub, start, end)": "IndexHierarchy.via_str.count()", "IndexHierarchy.via_str.decode(encoding, errors)": "IndexHierarchy.via_str.decode()", "IndexHierarchy.via_str.encode(encoding, errors)": "IndexHierarchy.via_str.encode()", "IndexHierarchy.via_str.endswith(suffix, start, end)": "IndexHierarchy.via_str.endswith()", "IndexHierarchy.via_str.find(sub, start, end)": "IndexHierarchy.via_str.find()", "IndexHierarchy.via_str.format(format)": "IndexHierarchy.via_str.format()", "IndexHierarchy.via_str.index(sub, start, end)": "IndexHierarchy.via_str.index()", "IndexHierarchy.via_str.isalnum()": "IndexHierarchy.via_str.isalnum()", "IndexHierarchy.via_str.isalpha()": "IndexHierarchy.via_str.isalpha()", "IndexHierarchy.via_str.isdecimal()": "IndexHierarchy.via_str.isdecimal()", "IndexHierarchy.via_str.isdigit()": "IndexHierarchy.via_str.isdigit()", "IndexHierarchy.via_str.islower()": "IndexHierarchy.via_str.islower()", "IndexHierarchy.via_str.isnumeric()": "IndexHierarchy.via_str.isnumeric()", "IndexHierarchy.via_str.isspace()": "IndexHierarchy.via_str.isspace()", "IndexHierarchy.via_str.istitle()": "IndexHierarchy.via_str.istitle()", "IndexHierarchy.via_str.isupper()": "IndexHierarchy.via_str.isupper()", "IndexHierarchy.via_str.ljust(width, fillchar)": "IndexHierarchy.via_str.ljust()", "IndexHierarchy.via_str.len()": "IndexHierarchy.via_str.len()", "IndexHierarchy.via_str.lower()": "IndexHierarchy.via_str.lower()", "IndexHierarchy.via_str.lstrip(chars)": "IndexHierarchy.via_str.lstrip()", "IndexHierarchy.via_str.partition(sep)": "IndexHierarchy.via_str.partition()", "IndexHierarchy.via_str.replace(old, new, count)": "IndexHierarchy.via_str.replace()", "IndexHierarchy.via_str.rfind(sub, start, end)": "IndexHierarchy.via_str.rfind()", "IndexHierarchy.via_str.rindex(sub, start, end)": "IndexHierarchy.via_str.rindex()", "IndexHierarchy.via_str.rjust(width, fillchar)": "IndexHierarchy.via_str.rjust()", "IndexHierarchy.via_str.rpartition(sep)": "IndexHierarchy.via_str.rpartition()", "IndexHierarchy.via_str.rsplit(sep, maxsplit)": "IndexHierarchy.via_str.rsplit()", "IndexHierarchy.via_str.rstrip(chars)": "IndexHierarchy.via_str.rstrip()", "IndexHierarchy.via_str.split(sep, maxsplit)": "IndexHierarchy.via_str.split()", "IndexHierarchy.via_str.startswith(prefix, start, end)": "IndexHierarchy.via_str.startswith()", "IndexHierarchy.via_str.strip(chars)": "IndexHierarchy.via_str.strip()", "IndexHierarchy.via_str.swapcase()": "IndexHierarchy.via_str.swapcase()", "IndexHierarchy.via_str.title()": "IndexHierarchy.via_str.title()", "IndexHierarchy.via_str.upper()": "IndexHierarchy.via_str.upper()", "IndexHierarchy.via_str.zfill(width)": "IndexHierarchy.via_str.zfill()", "IndexHierarchy.via_T.via_fill_value(fill_value)": "IndexHierarchy.via_T.via_fill_value()", "IndexHierarchy.via_T.__add__(other)": "IndexHierarchy.via_T.__add__()", "IndexHierarchy.via_T.__sub__(other)": "IndexHierarchy.via_T.__sub__()", "IndexHierarchy.via_T.__mul__(other)": "IndexHierarchy.via_T.__mul__()", "IndexHierarchy.via_T.__truediv__(other)": "IndexHierarchy.via_T.__truediv__()", "IndexHierarchy.via_T.__floordiv__(other)": "IndexHierarchy.via_T.__floordiv__()", "IndexHierarchy.via_T.__mod__(other)": "IndexHierarchy.via_T.__mod__()", "IndexHierarchy.via_T.__pow__(other)": "IndexHierarchy.via_T.__pow__()", "IndexHierarchy.via_T.__lshift__(other)": "IndexHierarchy.via_T.__lshift__()", "IndexHierarchy.via_T.__rshift__(other)": "IndexHierarchy.via_T.__rshift__()", "IndexHierarchy.via_T.__and__(other)": "IndexHierarchy.via_T.__and__()", "IndexHierarchy.via_T.__xor__(other)": "IndexHierarchy.via_T.__xor__()", "IndexHierarchy.via_T.__or__(other)": "IndexHierarchy.via_T.__or__()", "IndexHierarchy.via_T.__lt__(other)": "IndexHierarchy.via_T.__lt__()", "IndexHierarchy.via_T.__le__(other)": "IndexHierarchy.via_T.__le__()", "IndexHierarchy.via_T.__eq__(other)": "IndexHierarchy.via_T.__eq__()", "IndexHierarchy.via_T.__ne__(other)": "IndexHierarchy.via_T.__ne__()", "IndexHierarchy.via_T.__gt__(other)": "IndexHierarchy.via_T.__gt__()", "IndexHierarchy.via_T.__ge__(other)": "IndexHierarchy.via_T.__ge__()", "IndexHierarchy.via_T.__radd__(other)": "IndexHierarchy.via_T.__radd__()", "IndexHierarchy.via_T.__rsub__(other)": "IndexHierarchy.via_T.__rsub__()", "IndexHierarchy.via_T.__rmul__(other)": "IndexHierarchy.via_T.__rmul__()", "IndexHierarchy.via_T.__rtruediv__(other)": "IndexHierarchy.via_T.__rtruediv__()", "IndexHierarchy.via_T.__rfloordiv__(other)": "IndexHierarchy.via_T.__rfloordiv__()", "IndexHierarchy.via_re(pattern, flags).search(pos, endpos)": "IndexHierarchy.via_re().search()", "IndexHierarchy.via_re(pattern, flags).match(pos, endpos)": "IndexHierarchy.via_re().match()", "IndexHierarchy.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexHierarchy.via_re().fullmatch()", "IndexHierarchy.via_re(pattern, flags).split(maxsplit)": "IndexHierarchy.via_re().split()", "IndexHierarchy.via_re(pattern, flags).findall(pos, endpos)": "IndexHierarchy.via_re().findall()", "IndexHierarchy.via_re(pattern, flags).sub(repl, count)": "IndexHierarchy.via_re().sub()", "IndexHierarchy.via_re(pattern, flags).subn(repl, count)": "IndexHierarchy.via_re().subn()", "IndexHierarchy.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexHierarchy.via_hashlib().to_bytes()", "IndexHierarchy.via_hashlib(include_name, include_class, encoding).md5()": "IndexHierarchy.via_hashlib().md5()", "IndexHierarchy.via_hashlib(include_name, include_class, encoding).sha256()": "IndexHierarchy.via_hashlib().sha256()", "IndexHierarchy.via_hashlib(include_name, include_class, encoding).sha512()": "IndexHierarchy.via_hashlib().sha512()", "IndexHierarchy.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexHierarchy.via_hashlib().sha3_256()", "IndexHierarchy.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexHierarchy.via_hashlib().sha3_512()", "IndexHierarchy.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexHierarchy.via_hashlib().shake_128()", "IndexHierarchy.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexHierarchy.via_hashlib().shake_256()", "IndexHierarchy.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexHierarchy.via_hashlib().blake2b()", "IndexHierarchy.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexHierarchy.via_hashlib().blake2s()", "IndexHierarchy.via_type_clinic.to_hint()": "IndexHierarchy.via_type_clinic.to_hint()", "IndexHierarchy.via_type_clinic.check(hint, *, fail_fast)": "IndexHierarchy.via_type_clinic.check()", "IndexHierarchy.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexHierarchy.via_type_clinic.warn()", "IndexHierarchy.via_type_clinic.__call__(hint, *, fail_fast)": "IndexHierarchy.via_type_clinic.__call__()", "IndexHierarchy.via_type_clinic.__repr__()": "IndexHierarchy.via_type_clinic.__repr__()", "IndexHierarchyGO.__init__(indices, *, indexers, name, blocks, own_blocks)": "IndexHierarchyGO.__init__()", "IndexHierarchyGO.from_index_items(items, *, index_constructor, name)": "IndexHierarchyGO.from_index_items()", "IndexHierarchyGO.from_labels(labels, *, name, reorder_for_hierarchy, index_constructors, depth_reference, continuation_token)": "IndexHierarchyGO.from_labels()", "IndexHierarchyGO.from_labels_delimited(labels, *, delimiter, name, index_constructors)": "IndexHierarchyGO.from_labels_delimited()", "IndexHierarchyGO.from_names(names)": "IndexHierarchyGO.from_names()", "IndexHierarchyGO.from_pandas(value)": "IndexHierarchyGO.from_pandas()", "IndexHierarchyGO.from_product(*, name, index_constructors, *levels)": "IndexHierarchyGO.from_product()", "IndexHierarchyGO.from_tree(tree, *, name, index_constructors)": "IndexHierarchyGO.from_tree()", "IndexHierarchyGO.from_values_per_depth(values, *, name, depth_reference, index_constructors)": "IndexHierarchyGO.from_values_per_depth()", "IndexHierarchyGO.to_frame()": "IndexHierarchyGO.to_frame()", "IndexHierarchyGO.to_frame_go()": "IndexHierarchyGO.to_frame_go()", "IndexHierarchyGO.to_html(config, style_config)": "IndexHierarchyGO.to_html()", "IndexHierarchyGO.to_html_datatables(fp, *, show, config)": "IndexHierarchyGO.to_html_datatables()", "IndexHierarchyGO.to_pandas()": "IndexHierarchyGO.to_pandas()", "IndexHierarchyGO.to_tree()": "IndexHierarchyGO.to_tree()", "IndexHierarchyGO.to_visidata()": "IndexHierarchyGO.to_visidata()", "IndexHierarchyGO.STATIC": "IndexHierarchyGO.STATIC", "IndexHierarchyGO.depth": "IndexHierarchyGO.depth", "IndexHierarchyGO.dtypes": "IndexHierarchyGO.dtypes", "IndexHierarchyGO.index_types": "IndexHierarchyGO.index_types", "IndexHierarchyGO.memory": "IndexHierarchyGO.memory", "IndexHierarchyGO.mloc": "IndexHierarchyGO.mloc", "IndexHierarchyGO.name": "IndexHierarchyGO.name", "IndexHierarchyGO.names": "IndexHierarchyGO.names", "IndexHierarchyGO.nbytes": "IndexHierarchyGO.nbytes", "IndexHierarchyGO.ndim": "IndexHierarchyGO.ndim", "IndexHierarchyGO.positions": "IndexHierarchyGO.positions", "IndexHierarchyGO.shape": "IndexHierarchyGO.shape", "IndexHierarchyGO.size": "IndexHierarchyGO.size", "IndexHierarchyGO.__array__(dtype)": "IndexHierarchyGO.__array__()", "IndexHierarchyGO.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexHierarchyGO.__array_ufunc__()", "IndexHierarchyGO.__bool__()": "IndexHierarchyGO.__bool__()", "IndexHierarchyGO.__copy__()": "IndexHierarchyGO.__copy__()", "IndexHierarchyGO.__deepcopy__(memo)": "IndexHierarchyGO.__deepcopy__()", "IndexHierarchyGO.__len__()": "IndexHierarchyGO.__len__()", "IndexHierarchyGO.all(axis, skipna, out)": "IndexHierarchyGO.all()", "IndexHierarchyGO.any(axis, skipna, out)": "IndexHierarchyGO.any()", "IndexHierarchyGO.append(value)": "IndexHierarchyGO.append()", "IndexHierarchyGO.astype[key](dtypes, *, consolidate_blocks)": "IndexHierarchyGO.astype[]()", "IndexHierarchyGO.astype(dtype, *, consolidate_blocks)": "IndexHierarchyGO.astype()", "IndexHierarchyGO.copy()": "IndexHierarchyGO.copy()", "IndexHierarchyGO.cumprod(axis, skipna)": "IndexHierarchyGO.cumprod()", "IndexHierarchyGO.cumsum(axis, skipna)": "IndexHierarchyGO.cumsum()", "IndexHierarchyGO.difference(*others)": "IndexHierarchyGO.difference()", "IndexHierarchyGO.dropfalsy(*, condition)": "IndexHierarchyGO.dropfalsy()", "IndexHierarchyGO.dropna(*, condition)": "IndexHierarchyGO.dropna()", "IndexHierarchyGO.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexHierarchyGO.equals()", "IndexHierarchyGO.extend(other)": "IndexHierarchyGO.extend()", "IndexHierarchyGO.fillfalsy(value)": "IndexHierarchyGO.fillfalsy()", "IndexHierarchyGO.fillna(value)": "IndexHierarchyGO.fillna()", "IndexHierarchyGO.flat()": "IndexHierarchyGO.flat()", "IndexHierarchyGO.head(count)": "IndexHierarchyGO.head()", "IndexHierarchyGO.iloc_searchsorted(values, *, side_left)": "IndexHierarchyGO.iloc_searchsorted()", "IndexHierarchyGO.index_at_depth(depth_level)": "IndexHierarchyGO.index_at_depth()", "IndexHierarchyGO.indexer_at_depth(depth_level)": "IndexHierarchyGO.indexer_at_depth()", "IndexHierarchyGO.intersection(*others)": "IndexHierarchyGO.intersection()", "IndexHierarchyGO.isfalsy()": "IndexHierarchyGO.isfalsy()", "IndexHierarchyGO.isin(other)": "IndexHierarchyGO.isin()", "IndexHierarchyGO.isna()": "IndexHierarchyGO.isna()", "IndexHierarchyGO.label_widths_at_depth(depth_level)": "IndexHierarchyGO.label_widths_at_depth()", "IndexHierarchyGO.level_add(level, *, index_constructor)": "IndexHierarchyGO.level_add()", "IndexHierarchyGO.level_drop(count)": "IndexHierarchyGO.level_drop()", "IndexHierarchyGO.loc_searchsorted(values, *, side_left, fill_value)": "IndexHierarchyGO.loc_searchsorted()", "IndexHierarchyGO.loc_to_iloc(key)": "IndexHierarchyGO.loc_to_iloc()", "IndexHierarchyGO.max(axis, skipna, out)": "IndexHierarchyGO.max()", "IndexHierarchyGO.mean(axis, skipna, out)": "IndexHierarchyGO.mean()", "IndexHierarchyGO.median(axis, skipna, out)": "IndexHierarchyGO.median()", "IndexHierarchyGO.min(axis, skipna, out)": "IndexHierarchyGO.min()", "IndexHierarchyGO.notfalsy()": "IndexHierarchyGO.notfalsy()", "IndexHierarchyGO.notna()": "IndexHierarchyGO.notna()", "IndexHierarchyGO.prod(axis, skipna, allna, out)": "IndexHierarchyGO.prod()", "IndexHierarchyGO.rehierarch(depth_map, *, index_constructors)": "IndexHierarchyGO.rehierarch()", "IndexHierarchyGO.relabel(mapper)": "IndexHierarchyGO.relabel()", "IndexHierarchyGO.relabel_at_depth(mapper, depth_level)": "IndexHierarchyGO.relabel_at_depth()", "IndexHierarchyGO.rename(name)": "IndexHierarchyGO.rename()", "IndexHierarchyGO.roll(shift)": "IndexHierarchyGO.roll()", "IndexHierarchyGO.sample(count, *, seed)": "IndexHierarchyGO.sample()", "IndexHierarchyGO.sort(*, ascending, kind, key)": "IndexHierarchyGO.sort()", "IndexHierarchyGO.std(axis, skipna, ddof, out)": "IndexHierarchyGO.std()", "IndexHierarchyGO.sum(axis, skipna, allna, out)": "IndexHierarchyGO.sum()", "IndexHierarchyGO.tail(count)": "IndexHierarchyGO.tail()", "IndexHierarchyGO.union(*others)": "IndexHierarchyGO.union()", "IndexHierarchyGO.unique(depth_level, order_by_occurrence)": "IndexHierarchyGO.unique()", "IndexHierarchyGO.values_at_depth(depth_level)": "IndexHierarchyGO.values_at_depth()", "IndexHierarchyGO.var(axis, skipna, ddof, out)": "IndexHierarchyGO.var()", "IndexHierarchyGO.__contains__(value)": "IndexHierarchyGO.__contains__()", "IndexHierarchyGO.__iter__()": "IndexHierarchyGO.__iter__()", "IndexHierarchyGO.__reversed__()": "IndexHierarchyGO.__reversed__()", "IndexHierarchyGO.values": "IndexHierarchyGO.values", "IndexHierarchyGO.interface": "IndexHierarchyGO.interface", "IndexHierarchyGO.__repr__()": "IndexHierarchyGO.__repr__()", "IndexHierarchyGO.__str__()": "IndexHierarchyGO.__str__()", "IndexHierarchyGO.display(config, *, style_config)": "IndexHierarchyGO.display()", "IndexHierarchyGO.display_tall(config)": "IndexHierarchyGO.display_tall()", "IndexHierarchyGO.display_wide(config)": "IndexHierarchyGO.display_wide()", "IndexHierarchyGO.[key]": "IndexHierarchyGO.[]", "IndexHierarchyGO.iloc[key]": "IndexHierarchyGO.iloc[]", "IndexHierarchyGO.loc[key]": "IndexHierarchyGO.loc[]", "IndexHierarchyGO.iter_label(depth_level)": "IndexHierarchyGO.iter_label()", "IndexHierarchyGO.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexHierarchyGO.iter_label().apply()", "IndexHierarchyGO.iter_label(depth_level).apply_iter(func)": "IndexHierarchyGO.iter_label().apply_iter()", "IndexHierarchyGO.iter_label(depth_level).apply_iter_items(func)": "IndexHierarchyGO.iter_label().apply_iter_items()", "IndexHierarchyGO.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexHierarchyGO.iter_label().apply_pool()", "IndexHierarchyGO.__add__(other)": "IndexHierarchyGO.__add__()", "IndexHierarchyGO.__and__(other)": "IndexHierarchyGO.__and__()", "IndexHierarchyGO.__eq__(other)": "IndexHierarchyGO.__eq__()", "IndexHierarchyGO.__floordiv__(other)": "IndexHierarchyGO.__floordiv__()", "IndexHierarchyGO.__ge__(other)": "IndexHierarchyGO.__ge__()", "IndexHierarchyGO.__gt__(other)": "IndexHierarchyGO.__gt__()", "IndexHierarchyGO.__le__(other)": "IndexHierarchyGO.__le__()", "IndexHierarchyGO.__lt__(other)": "IndexHierarchyGO.__lt__()", "IndexHierarchyGO.__matmul__(other)": "IndexHierarchyGO.__matmul__()", "IndexHierarchyGO.__mod__(other)": "IndexHierarchyGO.__mod__()", "IndexHierarchyGO.__mul__(other)": "IndexHierarchyGO.__mul__()", "IndexHierarchyGO.__ne__(other)": "IndexHierarchyGO.__ne__()", "IndexHierarchyGO.__or__(other)": "IndexHierarchyGO.__or__()", "IndexHierarchyGO.__pow__(other)": "IndexHierarchyGO.__pow__()", "IndexHierarchyGO.__radd__(other)": "IndexHierarchyGO.__radd__()", "IndexHierarchyGO.__rfloordiv__(other)": "IndexHierarchyGO.__rfloordiv__()", "IndexHierarchyGO.__rmatmul__(other)": "IndexHierarchyGO.__rmatmul__()", "IndexHierarchyGO.__rmul__(other)": "IndexHierarchyGO.__rmul__()", "IndexHierarchyGO.__rshift__(other)": "IndexHierarchyGO.__rshift__()", "IndexHierarchyGO.__rsub__(other)": "IndexHierarchyGO.__rsub__()", "IndexHierarchyGO.__rtruediv__(other)": "IndexHierarchyGO.__rtruediv__()", "IndexHierarchyGO.__sub__(other)": "IndexHierarchyGO.__sub__()", "IndexHierarchyGO.__truediv__(other)": "IndexHierarchyGO.__truediv__()", "IndexHierarchyGO.__xor__(other)": "IndexHierarchyGO.__xor__()", "IndexHierarchyGO.__abs__()": "IndexHierarchyGO.__abs__()", "IndexHierarchyGO.__invert__()": "IndexHierarchyGO.__invert__()", "IndexHierarchyGO.__neg__()": "IndexHierarchyGO.__neg__()", "IndexHierarchyGO.__pos__()": "IndexHierarchyGO.__pos__()", "IndexHierarchyGO.via_values.apply(func, *args, **kwargs)": "IndexHierarchyGO.via_values.apply()", "IndexHierarchyGO.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexHierarchyGO.via_values.__array_ufunc__()", "IndexHierarchyGO.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexHierarchyGO.via_values.__call__()", "IndexHierarchyGO.via_dt.__call__(*, fill_value)": "IndexHierarchyGO.via_dt.__call__()", "IndexHierarchyGO.via_dt.year": "IndexHierarchyGO.via_dt.year", "IndexHierarchyGO.via_dt.year_month": "IndexHierarchyGO.via_dt.year_month", "IndexHierarchyGO.via_dt.year_quarter": "IndexHierarchyGO.via_dt.year_quarter", "IndexHierarchyGO.via_dt.month": "IndexHierarchyGO.via_dt.month", "IndexHierarchyGO.via_dt.day": "IndexHierarchyGO.via_dt.day", "IndexHierarchyGO.via_dt.hour": "IndexHierarchyGO.via_dt.hour", "IndexHierarchyGO.via_dt.minute": "IndexHierarchyGO.via_dt.minute", "IndexHierarchyGO.via_dt.second": "IndexHierarchyGO.via_dt.second", "IndexHierarchyGO.via_dt.weekday()": "IndexHierarchyGO.via_dt.weekday()", "IndexHierarchyGO.via_dt.quarter()": "IndexHierarchyGO.via_dt.quarter()", "IndexHierarchyGO.via_dt.is_month_end()": "IndexHierarchyGO.via_dt.is_month_end()", "IndexHierarchyGO.via_dt.is_month_start()": "IndexHierarchyGO.via_dt.is_month_start()", "IndexHierarchyGO.via_dt.is_year_end()": "IndexHierarchyGO.via_dt.is_year_end()", "IndexHierarchyGO.via_dt.is_year_start()": "IndexHierarchyGO.via_dt.is_year_start()", "IndexHierarchyGO.via_dt.is_quarter_end()": "IndexHierarchyGO.via_dt.is_quarter_end()", "IndexHierarchyGO.via_dt.is_quarter_start()": "IndexHierarchyGO.via_dt.is_quarter_start()", "IndexHierarchyGO.via_dt.timetuple()": "IndexHierarchyGO.via_dt.timetuple()", "IndexHierarchyGO.via_dt.isoformat(sep, timespec)": "IndexHierarchyGO.via_dt.isoformat()", "IndexHierarchyGO.via_dt.fromisoformat()": "IndexHierarchyGO.via_dt.fromisoformat()", "IndexHierarchyGO.via_dt.strftime(format)": "IndexHierarchyGO.via_dt.strftime()", "IndexHierarchyGO.via_dt.strptime(format)": "IndexHierarchyGO.via_dt.strptime()", "IndexHierarchyGO.via_dt.strpdate(format)": "IndexHierarchyGO.via_dt.strpdate()", "IndexHierarchyGO.via_str.__getitem__(key)": "IndexHierarchyGO.via_str.__getitem__()", "IndexHierarchyGO.via_str.capitalize()": "IndexHierarchyGO.via_str.capitalize()", "IndexHierarchyGO.via_str.center(width, fillchar)": "IndexHierarchyGO.via_str.center()", "IndexHierarchyGO.via_str.contains(item)": "IndexHierarchyGO.via_str.contains()", "IndexHierarchyGO.via_str.count(sub, start, end)": "IndexHierarchyGO.via_str.count()", "IndexHierarchyGO.via_str.decode(encoding, errors)": "IndexHierarchyGO.via_str.decode()", "IndexHierarchyGO.via_str.encode(encoding, errors)": "IndexHierarchyGO.via_str.encode()", "IndexHierarchyGO.via_str.endswith(suffix, start, end)": "IndexHierarchyGO.via_str.endswith()", "IndexHierarchyGO.via_str.find(sub, start, end)": "IndexHierarchyGO.via_str.find()", "IndexHierarchyGO.via_str.format(format)": "IndexHierarchyGO.via_str.format()", "IndexHierarchyGO.via_str.index(sub, start, end)": "IndexHierarchyGO.via_str.index()", "IndexHierarchyGO.via_str.isalnum()": "IndexHierarchyGO.via_str.isalnum()", "IndexHierarchyGO.via_str.isalpha()": "IndexHierarchyGO.via_str.isalpha()", "IndexHierarchyGO.via_str.isdecimal()": "IndexHierarchyGO.via_str.isdecimal()", "IndexHierarchyGO.via_str.isdigit()": "IndexHierarchyGO.via_str.isdigit()", "IndexHierarchyGO.via_str.islower()": "IndexHierarchyGO.via_str.islower()", "IndexHierarchyGO.via_str.isnumeric()": "IndexHierarchyGO.via_str.isnumeric()", "IndexHierarchyGO.via_str.isspace()": "IndexHierarchyGO.via_str.isspace()", "IndexHierarchyGO.via_str.istitle()": "IndexHierarchyGO.via_str.istitle()", "IndexHierarchyGO.via_str.isupper()": "IndexHierarchyGO.via_str.isupper()", "IndexHierarchyGO.via_str.ljust(width, fillchar)": "IndexHierarchyGO.via_str.ljust()", "IndexHierarchyGO.via_str.len()": "IndexHierarchyGO.via_str.len()", "IndexHierarchyGO.via_str.lower()": "IndexHierarchyGO.via_str.lower()", "IndexHierarchyGO.via_str.lstrip(chars)": "IndexHierarchyGO.via_str.lstrip()", "IndexHierarchyGO.via_str.partition(sep)": "IndexHierarchyGO.via_str.partition()", "IndexHierarchyGO.via_str.replace(old, new, count)": "IndexHierarchyGO.via_str.replace()", "IndexHierarchyGO.via_str.rfind(sub, start, end)": "IndexHierarchyGO.via_str.rfind()", "IndexHierarchyGO.via_str.rindex(sub, start, end)": "IndexHierarchyGO.via_str.rindex()", "IndexHierarchyGO.via_str.rjust(width, fillchar)": "IndexHierarchyGO.via_str.rjust()", "IndexHierarchyGO.via_str.rpartition(sep)": "IndexHierarchyGO.via_str.rpartition()", "IndexHierarchyGO.via_str.rsplit(sep, maxsplit)": "IndexHierarchyGO.via_str.rsplit()", "IndexHierarchyGO.via_str.rstrip(chars)": "IndexHierarchyGO.via_str.rstrip()", "IndexHierarchyGO.via_str.split(sep, maxsplit)": "IndexHierarchyGO.via_str.split()", "IndexHierarchyGO.via_str.startswith(prefix, start, end)": "IndexHierarchyGO.via_str.startswith()", "IndexHierarchyGO.via_str.strip(chars)": "IndexHierarchyGO.via_str.strip()", "IndexHierarchyGO.via_str.swapcase()": "IndexHierarchyGO.via_str.swapcase()", "IndexHierarchyGO.via_str.title()": "IndexHierarchyGO.via_str.title()", "IndexHierarchyGO.via_str.upper()": "IndexHierarchyGO.via_str.upper()", "IndexHierarchyGO.via_str.zfill(width)": "IndexHierarchyGO.via_str.zfill()", "IndexHierarchyGO.via_T.via_fill_value(fill_value)": "IndexHierarchyGO.via_T.via_fill_value()", "IndexHierarchyGO.via_T.__add__(other)": "IndexHierarchyGO.via_T.__add__()", "IndexHierarchyGO.via_T.__sub__(other)": "IndexHierarchyGO.via_T.__sub__()", "IndexHierarchyGO.via_T.__mul__(other)": "IndexHierarchyGO.via_T.__mul__()", "IndexHierarchyGO.via_T.__truediv__(other)": "IndexHierarchyGO.via_T.__truediv__()", "IndexHierarchyGO.via_T.__floordiv__(other)": "IndexHierarchyGO.via_T.__floordiv__()", "IndexHierarchyGO.via_T.__mod__(other)": "IndexHierarchyGO.via_T.__mod__()", "IndexHierarchyGO.via_T.__pow__(other)": "IndexHierarchyGO.via_T.__pow__()", "IndexHierarchyGO.via_T.__lshift__(other)": "IndexHierarchyGO.via_T.__lshift__()", "IndexHierarchyGO.via_T.__rshift__(other)": "IndexHierarchyGO.via_T.__rshift__()", "IndexHierarchyGO.via_T.__and__(other)": "IndexHierarchyGO.via_T.__and__()", "IndexHierarchyGO.via_T.__xor__(other)": "IndexHierarchyGO.via_T.__xor__()", "IndexHierarchyGO.via_T.__or__(other)": "IndexHierarchyGO.via_T.__or__()", "IndexHierarchyGO.via_T.__lt__(other)": "IndexHierarchyGO.via_T.__lt__()", "IndexHierarchyGO.via_T.__le__(other)": "IndexHierarchyGO.via_T.__le__()", "IndexHierarchyGO.via_T.__eq__(other)": "IndexHierarchyGO.via_T.__eq__()", "IndexHierarchyGO.via_T.__ne__(other)": "IndexHierarchyGO.via_T.__ne__()", "IndexHierarchyGO.via_T.__gt__(other)": "IndexHierarchyGO.via_T.__gt__()", "IndexHierarchyGO.via_T.__ge__(other)": "IndexHierarchyGO.via_T.__ge__()", "IndexHierarchyGO.via_T.__radd__(other)": "IndexHierarchyGO.via_T.__radd__()", "IndexHierarchyGO.via_T.__rsub__(other)": "IndexHierarchyGO.via_T.__rsub__()", "IndexHierarchyGO.via_T.__rmul__(other)": "IndexHierarchyGO.via_T.__rmul__()", "IndexHierarchyGO.via_T.__rtruediv__(other)": "IndexHierarchyGO.via_T.__rtruediv__()", "IndexHierarchyGO.via_T.__rfloordiv__(other)": "IndexHierarchyGO.via_T.__rfloordiv__()", "IndexHierarchyGO.via_re(pattern, flags).search(pos, endpos)": "IndexHierarchyGO.via_re().search()", "IndexHierarchyGO.via_re(pattern, flags).match(pos, endpos)": "IndexHierarchyGO.via_re().match()", "IndexHierarchyGO.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexHierarchyGO.via_re().fullmatch()", "IndexHierarchyGO.via_re(pattern, flags).split(maxsplit)": "IndexHierarchyGO.via_re().split()", "IndexHierarchyGO.via_re(pattern, flags).findall(pos, endpos)": "IndexHierarchyGO.via_re().findall()", "IndexHierarchyGO.via_re(pattern, flags).sub(repl, count)": "IndexHierarchyGO.via_re().sub()", "IndexHierarchyGO.via_re(pattern, flags).subn(repl, count)": "IndexHierarchyGO.via_re().subn()", "IndexHierarchyGO.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexHierarchyGO.via_hashlib().to_bytes()", "IndexHierarchyGO.via_hashlib(include_name, include_class, encoding).md5()": "IndexHierarchyGO.via_hashlib().md5()", "IndexHierarchyGO.via_hashlib(include_name, include_class, encoding).sha256()": "IndexHierarchyGO.via_hashlib().sha256()", "IndexHierarchyGO.via_hashlib(include_name, include_class, encoding).sha512()": "IndexHierarchyGO.via_hashlib().sha512()", "IndexHierarchyGO.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexHierarchyGO.via_hashlib().sha3_256()", "IndexHierarchyGO.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexHierarchyGO.via_hashlib().sha3_512()", "IndexHierarchyGO.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexHierarchyGO.via_hashlib().shake_128()", "IndexHierarchyGO.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexHierarchyGO.via_hashlib().shake_256()", "IndexHierarchyGO.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexHierarchyGO.via_hashlib().blake2b()", "IndexHierarchyGO.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexHierarchyGO.via_hashlib().blake2s()", "IndexHierarchyGO.via_type_clinic.to_hint()": "IndexHierarchyGO.via_type_clinic.to_hint()", "IndexHierarchyGO.via_type_clinic.check(hint, *, fail_fast)": "IndexHierarchyGO.via_type_clinic.check()", "IndexHierarchyGO.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexHierarchyGO.via_type_clinic.warn()", "IndexHierarchyGO.via_type_clinic.__call__(hint, *, fail_fast)": "IndexHierarchyGO.via_type_clinic.__call__()", "IndexHierarchyGO.via_type_clinic.__repr__()": "IndexHierarchyGO.via_type_clinic.__repr__()", "IndexYear.__init__(labels, *, loc_is_iloc, name)": "IndexYear.__init__()", "IndexYear.from_date_range(start, stop, step, *, name)": "IndexYear.from_date_range()", "IndexYear.from_labels(labels, *, name)": "IndexYear.from_labels()", "IndexYear.from_pandas(value)": "IndexYear.from_pandas()", "IndexYear.from_year_month_range(start, stop, step, *, name)": "IndexYear.from_year_month_range()", "IndexYear.from_year_range(start, stop, step, *, name)": "IndexYear.from_year_range()", "IndexYear.to_html(config, style_config)": "IndexYear.to_html()", "IndexYear.to_html_datatables(fp, *, show, config)": "IndexYear.to_html_datatables()", "IndexYear.to_pandas()": "IndexYear.to_pandas()", "IndexYear.to_series()": "IndexYear.to_series()", "IndexYear.to_visidata()": "IndexYear.to_visidata()", "IndexYear.STATIC": "IndexYear.STATIC", "IndexYear.depth": "IndexYear.depth", "IndexYear.dtype": "IndexYear.dtype", "IndexYear.index_types": "IndexYear.index_types", "IndexYear.memory": "IndexYear.memory", "IndexYear.mloc": "IndexYear.mloc", "IndexYear.name": "IndexYear.name", "IndexYear.names": "IndexYear.names", "IndexYear.nbytes": "IndexYear.nbytes", "IndexYear.ndim": "IndexYear.ndim", "IndexYear.positions": "IndexYear.positions", "IndexYear.shape": "IndexYear.shape", "IndexYear.size": "IndexYear.size", "IndexYear.__array__(dtype)": "IndexYear.__array__()", "IndexYear.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexYear.__array_ufunc__()", "IndexYear.__bool__()": "IndexYear.__bool__()", "IndexYear.__copy__()": "IndexYear.__copy__()", "IndexYear.__deepcopy__(memo)": "IndexYear.__deepcopy__()", "IndexYear.__len__()": "IndexYear.__len__()", "IndexYear.all(axis, skipna, out)": "IndexYear.all()", "IndexYear.any(axis, skipna, out)": "IndexYear.any()", "IndexYear.astype(dtype)": "IndexYear.astype()", "IndexYear.copy()": "IndexYear.copy()", "IndexYear.cumprod(axis, skipna)": "IndexYear.cumprod()", "IndexYear.cumsum(axis, skipna)": "IndexYear.cumsum()", "IndexYear.difference(*others)": "IndexYear.difference()", "IndexYear.dropfalsy()": "IndexYear.dropfalsy()", "IndexYear.dropna()": "IndexYear.dropna()", "IndexYear.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexYear.equals()", "IndexYear.fillfalsy(value)": "IndexYear.fillfalsy()", "IndexYear.fillna(value)": "IndexYear.fillna()", "IndexYear.head(count)": "IndexYear.head()", "IndexYear.iloc_searchsorted(values, *, side_left)": "IndexYear.iloc_searchsorted()", "IndexYear.intersection(*others)": "IndexYear.intersection()", "IndexYear.isfalsy()": "IndexYear.isfalsy()", "IndexYear.isin(other)": "IndexYear.isin()", "IndexYear.isna()": "IndexYear.isna()", "IndexYear.label_widths_at_depth(depth_level)": "IndexYear.label_widths_at_depth()", "IndexYear.level_add(level, *, index_constructor)": "IndexYear.level_add()", "IndexYear.loc_searchsorted(values, *, side_left, fill_value)": "IndexYear.loc_searchsorted()", "IndexYear.loc_to_iloc(key)": "IndexYear.loc_to_iloc()", "IndexYear.max(axis, skipna, out)": "IndexYear.max()", "IndexYear.mean(axis, skipna, out)": "IndexYear.mean()", "IndexYear.median(axis, skipna, out)": "IndexYear.median()", "IndexYear.min(axis, skipna, out)": "IndexYear.min()", "IndexYear.notfalsy()": "IndexYear.notfalsy()", "IndexYear.notna()": "IndexYear.notna()", "IndexYear.prod(axis, skipna, allna, out)": "IndexYear.prod()", "IndexYear.relabel(mapper)": "IndexYear.relabel()", "IndexYear.rename(name)": "IndexYear.rename()", "IndexYear.roll(shift)": "IndexYear.roll()", "IndexYear.sample(count, *, seed)": "IndexYear.sample()", "IndexYear.sort(ascending, kind, key)": "IndexYear.sort()", "IndexYear.std(axis, skipna, ddof, out)": "IndexYear.std()", "IndexYear.sum(axis, skipna, allna, out)": "IndexYear.sum()", "IndexYear.tail(count)": "IndexYear.tail()", "IndexYear.union(*others)": "IndexYear.union()", "IndexYear.unique(depth_level, order_by_occurrence)": "IndexYear.unique()", "IndexYear.values_at_depth(depth_level)": "IndexYear.values_at_depth()", "IndexYear.var(axis, skipna, ddof, out)": "IndexYear.var()", "IndexYear.__contains__(value)": "IndexYear.__contains__()", "IndexYear.__iter__()": "IndexYear.__iter__()", "IndexYear.__reversed__()": "IndexYear.__reversed__()", "IndexYear.values": "IndexYear.values", "IndexYear.interface": "IndexYear.interface", "IndexYear.__repr__()": "IndexYear.__repr__()", "IndexYear.__str__()": "IndexYear.__str__()", "IndexYear.display(config, *, style_config)": "IndexYear.display()", "IndexYear.display_tall(config)": "IndexYear.display_tall()", "IndexYear.display_wide(config)": "IndexYear.display_wide()", "IndexYear.drop.iloc[key]": "IndexYear.drop.iloc[]", "IndexYear.drop.loc[key]": "IndexYear.drop.loc[]", "IndexYear.[key]": "IndexYear.[]", "IndexYear.iloc[key]": "IndexYear.iloc[]", "IndexYear.loc[key]": "IndexYear.loc[]", "IndexYear.iter_label(depth_level)": "IndexYear.iter_label()", "IndexYear.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexYear.iter_label().apply()", "IndexYear.iter_label(depth_level).apply_iter(func)": "IndexYear.iter_label().apply_iter()", "IndexYear.iter_label(depth_level).apply_iter_items(func)": "IndexYear.iter_label().apply_iter_items()", "IndexYear.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexYear.iter_label().apply_pool()", "IndexYear.__add__(other)": "IndexYear.__add__()", "IndexYear.__and__(other)": "IndexYear.__and__()", "IndexYear.__eq__(other)": "IndexYear.__eq__()", "IndexYear.__floordiv__(other)": "IndexYear.__floordiv__()", "IndexYear.__ge__(other)": "IndexYear.__ge__()", "IndexYear.__gt__(other)": "IndexYear.__gt__()", "IndexYear.__le__(other)": "IndexYear.__le__()", "IndexYear.__lt__(other)": "IndexYear.__lt__()", "IndexYear.__matmul__(other)": "IndexYear.__matmul__()", "IndexYear.__mod__(other)": "IndexYear.__mod__()", "IndexYear.__mul__(other)": "IndexYear.__mul__()", "IndexYear.__ne__(other)": "IndexYear.__ne__()", "IndexYear.__or__(other)": "IndexYear.__or__()", "IndexYear.__pow__(other)": "IndexYear.__pow__()", "IndexYear.__radd__(other)": "IndexYear.__radd__()", "IndexYear.__rfloordiv__(other)": "IndexYear.__rfloordiv__()", "IndexYear.__rmatmul__(other)": "IndexYear.__rmatmul__()", "IndexYear.__rmul__(other)": "IndexYear.__rmul__()", "IndexYear.__rshift__(other)": "IndexYear.__rshift__()", "IndexYear.__rsub__(other)": "IndexYear.__rsub__()", "IndexYear.__rtruediv__(other)": "IndexYear.__rtruediv__()", "IndexYear.__sub__(other)": "IndexYear.__sub__()", "IndexYear.__truediv__(other)": "IndexYear.__truediv__()", "IndexYear.__xor__(other)": "IndexYear.__xor__()", "IndexYear.__abs__()": "IndexYear.__abs__()", "IndexYear.__invert__()": "IndexYear.__invert__()", "IndexYear.__neg__()": "IndexYear.__neg__()", "IndexYear.__pos__()": "IndexYear.__pos__()", "IndexYear.via_values.apply(func, *args, **kwargs)": "IndexYear.via_values.apply()", "IndexYear.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexYear.via_values.__array_ufunc__()", "IndexYear.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexYear.via_values.__call__()", "IndexYear.via_dt.__call__(*, fill_value)": "IndexYear.via_dt.__call__()", "IndexYear.via_dt.year": "IndexYear.via_dt.year", "IndexYear.via_dt.year_month": "IndexYear.via_dt.year_month", "IndexYear.via_dt.year_quarter": "IndexYear.via_dt.year_quarter", "IndexYear.via_dt.month": "IndexYear.via_dt.month", "IndexYear.via_dt.day": "IndexYear.via_dt.day", "IndexYear.via_dt.hour": "IndexYear.via_dt.hour", "IndexYear.via_dt.minute": "IndexYear.via_dt.minute", "IndexYear.via_dt.second": "IndexYear.via_dt.second", "IndexYear.via_dt.weekday()": "IndexYear.via_dt.weekday()", "IndexYear.via_dt.quarter()": "IndexYear.via_dt.quarter()", "IndexYear.via_dt.is_month_end()": "IndexYear.via_dt.is_month_end()", "IndexYear.via_dt.is_month_start()": "IndexYear.via_dt.is_month_start()", "IndexYear.via_dt.is_year_end()": "IndexYear.via_dt.is_year_end()", "IndexYear.via_dt.is_year_start()": "IndexYear.via_dt.is_year_start()", "IndexYear.via_dt.is_quarter_end()": "IndexYear.via_dt.is_quarter_end()", "IndexYear.via_dt.is_quarter_start()": "IndexYear.via_dt.is_quarter_start()", "IndexYear.via_dt.timetuple()": "IndexYear.via_dt.timetuple()", "IndexYear.via_dt.isoformat(sep, timespec)": "IndexYear.via_dt.isoformat()", "IndexYear.via_dt.fromisoformat()": "IndexYear.via_dt.fromisoformat()", "IndexYear.via_dt.strftime(format)": "IndexYear.via_dt.strftime()", "IndexYear.via_dt.strptime(format)": "IndexYear.via_dt.strptime()", "IndexYear.via_dt.strpdate(format)": "IndexYear.via_dt.strpdate()", "IndexYear.via_str.__getitem__(key)": "IndexYear.via_str.__getitem__()", "IndexYear.via_str.capitalize()": "IndexYear.via_str.capitalize()", "IndexYear.via_str.center(width, fillchar)": "IndexYear.via_str.center()", "IndexYear.via_str.contains(item)": "IndexYear.via_str.contains()", "IndexYear.via_str.count(sub, start, end)": "IndexYear.via_str.count()", "IndexYear.via_str.decode(encoding, errors)": "IndexYear.via_str.decode()", "IndexYear.via_str.encode(encoding, errors)": "IndexYear.via_str.encode()", "IndexYear.via_str.endswith(suffix, start, end)": "IndexYear.via_str.endswith()", "IndexYear.via_str.find(sub, start, end)": "IndexYear.via_str.find()", "IndexYear.via_str.format(format)": "IndexYear.via_str.format()", "IndexYear.via_str.index(sub, start, end)": "IndexYear.via_str.index()", "IndexYear.via_str.isalnum()": "IndexYear.via_str.isalnum()", "IndexYear.via_str.isalpha()": "IndexYear.via_str.isalpha()", "IndexYear.via_str.isdecimal()": "IndexYear.via_str.isdecimal()", "IndexYear.via_str.isdigit()": "IndexYear.via_str.isdigit()", "IndexYear.via_str.islower()": "IndexYear.via_str.islower()", "IndexYear.via_str.isnumeric()": "IndexYear.via_str.isnumeric()", "IndexYear.via_str.isspace()": "IndexYear.via_str.isspace()", "IndexYear.via_str.istitle()": "IndexYear.via_str.istitle()", "IndexYear.via_str.isupper()": "IndexYear.via_str.isupper()", "IndexYear.via_str.ljust(width, fillchar)": "IndexYear.via_str.ljust()", "IndexYear.via_str.len()": "IndexYear.via_str.len()", "IndexYear.via_str.lower()": "IndexYear.via_str.lower()", "IndexYear.via_str.lstrip(chars)": "IndexYear.via_str.lstrip()", "IndexYear.via_str.partition(sep)": "IndexYear.via_str.partition()", "IndexYear.via_str.replace(old, new, count)": "IndexYear.via_str.replace()", "IndexYear.via_str.rfind(sub, start, end)": "IndexYear.via_str.rfind()", "IndexYear.via_str.rindex(sub, start, end)": "IndexYear.via_str.rindex()", "IndexYear.via_str.rjust(width, fillchar)": "IndexYear.via_str.rjust()", "IndexYear.via_str.rpartition(sep)": "IndexYear.via_str.rpartition()", "IndexYear.via_str.rsplit(sep, maxsplit)": "IndexYear.via_str.rsplit()", "IndexYear.via_str.rstrip(chars)": "IndexYear.via_str.rstrip()", "IndexYear.via_str.split(sep, maxsplit)": "IndexYear.via_str.split()", "IndexYear.via_str.startswith(prefix, start, end)": "IndexYear.via_str.startswith()", "IndexYear.via_str.strip(chars)": "IndexYear.via_str.strip()", "IndexYear.via_str.swapcase()": "IndexYear.via_str.swapcase()", "IndexYear.via_str.title()": "IndexYear.via_str.title()", "IndexYear.via_str.upper()": "IndexYear.via_str.upper()", "IndexYear.via_str.zfill(width)": "IndexYear.via_str.zfill()", "IndexYear.via_re(pattern, flags).search(pos, endpos)": "IndexYear.via_re().search()", "IndexYear.via_re(pattern, flags).match(pos, endpos)": "IndexYear.via_re().match()", "IndexYear.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexYear.via_re().fullmatch()", "IndexYear.via_re(pattern, flags).split(maxsplit)": "IndexYear.via_re().split()", "IndexYear.via_re(pattern, flags).findall(pos, endpos)": "IndexYear.via_re().findall()", "IndexYear.via_re(pattern, flags).sub(repl, count)": "IndexYear.via_re().sub()", "IndexYear.via_re(pattern, flags).subn(repl, count)": "IndexYear.via_re().subn()", "IndexYear.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexYear.via_hashlib().to_bytes()", "IndexYear.via_hashlib(include_name, include_class, encoding).md5()": "IndexYear.via_hashlib().md5()", "IndexYear.via_hashlib(include_name, include_class, encoding).sha256()": "IndexYear.via_hashlib().sha256()", "IndexYear.via_hashlib(include_name, include_class, encoding).sha512()": "IndexYear.via_hashlib().sha512()", "IndexYear.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexYear.via_hashlib().sha3_256()", "IndexYear.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexYear.via_hashlib().sha3_512()", "IndexYear.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexYear.via_hashlib().shake_128()", "IndexYear.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexYear.via_hashlib().shake_256()", "IndexYear.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexYear.via_hashlib().blake2b()", "IndexYear.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexYear.via_hashlib().blake2s()", "IndexYear.via_type_clinic.to_hint()": "IndexYear.via_type_clinic.to_hint()", "IndexYear.via_type_clinic.check(hint, *, fail_fast)": "IndexYear.via_type_clinic.check()", "IndexYear.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexYear.via_type_clinic.warn()", "IndexYear.via_type_clinic.__call__(hint, *, fail_fast)": "IndexYear.via_type_clinic.__call__()", "IndexYear.via_type_clinic.__repr__()": "IndexYear.via_type_clinic.__repr__()", "IndexYearGO.__init__(labels, *, loc_is_iloc, name)": "IndexYearGO.__init__()", "IndexYearGO.from_date_range(start, stop, step, *, name)": "IndexYearGO.from_date_range()", "IndexYearGO.from_labels(labels, *, name)": "IndexYearGO.from_labels()", "IndexYearGO.from_pandas(value)": "IndexYearGO.from_pandas()", "IndexYearGO.from_year_month_range(start, stop, step, *, name)": "IndexYearGO.from_year_month_range()", "IndexYearGO.from_year_range(start, stop, step, *, name)": "IndexYearGO.from_year_range()", "IndexYearGO.to_html(config, style_config)": "IndexYearGO.to_html()", "IndexYearGO.to_html_datatables(fp, *, show, config)": "IndexYearGO.to_html_datatables()", "IndexYearGO.to_pandas()": "IndexYearGO.to_pandas()", "IndexYearGO.to_series()": "IndexYearGO.to_series()", "IndexYearGO.to_visidata()": "IndexYearGO.to_visidata()", "IndexYearGO.STATIC": "IndexYearGO.STATIC", "IndexYearGO.depth": "IndexYearGO.depth", "IndexYearGO.dtype": "IndexYearGO.dtype", "IndexYearGO.index_types": "IndexYearGO.index_types", "IndexYearGO.memory": "IndexYearGO.memory", "IndexYearGO.mloc": "IndexYearGO.mloc", "IndexYearGO.name": "IndexYearGO.name", "IndexYearGO.names": "IndexYearGO.names", "IndexYearGO.nbytes": "IndexYearGO.nbytes", "IndexYearGO.ndim": "IndexYearGO.ndim", "IndexYearGO.positions": "IndexYearGO.positions", "IndexYearGO.shape": "IndexYearGO.shape", "IndexYearGO.size": "IndexYearGO.size", "IndexYearGO.__array__(dtype)": "IndexYearGO.__array__()", "IndexYearGO.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexYearGO.__array_ufunc__()", "IndexYearGO.__bool__()": "IndexYearGO.__bool__()", "IndexYearGO.__copy__()": "IndexYearGO.__copy__()", "IndexYearGO.__deepcopy__(memo)": "IndexYearGO.__deepcopy__()", "IndexYearGO.__len__()": "IndexYearGO.__len__()", "IndexYearGO.all(axis, skipna, out)": "IndexYearGO.all()", "IndexYearGO.any(axis, skipna, out)": "IndexYearGO.any()", "IndexYearGO.append(value)": "IndexYearGO.append()", "IndexYearGO.astype(dtype)": "IndexYearGO.astype()", "IndexYearGO.copy()": "IndexYearGO.copy()", "IndexYearGO.cumprod(axis, skipna)": "IndexYearGO.cumprod()", "IndexYearGO.cumsum(axis, skipna)": "IndexYearGO.cumsum()", "IndexYearGO.difference(*others)": "IndexYearGO.difference()", "IndexYearGO.dropfalsy()": "IndexYearGO.dropfalsy()", "IndexYearGO.dropna()": "IndexYearGO.dropna()", "IndexYearGO.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexYearGO.equals()", "IndexYearGO.extend(values)": "IndexYearGO.extend()", "IndexYearGO.fillfalsy(value)": "IndexYearGO.fillfalsy()", "IndexYearGO.fillna(value)": "IndexYearGO.fillna()", "IndexYearGO.head(count)": "IndexYearGO.head()", "IndexYearGO.iloc_searchsorted(values, *, side_left)": "IndexYearGO.iloc_searchsorted()", "IndexYearGO.intersection(*others)": "IndexYearGO.intersection()", "IndexYearGO.isfalsy()": "IndexYearGO.isfalsy()", "IndexYearGO.isin(other)": "IndexYearGO.isin()", "IndexYearGO.isna()": "IndexYearGO.isna()", "IndexYearGO.label_widths_at_depth(depth_level)": "IndexYearGO.label_widths_at_depth()", "IndexYearGO.level_add(level, *, index_constructor)": "IndexYearGO.level_add()", "IndexYearGO.loc_searchsorted(values, *, side_left, fill_value)": "IndexYearGO.loc_searchsorted()", "IndexYearGO.loc_to_iloc(key)": "IndexYearGO.loc_to_iloc()", "IndexYearGO.max(axis, skipna, out)": "IndexYearGO.max()", "IndexYearGO.mean(axis, skipna, out)": "IndexYearGO.mean()", "IndexYearGO.median(axis, skipna, out)": "IndexYearGO.median()", "IndexYearGO.min(axis, skipna, out)": "IndexYearGO.min()", "IndexYearGO.notfalsy()": "IndexYearGO.notfalsy()", "IndexYearGO.notna()": "IndexYearGO.notna()", "IndexYearGO.prod(axis, skipna, allna, out)": "IndexYearGO.prod()", "IndexYearGO.relabel(mapper)": "IndexYearGO.relabel()", "IndexYearGO.rename(name)": "IndexYearGO.rename()", "IndexYearGO.roll(shift)": "IndexYearGO.roll()", "IndexYearGO.sample(count, *, seed)": "IndexYearGO.sample()", "IndexYearGO.sort(ascending, kind, key)": "IndexYearGO.sort()", "IndexYearGO.std(axis, skipna, ddof, out)": "IndexYearGO.std()", "IndexYearGO.sum(axis, skipna, allna, out)": "IndexYearGO.sum()", "IndexYearGO.tail(count)": "IndexYearGO.tail()", "IndexYearGO.union(*others)": "IndexYearGO.union()", "IndexYearGO.unique(depth_level, order_by_occurrence)": "IndexYearGO.unique()", "IndexYearGO.values_at_depth(depth_level)": "IndexYearGO.values_at_depth()", "IndexYearGO.var(axis, skipna, ddof, out)": "IndexYearGO.var()", "IndexYearGO.__contains__(value)": "IndexYearGO.__contains__()", "IndexYearGO.__iter__()": "IndexYearGO.__iter__()", "IndexYearGO.__reversed__()": "IndexYearGO.__reversed__()", "IndexYearGO.values": "IndexYearGO.values", "IndexYearGO.interface": "IndexYearGO.interface", "IndexYearGO.__repr__()": "IndexYearGO.__repr__()", "IndexYearGO.__str__()": "IndexYearGO.__str__()", "IndexYearGO.display(config, *, style_config)": "IndexYearGO.display()", "IndexYearGO.display_tall(config)": "IndexYearGO.display_tall()", "IndexYearGO.display_wide(config)": "IndexYearGO.display_wide()", "IndexYearGO.drop.iloc[key]": "IndexYearGO.drop.iloc[]", "IndexYearGO.drop.loc[key]": "IndexYearGO.drop.loc[]", "IndexYearGO.[key]": "IndexYearGO.[]", "IndexYearGO.iloc[key]": "IndexYearGO.iloc[]", "IndexYearGO.loc[key]": "IndexYearGO.loc[]", "IndexYearGO.iter_label(depth_level)": "IndexYearGO.iter_label()", "IndexYearGO.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexYearGO.iter_label().apply()", "IndexYearGO.iter_label(depth_level).apply_iter(func)": "IndexYearGO.iter_label().apply_iter()", "IndexYearGO.iter_label(depth_level).apply_iter_items(func)": "IndexYearGO.iter_label().apply_iter_items()", "IndexYearGO.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexYearGO.iter_label().apply_pool()", "IndexYearGO.__add__(other)": "IndexYearGO.__add__()", "IndexYearGO.__and__(other)": "IndexYearGO.__and__()", "IndexYearGO.__eq__(other)": "IndexYearGO.__eq__()", "IndexYearGO.__floordiv__(other)": "IndexYearGO.__floordiv__()", "IndexYearGO.__ge__(other)": "IndexYearGO.__ge__()", "IndexYearGO.__gt__(other)": "IndexYearGO.__gt__()", "IndexYearGO.__le__(other)": "IndexYearGO.__le__()", "IndexYearGO.__lt__(other)": "IndexYearGO.__lt__()", "IndexYearGO.__matmul__(other)": "IndexYearGO.__matmul__()", "IndexYearGO.__mod__(other)": "IndexYearGO.__mod__()", "IndexYearGO.__mul__(other)": "IndexYearGO.__mul__()", "IndexYearGO.__ne__(other)": "IndexYearGO.__ne__()", "IndexYearGO.__or__(other)": "IndexYearGO.__or__()", "IndexYearGO.__pow__(other)": "IndexYearGO.__pow__()", "IndexYearGO.__radd__(other)": "IndexYearGO.__radd__()", "IndexYearGO.__rfloordiv__(other)": "IndexYearGO.__rfloordiv__()", "IndexYearGO.__rmatmul__(other)": "IndexYearGO.__rmatmul__()", "IndexYearGO.__rmul__(other)": "IndexYearGO.__rmul__()", "IndexYearGO.__rshift__(other)": "IndexYearGO.__rshift__()", "IndexYearGO.__rsub__(other)": "IndexYearGO.__rsub__()", "IndexYearGO.__rtruediv__(other)": "IndexYearGO.__rtruediv__()", "IndexYearGO.__sub__(other)": "IndexYearGO.__sub__()", "IndexYearGO.__truediv__(other)": "IndexYearGO.__truediv__()", "IndexYearGO.__xor__(other)": "IndexYearGO.__xor__()", "IndexYearGO.__abs__()": "IndexYearGO.__abs__()", "IndexYearGO.__invert__()": "IndexYearGO.__invert__()", "IndexYearGO.__neg__()": "IndexYearGO.__neg__()", "IndexYearGO.__pos__()": "IndexYearGO.__pos__()", "IndexYearGO.via_values.apply(func, *args, **kwargs)": "IndexYearGO.via_values.apply()", "IndexYearGO.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexYearGO.via_values.__array_ufunc__()", "IndexYearGO.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexYearGO.via_values.__call__()", "IndexYearGO.via_dt.__call__(*, fill_value)": "IndexYearGO.via_dt.__call__()", "IndexYearGO.via_dt.year": "IndexYearGO.via_dt.year", "IndexYearGO.via_dt.year_month": "IndexYearGO.via_dt.year_month", "IndexYearGO.via_dt.year_quarter": "IndexYearGO.via_dt.year_quarter", "IndexYearGO.via_dt.month": "IndexYearGO.via_dt.month", "IndexYearGO.via_dt.day": "IndexYearGO.via_dt.day", "IndexYearGO.via_dt.hour": "IndexYearGO.via_dt.hour", "IndexYearGO.via_dt.minute": "IndexYearGO.via_dt.minute", "IndexYearGO.via_dt.second": "IndexYearGO.via_dt.second", "IndexYearGO.via_dt.weekday()": "IndexYearGO.via_dt.weekday()", "IndexYearGO.via_dt.quarter()": "IndexYearGO.via_dt.quarter()", "IndexYearGO.via_dt.is_month_end()": "IndexYearGO.via_dt.is_month_end()", "IndexYearGO.via_dt.is_month_start()": "IndexYearGO.via_dt.is_month_start()", "IndexYearGO.via_dt.is_year_end()": "IndexYearGO.via_dt.is_year_end()", "IndexYearGO.via_dt.is_year_start()": "IndexYearGO.via_dt.is_year_start()", "IndexYearGO.via_dt.is_quarter_end()": "IndexYearGO.via_dt.is_quarter_end()", "IndexYearGO.via_dt.is_quarter_start()": "IndexYearGO.via_dt.is_quarter_start()", "IndexYearGO.via_dt.timetuple()": "IndexYearGO.via_dt.timetuple()", "IndexYearGO.via_dt.isoformat(sep, timespec)": "IndexYearGO.via_dt.isoformat()", "IndexYearGO.via_dt.fromisoformat()": "IndexYearGO.via_dt.fromisoformat()", "IndexYearGO.via_dt.strftime(format)": "IndexYearGO.via_dt.strftime()", "IndexYearGO.via_dt.strptime(format)": "IndexYearGO.via_dt.strptime()", "IndexYearGO.via_dt.strpdate(format)": "IndexYearGO.via_dt.strpdate()", "IndexYearGO.via_str.__getitem__(key)": "IndexYearGO.via_str.__getitem__()", "IndexYearGO.via_str.capitalize()": "IndexYearGO.via_str.capitalize()", "IndexYearGO.via_str.center(width, fillchar)": "IndexYearGO.via_str.center()", "IndexYearGO.via_str.contains(item)": "IndexYearGO.via_str.contains()", "IndexYearGO.via_str.count(sub, start, end)": "IndexYearGO.via_str.count()", "IndexYearGO.via_str.decode(encoding, errors)": "IndexYearGO.via_str.decode()", "IndexYearGO.via_str.encode(encoding, errors)": "IndexYearGO.via_str.encode()", "IndexYearGO.via_str.endswith(suffix, start, end)": "IndexYearGO.via_str.endswith()", "IndexYearGO.via_str.find(sub, start, end)": "IndexYearGO.via_str.find()", "IndexYearGO.via_str.format(format)": "IndexYearGO.via_str.format()", "IndexYearGO.via_str.index(sub, start, end)": "IndexYearGO.via_str.index()", "IndexYearGO.via_str.isalnum()": "IndexYearGO.via_str.isalnum()", "IndexYearGO.via_str.isalpha()": "IndexYearGO.via_str.isalpha()", "IndexYearGO.via_str.isdecimal()": "IndexYearGO.via_str.isdecimal()", "IndexYearGO.via_str.isdigit()": "IndexYearGO.via_str.isdigit()", "IndexYearGO.via_str.islower()": "IndexYearGO.via_str.islower()", "IndexYearGO.via_str.isnumeric()": "IndexYearGO.via_str.isnumeric()", "IndexYearGO.via_str.isspace()": "IndexYearGO.via_str.isspace()", "IndexYearGO.via_str.istitle()": "IndexYearGO.via_str.istitle()", "IndexYearGO.via_str.isupper()": "IndexYearGO.via_str.isupper()", "IndexYearGO.via_str.ljust(width, fillchar)": "IndexYearGO.via_str.ljust()", "IndexYearGO.via_str.len()": "IndexYearGO.via_str.len()", "IndexYearGO.via_str.lower()": "IndexYearGO.via_str.lower()", "IndexYearGO.via_str.lstrip(chars)": "IndexYearGO.via_str.lstrip()", "IndexYearGO.via_str.partition(sep)": "IndexYearGO.via_str.partition()", "IndexYearGO.via_str.replace(old, new, count)": "IndexYearGO.via_str.replace()", "IndexYearGO.via_str.rfind(sub, start, end)": "IndexYearGO.via_str.rfind()", "IndexYearGO.via_str.rindex(sub, start, end)": "IndexYearGO.via_str.rindex()", "IndexYearGO.via_str.rjust(width, fillchar)": "IndexYearGO.via_str.rjust()", "IndexYearGO.via_str.rpartition(sep)": "IndexYearGO.via_str.rpartition()", "IndexYearGO.via_str.rsplit(sep, maxsplit)": "IndexYearGO.via_str.rsplit()", "IndexYearGO.via_str.rstrip(chars)": "IndexYearGO.via_str.rstrip()", "IndexYearGO.via_str.split(sep, maxsplit)": "IndexYearGO.via_str.split()", "IndexYearGO.via_str.startswith(prefix, start, end)": "IndexYearGO.via_str.startswith()", "IndexYearGO.via_str.strip(chars)": "IndexYearGO.via_str.strip()", "IndexYearGO.via_str.swapcase()": "IndexYearGO.via_str.swapcase()", "IndexYearGO.via_str.title()": "IndexYearGO.via_str.title()", "IndexYearGO.via_str.upper()": "IndexYearGO.via_str.upper()", "IndexYearGO.via_str.zfill(width)": "IndexYearGO.via_str.zfill()", "IndexYearGO.via_re(pattern, flags).search(pos, endpos)": "IndexYearGO.via_re().search()", "IndexYearGO.via_re(pattern, flags).match(pos, endpos)": "IndexYearGO.via_re().match()", "IndexYearGO.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexYearGO.via_re().fullmatch()", "IndexYearGO.via_re(pattern, flags).split(maxsplit)": "IndexYearGO.via_re().split()", "IndexYearGO.via_re(pattern, flags).findall(pos, endpos)": "IndexYearGO.via_re().findall()", "IndexYearGO.via_re(pattern, flags).sub(repl, count)": "IndexYearGO.via_re().sub()", "IndexYearGO.via_re(pattern, flags).subn(repl, count)": "IndexYearGO.via_re().subn()", "IndexYearGO.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexYearGO.via_hashlib().to_bytes()", "IndexYearGO.via_hashlib(include_name, include_class, encoding).md5()": "IndexYearGO.via_hashlib().md5()", "IndexYearGO.via_hashlib(include_name, include_class, encoding).sha256()": "IndexYearGO.via_hashlib().sha256()", "IndexYearGO.via_hashlib(include_name, include_class, encoding).sha512()": "IndexYearGO.via_hashlib().sha512()", "IndexYearGO.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexYearGO.via_hashlib().sha3_256()", "IndexYearGO.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexYearGO.via_hashlib().sha3_512()", "IndexYearGO.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexYearGO.via_hashlib().shake_128()", "IndexYearGO.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexYearGO.via_hashlib().shake_256()", "IndexYearGO.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexYearGO.via_hashlib().blake2b()", "IndexYearGO.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexYearGO.via_hashlib().blake2s()", "IndexYearGO.via_type_clinic.to_hint()": "IndexYearGO.via_type_clinic.to_hint()", "IndexYearGO.via_type_clinic.check(hint, *, fail_fast)": "IndexYearGO.via_type_clinic.check()", "IndexYearGO.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexYearGO.via_type_clinic.warn()", "IndexYearGO.via_type_clinic.__call__(hint, *, fail_fast)": "IndexYearGO.via_type_clinic.__call__()", "IndexYearGO.via_type_clinic.__repr__()": "IndexYearGO.via_type_clinic.__repr__()", "IndexYearMonth.__init__(labels, *, loc_is_iloc, name)": "IndexYearMonth.__init__()", "IndexYearMonth.from_date_range(start, stop, step, *, name)": "IndexYearMonth.from_date_range()", "IndexYearMonth.from_labels(labels, *, name)": "IndexYearMonth.from_labels()", "IndexYearMonth.from_pandas(value)": "IndexYearMonth.from_pandas()", "IndexYearMonth.from_year_month_range(start, stop, step, *, name)": "IndexYearMonth.from_year_month_range()", "IndexYearMonth.from_year_range(start, stop, step, *, name)": "IndexYearMonth.from_year_range()", "IndexYearMonth.to_html(config, style_config)": "IndexYearMonth.to_html()", "IndexYearMonth.to_html_datatables(fp, *, show, config)": "IndexYearMonth.to_html_datatables()", "IndexYearMonth.to_pandas()": "IndexYearMonth.to_pandas()", "IndexYearMonth.to_series()": "IndexYearMonth.to_series()", "IndexYearMonth.to_visidata()": "IndexYearMonth.to_visidata()", "IndexYearMonth.STATIC": "IndexYearMonth.STATIC", "IndexYearMonth.depth": "IndexYearMonth.depth", "IndexYearMonth.dtype": "IndexYearMonth.dtype", "IndexYearMonth.index_types": "IndexYearMonth.index_types", "IndexYearMonth.memory": "IndexYearMonth.memory", "IndexYearMonth.mloc": "IndexYearMonth.mloc", "IndexYearMonth.name": "IndexYearMonth.name", "IndexYearMonth.names": "IndexYearMonth.names", "IndexYearMonth.nbytes": "IndexYearMonth.nbytes", "IndexYearMonth.ndim": "IndexYearMonth.ndim", "IndexYearMonth.positions": "IndexYearMonth.positions", "IndexYearMonth.shape": "IndexYearMonth.shape", "IndexYearMonth.size": "IndexYearMonth.size", "IndexYearMonth.__array__(dtype)": "IndexYearMonth.__array__()", "IndexYearMonth.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexYearMonth.__array_ufunc__()", "IndexYearMonth.__bool__()": "IndexYearMonth.__bool__()", "IndexYearMonth.__copy__()": "IndexYearMonth.__copy__()", "IndexYearMonth.__deepcopy__(memo)": "IndexYearMonth.__deepcopy__()", "IndexYearMonth.__len__()": "IndexYearMonth.__len__()", "IndexYearMonth.all(axis, skipna, out)": "IndexYearMonth.all()", "IndexYearMonth.any(axis, skipna, out)": "IndexYearMonth.any()", "IndexYearMonth.astype(dtype)": "IndexYearMonth.astype()", "IndexYearMonth.copy()": "IndexYearMonth.copy()", "IndexYearMonth.cumprod(axis, skipna)": "IndexYearMonth.cumprod()", "IndexYearMonth.cumsum(axis, skipna)": "IndexYearMonth.cumsum()", "IndexYearMonth.difference(*others)": "IndexYearMonth.difference()", "IndexYearMonth.dropfalsy()": "IndexYearMonth.dropfalsy()", "IndexYearMonth.dropna()": "IndexYearMonth.dropna()", "IndexYearMonth.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexYearMonth.equals()", "IndexYearMonth.fillfalsy(value)": "IndexYearMonth.fillfalsy()", "IndexYearMonth.fillna(value)": "IndexYearMonth.fillna()", "IndexYearMonth.head(count)": "IndexYearMonth.head()", "IndexYearMonth.iloc_searchsorted(values, *, side_left)": "IndexYearMonth.iloc_searchsorted()", "IndexYearMonth.intersection(*others)": "IndexYearMonth.intersection()", "IndexYearMonth.isfalsy()": "IndexYearMonth.isfalsy()", "IndexYearMonth.isin(other)": "IndexYearMonth.isin()", "IndexYearMonth.isna()": "IndexYearMonth.isna()", "IndexYearMonth.label_widths_at_depth(depth_level)": "IndexYearMonth.label_widths_at_depth()", "IndexYearMonth.level_add(level, *, index_constructor)": "IndexYearMonth.level_add()", "IndexYearMonth.loc_searchsorted(values, *, side_left, fill_value)": "IndexYearMonth.loc_searchsorted()", "IndexYearMonth.loc_to_iloc(key)": "IndexYearMonth.loc_to_iloc()", "IndexYearMonth.max(axis, skipna, out)": "IndexYearMonth.max()", "IndexYearMonth.mean(axis, skipna, out)": "IndexYearMonth.mean()", "IndexYearMonth.median(axis, skipna, out)": "IndexYearMonth.median()", "IndexYearMonth.min(axis, skipna, out)": "IndexYearMonth.min()", "IndexYearMonth.notfalsy()": "IndexYearMonth.notfalsy()", "IndexYearMonth.notna()": "IndexYearMonth.notna()", "IndexYearMonth.prod(axis, skipna, allna, out)": "IndexYearMonth.prod()", "IndexYearMonth.relabel(mapper)": "IndexYearMonth.relabel()", "IndexYearMonth.rename(name)": "IndexYearMonth.rename()", "IndexYearMonth.roll(shift)": "IndexYearMonth.roll()", "IndexYearMonth.sample(count, *, seed)": "IndexYearMonth.sample()", "IndexYearMonth.sort(ascending, kind, key)": "IndexYearMonth.sort()", "IndexYearMonth.std(axis, skipna, ddof, out)": "IndexYearMonth.std()", "IndexYearMonth.sum(axis, skipna, allna, out)": "IndexYearMonth.sum()", "IndexYearMonth.tail(count)": "IndexYearMonth.tail()", "IndexYearMonth.union(*others)": "IndexYearMonth.union()", "IndexYearMonth.unique(depth_level, order_by_occurrence)": "IndexYearMonth.unique()", "IndexYearMonth.values_at_depth(depth_level)": "IndexYearMonth.values_at_depth()", "IndexYearMonth.var(axis, skipna, ddof, out)": "IndexYearMonth.var()", "IndexYearMonth.__contains__(value)": "IndexYearMonth.__contains__()", "IndexYearMonth.__iter__()": "IndexYearMonth.__iter__()", "IndexYearMonth.__reversed__()": "IndexYearMonth.__reversed__()", "IndexYearMonth.values": "IndexYearMonth.values", "IndexYearMonth.interface": "IndexYearMonth.interface", "IndexYearMonth.__repr__()": "IndexYearMonth.__repr__()", "IndexYearMonth.__str__()": "IndexYearMonth.__str__()", "IndexYearMonth.display(config, *, style_config)": "IndexYearMonth.display()", "IndexYearMonth.display_tall(config)": "IndexYearMonth.display_tall()", "IndexYearMonth.display_wide(config)": "IndexYearMonth.display_wide()", "IndexYearMonth.drop.iloc[key]": "IndexYearMonth.drop.iloc[]", "IndexYearMonth.drop.loc[key]": "IndexYearMonth.drop.loc[]", "IndexYearMonth.[key]": "IndexYearMonth.[]", "IndexYearMonth.iloc[key]": "IndexYearMonth.iloc[]", "IndexYearMonth.loc[key]": "IndexYearMonth.loc[]", "IndexYearMonth.iter_label(depth_level)": "IndexYearMonth.iter_label()", "IndexYearMonth.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexYearMonth.iter_label().apply()", "IndexYearMonth.iter_label(depth_level).apply_iter(func)": "IndexYearMonth.iter_label().apply_iter()", "IndexYearMonth.iter_label(depth_level).apply_iter_items(func)": "IndexYearMonth.iter_label().apply_iter_items()", "IndexYearMonth.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexYearMonth.iter_label().apply_pool()", "IndexYearMonth.__add__(other)": "IndexYearMonth.__add__()", "IndexYearMonth.__and__(other)": "IndexYearMonth.__and__()", "IndexYearMonth.__eq__(other)": "IndexYearMonth.__eq__()", "IndexYearMonth.__floordiv__(other)": "IndexYearMonth.__floordiv__()", "IndexYearMonth.__ge__(other)": "IndexYearMonth.__ge__()", "IndexYearMonth.__gt__(other)": "IndexYearMonth.__gt__()", "IndexYearMonth.__le__(other)": "IndexYearMonth.__le__()", "IndexYearMonth.__lt__(other)": "IndexYearMonth.__lt__()", "IndexYearMonth.__matmul__(other)": "IndexYearMonth.__matmul__()", "IndexYearMonth.__mod__(other)": "IndexYearMonth.__mod__()", "IndexYearMonth.__mul__(other)": "IndexYearMonth.__mul__()", "IndexYearMonth.__ne__(other)": "IndexYearMonth.__ne__()", "IndexYearMonth.__or__(other)": "IndexYearMonth.__or__()", "IndexYearMonth.__pow__(other)": "IndexYearMonth.__pow__()", "IndexYearMonth.__radd__(other)": "IndexYearMonth.__radd__()", "IndexYearMonth.__rfloordiv__(other)": "IndexYearMonth.__rfloordiv__()", "IndexYearMonth.__rmatmul__(other)": "IndexYearMonth.__rmatmul__()", "IndexYearMonth.__rmul__(other)": "IndexYearMonth.__rmul__()", "IndexYearMonth.__rshift__(other)": "IndexYearMonth.__rshift__()", "IndexYearMonth.__rsub__(other)": "IndexYearMonth.__rsub__()", "IndexYearMonth.__rtruediv__(other)": "IndexYearMonth.__rtruediv__()", "IndexYearMonth.__sub__(other)": "IndexYearMonth.__sub__()", "IndexYearMonth.__truediv__(other)": "IndexYearMonth.__truediv__()", "IndexYearMonth.__xor__(other)": "IndexYearMonth.__xor__()", "IndexYearMonth.__abs__()": "IndexYearMonth.__abs__()", "IndexYearMonth.__invert__()": "IndexYearMonth.__invert__()", "IndexYearMonth.__neg__()": "IndexYearMonth.__neg__()", "IndexYearMonth.__pos__()": "IndexYearMonth.__pos__()", "IndexYearMonth.via_values.apply(func, *args, **kwargs)": "IndexYearMonth.via_values.apply()", "IndexYearMonth.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexYearMonth.via_values.__array_ufunc__()", "IndexYearMonth.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexYearMonth.via_values.__call__()", "IndexYearMonth.via_dt.__call__(*, fill_value)": "IndexYearMonth.via_dt.__call__()", "IndexYearMonth.via_dt.year": "IndexYearMonth.via_dt.year", "IndexYearMonth.via_dt.year_month": "IndexYearMonth.via_dt.year_month", "IndexYearMonth.via_dt.year_quarter": "IndexYearMonth.via_dt.year_quarter", "IndexYearMonth.via_dt.month": "IndexYearMonth.via_dt.month", "IndexYearMonth.via_dt.day": "IndexYearMonth.via_dt.day", "IndexYearMonth.via_dt.hour": "IndexYearMonth.via_dt.hour", "IndexYearMonth.via_dt.minute": "IndexYearMonth.via_dt.minute", "IndexYearMonth.via_dt.second": "IndexYearMonth.via_dt.second", "IndexYearMonth.via_dt.weekday()": "IndexYearMonth.via_dt.weekday()", "IndexYearMonth.via_dt.quarter()": "IndexYearMonth.via_dt.quarter()", "IndexYearMonth.via_dt.is_month_end()": "IndexYearMonth.via_dt.is_month_end()", "IndexYearMonth.via_dt.is_month_start()": "IndexYearMonth.via_dt.is_month_start()", "IndexYearMonth.via_dt.is_year_end()": "IndexYearMonth.via_dt.is_year_end()", "IndexYearMonth.via_dt.is_year_start()": "IndexYearMonth.via_dt.is_year_start()", "IndexYearMonth.via_dt.is_quarter_end()": "IndexYearMonth.via_dt.is_quarter_end()", "IndexYearMonth.via_dt.is_quarter_start()": "IndexYearMonth.via_dt.is_quarter_start()", "IndexYearMonth.via_dt.timetuple()": "IndexYearMonth.via_dt.timetuple()", "IndexYearMonth.via_dt.isoformat(sep, timespec)": "IndexYearMonth.via_dt.isoformat()", "IndexYearMonth.via_dt.fromisoformat()": "IndexYearMonth.via_dt.fromisoformat()", "IndexYearMonth.via_dt.strftime(format)": "IndexYearMonth.via_dt.strftime()", "IndexYearMonth.via_dt.strptime(format)": "IndexYearMonth.via_dt.strptime()", "IndexYearMonth.via_dt.strpdate(format)": "IndexYearMonth.via_dt.strpdate()", "IndexYearMonth.via_str.__getitem__(key)": "IndexYearMonth.via_str.__getitem__()", "IndexYearMonth.via_str.capitalize()": "IndexYearMonth.via_str.capitalize()", "IndexYearMonth.via_str.center(width, fillchar)": "IndexYearMonth.via_str.center()", "IndexYearMonth.via_str.contains(item)": "IndexYearMonth.via_str.contains()", "IndexYearMonth.via_str.count(sub, start, end)": "IndexYearMonth.via_str.count()", "IndexYearMonth.via_str.decode(encoding, errors)": "IndexYearMonth.via_str.decode()", "IndexYearMonth.via_str.encode(encoding, errors)": "IndexYearMonth.via_str.encode()", "IndexYearMonth.via_str.endswith(suffix, start, end)": "IndexYearMonth.via_str.endswith()", "IndexYearMonth.via_str.find(sub, start, end)": "IndexYearMonth.via_str.find()", "IndexYearMonth.via_str.format(format)": "IndexYearMonth.via_str.format()", "IndexYearMonth.via_str.index(sub, start, end)": "IndexYearMonth.via_str.index()", "IndexYearMonth.via_str.isalnum()": "IndexYearMonth.via_str.isalnum()", "IndexYearMonth.via_str.isalpha()": "IndexYearMonth.via_str.isalpha()", "IndexYearMonth.via_str.isdecimal()": "IndexYearMonth.via_str.isdecimal()", "IndexYearMonth.via_str.isdigit()": "IndexYearMonth.via_str.isdigit()", "IndexYearMonth.via_str.islower()": "IndexYearMonth.via_str.islower()", "IndexYearMonth.via_str.isnumeric()": "IndexYearMonth.via_str.isnumeric()", "IndexYearMonth.via_str.isspace()": "IndexYearMonth.via_str.isspace()", "IndexYearMonth.via_str.istitle()": "IndexYearMonth.via_str.istitle()", "IndexYearMonth.via_str.isupper()": "IndexYearMonth.via_str.isupper()", "IndexYearMonth.via_str.ljust(width, fillchar)": "IndexYearMonth.via_str.ljust()", "IndexYearMonth.via_str.len()": "IndexYearMonth.via_str.len()", "IndexYearMonth.via_str.lower()": "IndexYearMonth.via_str.lower()", "IndexYearMonth.via_str.lstrip(chars)": "IndexYearMonth.via_str.lstrip()", "IndexYearMonth.via_str.partition(sep)": "IndexYearMonth.via_str.partition()", "IndexYearMonth.via_str.replace(old, new, count)": "IndexYearMonth.via_str.replace()", "IndexYearMonth.via_str.rfind(sub, start, end)": "IndexYearMonth.via_str.rfind()", "IndexYearMonth.via_str.rindex(sub, start, end)": "IndexYearMonth.via_str.rindex()", "IndexYearMonth.via_str.rjust(width, fillchar)": "IndexYearMonth.via_str.rjust()", "IndexYearMonth.via_str.rpartition(sep)": "IndexYearMonth.via_str.rpartition()", "IndexYearMonth.via_str.rsplit(sep, maxsplit)": "IndexYearMonth.via_str.rsplit()", "IndexYearMonth.via_str.rstrip(chars)": "IndexYearMonth.via_str.rstrip()", "IndexYearMonth.via_str.split(sep, maxsplit)": "IndexYearMonth.via_str.split()", "IndexYearMonth.via_str.startswith(prefix, start, end)": "IndexYearMonth.via_str.startswith()", "IndexYearMonth.via_str.strip(chars)": "IndexYearMonth.via_str.strip()", "IndexYearMonth.via_str.swapcase()": "IndexYearMonth.via_str.swapcase()", "IndexYearMonth.via_str.title()": "IndexYearMonth.via_str.title()", "IndexYearMonth.via_str.upper()": "IndexYearMonth.via_str.upper()", "IndexYearMonth.via_str.zfill(width)": "IndexYearMonth.via_str.zfill()", "IndexYearMonth.via_re(pattern, flags).search(pos, endpos)": "IndexYearMonth.via_re().search()", "IndexYearMonth.via_re(pattern, flags).match(pos, endpos)": "IndexYearMonth.via_re().match()", "IndexYearMonth.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexYearMonth.via_re().fullmatch()", "IndexYearMonth.via_re(pattern, flags).split(maxsplit)": "IndexYearMonth.via_re().split()", "IndexYearMonth.via_re(pattern, flags).findall(pos, endpos)": "IndexYearMonth.via_re().findall()", "IndexYearMonth.via_re(pattern, flags).sub(repl, count)": "IndexYearMonth.via_re().sub()", "IndexYearMonth.via_re(pattern, flags).subn(repl, count)": "IndexYearMonth.via_re().subn()", "IndexYearMonth.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexYearMonth.via_hashlib().to_bytes()", "IndexYearMonth.via_hashlib(include_name, include_class, encoding).md5()": "IndexYearMonth.via_hashlib().md5()", "IndexYearMonth.via_hashlib(include_name, include_class, encoding).sha256()": "IndexYearMonth.via_hashlib().sha256()", "IndexYearMonth.via_hashlib(include_name, include_class, encoding).sha512()": "IndexYearMonth.via_hashlib().sha512()", "IndexYearMonth.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexYearMonth.via_hashlib().sha3_256()", "IndexYearMonth.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexYearMonth.via_hashlib().sha3_512()", "IndexYearMonth.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexYearMonth.via_hashlib().shake_128()", "IndexYearMonth.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexYearMonth.via_hashlib().shake_256()", "IndexYearMonth.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexYearMonth.via_hashlib().blake2b()", "IndexYearMonth.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexYearMonth.via_hashlib().blake2s()", "IndexYearMonth.via_type_clinic.to_hint()": "IndexYearMonth.via_type_clinic.to_hint()", "IndexYearMonth.via_type_clinic.check(hint, *, fail_fast)": "IndexYearMonth.via_type_clinic.check()", "IndexYearMonth.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexYearMonth.via_type_clinic.warn()", "IndexYearMonth.via_type_clinic.__call__(hint, *, fail_fast)": "IndexYearMonth.via_type_clinic.__call__()", "IndexYearMonth.via_type_clinic.__repr__()": "IndexYearMonth.via_type_clinic.__repr__()", "IndexYearMonthGO.__init__(labels, *, loc_is_iloc, name)": "IndexYearMonthGO.__init__()", "IndexYearMonthGO.from_date_range(start, stop, step, *, name)": "IndexYearMonthGO.from_date_range()", "IndexYearMonthGO.from_labels(labels, *, name)": "IndexYearMonthGO.from_labels()", "IndexYearMonthGO.from_pandas(value)": "IndexYearMonthGO.from_pandas()", "IndexYearMonthGO.from_year_month_range(start, stop, step, *, name)": "IndexYearMonthGO.from_year_month_range()", "IndexYearMonthGO.from_year_range(start, stop, step, *, name)": "IndexYearMonthGO.from_year_range()", "IndexYearMonthGO.to_html(config, style_config)": "IndexYearMonthGO.to_html()", "IndexYearMonthGO.to_html_datatables(fp, *, show, config)": "IndexYearMonthGO.to_html_datatables()", "IndexYearMonthGO.to_pandas()": "IndexYearMonthGO.to_pandas()", "IndexYearMonthGO.to_series()": "IndexYearMonthGO.to_series()", "IndexYearMonthGO.to_visidata()": "IndexYearMonthGO.to_visidata()", "IndexYearMonthGO.STATIC": "IndexYearMonthGO.STATIC", "IndexYearMonthGO.depth": "IndexYearMonthGO.depth", "IndexYearMonthGO.dtype": "IndexYearMonthGO.dtype", "IndexYearMonthGO.index_types": "IndexYearMonthGO.index_types", "IndexYearMonthGO.memory": "IndexYearMonthGO.memory", "IndexYearMonthGO.mloc": "IndexYearMonthGO.mloc", "IndexYearMonthGO.name": "IndexYearMonthGO.name", "IndexYearMonthGO.names": "IndexYearMonthGO.names", "IndexYearMonthGO.nbytes": "IndexYearMonthGO.nbytes", "IndexYearMonthGO.ndim": "IndexYearMonthGO.ndim", "IndexYearMonthGO.positions": "IndexYearMonthGO.positions", "IndexYearMonthGO.shape": "IndexYearMonthGO.shape", "IndexYearMonthGO.size": "IndexYearMonthGO.size", "IndexYearMonthGO.__array__(dtype)": "IndexYearMonthGO.__array__()", "IndexYearMonthGO.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexYearMonthGO.__array_ufunc__()", "IndexYearMonthGO.__bool__()": "IndexYearMonthGO.__bool__()", "IndexYearMonthGO.__copy__()": "IndexYearMonthGO.__copy__()", "IndexYearMonthGO.__deepcopy__(memo)": "IndexYearMonthGO.__deepcopy__()", "IndexYearMonthGO.__len__()": "IndexYearMonthGO.__len__()", "IndexYearMonthGO.all(axis, skipna, out)": "IndexYearMonthGO.all()", "IndexYearMonthGO.any(axis, skipna, out)": "IndexYearMonthGO.any()", "IndexYearMonthGO.append(value)": "IndexYearMonthGO.append()", "IndexYearMonthGO.astype(dtype)": "IndexYearMonthGO.astype()", "IndexYearMonthGO.copy()": "IndexYearMonthGO.copy()", "IndexYearMonthGO.cumprod(axis, skipna)": "IndexYearMonthGO.cumprod()", "IndexYearMonthGO.cumsum(axis, skipna)": "IndexYearMonthGO.cumsum()", "IndexYearMonthGO.difference(*others)": "IndexYearMonthGO.difference()", "IndexYearMonthGO.dropfalsy()": "IndexYearMonthGO.dropfalsy()", "IndexYearMonthGO.dropna()": "IndexYearMonthGO.dropna()", "IndexYearMonthGO.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexYearMonthGO.equals()", "IndexYearMonthGO.extend(values)": "IndexYearMonthGO.extend()", "IndexYearMonthGO.fillfalsy(value)": "IndexYearMonthGO.fillfalsy()", "IndexYearMonthGO.fillna(value)": "IndexYearMonthGO.fillna()", "IndexYearMonthGO.head(count)": "IndexYearMonthGO.head()", "IndexYearMonthGO.iloc_searchsorted(values, *, side_left)": "IndexYearMonthGO.iloc_searchsorted()", "IndexYearMonthGO.intersection(*others)": "IndexYearMonthGO.intersection()", "IndexYearMonthGO.isfalsy()": "IndexYearMonthGO.isfalsy()", "IndexYearMonthGO.isin(other)": "IndexYearMonthGO.isin()", "IndexYearMonthGO.isna()": "IndexYearMonthGO.isna()", "IndexYearMonthGO.label_widths_at_depth(depth_level)": "IndexYearMonthGO.label_widths_at_depth()", "IndexYearMonthGO.level_add(level, *, index_constructor)": "IndexYearMonthGO.level_add()", "IndexYearMonthGO.loc_searchsorted(values, *, side_left, fill_value)": "IndexYearMonthGO.loc_searchsorted()", "IndexYearMonthGO.loc_to_iloc(key)": "IndexYearMonthGO.loc_to_iloc()", "IndexYearMonthGO.max(axis, skipna, out)": "IndexYearMonthGO.max()", "IndexYearMonthGO.mean(axis, skipna, out)": "IndexYearMonthGO.mean()", "IndexYearMonthGO.median(axis, skipna, out)": "IndexYearMonthGO.median()", "IndexYearMonthGO.min(axis, skipna, out)": "IndexYearMonthGO.min()", "IndexYearMonthGO.notfalsy()": "IndexYearMonthGO.notfalsy()", "IndexYearMonthGO.notna()": "IndexYearMonthGO.notna()", "IndexYearMonthGO.prod(axis, skipna, allna, out)": "IndexYearMonthGO.prod()", "IndexYearMonthGO.relabel(mapper)": "IndexYearMonthGO.relabel()", "IndexYearMonthGO.rename(name)": "IndexYearMonthGO.rename()", "IndexYearMonthGO.roll(shift)": "IndexYearMonthGO.roll()", "IndexYearMonthGO.sample(count, *, seed)": "IndexYearMonthGO.sample()", "IndexYearMonthGO.sort(ascending, kind, key)": "IndexYearMonthGO.sort()", "IndexYearMonthGO.std(axis, skipna, ddof, out)": "IndexYearMonthGO.std()", "IndexYearMonthGO.sum(axis, skipna, allna, out)": "IndexYearMonthGO.sum()", "IndexYearMonthGO.tail(count)": "IndexYearMonthGO.tail()", "IndexYearMonthGO.union(*others)": "IndexYearMonthGO.union()", "IndexYearMonthGO.unique(depth_level, order_by_occurrence)": "IndexYearMonthGO.unique()", "IndexYearMonthGO.values_at_depth(depth_level)": "IndexYearMonthGO.values_at_depth()", "IndexYearMonthGO.var(axis, skipna, ddof, out)": "IndexYearMonthGO.var()", "IndexYearMonthGO.__contains__(value)": "IndexYearMonthGO.__contains__()", "IndexYearMonthGO.__iter__()": "IndexYearMonthGO.__iter__()", "IndexYearMonthGO.__reversed__()": "IndexYearMonthGO.__reversed__()", "IndexYearMonthGO.values": "IndexYearMonthGO.values", "IndexYearMonthGO.interface": "IndexYearMonthGO.interface", "IndexYearMonthGO.__repr__()": "IndexYearMonthGO.__repr__()", "IndexYearMonthGO.__str__()": "IndexYearMonthGO.__str__()", "IndexYearMonthGO.display(config, *, style_config)": "IndexYearMonthGO.display()", "IndexYearMonthGO.display_tall(config)": "IndexYearMonthGO.display_tall()", "IndexYearMonthGO.display_wide(config)": "IndexYearMonthGO.display_wide()", "IndexYearMonthGO.drop.iloc[key]": "IndexYearMonthGO.drop.iloc[]", "IndexYearMonthGO.drop.loc[key]": "IndexYearMonthGO.drop.loc[]", "IndexYearMonthGO.[key]": "IndexYearMonthGO.[]", "IndexYearMonthGO.iloc[key]": "IndexYearMonthGO.iloc[]", "IndexYearMonthGO.loc[key]": "IndexYearMonthGO.loc[]", "IndexYearMonthGO.iter_label(depth_level)": "IndexYearMonthGO.iter_label()", "IndexYearMonthGO.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexYearMonthGO.iter_label().apply()", "IndexYearMonthGO.iter_label(depth_level).apply_iter(func)": "IndexYearMonthGO.iter_label().apply_iter()", "IndexYearMonthGO.iter_label(depth_level).apply_iter_items(func)": "IndexYearMonthGO.iter_label().apply_iter_items()", "IndexYearMonthGO.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexYearMonthGO.iter_label().apply_pool()", "IndexYearMonthGO.__add__(other)": "IndexYearMonthGO.__add__()", "IndexYearMonthGO.__and__(other)": "IndexYearMonthGO.__and__()", "IndexYearMonthGO.__eq__(other)": "IndexYearMonthGO.__eq__()", "IndexYearMonthGO.__floordiv__(other)": "IndexYearMonthGO.__floordiv__()", "IndexYearMonthGO.__ge__(other)": "IndexYearMonthGO.__ge__()", "IndexYearMonthGO.__gt__(other)": "IndexYearMonthGO.__gt__()", "IndexYearMonthGO.__le__(other)": "IndexYearMonthGO.__le__()", "IndexYearMonthGO.__lt__(other)": "IndexYearMonthGO.__lt__()", "IndexYearMonthGO.__matmul__(other)": "IndexYearMonthGO.__matmul__()", "IndexYearMonthGO.__mod__(other)": "IndexYearMonthGO.__mod__()", "IndexYearMonthGO.__mul__(other)": "IndexYearMonthGO.__mul__()", "IndexYearMonthGO.__ne__(other)": "IndexYearMonthGO.__ne__()", "IndexYearMonthGO.__or__(other)": "IndexYearMonthGO.__or__()", "IndexYearMonthGO.__pow__(other)": "IndexYearMonthGO.__pow__()", "IndexYearMonthGO.__radd__(other)": "IndexYearMonthGO.__radd__()", "IndexYearMonthGO.__rfloordiv__(other)": "IndexYearMonthGO.__rfloordiv__()", "IndexYearMonthGO.__rmatmul__(other)": "IndexYearMonthGO.__rmatmul__()", "IndexYearMonthGO.__rmul__(other)": "IndexYearMonthGO.__rmul__()", "IndexYearMonthGO.__rshift__(other)": "IndexYearMonthGO.__rshift__()", "IndexYearMonthGO.__rsub__(other)": "IndexYearMonthGO.__rsub__()", "IndexYearMonthGO.__rtruediv__(other)": "IndexYearMonthGO.__rtruediv__()", "IndexYearMonthGO.__sub__(other)": "IndexYearMonthGO.__sub__()", "IndexYearMonthGO.__truediv__(other)": "IndexYearMonthGO.__truediv__()", "IndexYearMonthGO.__xor__(other)": "IndexYearMonthGO.__xor__()", "IndexYearMonthGO.__abs__()": "IndexYearMonthGO.__abs__()", "IndexYearMonthGO.__invert__()": "IndexYearMonthGO.__invert__()", "IndexYearMonthGO.__neg__()": "IndexYearMonthGO.__neg__()", "IndexYearMonthGO.__pos__()": "IndexYearMonthGO.__pos__()", "IndexYearMonthGO.via_values.apply(func, *args, **kwargs)": "IndexYearMonthGO.via_values.apply()", "IndexYearMonthGO.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexYearMonthGO.via_values.__array_ufunc__()", "IndexYearMonthGO.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexYearMonthGO.via_values.__call__()", "IndexYearMonthGO.via_dt.__call__(*, fill_value)": "IndexYearMonthGO.via_dt.__call__()", "IndexYearMonthGO.via_dt.year": "IndexYearMonthGO.via_dt.year", "IndexYearMonthGO.via_dt.year_month": "IndexYearMonthGO.via_dt.year_month", "IndexYearMonthGO.via_dt.year_quarter": "IndexYearMonthGO.via_dt.year_quarter", "IndexYearMonthGO.via_dt.month": "IndexYearMonthGO.via_dt.month", "IndexYearMonthGO.via_dt.day": "IndexYearMonthGO.via_dt.day", "IndexYearMonthGO.via_dt.hour": "IndexYearMonthGO.via_dt.hour", "IndexYearMonthGO.via_dt.minute": "IndexYearMonthGO.via_dt.minute", "IndexYearMonthGO.via_dt.second": "IndexYearMonthGO.via_dt.second", "IndexYearMonthGO.via_dt.weekday()": "IndexYearMonthGO.via_dt.weekday()", "IndexYearMonthGO.via_dt.quarter()": "IndexYearMonthGO.via_dt.quarter()", "IndexYearMonthGO.via_dt.is_month_end()": "IndexYearMonthGO.via_dt.is_month_end()", "IndexYearMonthGO.via_dt.is_month_start()": "IndexYearMonthGO.via_dt.is_month_start()", "IndexYearMonthGO.via_dt.is_year_end()": "IndexYearMonthGO.via_dt.is_year_end()", "IndexYearMonthGO.via_dt.is_year_start()": "IndexYearMonthGO.via_dt.is_year_start()", "IndexYearMonthGO.via_dt.is_quarter_end()": "IndexYearMonthGO.via_dt.is_quarter_end()", "IndexYearMonthGO.via_dt.is_quarter_start()": "IndexYearMonthGO.via_dt.is_quarter_start()", "IndexYearMonthGO.via_dt.timetuple()": "IndexYearMonthGO.via_dt.timetuple()", "IndexYearMonthGO.via_dt.isoformat(sep, timespec)": "IndexYearMonthGO.via_dt.isoformat()", "IndexYearMonthGO.via_dt.fromisoformat()": "IndexYearMonthGO.via_dt.fromisoformat()", "IndexYearMonthGO.via_dt.strftime(format)": "IndexYearMonthGO.via_dt.strftime()", "IndexYearMonthGO.via_dt.strptime(format)": "IndexYearMonthGO.via_dt.strptime()", "IndexYearMonthGO.via_dt.strpdate(format)": "IndexYearMonthGO.via_dt.strpdate()", "IndexYearMonthGO.via_str.__getitem__(key)": "IndexYearMonthGO.via_str.__getitem__()", "IndexYearMonthGO.via_str.capitalize()": "IndexYearMonthGO.via_str.capitalize()", "IndexYearMonthGO.via_str.center(width, fillchar)": "IndexYearMonthGO.via_str.center()", "IndexYearMonthGO.via_str.contains(item)": "IndexYearMonthGO.via_str.contains()", "IndexYearMonthGO.via_str.count(sub, start, end)": "IndexYearMonthGO.via_str.count()", "IndexYearMonthGO.via_str.decode(encoding, errors)": "IndexYearMonthGO.via_str.decode()", "IndexYearMonthGO.via_str.encode(encoding, errors)": "IndexYearMonthGO.via_str.encode()", "IndexYearMonthGO.via_str.endswith(suffix, start, end)": "IndexYearMonthGO.via_str.endswith()", "IndexYearMonthGO.via_str.find(sub, start, end)": "IndexYearMonthGO.via_str.find()", "IndexYearMonthGO.via_str.format(format)": "IndexYearMonthGO.via_str.format()", "IndexYearMonthGO.via_str.index(sub, start, end)": "IndexYearMonthGO.via_str.index()", "IndexYearMonthGO.via_str.isalnum()": "IndexYearMonthGO.via_str.isalnum()", "IndexYearMonthGO.via_str.isalpha()": "IndexYearMonthGO.via_str.isalpha()", "IndexYearMonthGO.via_str.isdecimal()": "IndexYearMonthGO.via_str.isdecimal()", "IndexYearMonthGO.via_str.isdigit()": "IndexYearMonthGO.via_str.isdigit()", "IndexYearMonthGO.via_str.islower()": "IndexYearMonthGO.via_str.islower()", "IndexYearMonthGO.via_str.isnumeric()": "IndexYearMonthGO.via_str.isnumeric()", "IndexYearMonthGO.via_str.isspace()": "IndexYearMonthGO.via_str.isspace()", "IndexYearMonthGO.via_str.istitle()": "IndexYearMonthGO.via_str.istitle()", "IndexYearMonthGO.via_str.isupper()": "IndexYearMonthGO.via_str.isupper()", "IndexYearMonthGO.via_str.ljust(width, fillchar)": "IndexYearMonthGO.via_str.ljust()", "IndexYearMonthGO.via_str.len()": "IndexYearMonthGO.via_str.len()", "IndexYearMonthGO.via_str.lower()": "IndexYearMonthGO.via_str.lower()", "IndexYearMonthGO.via_str.lstrip(chars)": "IndexYearMonthGO.via_str.lstrip()", "IndexYearMonthGO.via_str.partition(sep)": "IndexYearMonthGO.via_str.partition()", "IndexYearMonthGO.via_str.replace(old, new, count)": "IndexYearMonthGO.via_str.replace()", "IndexYearMonthGO.via_str.rfind(sub, start, end)": "IndexYearMonthGO.via_str.rfind()", "IndexYearMonthGO.via_str.rindex(sub, start, end)": "IndexYearMonthGO.via_str.rindex()", "IndexYearMonthGO.via_str.rjust(width, fillchar)": "IndexYearMonthGO.via_str.rjust()", "IndexYearMonthGO.via_str.rpartition(sep)": "IndexYearMonthGO.via_str.rpartition()", "IndexYearMonthGO.via_str.rsplit(sep, maxsplit)": "IndexYearMonthGO.via_str.rsplit()", "IndexYearMonthGO.via_str.rstrip(chars)": "IndexYearMonthGO.via_str.rstrip()", "IndexYearMonthGO.via_str.split(sep, maxsplit)": "IndexYearMonthGO.via_str.split()", "IndexYearMonthGO.via_str.startswith(prefix, start, end)": "IndexYearMonthGO.via_str.startswith()", "IndexYearMonthGO.via_str.strip(chars)": "IndexYearMonthGO.via_str.strip()", "IndexYearMonthGO.via_str.swapcase()": "IndexYearMonthGO.via_str.swapcase()", "IndexYearMonthGO.via_str.title()": "IndexYearMonthGO.via_str.title()", "IndexYearMonthGO.via_str.upper()": "IndexYearMonthGO.via_str.upper()", "IndexYearMonthGO.via_str.zfill(width)": "IndexYearMonthGO.via_str.zfill()", "IndexYearMonthGO.via_re(pattern, flags).search(pos, endpos)": "IndexYearMonthGO.via_re().search()", "IndexYearMonthGO.via_re(pattern, flags).match(pos, endpos)": "IndexYearMonthGO.via_re().match()", "IndexYearMonthGO.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexYearMonthGO.via_re().fullmatch()", "IndexYearMonthGO.via_re(pattern, flags).split(maxsplit)": "IndexYearMonthGO.via_re().split()", "IndexYearMonthGO.via_re(pattern, flags).findall(pos, endpos)": "IndexYearMonthGO.via_re().findall()", "IndexYearMonthGO.via_re(pattern, flags).sub(repl, count)": "IndexYearMonthGO.via_re().sub()", "IndexYearMonthGO.via_re(pattern, flags).subn(repl, count)": "IndexYearMonthGO.via_re().subn()", "IndexYearMonthGO.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexYearMonthGO.via_hashlib().to_bytes()", "IndexYearMonthGO.via_hashlib(include_name, include_class, encoding).md5()": "IndexYearMonthGO.via_hashlib().md5()", "IndexYearMonthGO.via_hashlib(include_name, include_class, encoding).sha256()": "IndexYearMonthGO.via_hashlib().sha256()", "IndexYearMonthGO.via_hashlib(include_name, include_class, encoding).sha512()": "IndexYearMonthGO.via_hashlib().sha512()", "IndexYearMonthGO.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexYearMonthGO.via_hashlib().sha3_256()", "IndexYearMonthGO.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexYearMonthGO.via_hashlib().sha3_512()", "IndexYearMonthGO.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexYearMonthGO.via_hashlib().shake_128()", "IndexYearMonthGO.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexYearMonthGO.via_hashlib().shake_256()", "IndexYearMonthGO.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexYearMonthGO.via_hashlib().blake2b()", "IndexYearMonthGO.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexYearMonthGO.via_hashlib().blake2s()", "IndexYearMonthGO.via_type_clinic.to_hint()": "IndexYearMonthGO.via_type_clinic.to_hint()", "IndexYearMonthGO.via_type_clinic.check(hint, *, fail_fast)": "IndexYearMonthGO.via_type_clinic.check()", "IndexYearMonthGO.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexYearMonthGO.via_type_clinic.warn()", "IndexYearMonthGO.via_type_clinic.__call__(hint, *, fail_fast)": "IndexYearMonthGO.via_type_clinic.__call__()", "IndexYearMonthGO.via_type_clinic.__repr__()": "IndexYearMonthGO.via_type_clinic.__repr__()", "IndexDate.__init__(labels, *, loc_is_iloc, name)": "IndexDate.__init__()", "IndexDate.from_date_range(start, stop, step, *, name)": "IndexDate.from_date_range()", "IndexDate.from_labels(labels, *, name)": "IndexDate.from_labels()", "IndexDate.from_pandas(value)": "IndexDate.from_pandas()", "IndexDate.from_year_month_range(start, stop, step, *, name)": "IndexDate.from_year_month_range()", "IndexDate.from_year_range(start, stop, step, *, name)": "IndexDate.from_year_range()", "IndexDate.to_html(config, style_config)": "IndexDate.to_html()", "IndexDate.to_html_datatables(fp, *, show, config)": "IndexDate.to_html_datatables()", "IndexDate.to_pandas()": "IndexDate.to_pandas()", "IndexDate.to_series()": "IndexDate.to_series()", "IndexDate.to_visidata()": "IndexDate.to_visidata()", "IndexDate.STATIC": "IndexDate.STATIC", "IndexDate.depth": "IndexDate.depth", "IndexDate.dtype": "IndexDate.dtype", "IndexDate.index_types": "IndexDate.index_types", "IndexDate.memory": "IndexDate.memory", "IndexDate.mloc": "IndexDate.mloc", "IndexDate.name": "IndexDate.name", "IndexDate.names": "IndexDate.names", "IndexDate.nbytes": "IndexDate.nbytes", "IndexDate.ndim": "IndexDate.ndim", "IndexDate.positions": "IndexDate.positions", "IndexDate.shape": "IndexDate.shape", "IndexDate.size": "IndexDate.size", "IndexDate.__array__(dtype)": "IndexDate.__array__()", "IndexDate.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexDate.__array_ufunc__()", "IndexDate.__bool__()": "IndexDate.__bool__()", "IndexDate.__copy__()": "IndexDate.__copy__()", "IndexDate.__deepcopy__(memo)": "IndexDate.__deepcopy__()", "IndexDate.__len__()": "IndexDate.__len__()", "IndexDate.all(axis, skipna, out)": "IndexDate.all()", "IndexDate.any(axis, skipna, out)": "IndexDate.any()", "IndexDate.astype(dtype)": "IndexDate.astype()", "IndexDate.copy()": "IndexDate.copy()", "IndexDate.cumprod(axis, skipna)": "IndexDate.cumprod()", "IndexDate.cumsum(axis, skipna)": "IndexDate.cumsum()", "IndexDate.difference(*others)": "IndexDate.difference()", "IndexDate.dropfalsy()": "IndexDate.dropfalsy()", "IndexDate.dropna()": "IndexDate.dropna()", "IndexDate.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexDate.equals()", "IndexDate.fillfalsy(value)": "IndexDate.fillfalsy()", "IndexDate.fillna(value)": "IndexDate.fillna()", "IndexDate.head(count)": "IndexDate.head()", "IndexDate.iloc_searchsorted(values, *, side_left)": "IndexDate.iloc_searchsorted()", "IndexDate.intersection(*others)": "IndexDate.intersection()", "IndexDate.isfalsy()": "IndexDate.isfalsy()", "IndexDate.isin(other)": "IndexDate.isin()", "IndexDate.isna()": "IndexDate.isna()", "IndexDate.label_widths_at_depth(depth_level)": "IndexDate.label_widths_at_depth()", "IndexDate.level_add(level, *, index_constructor)": "IndexDate.level_add()", "IndexDate.loc_searchsorted(values, *, side_left, fill_value)": "IndexDate.loc_searchsorted()", "IndexDate.loc_to_iloc(key)": "IndexDate.loc_to_iloc()", "IndexDate.max(axis, skipna, out)": "IndexDate.max()", "IndexDate.mean(axis, skipna, out)": "IndexDate.mean()", "IndexDate.median(axis, skipna, out)": "IndexDate.median()", "IndexDate.min(axis, skipna, out)": "IndexDate.min()", "IndexDate.notfalsy()": "IndexDate.notfalsy()", "IndexDate.notna()": "IndexDate.notna()", "IndexDate.prod(axis, skipna, allna, out)": "IndexDate.prod()", "IndexDate.relabel(mapper)": "IndexDate.relabel()", "IndexDate.rename(name)": "IndexDate.rename()", "IndexDate.roll(shift)": "IndexDate.roll()", "IndexDate.sample(count, *, seed)": "IndexDate.sample()", "IndexDate.sort(ascending, kind, key)": "IndexDate.sort()", "IndexDate.std(axis, skipna, ddof, out)": "IndexDate.std()", "IndexDate.sum(axis, skipna, allna, out)": "IndexDate.sum()", "IndexDate.tail(count)": "IndexDate.tail()", "IndexDate.union(*others)": "IndexDate.union()", "IndexDate.unique(depth_level, order_by_occurrence)": "IndexDate.unique()", "IndexDate.values_at_depth(depth_level)": "IndexDate.values_at_depth()", "IndexDate.var(axis, skipna, ddof, out)": "IndexDate.var()", "IndexDate.__contains__(value)": "IndexDate.__contains__()", "IndexDate.__iter__()": "IndexDate.__iter__()", "IndexDate.__reversed__()": "IndexDate.__reversed__()", "IndexDate.values": "IndexDate.values", "IndexDate.interface": "IndexDate.interface", "IndexDate.__repr__()": "IndexDate.__repr__()", "IndexDate.__str__()": "IndexDate.__str__()", "IndexDate.display(config, *, style_config)": "IndexDate.display()", "IndexDate.display_tall(config)": "IndexDate.display_tall()", "IndexDate.display_wide(config)": "IndexDate.display_wide()", "IndexDate.drop.iloc[key]": "IndexDate.drop.iloc[]", "IndexDate.drop.loc[key]": "IndexDate.drop.loc[]", "IndexDate.[key]": "IndexDate.[]", "IndexDate.iloc[key]": "IndexDate.iloc[]", "IndexDate.loc[key]": "IndexDate.loc[]", "IndexDate.iter_label(depth_level)": "IndexDate.iter_label()", "IndexDate.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexDate.iter_label().apply()", "IndexDate.iter_label(depth_level).apply_iter(func)": "IndexDate.iter_label().apply_iter()", "IndexDate.iter_label(depth_level).apply_iter_items(func)": "IndexDate.iter_label().apply_iter_items()", "IndexDate.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexDate.iter_label().apply_pool()", "IndexDate.__add__(other)": "IndexDate.__add__()", "IndexDate.__and__(other)": "IndexDate.__and__()", "IndexDate.__eq__(other)": "IndexDate.__eq__()", "IndexDate.__floordiv__(other)": "IndexDate.__floordiv__()", "IndexDate.__ge__(other)": "IndexDate.__ge__()", "IndexDate.__gt__(other)": "IndexDate.__gt__()", "IndexDate.__le__(other)": "IndexDate.__le__()", "IndexDate.__lt__(other)": "IndexDate.__lt__()", "IndexDate.__matmul__(other)": "IndexDate.__matmul__()", "IndexDate.__mod__(other)": "IndexDate.__mod__()", "IndexDate.__mul__(other)": "IndexDate.__mul__()", "IndexDate.__ne__(other)": "IndexDate.__ne__()", "IndexDate.__or__(other)": "IndexDate.__or__()", "IndexDate.__pow__(other)": "IndexDate.__pow__()", "IndexDate.__radd__(other)": "IndexDate.__radd__()", "IndexDate.__rfloordiv__(other)": "IndexDate.__rfloordiv__()", "IndexDate.__rmatmul__(other)": "IndexDate.__rmatmul__()", "IndexDate.__rmul__(other)": "IndexDate.__rmul__()", "IndexDate.__rshift__(other)": "IndexDate.__rshift__()", "IndexDate.__rsub__(other)": "IndexDate.__rsub__()", "IndexDate.__rtruediv__(other)": "IndexDate.__rtruediv__()", "IndexDate.__sub__(other)": "IndexDate.__sub__()", "IndexDate.__truediv__(other)": "IndexDate.__truediv__()", "IndexDate.__xor__(other)": "IndexDate.__xor__()", "IndexDate.__abs__()": "IndexDate.__abs__()", "IndexDate.__invert__()": "IndexDate.__invert__()", "IndexDate.__neg__()": "IndexDate.__neg__()", "IndexDate.__pos__()": "IndexDate.__pos__()", "IndexDate.via_values.apply(func, *args, **kwargs)": "IndexDate.via_values.apply()", "IndexDate.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexDate.via_values.__array_ufunc__()", "IndexDate.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexDate.via_values.__call__()", "IndexDate.via_dt.__call__(*, fill_value)": "IndexDate.via_dt.__call__()", "IndexDate.via_dt.year": "IndexDate.via_dt.year", "IndexDate.via_dt.year_month": "IndexDate.via_dt.year_month", "IndexDate.via_dt.year_quarter": "IndexDate.via_dt.year_quarter", "IndexDate.via_dt.month": "IndexDate.via_dt.month", "IndexDate.via_dt.day": "IndexDate.via_dt.day", "IndexDate.via_dt.hour": "IndexDate.via_dt.hour", "IndexDate.via_dt.minute": "IndexDate.via_dt.minute", "IndexDate.via_dt.second": "IndexDate.via_dt.second", "IndexDate.via_dt.weekday()": "IndexDate.via_dt.weekday()", "IndexDate.via_dt.quarter()": "IndexDate.via_dt.quarter()", "IndexDate.via_dt.is_month_end()": "IndexDate.via_dt.is_month_end()", "IndexDate.via_dt.is_month_start()": "IndexDate.via_dt.is_month_start()", "IndexDate.via_dt.is_year_end()": "IndexDate.via_dt.is_year_end()", "IndexDate.via_dt.is_year_start()": "IndexDate.via_dt.is_year_start()", "IndexDate.via_dt.is_quarter_end()": "IndexDate.via_dt.is_quarter_end()", "IndexDate.via_dt.is_quarter_start()": "IndexDate.via_dt.is_quarter_start()", "IndexDate.via_dt.timetuple()": "IndexDate.via_dt.timetuple()", "IndexDate.via_dt.isoformat(sep, timespec)": "IndexDate.via_dt.isoformat()", "IndexDate.via_dt.fromisoformat()": "IndexDate.via_dt.fromisoformat()", "IndexDate.via_dt.strftime(format)": "IndexDate.via_dt.strftime()", "IndexDate.via_dt.strptime(format)": "IndexDate.via_dt.strptime()", "IndexDate.via_dt.strpdate(format)": "IndexDate.via_dt.strpdate()", "IndexDate.via_str.__getitem__(key)": "IndexDate.via_str.__getitem__()", "IndexDate.via_str.capitalize()": "IndexDate.via_str.capitalize()", "IndexDate.via_str.center(width, fillchar)": "IndexDate.via_str.center()", "IndexDate.via_str.contains(item)": "IndexDate.via_str.contains()", "IndexDate.via_str.count(sub, start, end)": "IndexDate.via_str.count()", "IndexDate.via_str.decode(encoding, errors)": "IndexDate.via_str.decode()", "IndexDate.via_str.encode(encoding, errors)": "IndexDate.via_str.encode()", "IndexDate.via_str.endswith(suffix, start, end)": "IndexDate.via_str.endswith()", "IndexDate.via_str.find(sub, start, end)": "IndexDate.via_str.find()", "IndexDate.via_str.format(format)": "IndexDate.via_str.format()", "IndexDate.via_str.index(sub, start, end)": "IndexDate.via_str.index()", "IndexDate.via_str.isalnum()": "IndexDate.via_str.isalnum()", "IndexDate.via_str.isalpha()": "IndexDate.via_str.isalpha()", "IndexDate.via_str.isdecimal()": "IndexDate.via_str.isdecimal()", "IndexDate.via_str.isdigit()": "IndexDate.via_str.isdigit()", "IndexDate.via_str.islower()": "IndexDate.via_str.islower()", "IndexDate.via_str.isnumeric()": "IndexDate.via_str.isnumeric()", "IndexDate.via_str.isspace()": "IndexDate.via_str.isspace()", "IndexDate.via_str.istitle()": "IndexDate.via_str.istitle()", "IndexDate.via_str.isupper()": "IndexDate.via_str.isupper()", "IndexDate.via_str.ljust(width, fillchar)": "IndexDate.via_str.ljust()", "IndexDate.via_str.len()": "IndexDate.via_str.len()", "IndexDate.via_str.lower()": "IndexDate.via_str.lower()", "IndexDate.via_str.lstrip(chars)": "IndexDate.via_str.lstrip()", "IndexDate.via_str.partition(sep)": "IndexDate.via_str.partition()", "IndexDate.via_str.replace(old, new, count)": "IndexDate.via_str.replace()", "IndexDate.via_str.rfind(sub, start, end)": "IndexDate.via_str.rfind()", "IndexDate.via_str.rindex(sub, start, end)": "IndexDate.via_str.rindex()", "IndexDate.via_str.rjust(width, fillchar)": "IndexDate.via_str.rjust()", "IndexDate.via_str.rpartition(sep)": "IndexDate.via_str.rpartition()", "IndexDate.via_str.rsplit(sep, maxsplit)": "IndexDate.via_str.rsplit()", "IndexDate.via_str.rstrip(chars)": "IndexDate.via_str.rstrip()", "IndexDate.via_str.split(sep, maxsplit)": "IndexDate.via_str.split()", "IndexDate.via_str.startswith(prefix, start, end)": "IndexDate.via_str.startswith()", "IndexDate.via_str.strip(chars)": "IndexDate.via_str.strip()", "IndexDate.via_str.swapcase()": "IndexDate.via_str.swapcase()", "IndexDate.via_str.title()": "IndexDate.via_str.title()", "IndexDate.via_str.upper()": "IndexDate.via_str.upper()", "IndexDate.via_str.zfill(width)": "IndexDate.via_str.zfill()", "IndexDate.via_re(pattern, flags).search(pos, endpos)": "IndexDate.via_re().search()", "IndexDate.via_re(pattern, flags).match(pos, endpos)": "IndexDate.via_re().match()", "IndexDate.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexDate.via_re().fullmatch()", "IndexDate.via_re(pattern, flags).split(maxsplit)": "IndexDate.via_re().split()", "IndexDate.via_re(pattern, flags).findall(pos, endpos)": "IndexDate.via_re().findall()", "IndexDate.via_re(pattern, flags).sub(repl, count)": "IndexDate.via_re().sub()", "IndexDate.via_re(pattern, flags).subn(repl, count)": "IndexDate.via_re().subn()", "IndexDate.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexDate.via_hashlib().to_bytes()", "IndexDate.via_hashlib(include_name, include_class, encoding).md5()": "IndexDate.via_hashlib().md5()", "IndexDate.via_hashlib(include_name, include_class, encoding).sha256()": "IndexDate.via_hashlib().sha256()", "IndexDate.via_hashlib(include_name, include_class, encoding).sha512()": "IndexDate.via_hashlib().sha512()", "IndexDate.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexDate.via_hashlib().sha3_256()", "IndexDate.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexDate.via_hashlib().sha3_512()", "IndexDate.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexDate.via_hashlib().shake_128()", "IndexDate.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexDate.via_hashlib().shake_256()", "IndexDate.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexDate.via_hashlib().blake2b()", "IndexDate.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexDate.via_hashlib().blake2s()", "IndexDate.via_type_clinic.to_hint()": "IndexDate.via_type_clinic.to_hint()", "IndexDate.via_type_clinic.check(hint, *, fail_fast)": "IndexDate.via_type_clinic.check()", "IndexDate.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexDate.via_type_clinic.warn()", "IndexDate.via_type_clinic.__call__(hint, *, fail_fast)": "IndexDate.via_type_clinic.__call__()", "IndexDate.via_type_clinic.__repr__()": "IndexDate.via_type_clinic.__repr__()", "IndexDateGO.__init__(labels, *, loc_is_iloc, name)": "IndexDateGO.__init__()", "IndexDateGO.from_date_range(start, stop, step, *, name)": "IndexDateGO.from_date_range()", "IndexDateGO.from_labels(labels, *, name)": "IndexDateGO.from_labels()", "IndexDateGO.from_pandas(value)": "IndexDateGO.from_pandas()", "IndexDateGO.from_year_month_range(start, stop, step, *, name)": "IndexDateGO.from_year_month_range()", "IndexDateGO.from_year_range(start, stop, step, *, name)": "IndexDateGO.from_year_range()", "IndexDateGO.to_html(config, style_config)": "IndexDateGO.to_html()", "IndexDateGO.to_html_datatables(fp, *, show, config)": "IndexDateGO.to_html_datatables()", "IndexDateGO.to_pandas()": "IndexDateGO.to_pandas()", "IndexDateGO.to_series()": "IndexDateGO.to_series()", "IndexDateGO.to_visidata()": "IndexDateGO.to_visidata()", "IndexDateGO.STATIC": "IndexDateGO.STATIC", "IndexDateGO.depth": "IndexDateGO.depth", "IndexDateGO.dtype": "IndexDateGO.dtype", "IndexDateGO.index_types": "IndexDateGO.index_types", "IndexDateGO.memory": "IndexDateGO.memory", "IndexDateGO.mloc": "IndexDateGO.mloc", "IndexDateGO.name": "IndexDateGO.name", "IndexDateGO.names": "IndexDateGO.names", "IndexDateGO.nbytes": "IndexDateGO.nbytes", "IndexDateGO.ndim": "IndexDateGO.ndim", "IndexDateGO.positions": "IndexDateGO.positions", "IndexDateGO.shape": "IndexDateGO.shape", "IndexDateGO.size": "IndexDateGO.size", "IndexDateGO.__array__(dtype)": "IndexDateGO.__array__()", "IndexDateGO.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexDateGO.__array_ufunc__()", "IndexDateGO.__bool__()": "IndexDateGO.__bool__()", "IndexDateGO.__copy__()": "IndexDateGO.__copy__()", "IndexDateGO.__deepcopy__(memo)": "IndexDateGO.__deepcopy__()", "IndexDateGO.__len__()": "IndexDateGO.__len__()", "IndexDateGO.all(axis, skipna, out)": "IndexDateGO.all()", "IndexDateGO.any(axis, skipna, out)": "IndexDateGO.any()", "IndexDateGO.append(value)": "IndexDateGO.append()", "IndexDateGO.astype(dtype)": "IndexDateGO.astype()", "IndexDateGO.copy()": "IndexDateGO.copy()", "IndexDateGO.cumprod(axis, skipna)": "IndexDateGO.cumprod()", "IndexDateGO.cumsum(axis, skipna)": "IndexDateGO.cumsum()", "IndexDateGO.difference(*others)": "IndexDateGO.difference()", "IndexDateGO.dropfalsy()": "IndexDateGO.dropfalsy()", "IndexDateGO.dropna()": "IndexDateGO.dropna()", "IndexDateGO.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexDateGO.equals()", "IndexDateGO.extend(values)": "IndexDateGO.extend()", "IndexDateGO.fillfalsy(value)": "IndexDateGO.fillfalsy()", "IndexDateGO.fillna(value)": "IndexDateGO.fillna()", "IndexDateGO.head(count)": "IndexDateGO.head()", "IndexDateGO.iloc_searchsorted(values, *, side_left)": "IndexDateGO.iloc_searchsorted()", "IndexDateGO.intersection(*others)": "IndexDateGO.intersection()", "IndexDateGO.isfalsy()": "IndexDateGO.isfalsy()", "IndexDateGO.isin(other)": "IndexDateGO.isin()", "IndexDateGO.isna()": "IndexDateGO.isna()", "IndexDateGO.label_widths_at_depth(depth_level)": "IndexDateGO.label_widths_at_depth()", "IndexDateGO.level_add(level, *, index_constructor)": "IndexDateGO.level_add()", "IndexDateGO.loc_searchsorted(values, *, side_left, fill_value)": "IndexDateGO.loc_searchsorted()", "IndexDateGO.loc_to_iloc(key)": "IndexDateGO.loc_to_iloc()", "IndexDateGO.max(axis, skipna, out)": "IndexDateGO.max()", "IndexDateGO.mean(axis, skipna, out)": "IndexDateGO.mean()", "IndexDateGO.median(axis, skipna, out)": "IndexDateGO.median()", "IndexDateGO.min(axis, skipna, out)": "IndexDateGO.min()", "IndexDateGO.notfalsy()": "IndexDateGO.notfalsy()", "IndexDateGO.notna()": "IndexDateGO.notna()", "IndexDateGO.prod(axis, skipna, allna, out)": "IndexDateGO.prod()", "IndexDateGO.relabel(mapper)": "IndexDateGO.relabel()", "IndexDateGO.rename(name)": "IndexDateGO.rename()", "IndexDateGO.roll(shift)": "IndexDateGO.roll()", "IndexDateGO.sample(count, *, seed)": "IndexDateGO.sample()", "IndexDateGO.sort(ascending, kind, key)": "IndexDateGO.sort()", "IndexDateGO.std(axis, skipna, ddof, out)": "IndexDateGO.std()", "IndexDateGO.sum(axis, skipna, allna, out)": "IndexDateGO.sum()", "IndexDateGO.tail(count)": "IndexDateGO.tail()", "IndexDateGO.union(*others)": "IndexDateGO.union()", "IndexDateGO.unique(depth_level, order_by_occurrence)": "IndexDateGO.unique()", "IndexDateGO.values_at_depth(depth_level)": "IndexDateGO.values_at_depth()", "IndexDateGO.var(axis, skipna, ddof, out)": "IndexDateGO.var()", "IndexDateGO.__contains__(value)": "IndexDateGO.__contains__()", "IndexDateGO.__iter__()": "IndexDateGO.__iter__()", "IndexDateGO.__reversed__()": "IndexDateGO.__reversed__()", "IndexDateGO.values": "IndexDateGO.values", "IndexDateGO.interface": "IndexDateGO.interface", "IndexDateGO.__repr__()": "IndexDateGO.__repr__()", "IndexDateGO.__str__()": "IndexDateGO.__str__()", "IndexDateGO.display(config, *, style_config)": "IndexDateGO.display()", "IndexDateGO.display_tall(config)": "IndexDateGO.display_tall()", "IndexDateGO.display_wide(config)": "IndexDateGO.display_wide()", "IndexDateGO.drop.iloc[key]": "IndexDateGO.drop.iloc[]", "IndexDateGO.drop.loc[key]": "IndexDateGO.drop.loc[]", "IndexDateGO.[key]": "IndexDateGO.[]", "IndexDateGO.iloc[key]": "IndexDateGO.iloc[]", "IndexDateGO.loc[key]": "IndexDateGO.loc[]", "IndexDateGO.iter_label(depth_level)": "IndexDateGO.iter_label()", "IndexDateGO.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexDateGO.iter_label().apply()", "IndexDateGO.iter_label(depth_level).apply_iter(func)": "IndexDateGO.iter_label().apply_iter()", "IndexDateGO.iter_label(depth_level).apply_iter_items(func)": "IndexDateGO.iter_label().apply_iter_items()", "IndexDateGO.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexDateGO.iter_label().apply_pool()", "IndexDateGO.__add__(other)": "IndexDateGO.__add__()", "IndexDateGO.__and__(other)": "IndexDateGO.__and__()", "IndexDateGO.__eq__(other)": "IndexDateGO.__eq__()", "IndexDateGO.__floordiv__(other)": "IndexDateGO.__floordiv__()", "IndexDateGO.__ge__(other)": "IndexDateGO.__ge__()", "IndexDateGO.__gt__(other)": "IndexDateGO.__gt__()", "IndexDateGO.__le__(other)": "IndexDateGO.__le__()", "IndexDateGO.__lt__(other)": "IndexDateGO.__lt__()", "IndexDateGO.__matmul__(other)": "IndexDateGO.__matmul__()", "IndexDateGO.__mod__(other)": "IndexDateGO.__mod__()", "IndexDateGO.__mul__(other)": "IndexDateGO.__mul__()", "IndexDateGO.__ne__(other)": "IndexDateGO.__ne__()", "IndexDateGO.__or__(other)": "IndexDateGO.__or__()", "IndexDateGO.__pow__(other)": "IndexDateGO.__pow__()", "IndexDateGO.__radd__(other)": "IndexDateGO.__radd__()", "IndexDateGO.__rfloordiv__(other)": "IndexDateGO.__rfloordiv__()", "IndexDateGO.__rmatmul__(other)": "IndexDateGO.__rmatmul__()", "IndexDateGO.__rmul__(other)": "IndexDateGO.__rmul__()", "IndexDateGO.__rshift__(other)": "IndexDateGO.__rshift__()", "IndexDateGO.__rsub__(other)": "IndexDateGO.__rsub__()", "IndexDateGO.__rtruediv__(other)": "IndexDateGO.__rtruediv__()", "IndexDateGO.__sub__(other)": "IndexDateGO.__sub__()", "IndexDateGO.__truediv__(other)": "IndexDateGO.__truediv__()", "IndexDateGO.__xor__(other)": "IndexDateGO.__xor__()", "IndexDateGO.__abs__()": "IndexDateGO.__abs__()", "IndexDateGO.__invert__()": "IndexDateGO.__invert__()", "IndexDateGO.__neg__()": "IndexDateGO.__neg__()", "IndexDateGO.__pos__()": "IndexDateGO.__pos__()", "IndexDateGO.via_values.apply(func, *args, **kwargs)": "IndexDateGO.via_values.apply()", "IndexDateGO.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexDateGO.via_values.__array_ufunc__()", "IndexDateGO.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexDateGO.via_values.__call__()", "IndexDateGO.via_dt.__call__(*, fill_value)": "IndexDateGO.via_dt.__call__()", "IndexDateGO.via_dt.year": "IndexDateGO.via_dt.year", "IndexDateGO.via_dt.year_month": "IndexDateGO.via_dt.year_month", "IndexDateGO.via_dt.year_quarter": "IndexDateGO.via_dt.year_quarter", "IndexDateGO.via_dt.month": "IndexDateGO.via_dt.month", "IndexDateGO.via_dt.day": "IndexDateGO.via_dt.day", "IndexDateGO.via_dt.hour": "IndexDateGO.via_dt.hour", "IndexDateGO.via_dt.minute": "IndexDateGO.via_dt.minute", "IndexDateGO.via_dt.second": "IndexDateGO.via_dt.second", "IndexDateGO.via_dt.weekday()": "IndexDateGO.via_dt.weekday()", "IndexDateGO.via_dt.quarter()": "IndexDateGO.via_dt.quarter()", "IndexDateGO.via_dt.is_month_end()": "IndexDateGO.via_dt.is_month_end()", "IndexDateGO.via_dt.is_month_start()": "IndexDateGO.via_dt.is_month_start()", "IndexDateGO.via_dt.is_year_end()": "IndexDateGO.via_dt.is_year_end()", "IndexDateGO.via_dt.is_year_start()": "IndexDateGO.via_dt.is_year_start()", "IndexDateGO.via_dt.is_quarter_end()": "IndexDateGO.via_dt.is_quarter_end()", "IndexDateGO.via_dt.is_quarter_start()": "IndexDateGO.via_dt.is_quarter_start()", "IndexDateGO.via_dt.timetuple()": "IndexDateGO.via_dt.timetuple()", "IndexDateGO.via_dt.isoformat(sep, timespec)": "IndexDateGO.via_dt.isoformat()", "IndexDateGO.via_dt.fromisoformat()": "IndexDateGO.via_dt.fromisoformat()", "IndexDateGO.via_dt.strftime(format)": "IndexDateGO.via_dt.strftime()", "IndexDateGO.via_dt.strptime(format)": "IndexDateGO.via_dt.strptime()", "IndexDateGO.via_dt.strpdate(format)": "IndexDateGO.via_dt.strpdate()", "IndexDateGO.via_str.__getitem__(key)": "IndexDateGO.via_str.__getitem__()", "IndexDateGO.via_str.capitalize()": "IndexDateGO.via_str.capitalize()", "IndexDateGO.via_str.center(width, fillchar)": "IndexDateGO.via_str.center()", "IndexDateGO.via_str.contains(item)": "IndexDateGO.via_str.contains()", "IndexDateGO.via_str.count(sub, start, end)": "IndexDateGO.via_str.count()", "IndexDateGO.via_str.decode(encoding, errors)": "IndexDateGO.via_str.decode()", "IndexDateGO.via_str.encode(encoding, errors)": "IndexDateGO.via_str.encode()", "IndexDateGO.via_str.endswith(suffix, start, end)": "IndexDateGO.via_str.endswith()", "IndexDateGO.via_str.find(sub, start, end)": "IndexDateGO.via_str.find()", "IndexDateGO.via_str.format(format)": "IndexDateGO.via_str.format()", "IndexDateGO.via_str.index(sub, start, end)": "IndexDateGO.via_str.index()", "IndexDateGO.via_str.isalnum()": "IndexDateGO.via_str.isalnum()", "IndexDateGO.via_str.isalpha()": "IndexDateGO.via_str.isalpha()", "IndexDateGO.via_str.isdecimal()": "IndexDateGO.via_str.isdecimal()", "IndexDateGO.via_str.isdigit()": "IndexDateGO.via_str.isdigit()", "IndexDateGO.via_str.islower()": "IndexDateGO.via_str.islower()", "IndexDateGO.via_str.isnumeric()": "IndexDateGO.via_str.isnumeric()", "IndexDateGO.via_str.isspace()": "IndexDateGO.via_str.isspace()", "IndexDateGO.via_str.istitle()": "IndexDateGO.via_str.istitle()", "IndexDateGO.via_str.isupper()": "IndexDateGO.via_str.isupper()", "IndexDateGO.via_str.ljust(width, fillchar)": "IndexDateGO.via_str.ljust()", "IndexDateGO.via_str.len()": "IndexDateGO.via_str.len()", "IndexDateGO.via_str.lower()": "IndexDateGO.via_str.lower()", "IndexDateGO.via_str.lstrip(chars)": "IndexDateGO.via_str.lstrip()", "IndexDateGO.via_str.partition(sep)": "IndexDateGO.via_str.partition()", "IndexDateGO.via_str.replace(old, new, count)": "IndexDateGO.via_str.replace()", "IndexDateGO.via_str.rfind(sub, start, end)": "IndexDateGO.via_str.rfind()", "IndexDateGO.via_str.rindex(sub, start, end)": "IndexDateGO.via_str.rindex()", "IndexDateGO.via_str.rjust(width, fillchar)": "IndexDateGO.via_str.rjust()", "IndexDateGO.via_str.rpartition(sep)": "IndexDateGO.via_str.rpartition()", "IndexDateGO.via_str.rsplit(sep, maxsplit)": "IndexDateGO.via_str.rsplit()", "IndexDateGO.via_str.rstrip(chars)": "IndexDateGO.via_str.rstrip()", "IndexDateGO.via_str.split(sep, maxsplit)": "IndexDateGO.via_str.split()", "IndexDateGO.via_str.startswith(prefix, start, end)": "IndexDateGO.via_str.startswith()", "IndexDateGO.via_str.strip(chars)": "IndexDateGO.via_str.strip()", "IndexDateGO.via_str.swapcase()": "IndexDateGO.via_str.swapcase()", "IndexDateGO.via_str.title()": "IndexDateGO.via_str.title()", "IndexDateGO.via_str.upper()": "IndexDateGO.via_str.upper()", "IndexDateGO.via_str.zfill(width)": "IndexDateGO.via_str.zfill()", "IndexDateGO.via_re(pattern, flags).search(pos, endpos)": "IndexDateGO.via_re().search()", "IndexDateGO.via_re(pattern, flags).match(pos, endpos)": "IndexDateGO.via_re().match()", "IndexDateGO.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexDateGO.via_re().fullmatch()", "IndexDateGO.via_re(pattern, flags).split(maxsplit)": "IndexDateGO.via_re().split()", "IndexDateGO.via_re(pattern, flags).findall(pos, endpos)": "IndexDateGO.via_re().findall()", "IndexDateGO.via_re(pattern, flags).sub(repl, count)": "IndexDateGO.via_re().sub()", "IndexDateGO.via_re(pattern, flags).subn(repl, count)": "IndexDateGO.via_re().subn()", "IndexDateGO.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexDateGO.via_hashlib().to_bytes()", "IndexDateGO.via_hashlib(include_name, include_class, encoding).md5()": "IndexDateGO.via_hashlib().md5()", "IndexDateGO.via_hashlib(include_name, include_class, encoding).sha256()": "IndexDateGO.via_hashlib().sha256()", "IndexDateGO.via_hashlib(include_name, include_class, encoding).sha512()": "IndexDateGO.via_hashlib().sha512()", "IndexDateGO.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexDateGO.via_hashlib().sha3_256()", "IndexDateGO.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexDateGO.via_hashlib().sha3_512()", "IndexDateGO.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexDateGO.via_hashlib().shake_128()", "IndexDateGO.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexDateGO.via_hashlib().shake_256()", "IndexDateGO.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexDateGO.via_hashlib().blake2b()", "IndexDateGO.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexDateGO.via_hashlib().blake2s()", "IndexDateGO.via_type_clinic.to_hint()": "IndexDateGO.via_type_clinic.to_hint()", "IndexDateGO.via_type_clinic.check(hint, *, fail_fast)": "IndexDateGO.via_type_clinic.check()", "IndexDateGO.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexDateGO.via_type_clinic.warn()", "IndexDateGO.via_type_clinic.__call__(hint, *, fail_fast)": "IndexDateGO.via_type_clinic.__call__()", "IndexDateGO.via_type_clinic.__repr__()": "IndexDateGO.via_type_clinic.__repr__()", "IndexMinute.__init__(labels, *, loc_is_iloc, name)": "IndexMinute.__init__()", "IndexMinute.from_labels(labels, *, name)": "IndexMinute.from_labels()", "IndexMinute.from_pandas(value)": "IndexMinute.from_pandas()", "IndexMinute.to_html(config, style_config)": "IndexMinute.to_html()", "IndexMinute.to_html_datatables(fp, *, show, config)": "IndexMinute.to_html_datatables()", "IndexMinute.to_pandas()": "IndexMinute.to_pandas()", "IndexMinute.to_series()": "IndexMinute.to_series()", "IndexMinute.to_visidata()": "IndexMinute.to_visidata()", "IndexMinute.STATIC": "IndexMinute.STATIC", "IndexMinute.depth": "IndexMinute.depth", "IndexMinute.dtype": "IndexMinute.dtype", "IndexMinute.index_types": "IndexMinute.index_types", "IndexMinute.memory": "IndexMinute.memory", "IndexMinute.mloc": "IndexMinute.mloc", "IndexMinute.name": "IndexMinute.name", "IndexMinute.names": "IndexMinute.names", "IndexMinute.nbytes": "IndexMinute.nbytes", "IndexMinute.ndim": "IndexMinute.ndim", "IndexMinute.positions": "IndexMinute.positions", "IndexMinute.shape": "IndexMinute.shape", "IndexMinute.size": "IndexMinute.size", "IndexMinute.__array__(dtype)": "IndexMinute.__array__()", "IndexMinute.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexMinute.__array_ufunc__()", "IndexMinute.__bool__()": "IndexMinute.__bool__()", "IndexMinute.__copy__()": "IndexMinute.__copy__()", "IndexMinute.__deepcopy__(memo)": "IndexMinute.__deepcopy__()", "IndexMinute.__len__()": "IndexMinute.__len__()", "IndexMinute.all(axis, skipna, out)": "IndexMinute.all()", "IndexMinute.any(axis, skipna, out)": "IndexMinute.any()", "IndexMinute.astype(dtype)": "IndexMinute.astype()", "IndexMinute.copy()": "IndexMinute.copy()", "IndexMinute.cumprod(axis, skipna)": "IndexMinute.cumprod()", "IndexMinute.cumsum(axis, skipna)": "IndexMinute.cumsum()", "IndexMinute.difference(*others)": "IndexMinute.difference()", "IndexMinute.dropfalsy()": "IndexMinute.dropfalsy()", "IndexMinute.dropna()": "IndexMinute.dropna()", "IndexMinute.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexMinute.equals()", "IndexMinute.fillfalsy(value)": "IndexMinute.fillfalsy()", "IndexMinute.fillna(value)": "IndexMinute.fillna()", "IndexMinute.head(count)": "IndexMinute.head()", "IndexMinute.iloc_searchsorted(values, *, side_left)": "IndexMinute.iloc_searchsorted()", "IndexMinute.intersection(*others)": "IndexMinute.intersection()", "IndexMinute.isfalsy()": "IndexMinute.isfalsy()", "IndexMinute.isin(other)": "IndexMinute.isin()", "IndexMinute.isna()": "IndexMinute.isna()", "IndexMinute.label_widths_at_depth(depth_level)": "IndexMinute.label_widths_at_depth()", "IndexMinute.level_add(level, *, index_constructor)": "IndexMinute.level_add()", "IndexMinute.loc_searchsorted(values, *, side_left, fill_value)": "IndexMinute.loc_searchsorted()", "IndexMinute.loc_to_iloc(key)": "IndexMinute.loc_to_iloc()", "IndexMinute.max(axis, skipna, out)": "IndexMinute.max()", "IndexMinute.mean(axis, skipna, out)": "IndexMinute.mean()", "IndexMinute.median(axis, skipna, out)": "IndexMinute.median()", "IndexMinute.min(axis, skipna, out)": "IndexMinute.min()", "IndexMinute.notfalsy()": "IndexMinute.notfalsy()", "IndexMinute.notna()": "IndexMinute.notna()", "IndexMinute.prod(axis, skipna, allna, out)": "IndexMinute.prod()", "IndexMinute.relabel(mapper)": "IndexMinute.relabel()", "IndexMinute.rename(name)": "IndexMinute.rename()", "IndexMinute.roll(shift)": "IndexMinute.roll()", "IndexMinute.sample(count, *, seed)": "IndexMinute.sample()", "IndexMinute.sort(ascending, kind, key)": "IndexMinute.sort()", "IndexMinute.std(axis, skipna, ddof, out)": "IndexMinute.std()", "IndexMinute.sum(axis, skipna, allna, out)": "IndexMinute.sum()", "IndexMinute.tail(count)": "IndexMinute.tail()", "IndexMinute.union(*others)": "IndexMinute.union()", "IndexMinute.unique(depth_level, order_by_occurrence)": "IndexMinute.unique()", "IndexMinute.values_at_depth(depth_level)": "IndexMinute.values_at_depth()", "IndexMinute.var(axis, skipna, ddof, out)": "IndexMinute.var()", "IndexMinute.__contains__(value)": "IndexMinute.__contains__()", "IndexMinute.__iter__()": "IndexMinute.__iter__()", "IndexMinute.__reversed__()": "IndexMinute.__reversed__()", "IndexMinute.values": "IndexMinute.values", "IndexMinute.interface": "IndexMinute.interface", "IndexMinute.__repr__()": "IndexMinute.__repr__()", "IndexMinute.__str__()": "IndexMinute.__str__()", "IndexMinute.display(config, *, style_config)": "IndexMinute.display()", "IndexMinute.display_tall(config)": "IndexMinute.display_tall()", "IndexMinute.display_wide(config)": "IndexMinute.display_wide()", "IndexMinute.drop.iloc[key]": "IndexMinute.drop.iloc[]", "IndexMinute.drop.loc[key]": "IndexMinute.drop.loc[]", "IndexMinute.[key]": "IndexMinute.[]", "IndexMinute.iloc[key]": "IndexMinute.iloc[]", "IndexMinute.loc[key]": "IndexMinute.loc[]", "IndexMinute.iter_label(depth_level)": "IndexMinute.iter_label()", "IndexMinute.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexMinute.iter_label().apply()", "IndexMinute.iter_label(depth_level).apply_iter(func)": "IndexMinute.iter_label().apply_iter()", "IndexMinute.iter_label(depth_level).apply_iter_items(func)": "IndexMinute.iter_label().apply_iter_items()", "IndexMinute.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexMinute.iter_label().apply_pool()", "IndexMinute.__add__(other)": "IndexMinute.__add__()", "IndexMinute.__and__(other)": "IndexMinute.__and__()", "IndexMinute.__eq__(other)": "IndexMinute.__eq__()", "IndexMinute.__floordiv__(other)": "IndexMinute.__floordiv__()", "IndexMinute.__ge__(other)": "IndexMinute.__ge__()", "IndexMinute.__gt__(other)": "IndexMinute.__gt__()", "IndexMinute.__le__(other)": "IndexMinute.__le__()", "IndexMinute.__lt__(other)": "IndexMinute.__lt__()", "IndexMinute.__matmul__(other)": "IndexMinute.__matmul__()", "IndexMinute.__mod__(other)": "IndexMinute.__mod__()", "IndexMinute.__mul__(other)": "IndexMinute.__mul__()", "IndexMinute.__ne__(other)": "IndexMinute.__ne__()", "IndexMinute.__or__(other)": "IndexMinute.__or__()", "IndexMinute.__pow__(other)": "IndexMinute.__pow__()", "IndexMinute.__radd__(other)": "IndexMinute.__radd__()", "IndexMinute.__rfloordiv__(other)": "IndexMinute.__rfloordiv__()", "IndexMinute.__rmatmul__(other)": "IndexMinute.__rmatmul__()", "IndexMinute.__rmul__(other)": "IndexMinute.__rmul__()", "IndexMinute.__rshift__(other)": "IndexMinute.__rshift__()", "IndexMinute.__rsub__(other)": "IndexMinute.__rsub__()", "IndexMinute.__rtruediv__(other)": "IndexMinute.__rtruediv__()", "IndexMinute.__sub__(other)": "IndexMinute.__sub__()", "IndexMinute.__truediv__(other)": "IndexMinute.__truediv__()", "IndexMinute.__xor__(other)": "IndexMinute.__xor__()", "IndexMinute.__abs__()": "IndexMinute.__abs__()", "IndexMinute.__invert__()": "IndexMinute.__invert__()", "IndexMinute.__neg__()": "IndexMinute.__neg__()", "IndexMinute.__pos__()": "IndexMinute.__pos__()", "IndexMinute.via_values.apply(func, *args, **kwargs)": "IndexMinute.via_values.apply()", "IndexMinute.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexMinute.via_values.__array_ufunc__()", "IndexMinute.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexMinute.via_values.__call__()", "IndexMinute.via_dt.__call__(*, fill_value)": "IndexMinute.via_dt.__call__()", "IndexMinute.via_dt.year": "IndexMinute.via_dt.year", "IndexMinute.via_dt.year_month": "IndexMinute.via_dt.year_month", "IndexMinute.via_dt.year_quarter": "IndexMinute.via_dt.year_quarter", "IndexMinute.via_dt.month": "IndexMinute.via_dt.month", "IndexMinute.via_dt.day": "IndexMinute.via_dt.day", "IndexMinute.via_dt.hour": "IndexMinute.via_dt.hour", "IndexMinute.via_dt.minute": "IndexMinute.via_dt.minute", "IndexMinute.via_dt.second": "IndexMinute.via_dt.second", "IndexMinute.via_dt.weekday()": "IndexMinute.via_dt.weekday()", "IndexMinute.via_dt.quarter()": "IndexMinute.via_dt.quarter()", "IndexMinute.via_dt.is_month_end()": "IndexMinute.via_dt.is_month_end()", "IndexMinute.via_dt.is_month_start()": "IndexMinute.via_dt.is_month_start()", "IndexMinute.via_dt.is_year_end()": "IndexMinute.via_dt.is_year_end()", "IndexMinute.via_dt.is_year_start()": "IndexMinute.via_dt.is_year_start()", "IndexMinute.via_dt.is_quarter_end()": "IndexMinute.via_dt.is_quarter_end()", "IndexMinute.via_dt.is_quarter_start()": "IndexMinute.via_dt.is_quarter_start()", "IndexMinute.via_dt.timetuple()": "IndexMinute.via_dt.timetuple()", "IndexMinute.via_dt.isoformat(sep, timespec)": "IndexMinute.via_dt.isoformat()", "IndexMinute.via_dt.fromisoformat()": "IndexMinute.via_dt.fromisoformat()", "IndexMinute.via_dt.strftime(format)": "IndexMinute.via_dt.strftime()", "IndexMinute.via_dt.strptime(format)": "IndexMinute.via_dt.strptime()", "IndexMinute.via_dt.strpdate(format)": "IndexMinute.via_dt.strpdate()", "IndexMinute.via_str.__getitem__(key)": "IndexMinute.via_str.__getitem__()", "IndexMinute.via_str.capitalize()": "IndexMinute.via_str.capitalize()", "IndexMinute.via_str.center(width, fillchar)": "IndexMinute.via_str.center()", "IndexMinute.via_str.contains(item)": "IndexMinute.via_str.contains()", "IndexMinute.via_str.count(sub, start, end)": "IndexMinute.via_str.count()", "IndexMinute.via_str.decode(encoding, errors)": "IndexMinute.via_str.decode()", "IndexMinute.via_str.encode(encoding, errors)": "IndexMinute.via_str.encode()", "IndexMinute.via_str.endswith(suffix, start, end)": "IndexMinute.via_str.endswith()", "IndexMinute.via_str.find(sub, start, end)": "IndexMinute.via_str.find()", "IndexMinute.via_str.format(format)": "IndexMinute.via_str.format()", "IndexMinute.via_str.index(sub, start, end)": "IndexMinute.via_str.index()", "IndexMinute.via_str.isalnum()": "IndexMinute.via_str.isalnum()", "IndexMinute.via_str.isalpha()": "IndexMinute.via_str.isalpha()", "IndexMinute.via_str.isdecimal()": "IndexMinute.via_str.isdecimal()", "IndexMinute.via_str.isdigit()": "IndexMinute.via_str.isdigit()", "IndexMinute.via_str.islower()": "IndexMinute.via_str.islower()", "IndexMinute.via_str.isnumeric()": "IndexMinute.via_str.isnumeric()", "IndexMinute.via_str.isspace()": "IndexMinute.via_str.isspace()", "IndexMinute.via_str.istitle()": "IndexMinute.via_str.istitle()", "IndexMinute.via_str.isupper()": "IndexMinute.via_str.isupper()", "IndexMinute.via_str.ljust(width, fillchar)": "IndexMinute.via_str.ljust()", "IndexMinute.via_str.len()": "IndexMinute.via_str.len()", "IndexMinute.via_str.lower()": "IndexMinute.via_str.lower()", "IndexMinute.via_str.lstrip(chars)": "IndexMinute.via_str.lstrip()", "IndexMinute.via_str.partition(sep)": "IndexMinute.via_str.partition()", "IndexMinute.via_str.replace(old, new, count)": "IndexMinute.via_str.replace()", "IndexMinute.via_str.rfind(sub, start, end)": "IndexMinute.via_str.rfind()", "IndexMinute.via_str.rindex(sub, start, end)": "IndexMinute.via_str.rindex()", "IndexMinute.via_str.rjust(width, fillchar)": "IndexMinute.via_str.rjust()", "IndexMinute.via_str.rpartition(sep)": "IndexMinute.via_str.rpartition()", "IndexMinute.via_str.rsplit(sep, maxsplit)": "IndexMinute.via_str.rsplit()", "IndexMinute.via_str.rstrip(chars)": "IndexMinute.via_str.rstrip()", "IndexMinute.via_str.split(sep, maxsplit)": "IndexMinute.via_str.split()", "IndexMinute.via_str.startswith(prefix, start, end)": "IndexMinute.via_str.startswith()", "IndexMinute.via_str.strip(chars)": "IndexMinute.via_str.strip()", "IndexMinute.via_str.swapcase()": "IndexMinute.via_str.swapcase()", "IndexMinute.via_str.title()": "IndexMinute.via_str.title()", "IndexMinute.via_str.upper()": "IndexMinute.via_str.upper()", "IndexMinute.via_str.zfill(width)": "IndexMinute.via_str.zfill()", "IndexMinute.via_re(pattern, flags).search(pos, endpos)": "IndexMinute.via_re().search()", "IndexMinute.via_re(pattern, flags).match(pos, endpos)": "IndexMinute.via_re().match()", "IndexMinute.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexMinute.via_re().fullmatch()", "IndexMinute.via_re(pattern, flags).split(maxsplit)": "IndexMinute.via_re().split()", "IndexMinute.via_re(pattern, flags).findall(pos, endpos)": "IndexMinute.via_re().findall()", "IndexMinute.via_re(pattern, flags).sub(repl, count)": "IndexMinute.via_re().sub()", "IndexMinute.via_re(pattern, flags).subn(repl, count)": "IndexMinute.via_re().subn()", "IndexMinute.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexMinute.via_hashlib().to_bytes()", "IndexMinute.via_hashlib(include_name, include_class, encoding).md5()": "IndexMinute.via_hashlib().md5()", "IndexMinute.via_hashlib(include_name, include_class, encoding).sha256()": "IndexMinute.via_hashlib().sha256()", "IndexMinute.via_hashlib(include_name, include_class, encoding).sha512()": "IndexMinute.via_hashlib().sha512()", "IndexMinute.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexMinute.via_hashlib().sha3_256()", "IndexMinute.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexMinute.via_hashlib().sha3_512()", "IndexMinute.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexMinute.via_hashlib().shake_128()", "IndexMinute.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexMinute.via_hashlib().shake_256()", "IndexMinute.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexMinute.via_hashlib().blake2b()", "IndexMinute.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexMinute.via_hashlib().blake2s()", "IndexMinute.via_type_clinic.to_hint()": "IndexMinute.via_type_clinic.to_hint()", "IndexMinute.via_type_clinic.check(hint, *, fail_fast)": "IndexMinute.via_type_clinic.check()", "IndexMinute.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexMinute.via_type_clinic.warn()", "IndexMinute.via_type_clinic.__call__(hint, *, fail_fast)": "IndexMinute.via_type_clinic.__call__()", "IndexMinute.via_type_clinic.__repr__()": "IndexMinute.via_type_clinic.__repr__()", "IndexMinuteGO.__init__(labels, *, loc_is_iloc, name)": "IndexMinuteGO.__init__()", "IndexMinuteGO.from_labels(labels, *, name)": "IndexMinuteGO.from_labels()", "IndexMinuteGO.from_pandas(value)": "IndexMinuteGO.from_pandas()", "IndexMinuteGO.to_html(config, style_config)": "IndexMinuteGO.to_html()", "IndexMinuteGO.to_html_datatables(fp, *, show, config)": "IndexMinuteGO.to_html_datatables()", "IndexMinuteGO.to_pandas()": "IndexMinuteGO.to_pandas()", "IndexMinuteGO.to_series()": "IndexMinuteGO.to_series()", "IndexMinuteGO.to_visidata()": "IndexMinuteGO.to_visidata()", "IndexMinuteGO.STATIC": "IndexMinuteGO.STATIC", "IndexMinuteGO.depth": "IndexMinuteGO.depth", "IndexMinuteGO.dtype": "IndexMinuteGO.dtype", "IndexMinuteGO.index_types": "IndexMinuteGO.index_types", "IndexMinuteGO.memory": "IndexMinuteGO.memory", "IndexMinuteGO.mloc": "IndexMinuteGO.mloc", "IndexMinuteGO.name": "IndexMinuteGO.name", "IndexMinuteGO.names": "IndexMinuteGO.names", "IndexMinuteGO.nbytes": "IndexMinuteGO.nbytes", "IndexMinuteGO.ndim": "IndexMinuteGO.ndim", "IndexMinuteGO.positions": "IndexMinuteGO.positions", "IndexMinuteGO.shape": "IndexMinuteGO.shape", "IndexMinuteGO.size": "IndexMinuteGO.size", "IndexMinuteGO.__array__(dtype)": "IndexMinuteGO.__array__()", "IndexMinuteGO.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexMinuteGO.__array_ufunc__()", "IndexMinuteGO.__bool__()": "IndexMinuteGO.__bool__()", "IndexMinuteGO.__copy__()": "IndexMinuteGO.__copy__()", "IndexMinuteGO.__deepcopy__(memo)": "IndexMinuteGO.__deepcopy__()", "IndexMinuteGO.__len__()": "IndexMinuteGO.__len__()", "IndexMinuteGO.all(axis, skipna, out)": "IndexMinuteGO.all()", "IndexMinuteGO.any(axis, skipna, out)": "IndexMinuteGO.any()", "IndexMinuteGO.append(value)": "IndexMinuteGO.append()", "IndexMinuteGO.astype(dtype)": "IndexMinuteGO.astype()", "IndexMinuteGO.copy()": "IndexMinuteGO.copy()", "IndexMinuteGO.cumprod(axis, skipna)": "IndexMinuteGO.cumprod()", "IndexMinuteGO.cumsum(axis, skipna)": "IndexMinuteGO.cumsum()", "IndexMinuteGO.difference(*others)": "IndexMinuteGO.difference()", "IndexMinuteGO.dropfalsy()": "IndexMinuteGO.dropfalsy()", "IndexMinuteGO.dropna()": "IndexMinuteGO.dropna()", "IndexMinuteGO.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexMinuteGO.equals()", "IndexMinuteGO.extend(values)": "IndexMinuteGO.extend()", "IndexMinuteGO.fillfalsy(value)": "IndexMinuteGO.fillfalsy()", "IndexMinuteGO.fillna(value)": "IndexMinuteGO.fillna()", "IndexMinuteGO.head(count)": "IndexMinuteGO.head()", "IndexMinuteGO.iloc_searchsorted(values, *, side_left)": "IndexMinuteGO.iloc_searchsorted()", "IndexMinuteGO.intersection(*others)": "IndexMinuteGO.intersection()", "IndexMinuteGO.isfalsy()": "IndexMinuteGO.isfalsy()", "IndexMinuteGO.isin(other)": "IndexMinuteGO.isin()", "IndexMinuteGO.isna()": "IndexMinuteGO.isna()", "IndexMinuteGO.label_widths_at_depth(depth_level)": "IndexMinuteGO.label_widths_at_depth()", "IndexMinuteGO.level_add(level, *, index_constructor)": "IndexMinuteGO.level_add()", "IndexMinuteGO.loc_searchsorted(values, *, side_left, fill_value)": "IndexMinuteGO.loc_searchsorted()", "IndexMinuteGO.loc_to_iloc(key)": "IndexMinuteGO.loc_to_iloc()", "IndexMinuteGO.max(axis, skipna, out)": "IndexMinuteGO.max()", "IndexMinuteGO.mean(axis, skipna, out)": "IndexMinuteGO.mean()", "IndexMinuteGO.median(axis, skipna, out)": "IndexMinuteGO.median()", "IndexMinuteGO.min(axis, skipna, out)": "IndexMinuteGO.min()", "IndexMinuteGO.notfalsy()": "IndexMinuteGO.notfalsy()", "IndexMinuteGO.notna()": "IndexMinuteGO.notna()", "IndexMinuteGO.prod(axis, skipna, allna, out)": "IndexMinuteGO.prod()", "IndexMinuteGO.relabel(mapper)": "IndexMinuteGO.relabel()", "IndexMinuteGO.rename(name)": "IndexMinuteGO.rename()", "IndexMinuteGO.roll(shift)": "IndexMinuteGO.roll()", "IndexMinuteGO.sample(count, *, seed)": "IndexMinuteGO.sample()", "IndexMinuteGO.sort(ascending, kind, key)": "IndexMinuteGO.sort()", "IndexMinuteGO.std(axis, skipna, ddof, out)": "IndexMinuteGO.std()", "IndexMinuteGO.sum(axis, skipna, allna, out)": "IndexMinuteGO.sum()", "IndexMinuteGO.tail(count)": "IndexMinuteGO.tail()", "IndexMinuteGO.union(*others)": "IndexMinuteGO.union()", "IndexMinuteGO.unique(depth_level, order_by_occurrence)": "IndexMinuteGO.unique()", "IndexMinuteGO.values_at_depth(depth_level)": "IndexMinuteGO.values_at_depth()", "IndexMinuteGO.var(axis, skipna, ddof, out)": "IndexMinuteGO.var()", "IndexMinuteGO.__contains__(value)": "IndexMinuteGO.__contains__()", "IndexMinuteGO.__iter__()": "IndexMinuteGO.__iter__()", "IndexMinuteGO.__reversed__()": "IndexMinuteGO.__reversed__()", "IndexMinuteGO.values": "IndexMinuteGO.values", "IndexMinuteGO.interface": "IndexMinuteGO.interface", "IndexMinuteGO.__repr__()": "IndexMinuteGO.__repr__()", "IndexMinuteGO.__str__()": "IndexMinuteGO.__str__()", "IndexMinuteGO.display(config, *, style_config)": "IndexMinuteGO.display()", "IndexMinuteGO.display_tall(config)": "IndexMinuteGO.display_tall()", "IndexMinuteGO.display_wide(config)": "IndexMinuteGO.display_wide()", "IndexMinuteGO.drop.iloc[key]": "IndexMinuteGO.drop.iloc[]", "IndexMinuteGO.drop.loc[key]": "IndexMinuteGO.drop.loc[]", "IndexMinuteGO.[key]": "IndexMinuteGO.[]", "IndexMinuteGO.iloc[key]": "IndexMinuteGO.iloc[]", "IndexMinuteGO.loc[key]": "IndexMinuteGO.loc[]", "IndexMinuteGO.iter_label(depth_level)": "IndexMinuteGO.iter_label()", "IndexMinuteGO.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexMinuteGO.iter_label().apply()", "IndexMinuteGO.iter_label(depth_level).apply_iter(func)": "IndexMinuteGO.iter_label().apply_iter()", "IndexMinuteGO.iter_label(depth_level).apply_iter_items(func)": "IndexMinuteGO.iter_label().apply_iter_items()", "IndexMinuteGO.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexMinuteGO.iter_label().apply_pool()", "IndexMinuteGO.__add__(other)": "IndexMinuteGO.__add__()", "IndexMinuteGO.__and__(other)": "IndexMinuteGO.__and__()", "IndexMinuteGO.__eq__(other)": "IndexMinuteGO.__eq__()", "IndexMinuteGO.__floordiv__(other)": "IndexMinuteGO.__floordiv__()", "IndexMinuteGO.__ge__(other)": "IndexMinuteGO.__ge__()", "IndexMinuteGO.__gt__(other)": "IndexMinuteGO.__gt__()", "IndexMinuteGO.__le__(other)": "IndexMinuteGO.__le__()", "IndexMinuteGO.__lt__(other)": "IndexMinuteGO.__lt__()", "IndexMinuteGO.__matmul__(other)": "IndexMinuteGO.__matmul__()", "IndexMinuteGO.__mod__(other)": "IndexMinuteGO.__mod__()", "IndexMinuteGO.__mul__(other)": "IndexMinuteGO.__mul__()", "IndexMinuteGO.__ne__(other)": "IndexMinuteGO.__ne__()", "IndexMinuteGO.__or__(other)": "IndexMinuteGO.__or__()", "IndexMinuteGO.__pow__(other)": "IndexMinuteGO.__pow__()", "IndexMinuteGO.__radd__(other)": "IndexMinuteGO.__radd__()", "IndexMinuteGO.__rfloordiv__(other)": "IndexMinuteGO.__rfloordiv__()", "IndexMinuteGO.__rmatmul__(other)": "IndexMinuteGO.__rmatmul__()", "IndexMinuteGO.__rmul__(other)": "IndexMinuteGO.__rmul__()", "IndexMinuteGO.__rshift__(other)": "IndexMinuteGO.__rshift__()", "IndexMinuteGO.__rsub__(other)": "IndexMinuteGO.__rsub__()", "IndexMinuteGO.__rtruediv__(other)": "IndexMinuteGO.__rtruediv__()", "IndexMinuteGO.__sub__(other)": "IndexMinuteGO.__sub__()", "IndexMinuteGO.__truediv__(other)": "IndexMinuteGO.__truediv__()", "IndexMinuteGO.__xor__(other)": "IndexMinuteGO.__xor__()", "IndexMinuteGO.__abs__()": "IndexMinuteGO.__abs__()", "IndexMinuteGO.__invert__()": "IndexMinuteGO.__invert__()", "IndexMinuteGO.__neg__()": "IndexMinuteGO.__neg__()", "IndexMinuteGO.__pos__()": "IndexMinuteGO.__pos__()", "IndexMinuteGO.via_values.apply(func, *args, **kwargs)": "IndexMinuteGO.via_values.apply()", "IndexMinuteGO.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexMinuteGO.via_values.__array_ufunc__()", "IndexMinuteGO.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexMinuteGO.via_values.__call__()", "IndexMinuteGO.via_dt.__call__(*, fill_value)": "IndexMinuteGO.via_dt.__call__()", "IndexMinuteGO.via_dt.year": "IndexMinuteGO.via_dt.year", "IndexMinuteGO.via_dt.year_month": "IndexMinuteGO.via_dt.year_month", "IndexMinuteGO.via_dt.year_quarter": "IndexMinuteGO.via_dt.year_quarter", "IndexMinuteGO.via_dt.month": "IndexMinuteGO.via_dt.month", "IndexMinuteGO.via_dt.day": "IndexMinuteGO.via_dt.day", "IndexMinuteGO.via_dt.hour": "IndexMinuteGO.via_dt.hour", "IndexMinuteGO.via_dt.minute": "IndexMinuteGO.via_dt.minute", "IndexMinuteGO.via_dt.second": "IndexMinuteGO.via_dt.second", "IndexMinuteGO.via_dt.weekday()": "IndexMinuteGO.via_dt.weekday()", "IndexMinuteGO.via_dt.quarter()": "IndexMinuteGO.via_dt.quarter()", "IndexMinuteGO.via_dt.is_month_end()": "IndexMinuteGO.via_dt.is_month_end()", "IndexMinuteGO.via_dt.is_month_start()": "IndexMinuteGO.via_dt.is_month_start()", "IndexMinuteGO.via_dt.is_year_end()": "IndexMinuteGO.via_dt.is_year_end()", "IndexMinuteGO.via_dt.is_year_start()": "IndexMinuteGO.via_dt.is_year_start()", "IndexMinuteGO.via_dt.is_quarter_end()": "IndexMinuteGO.via_dt.is_quarter_end()", "IndexMinuteGO.via_dt.is_quarter_start()": "IndexMinuteGO.via_dt.is_quarter_start()", "IndexMinuteGO.via_dt.timetuple()": "IndexMinuteGO.via_dt.timetuple()", "IndexMinuteGO.via_dt.isoformat(sep, timespec)": "IndexMinuteGO.via_dt.isoformat()", "IndexMinuteGO.via_dt.fromisoformat()": "IndexMinuteGO.via_dt.fromisoformat()", "IndexMinuteGO.via_dt.strftime(format)": "IndexMinuteGO.via_dt.strftime()", "IndexMinuteGO.via_dt.strptime(format)": "IndexMinuteGO.via_dt.strptime()", "IndexMinuteGO.via_dt.strpdate(format)": "IndexMinuteGO.via_dt.strpdate()", "IndexMinuteGO.via_str.__getitem__(key)": "IndexMinuteGO.via_str.__getitem__()", "IndexMinuteGO.via_str.capitalize()": "IndexMinuteGO.via_str.capitalize()", "IndexMinuteGO.via_str.center(width, fillchar)": "IndexMinuteGO.via_str.center()", "IndexMinuteGO.via_str.contains(item)": "IndexMinuteGO.via_str.contains()", "IndexMinuteGO.via_str.count(sub, start, end)": "IndexMinuteGO.via_str.count()", "IndexMinuteGO.via_str.decode(encoding, errors)": "IndexMinuteGO.via_str.decode()", "IndexMinuteGO.via_str.encode(encoding, errors)": "IndexMinuteGO.via_str.encode()", "IndexMinuteGO.via_str.endswith(suffix, start, end)": "IndexMinuteGO.via_str.endswith()", "IndexMinuteGO.via_str.find(sub, start, end)": "IndexMinuteGO.via_str.find()", "IndexMinuteGO.via_str.format(format)": "IndexMinuteGO.via_str.format()", "IndexMinuteGO.via_str.index(sub, start, end)": "IndexMinuteGO.via_str.index()", "IndexMinuteGO.via_str.isalnum()": "IndexMinuteGO.via_str.isalnum()", "IndexMinuteGO.via_str.isalpha()": "IndexMinuteGO.via_str.isalpha()", "IndexMinuteGO.via_str.isdecimal()": "IndexMinuteGO.via_str.isdecimal()", "IndexMinuteGO.via_str.isdigit()": "IndexMinuteGO.via_str.isdigit()", "IndexMinuteGO.via_str.islower()": "IndexMinuteGO.via_str.islower()", "IndexMinuteGO.via_str.isnumeric()": "IndexMinuteGO.via_str.isnumeric()", "IndexMinuteGO.via_str.isspace()": "IndexMinuteGO.via_str.isspace()", "IndexMinuteGO.via_str.istitle()": "IndexMinuteGO.via_str.istitle()", "IndexMinuteGO.via_str.isupper()": "IndexMinuteGO.via_str.isupper()", "IndexMinuteGO.via_str.ljust(width, fillchar)": "IndexMinuteGO.via_str.ljust()", "IndexMinuteGO.via_str.len()": "IndexMinuteGO.via_str.len()", "IndexMinuteGO.via_str.lower()": "IndexMinuteGO.via_str.lower()", "IndexMinuteGO.via_str.lstrip(chars)": "IndexMinuteGO.via_str.lstrip()", "IndexMinuteGO.via_str.partition(sep)": "IndexMinuteGO.via_str.partition()", "IndexMinuteGO.via_str.replace(old, new, count)": "IndexMinuteGO.via_str.replace()", "IndexMinuteGO.via_str.rfind(sub, start, end)": "IndexMinuteGO.via_str.rfind()", "IndexMinuteGO.via_str.rindex(sub, start, end)": "IndexMinuteGO.via_str.rindex()", "IndexMinuteGO.via_str.rjust(width, fillchar)": "IndexMinuteGO.via_str.rjust()", "IndexMinuteGO.via_str.rpartition(sep)": "IndexMinuteGO.via_str.rpartition()", "IndexMinuteGO.via_str.rsplit(sep, maxsplit)": "IndexMinuteGO.via_str.rsplit()", "IndexMinuteGO.via_str.rstrip(chars)": "IndexMinuteGO.via_str.rstrip()", "IndexMinuteGO.via_str.split(sep, maxsplit)": "IndexMinuteGO.via_str.split()", "IndexMinuteGO.via_str.startswith(prefix, start, end)": "IndexMinuteGO.via_str.startswith()", "IndexMinuteGO.via_str.strip(chars)": "IndexMinuteGO.via_str.strip()", "IndexMinuteGO.via_str.swapcase()": "IndexMinuteGO.via_str.swapcase()", "IndexMinuteGO.via_str.title()": "IndexMinuteGO.via_str.title()", "IndexMinuteGO.via_str.upper()": "IndexMinuteGO.via_str.upper()", "IndexMinuteGO.via_str.zfill(width)": "IndexMinuteGO.via_str.zfill()", "IndexMinuteGO.via_re(pattern, flags).search(pos, endpos)": "IndexMinuteGO.via_re().search()", "IndexMinuteGO.via_re(pattern, flags).match(pos, endpos)": "IndexMinuteGO.via_re().match()", "IndexMinuteGO.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexMinuteGO.via_re().fullmatch()", "IndexMinuteGO.via_re(pattern, flags).split(maxsplit)": "IndexMinuteGO.via_re().split()", "IndexMinuteGO.via_re(pattern, flags).findall(pos, endpos)": "IndexMinuteGO.via_re().findall()", "IndexMinuteGO.via_re(pattern, flags).sub(repl, count)": "IndexMinuteGO.via_re().sub()", "IndexMinuteGO.via_re(pattern, flags).subn(repl, count)": "IndexMinuteGO.via_re().subn()", "IndexMinuteGO.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexMinuteGO.via_hashlib().to_bytes()", "IndexMinuteGO.via_hashlib(include_name, include_class, encoding).md5()": "IndexMinuteGO.via_hashlib().md5()", "IndexMinuteGO.via_hashlib(include_name, include_class, encoding).sha256()": "IndexMinuteGO.via_hashlib().sha256()", "IndexMinuteGO.via_hashlib(include_name, include_class, encoding).sha512()": "IndexMinuteGO.via_hashlib().sha512()", "IndexMinuteGO.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexMinuteGO.via_hashlib().sha3_256()", "IndexMinuteGO.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexMinuteGO.via_hashlib().sha3_512()", "IndexMinuteGO.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexMinuteGO.via_hashlib().shake_128()", "IndexMinuteGO.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexMinuteGO.via_hashlib().shake_256()", "IndexMinuteGO.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexMinuteGO.via_hashlib().blake2b()", "IndexMinuteGO.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexMinuteGO.via_hashlib().blake2s()", "IndexMinuteGO.via_type_clinic.to_hint()": "IndexMinuteGO.via_type_clinic.to_hint()", "IndexMinuteGO.via_type_clinic.check(hint, *, fail_fast)": "IndexMinuteGO.via_type_clinic.check()", "IndexMinuteGO.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexMinuteGO.via_type_clinic.warn()", "IndexMinuteGO.via_type_clinic.__call__(hint, *, fail_fast)": "IndexMinuteGO.via_type_clinic.__call__()", "IndexMinuteGO.via_type_clinic.__repr__()": "IndexMinuteGO.via_type_clinic.__repr__()", "IndexHour.__init__(labels, *, loc_is_iloc, name)": "IndexHour.__init__()", "IndexHour.from_labels(labels, *, name)": "IndexHour.from_labels()", "IndexHour.from_pandas(value)": "IndexHour.from_pandas()", "IndexHour.to_html(config, style_config)": "IndexHour.to_html()", "IndexHour.to_html_datatables(fp, *, show, config)": "IndexHour.to_html_datatables()", "IndexHour.to_pandas()": "IndexHour.to_pandas()", "IndexHour.to_series()": "IndexHour.to_series()", "IndexHour.to_visidata()": "IndexHour.to_visidata()", "IndexHour.STATIC": "IndexHour.STATIC", "IndexHour.depth": "IndexHour.depth", "IndexHour.dtype": "IndexHour.dtype", "IndexHour.index_types": "IndexHour.index_types", "IndexHour.memory": "IndexHour.memory", "IndexHour.mloc": "IndexHour.mloc", "IndexHour.name": "IndexHour.name", "IndexHour.names": "IndexHour.names", "IndexHour.nbytes": "IndexHour.nbytes", "IndexHour.ndim": "IndexHour.ndim", "IndexHour.positions": "IndexHour.positions", "IndexHour.shape": "IndexHour.shape", "IndexHour.size": "IndexHour.size", "IndexHour.__array__(dtype)": "IndexHour.__array__()", "IndexHour.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexHour.__array_ufunc__()", "IndexHour.__bool__()": "IndexHour.__bool__()", "IndexHour.__copy__()": "IndexHour.__copy__()", "IndexHour.__deepcopy__(memo)": "IndexHour.__deepcopy__()", "IndexHour.__len__()": "IndexHour.__len__()", "IndexHour.all(axis, skipna, out)": "IndexHour.all()", "IndexHour.any(axis, skipna, out)": "IndexHour.any()", "IndexHour.astype(dtype)": "IndexHour.astype()", "IndexHour.copy()": "IndexHour.copy()", "IndexHour.cumprod(axis, skipna)": "IndexHour.cumprod()", "IndexHour.cumsum(axis, skipna)": "IndexHour.cumsum()", "IndexHour.difference(*others)": "IndexHour.difference()", "IndexHour.dropfalsy()": "IndexHour.dropfalsy()", "IndexHour.dropna()": "IndexHour.dropna()", "IndexHour.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexHour.equals()", "IndexHour.fillfalsy(value)": "IndexHour.fillfalsy()", "IndexHour.fillna(value)": "IndexHour.fillna()", "IndexHour.head(count)": "IndexHour.head()", "IndexHour.iloc_searchsorted(values, *, side_left)": "IndexHour.iloc_searchsorted()", "IndexHour.intersection(*others)": "IndexHour.intersection()", "IndexHour.isfalsy()": "IndexHour.isfalsy()", "IndexHour.isin(other)": "IndexHour.isin()", "IndexHour.isna()": "IndexHour.isna()", "IndexHour.label_widths_at_depth(depth_level)": "IndexHour.label_widths_at_depth()", "IndexHour.level_add(level, *, index_constructor)": "IndexHour.level_add()", "IndexHour.loc_searchsorted(values, *, side_left, fill_value)": "IndexHour.loc_searchsorted()", "IndexHour.loc_to_iloc(key)": "IndexHour.loc_to_iloc()", "IndexHour.max(axis, skipna, out)": "IndexHour.max()", "IndexHour.mean(axis, skipna, out)": "IndexHour.mean()", "IndexHour.median(axis, skipna, out)": "IndexHour.median()", "IndexHour.min(axis, skipna, out)": "IndexHour.min()", "IndexHour.notfalsy()": "IndexHour.notfalsy()", "IndexHour.notna()": "IndexHour.notna()", "IndexHour.prod(axis, skipna, allna, out)": "IndexHour.prod()", "IndexHour.relabel(mapper)": "IndexHour.relabel()", "IndexHour.rename(name)": "IndexHour.rename()", "IndexHour.roll(shift)": "IndexHour.roll()", "IndexHour.sample(count, *, seed)": "IndexHour.sample()", "IndexHour.sort(ascending, kind, key)": "IndexHour.sort()", "IndexHour.std(axis, skipna, ddof, out)": "IndexHour.std()", "IndexHour.sum(axis, skipna, allna, out)": "IndexHour.sum()", "IndexHour.tail(count)": "IndexHour.tail()", "IndexHour.union(*others)": "IndexHour.union()", "IndexHour.unique(depth_level, order_by_occurrence)": "IndexHour.unique()", "IndexHour.values_at_depth(depth_level)": "IndexHour.values_at_depth()", "IndexHour.var(axis, skipna, ddof, out)": "IndexHour.var()", "IndexHour.__contains__(value)": "IndexHour.__contains__()", "IndexHour.__iter__()": "IndexHour.__iter__()", "IndexHour.__reversed__()": "IndexHour.__reversed__()", "IndexHour.values": "IndexHour.values", "IndexHour.interface": "IndexHour.interface", "IndexHour.__repr__()": "IndexHour.__repr__()", "IndexHour.__str__()": "IndexHour.__str__()", "IndexHour.display(config, *, style_config)": "IndexHour.display()", "IndexHour.display_tall(config)": "IndexHour.display_tall()", "IndexHour.display_wide(config)": "IndexHour.display_wide()", "IndexHour.drop.iloc[key]": "IndexHour.drop.iloc[]", "IndexHour.drop.loc[key]": "IndexHour.drop.loc[]", "IndexHour.[key]": "IndexHour.[]", "IndexHour.iloc[key]": "IndexHour.iloc[]", "IndexHour.loc[key]": "IndexHour.loc[]", "IndexHour.iter_label(depth_level)": "IndexHour.iter_label()", "IndexHour.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexHour.iter_label().apply()", "IndexHour.iter_label(depth_level).apply_iter(func)": "IndexHour.iter_label().apply_iter()", "IndexHour.iter_label(depth_level).apply_iter_items(func)": "IndexHour.iter_label().apply_iter_items()", "IndexHour.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexHour.iter_label().apply_pool()", "IndexHour.__add__(other)": "IndexHour.__add__()", "IndexHour.__and__(other)": "IndexHour.__and__()", "IndexHour.__eq__(other)": "IndexHour.__eq__()", "IndexHour.__floordiv__(other)": "IndexHour.__floordiv__()", "IndexHour.__ge__(other)": "IndexHour.__ge__()", "IndexHour.__gt__(other)": "IndexHour.__gt__()", "IndexHour.__le__(other)": "IndexHour.__le__()", "IndexHour.__lt__(other)": "IndexHour.__lt__()", "IndexHour.__matmul__(other)": "IndexHour.__matmul__()", "IndexHour.__mod__(other)": "IndexHour.__mod__()", "IndexHour.__mul__(other)": "IndexHour.__mul__()", "IndexHour.__ne__(other)": "IndexHour.__ne__()", "IndexHour.__or__(other)": "IndexHour.__or__()", "IndexHour.__pow__(other)": "IndexHour.__pow__()", "IndexHour.__radd__(other)": "IndexHour.__radd__()", "IndexHour.__rfloordiv__(other)": "IndexHour.__rfloordiv__()", "IndexHour.__rmatmul__(other)": "IndexHour.__rmatmul__()", "IndexHour.__rmul__(other)": "IndexHour.__rmul__()", "IndexHour.__rshift__(other)": "IndexHour.__rshift__()", "IndexHour.__rsub__(other)": "IndexHour.__rsub__()", "IndexHour.__rtruediv__(other)": "IndexHour.__rtruediv__()", "IndexHour.__sub__(other)": "IndexHour.__sub__()", "IndexHour.__truediv__(other)": "IndexHour.__truediv__()", "IndexHour.__xor__(other)": "IndexHour.__xor__()", "IndexHour.__abs__()": "IndexHour.__abs__()", "IndexHour.__invert__()": "IndexHour.__invert__()", "IndexHour.__neg__()": "IndexHour.__neg__()", "IndexHour.__pos__()": "IndexHour.__pos__()", "IndexHour.via_values.apply(func, *args, **kwargs)": "IndexHour.via_values.apply()", "IndexHour.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexHour.via_values.__array_ufunc__()", "IndexHour.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexHour.via_values.__call__()", "IndexHour.via_dt.__call__(*, fill_value)": "IndexHour.via_dt.__call__()", "IndexHour.via_dt.year": "IndexHour.via_dt.year", "IndexHour.via_dt.year_month": "IndexHour.via_dt.year_month", "IndexHour.via_dt.year_quarter": "IndexHour.via_dt.year_quarter", "IndexHour.via_dt.month": "IndexHour.via_dt.month", "IndexHour.via_dt.day": "IndexHour.via_dt.day", "IndexHour.via_dt.hour": "IndexHour.via_dt.hour", "IndexHour.via_dt.minute": "IndexHour.via_dt.minute", "IndexHour.via_dt.second": "IndexHour.via_dt.second", "IndexHour.via_dt.weekday()": "IndexHour.via_dt.weekday()", "IndexHour.via_dt.quarter()": "IndexHour.via_dt.quarter()", "IndexHour.via_dt.is_month_end()": "IndexHour.via_dt.is_month_end()", "IndexHour.via_dt.is_month_start()": "IndexHour.via_dt.is_month_start()", "IndexHour.via_dt.is_year_end()": "IndexHour.via_dt.is_year_end()", "IndexHour.via_dt.is_year_start()": "IndexHour.via_dt.is_year_start()", "IndexHour.via_dt.is_quarter_end()": "IndexHour.via_dt.is_quarter_end()", "IndexHour.via_dt.is_quarter_start()": "IndexHour.via_dt.is_quarter_start()", "IndexHour.via_dt.timetuple()": "IndexHour.via_dt.timetuple()", "IndexHour.via_dt.isoformat(sep, timespec)": "IndexHour.via_dt.isoformat()", "IndexHour.via_dt.fromisoformat()": "IndexHour.via_dt.fromisoformat()", "IndexHour.via_dt.strftime(format)": "IndexHour.via_dt.strftime()", "IndexHour.via_dt.strptime(format)": "IndexHour.via_dt.strptime()", "IndexHour.via_dt.strpdate(format)": "IndexHour.via_dt.strpdate()", "IndexHour.via_str.__getitem__(key)": "IndexHour.via_str.__getitem__()", "IndexHour.via_str.capitalize()": "IndexHour.via_str.capitalize()", "IndexHour.via_str.center(width, fillchar)": "IndexHour.via_str.center()", "IndexHour.via_str.contains(item)": "IndexHour.via_str.contains()", "IndexHour.via_str.count(sub, start, end)": "IndexHour.via_str.count()", "IndexHour.via_str.decode(encoding, errors)": "IndexHour.via_str.decode()", "IndexHour.via_str.encode(encoding, errors)": "IndexHour.via_str.encode()", "IndexHour.via_str.endswith(suffix, start, end)": "IndexHour.via_str.endswith()", "IndexHour.via_str.find(sub, start, end)": "IndexHour.via_str.find()", "IndexHour.via_str.format(format)": "IndexHour.via_str.format()", "IndexHour.via_str.index(sub, start, end)": "IndexHour.via_str.index()", "IndexHour.via_str.isalnum()": "IndexHour.via_str.isalnum()", "IndexHour.via_str.isalpha()": "IndexHour.via_str.isalpha()", "IndexHour.via_str.isdecimal()": "IndexHour.via_str.isdecimal()", "IndexHour.via_str.isdigit()": "IndexHour.via_str.isdigit()", "IndexHour.via_str.islower()": "IndexHour.via_str.islower()", "IndexHour.via_str.isnumeric()": "IndexHour.via_str.isnumeric()", "IndexHour.via_str.isspace()": "IndexHour.via_str.isspace()", "IndexHour.via_str.istitle()": "IndexHour.via_str.istitle()", "IndexHour.via_str.isupper()": "IndexHour.via_str.isupper()", "IndexHour.via_str.ljust(width, fillchar)": "IndexHour.via_str.ljust()", "IndexHour.via_str.len()": "IndexHour.via_str.len()", "IndexHour.via_str.lower()": "IndexHour.via_str.lower()", "IndexHour.via_str.lstrip(chars)": "IndexHour.via_str.lstrip()", "IndexHour.via_str.partition(sep)": "IndexHour.via_str.partition()", "IndexHour.via_str.replace(old, new, count)": "IndexHour.via_str.replace()", "IndexHour.via_str.rfind(sub, start, end)": "IndexHour.via_str.rfind()", "IndexHour.via_str.rindex(sub, start, end)": "IndexHour.via_str.rindex()", "IndexHour.via_str.rjust(width, fillchar)": "IndexHour.via_str.rjust()", "IndexHour.via_str.rpartition(sep)": "IndexHour.via_str.rpartition()", "IndexHour.via_str.rsplit(sep, maxsplit)": "IndexHour.via_str.rsplit()", "IndexHour.via_str.rstrip(chars)": "IndexHour.via_str.rstrip()", "IndexHour.via_str.split(sep, maxsplit)": "IndexHour.via_str.split()", "IndexHour.via_str.startswith(prefix, start, end)": "IndexHour.via_str.startswith()", "IndexHour.via_str.strip(chars)": "IndexHour.via_str.strip()", "IndexHour.via_str.swapcase()": "IndexHour.via_str.swapcase()", "IndexHour.via_str.title()": "IndexHour.via_str.title()", "IndexHour.via_str.upper()": "IndexHour.via_str.upper()", "IndexHour.via_str.zfill(width)": "IndexHour.via_str.zfill()", "IndexHour.via_re(pattern, flags).search(pos, endpos)": "IndexHour.via_re().search()", "IndexHour.via_re(pattern, flags).match(pos, endpos)": "IndexHour.via_re().match()", "IndexHour.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexHour.via_re().fullmatch()", "IndexHour.via_re(pattern, flags).split(maxsplit)": "IndexHour.via_re().split()", "IndexHour.via_re(pattern, flags).findall(pos, endpos)": "IndexHour.via_re().findall()", "IndexHour.via_re(pattern, flags).sub(repl, count)": "IndexHour.via_re().sub()", "IndexHour.via_re(pattern, flags).subn(repl, count)": "IndexHour.via_re().subn()", "IndexHour.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexHour.via_hashlib().to_bytes()", "IndexHour.via_hashlib(include_name, include_class, encoding).md5()": "IndexHour.via_hashlib().md5()", "IndexHour.via_hashlib(include_name, include_class, encoding).sha256()": "IndexHour.via_hashlib().sha256()", "IndexHour.via_hashlib(include_name, include_class, encoding).sha512()": "IndexHour.via_hashlib().sha512()", "IndexHour.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexHour.via_hashlib().sha3_256()", "IndexHour.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexHour.via_hashlib().sha3_512()", "IndexHour.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexHour.via_hashlib().shake_128()", "IndexHour.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexHour.via_hashlib().shake_256()", "IndexHour.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexHour.via_hashlib().blake2b()", "IndexHour.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexHour.via_hashlib().blake2s()", "IndexHour.via_type_clinic.to_hint()": "IndexHour.via_type_clinic.to_hint()", "IndexHour.via_type_clinic.check(hint, *, fail_fast)": "IndexHour.via_type_clinic.check()", "IndexHour.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexHour.via_type_clinic.warn()", "IndexHour.via_type_clinic.__call__(hint, *, fail_fast)": "IndexHour.via_type_clinic.__call__()", "IndexHour.via_type_clinic.__repr__()": "IndexHour.via_type_clinic.__repr__()", "IndexHourGO.__init__(labels, *, loc_is_iloc, name)": "IndexHourGO.__init__()", "IndexHourGO.from_labels(labels, *, name)": "IndexHourGO.from_labels()", "IndexHourGO.from_pandas(value)": "IndexHourGO.from_pandas()", "IndexHourGO.to_html(config, style_config)": "IndexHourGO.to_html()", "IndexHourGO.to_html_datatables(fp, *, show, config)": "IndexHourGO.to_html_datatables()", "IndexHourGO.to_pandas()": "IndexHourGO.to_pandas()", "IndexHourGO.to_series()": "IndexHourGO.to_series()", "IndexHourGO.to_visidata()": "IndexHourGO.to_visidata()", "IndexHourGO.STATIC": "IndexHourGO.STATIC", "IndexHourGO.depth": "IndexHourGO.depth", "IndexHourGO.dtype": "IndexHourGO.dtype", "IndexHourGO.index_types": "IndexHourGO.index_types", "IndexHourGO.memory": "IndexHourGO.memory", "IndexHourGO.mloc": "IndexHourGO.mloc", "IndexHourGO.name": "IndexHourGO.name", "IndexHourGO.names": "IndexHourGO.names", "IndexHourGO.nbytes": "IndexHourGO.nbytes", "IndexHourGO.ndim": "IndexHourGO.ndim", "IndexHourGO.positions": "IndexHourGO.positions", "IndexHourGO.shape": "IndexHourGO.shape", "IndexHourGO.size": "IndexHourGO.size", "IndexHourGO.__array__(dtype)": "IndexHourGO.__array__()", "IndexHourGO.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexHourGO.__array_ufunc__()", "IndexHourGO.__bool__()": "IndexHourGO.__bool__()", "IndexHourGO.__copy__()": "IndexHourGO.__copy__()", "IndexHourGO.__deepcopy__(memo)": "IndexHourGO.__deepcopy__()", "IndexHourGO.__len__()": "IndexHourGO.__len__()", "IndexHourGO.all(axis, skipna, out)": "IndexHourGO.all()", "IndexHourGO.any(axis, skipna, out)": "IndexHourGO.any()", "IndexHourGO.append(value)": "IndexHourGO.append()", "IndexHourGO.astype(dtype)": "IndexHourGO.astype()", "IndexHourGO.copy()": "IndexHourGO.copy()", "IndexHourGO.cumprod(axis, skipna)": "IndexHourGO.cumprod()", "IndexHourGO.cumsum(axis, skipna)": "IndexHourGO.cumsum()", "IndexHourGO.difference(*others)": "IndexHourGO.difference()", "IndexHourGO.dropfalsy()": "IndexHourGO.dropfalsy()", "IndexHourGO.dropna()": "IndexHourGO.dropna()", "IndexHourGO.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexHourGO.equals()", "IndexHourGO.extend(values)": "IndexHourGO.extend()", "IndexHourGO.fillfalsy(value)": "IndexHourGO.fillfalsy()", "IndexHourGO.fillna(value)": "IndexHourGO.fillna()", "IndexHourGO.head(count)": "IndexHourGO.head()", "IndexHourGO.iloc_searchsorted(values, *, side_left)": "IndexHourGO.iloc_searchsorted()", "IndexHourGO.intersection(*others)": "IndexHourGO.intersection()", "IndexHourGO.isfalsy()": "IndexHourGO.isfalsy()", "IndexHourGO.isin(other)": "IndexHourGO.isin()", "IndexHourGO.isna()": "IndexHourGO.isna()", "IndexHourGO.label_widths_at_depth(depth_level)": "IndexHourGO.label_widths_at_depth()", "IndexHourGO.level_add(level, *, index_constructor)": "IndexHourGO.level_add()", "IndexHourGO.loc_searchsorted(values, *, side_left, fill_value)": "IndexHourGO.loc_searchsorted()", "IndexHourGO.loc_to_iloc(key)": "IndexHourGO.loc_to_iloc()", "IndexHourGO.max(axis, skipna, out)": "IndexHourGO.max()", "IndexHourGO.mean(axis, skipna, out)": "IndexHourGO.mean()", "IndexHourGO.median(axis, skipna, out)": "IndexHourGO.median()", "IndexHourGO.min(axis, skipna, out)": "IndexHourGO.min()", "IndexHourGO.notfalsy()": "IndexHourGO.notfalsy()", "IndexHourGO.notna()": "IndexHourGO.notna()", "IndexHourGO.prod(axis, skipna, allna, out)": "IndexHourGO.prod()", "IndexHourGO.relabel(mapper)": "IndexHourGO.relabel()", "IndexHourGO.rename(name)": "IndexHourGO.rename()", "IndexHourGO.roll(shift)": "IndexHourGO.roll()", "IndexHourGO.sample(count, *, seed)": "IndexHourGO.sample()", "IndexHourGO.sort(ascending, kind, key)": "IndexHourGO.sort()", "IndexHourGO.std(axis, skipna, ddof, out)": "IndexHourGO.std()", "IndexHourGO.sum(axis, skipna, allna, out)": "IndexHourGO.sum()", "IndexHourGO.tail(count)": "IndexHourGO.tail()", "IndexHourGO.union(*others)": "IndexHourGO.union()", "IndexHourGO.unique(depth_level, order_by_occurrence)": "IndexHourGO.unique()", "IndexHourGO.values_at_depth(depth_level)": "IndexHourGO.values_at_depth()", "IndexHourGO.var(axis, skipna, ddof, out)": "IndexHourGO.var()", "IndexHourGO.__contains__(value)": "IndexHourGO.__contains__()", "IndexHourGO.__iter__()": "IndexHourGO.__iter__()", "IndexHourGO.__reversed__()": "IndexHourGO.__reversed__()", "IndexHourGO.values": "IndexHourGO.values", "IndexHourGO.interface": "IndexHourGO.interface", "IndexHourGO.__repr__()": "IndexHourGO.__repr__()", "IndexHourGO.__str__()": "IndexHourGO.__str__()", "IndexHourGO.display(config, *, style_config)": "IndexHourGO.display()", "IndexHourGO.display_tall(config)": "IndexHourGO.display_tall()", "IndexHourGO.display_wide(config)": "IndexHourGO.display_wide()", "IndexHourGO.drop.iloc[key]": "IndexHourGO.drop.iloc[]", "IndexHourGO.drop.loc[key]": "IndexHourGO.drop.loc[]", "IndexHourGO.[key]": "IndexHourGO.[]", "IndexHourGO.iloc[key]": "IndexHourGO.iloc[]", "IndexHourGO.loc[key]": "IndexHourGO.loc[]", "IndexHourGO.iter_label(depth_level)": "IndexHourGO.iter_label()", "IndexHourGO.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexHourGO.iter_label().apply()", "IndexHourGO.iter_label(depth_level).apply_iter(func)": "IndexHourGO.iter_label().apply_iter()", "IndexHourGO.iter_label(depth_level).apply_iter_items(func)": "IndexHourGO.iter_label().apply_iter_items()", "IndexHourGO.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexHourGO.iter_label().apply_pool()", "IndexHourGO.__add__(other)": "IndexHourGO.__add__()", "IndexHourGO.__and__(other)": "IndexHourGO.__and__()", "IndexHourGO.__eq__(other)": "IndexHourGO.__eq__()", "IndexHourGO.__floordiv__(other)": "IndexHourGO.__floordiv__()", "IndexHourGO.__ge__(other)": "IndexHourGO.__ge__()", "IndexHourGO.__gt__(other)": "IndexHourGO.__gt__()", "IndexHourGO.__le__(other)": "IndexHourGO.__le__()", "IndexHourGO.__lt__(other)": "IndexHourGO.__lt__()", "IndexHourGO.__matmul__(other)": "IndexHourGO.__matmul__()", "IndexHourGO.__mod__(other)": "IndexHourGO.__mod__()", "IndexHourGO.__mul__(other)": "IndexHourGO.__mul__()", "IndexHourGO.__ne__(other)": "IndexHourGO.__ne__()", "IndexHourGO.__or__(other)": "IndexHourGO.__or__()", "IndexHourGO.__pow__(other)": "IndexHourGO.__pow__()", "IndexHourGO.__radd__(other)": "IndexHourGO.__radd__()", "IndexHourGO.__rfloordiv__(other)": "IndexHourGO.__rfloordiv__()", "IndexHourGO.__rmatmul__(other)": "IndexHourGO.__rmatmul__()", "IndexHourGO.__rmul__(other)": "IndexHourGO.__rmul__()", "IndexHourGO.__rshift__(other)": "IndexHourGO.__rshift__()", "IndexHourGO.__rsub__(other)": "IndexHourGO.__rsub__()", "IndexHourGO.__rtruediv__(other)": "IndexHourGO.__rtruediv__()", "IndexHourGO.__sub__(other)": "IndexHourGO.__sub__()", "IndexHourGO.__truediv__(other)": "IndexHourGO.__truediv__()", "IndexHourGO.__xor__(other)": "IndexHourGO.__xor__()", "IndexHourGO.__abs__()": "IndexHourGO.__abs__()", "IndexHourGO.__invert__()": "IndexHourGO.__invert__()", "IndexHourGO.__neg__()": "IndexHourGO.__neg__()", "IndexHourGO.__pos__()": "IndexHourGO.__pos__()", "IndexHourGO.via_values.apply(func, *args, **kwargs)": "IndexHourGO.via_values.apply()", "IndexHourGO.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexHourGO.via_values.__array_ufunc__()", "IndexHourGO.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexHourGO.via_values.__call__()", "IndexHourGO.via_dt.__call__(*, fill_value)": "IndexHourGO.via_dt.__call__()", "IndexHourGO.via_dt.year": "IndexHourGO.via_dt.year", "IndexHourGO.via_dt.year_month": "IndexHourGO.via_dt.year_month", "IndexHourGO.via_dt.year_quarter": "IndexHourGO.via_dt.year_quarter", "IndexHourGO.via_dt.month": "IndexHourGO.via_dt.month", "IndexHourGO.via_dt.day": "IndexHourGO.via_dt.day", "IndexHourGO.via_dt.hour": "IndexHourGO.via_dt.hour", "IndexHourGO.via_dt.minute": "IndexHourGO.via_dt.minute", "IndexHourGO.via_dt.second": "IndexHourGO.via_dt.second", "IndexHourGO.via_dt.weekday()": "IndexHourGO.via_dt.weekday()", "IndexHourGO.via_dt.quarter()": "IndexHourGO.via_dt.quarter()", "IndexHourGO.via_dt.is_month_end()": "IndexHourGO.via_dt.is_month_end()", "IndexHourGO.via_dt.is_month_start()": "IndexHourGO.via_dt.is_month_start()", "IndexHourGO.via_dt.is_year_end()": "IndexHourGO.via_dt.is_year_end()", "IndexHourGO.via_dt.is_year_start()": "IndexHourGO.via_dt.is_year_start()", "IndexHourGO.via_dt.is_quarter_end()": "IndexHourGO.via_dt.is_quarter_end()", "IndexHourGO.via_dt.is_quarter_start()": "IndexHourGO.via_dt.is_quarter_start()", "IndexHourGO.via_dt.timetuple()": "IndexHourGO.via_dt.timetuple()", "IndexHourGO.via_dt.isoformat(sep, timespec)": "IndexHourGO.via_dt.isoformat()", "IndexHourGO.via_dt.fromisoformat()": "IndexHourGO.via_dt.fromisoformat()", "IndexHourGO.via_dt.strftime(format)": "IndexHourGO.via_dt.strftime()", "IndexHourGO.via_dt.strptime(format)": "IndexHourGO.via_dt.strptime()", "IndexHourGO.via_dt.strpdate(format)": "IndexHourGO.via_dt.strpdate()", "IndexHourGO.via_str.__getitem__(key)": "IndexHourGO.via_str.__getitem__()", "IndexHourGO.via_str.capitalize()": "IndexHourGO.via_str.capitalize()", "IndexHourGO.via_str.center(width, fillchar)": "IndexHourGO.via_str.center()", "IndexHourGO.via_str.contains(item)": "IndexHourGO.via_str.contains()", "IndexHourGO.via_str.count(sub, start, end)": "IndexHourGO.via_str.count()", "IndexHourGO.via_str.decode(encoding, errors)": "IndexHourGO.via_str.decode()", "IndexHourGO.via_str.encode(encoding, errors)": "IndexHourGO.via_str.encode()", "IndexHourGO.via_str.endswith(suffix, start, end)": "IndexHourGO.via_str.endswith()", "IndexHourGO.via_str.find(sub, start, end)": "IndexHourGO.via_str.find()", "IndexHourGO.via_str.format(format)": "IndexHourGO.via_str.format()", "IndexHourGO.via_str.index(sub, start, end)": "IndexHourGO.via_str.index()", "IndexHourGO.via_str.isalnum()": "IndexHourGO.via_str.isalnum()", "IndexHourGO.via_str.isalpha()": "IndexHourGO.via_str.isalpha()", "IndexHourGO.via_str.isdecimal()": "IndexHourGO.via_str.isdecimal()", "IndexHourGO.via_str.isdigit()": "IndexHourGO.via_str.isdigit()", "IndexHourGO.via_str.islower()": "IndexHourGO.via_str.islower()", "IndexHourGO.via_str.isnumeric()": "IndexHourGO.via_str.isnumeric()", "IndexHourGO.via_str.isspace()": "IndexHourGO.via_str.isspace()", "IndexHourGO.via_str.istitle()": "IndexHourGO.via_str.istitle()", "IndexHourGO.via_str.isupper()": "IndexHourGO.via_str.isupper()", "IndexHourGO.via_str.ljust(width, fillchar)": "IndexHourGO.via_str.ljust()", "IndexHourGO.via_str.len()": "IndexHourGO.via_str.len()", "IndexHourGO.via_str.lower()": "IndexHourGO.via_str.lower()", "IndexHourGO.via_str.lstrip(chars)": "IndexHourGO.via_str.lstrip()", "IndexHourGO.via_str.partition(sep)": "IndexHourGO.via_str.partition()", "IndexHourGO.via_str.replace(old, new, count)": "IndexHourGO.via_str.replace()", "IndexHourGO.via_str.rfind(sub, start, end)": "IndexHourGO.via_str.rfind()", "IndexHourGO.via_str.rindex(sub, start, end)": "IndexHourGO.via_str.rindex()", "IndexHourGO.via_str.rjust(width, fillchar)": "IndexHourGO.via_str.rjust()", "IndexHourGO.via_str.rpartition(sep)": "IndexHourGO.via_str.rpartition()", "IndexHourGO.via_str.rsplit(sep, maxsplit)": "IndexHourGO.via_str.rsplit()", "IndexHourGO.via_str.rstrip(chars)": "IndexHourGO.via_str.rstrip()", "IndexHourGO.via_str.split(sep, maxsplit)": "IndexHourGO.via_str.split()", "IndexHourGO.via_str.startswith(prefix, start, end)": "IndexHourGO.via_str.startswith()", "IndexHourGO.via_str.strip(chars)": "IndexHourGO.via_str.strip()", "IndexHourGO.via_str.swapcase()": "IndexHourGO.via_str.swapcase()", "IndexHourGO.via_str.title()": "IndexHourGO.via_str.title()", "IndexHourGO.via_str.upper()": "IndexHourGO.via_str.upper()", "IndexHourGO.via_str.zfill(width)": "IndexHourGO.via_str.zfill()", "IndexHourGO.via_re(pattern, flags).search(pos, endpos)": "IndexHourGO.via_re().search()", "IndexHourGO.via_re(pattern, flags).match(pos, endpos)": "IndexHourGO.via_re().match()", "IndexHourGO.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexHourGO.via_re().fullmatch()", "IndexHourGO.via_re(pattern, flags).split(maxsplit)": "IndexHourGO.via_re().split()", "IndexHourGO.via_re(pattern, flags).findall(pos, endpos)": "IndexHourGO.via_re().findall()", "IndexHourGO.via_re(pattern, flags).sub(repl, count)": "IndexHourGO.via_re().sub()", "IndexHourGO.via_re(pattern, flags).subn(repl, count)": "IndexHourGO.via_re().subn()", "IndexHourGO.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexHourGO.via_hashlib().to_bytes()", "IndexHourGO.via_hashlib(include_name, include_class, encoding).md5()": "IndexHourGO.via_hashlib().md5()", "IndexHourGO.via_hashlib(include_name, include_class, encoding).sha256()": "IndexHourGO.via_hashlib().sha256()", "IndexHourGO.via_hashlib(include_name, include_class, encoding).sha512()": "IndexHourGO.via_hashlib().sha512()", "IndexHourGO.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexHourGO.via_hashlib().sha3_256()", "IndexHourGO.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexHourGO.via_hashlib().sha3_512()", "IndexHourGO.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexHourGO.via_hashlib().shake_128()", "IndexHourGO.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexHourGO.via_hashlib().shake_256()", "IndexHourGO.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexHourGO.via_hashlib().blake2b()", "IndexHourGO.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexHourGO.via_hashlib().blake2s()", "IndexHourGO.via_type_clinic.to_hint()": "IndexHourGO.via_type_clinic.to_hint()", "IndexHourGO.via_type_clinic.check(hint, *, fail_fast)": "IndexHourGO.via_type_clinic.check()", "IndexHourGO.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexHourGO.via_type_clinic.warn()", "IndexHourGO.via_type_clinic.__call__(hint, *, fail_fast)": "IndexHourGO.via_type_clinic.__call__()", "IndexHourGO.via_type_clinic.__repr__()": "IndexHourGO.via_type_clinic.__repr__()", "IndexSecond.__init__(labels, *, loc_is_iloc, name)": "IndexSecond.__init__()", "IndexSecond.from_labels(labels, *, name)": "IndexSecond.from_labels()", "IndexSecond.from_pandas(value)": "IndexSecond.from_pandas()", "IndexSecond.to_html(config, style_config)": "IndexSecond.to_html()", "IndexSecond.to_html_datatables(fp, *, show, config)": "IndexSecond.to_html_datatables()", "IndexSecond.to_pandas()": "IndexSecond.to_pandas()", "IndexSecond.to_series()": "IndexSecond.to_series()", "IndexSecond.to_visidata()": "IndexSecond.to_visidata()", "IndexSecond.STATIC": "IndexSecond.STATIC", "IndexSecond.depth": "IndexSecond.depth", "IndexSecond.dtype": "IndexSecond.dtype", "IndexSecond.index_types": "IndexSecond.index_types", "IndexSecond.memory": "IndexSecond.memory", "IndexSecond.mloc": "IndexSecond.mloc", "IndexSecond.name": "IndexSecond.name", "IndexSecond.names": "IndexSecond.names", "IndexSecond.nbytes": "IndexSecond.nbytes", "IndexSecond.ndim": "IndexSecond.ndim", "IndexSecond.positions": "IndexSecond.positions", "IndexSecond.shape": "IndexSecond.shape", "IndexSecond.size": "IndexSecond.size", "IndexSecond.__array__(dtype)": "IndexSecond.__array__()", "IndexSecond.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexSecond.__array_ufunc__()", "IndexSecond.__bool__()": "IndexSecond.__bool__()", "IndexSecond.__copy__()": "IndexSecond.__copy__()", "IndexSecond.__deepcopy__(memo)": "IndexSecond.__deepcopy__()", "IndexSecond.__len__()": "IndexSecond.__len__()", "IndexSecond.all(axis, skipna, out)": "IndexSecond.all()", "IndexSecond.any(axis, skipna, out)": "IndexSecond.any()", "IndexSecond.astype(dtype)": "IndexSecond.astype()", "IndexSecond.copy()": "IndexSecond.copy()", "IndexSecond.cumprod(axis, skipna)": "IndexSecond.cumprod()", "IndexSecond.cumsum(axis, skipna)": "IndexSecond.cumsum()", "IndexSecond.difference(*others)": "IndexSecond.difference()", "IndexSecond.dropfalsy()": "IndexSecond.dropfalsy()", "IndexSecond.dropna()": "IndexSecond.dropna()", "IndexSecond.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexSecond.equals()", "IndexSecond.fillfalsy(value)": "IndexSecond.fillfalsy()", "IndexSecond.fillna(value)": "IndexSecond.fillna()", "IndexSecond.head(count)": "IndexSecond.head()", "IndexSecond.iloc_searchsorted(values, *, side_left)": "IndexSecond.iloc_searchsorted()", "IndexSecond.intersection(*others)": "IndexSecond.intersection()", "IndexSecond.isfalsy()": "IndexSecond.isfalsy()", "IndexSecond.isin(other)": "IndexSecond.isin()", "IndexSecond.isna()": "IndexSecond.isna()", "IndexSecond.label_widths_at_depth(depth_level)": "IndexSecond.label_widths_at_depth()", "IndexSecond.level_add(level, *, index_constructor)": "IndexSecond.level_add()", "IndexSecond.loc_searchsorted(values, *, side_left, fill_value)": "IndexSecond.loc_searchsorted()", "IndexSecond.loc_to_iloc(key)": "IndexSecond.loc_to_iloc()", "IndexSecond.max(axis, skipna, out)": "IndexSecond.max()", "IndexSecond.mean(axis, skipna, out)": "IndexSecond.mean()", "IndexSecond.median(axis, skipna, out)": "IndexSecond.median()", "IndexSecond.min(axis, skipna, out)": "IndexSecond.min()", "IndexSecond.notfalsy()": "IndexSecond.notfalsy()", "IndexSecond.notna()": "IndexSecond.notna()", "IndexSecond.prod(axis, skipna, allna, out)": "IndexSecond.prod()", "IndexSecond.relabel(mapper)": "IndexSecond.relabel()", "IndexSecond.rename(name)": "IndexSecond.rename()", "IndexSecond.roll(shift)": "IndexSecond.roll()", "IndexSecond.sample(count, *, seed)": "IndexSecond.sample()", "IndexSecond.sort(ascending, kind, key)": "IndexSecond.sort()", "IndexSecond.std(axis, skipna, ddof, out)": "IndexSecond.std()", "IndexSecond.sum(axis, skipna, allna, out)": "IndexSecond.sum()", "IndexSecond.tail(count)": "IndexSecond.tail()", "IndexSecond.union(*others)": "IndexSecond.union()", "IndexSecond.unique(depth_level, order_by_occurrence)": "IndexSecond.unique()", "IndexSecond.values_at_depth(depth_level)": "IndexSecond.values_at_depth()", "IndexSecond.var(axis, skipna, ddof, out)": "IndexSecond.var()", "IndexSecond.__contains__(value)": "IndexSecond.__contains__()", "IndexSecond.__iter__()": "IndexSecond.__iter__()", "IndexSecond.__reversed__()": "IndexSecond.__reversed__()", "IndexSecond.values": "IndexSecond.values", "IndexSecond.interface": "IndexSecond.interface", "IndexSecond.__repr__()": "IndexSecond.__repr__()", "IndexSecond.__str__()": "IndexSecond.__str__()", "IndexSecond.display(config, *, style_config)": "IndexSecond.display()", "IndexSecond.display_tall(config)": "IndexSecond.display_tall()", "IndexSecond.display_wide(config)": "IndexSecond.display_wide()", "IndexSecond.drop.iloc[key]": "IndexSecond.drop.iloc[]", "IndexSecond.drop.loc[key]": "IndexSecond.drop.loc[]", "IndexSecond.[key]": "IndexSecond.[]", "IndexSecond.iloc[key]": "IndexSecond.iloc[]", "IndexSecond.loc[key]": "IndexSecond.loc[]", "IndexSecond.iter_label(depth_level)": "IndexSecond.iter_label()", "IndexSecond.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexSecond.iter_label().apply()", "IndexSecond.iter_label(depth_level).apply_iter(func)": "IndexSecond.iter_label().apply_iter()", "IndexSecond.iter_label(depth_level).apply_iter_items(func)": "IndexSecond.iter_label().apply_iter_items()", "IndexSecond.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexSecond.iter_label().apply_pool()", "IndexSecond.__add__(other)": "IndexSecond.__add__()", "IndexSecond.__and__(other)": "IndexSecond.__and__()", "IndexSecond.__eq__(other)": "IndexSecond.__eq__()", "IndexSecond.__floordiv__(other)": "IndexSecond.__floordiv__()", "IndexSecond.__ge__(other)": "IndexSecond.__ge__()", "IndexSecond.__gt__(other)": "IndexSecond.__gt__()", "IndexSecond.__le__(other)": "IndexSecond.__le__()", "IndexSecond.__lt__(other)": "IndexSecond.__lt__()", "IndexSecond.__matmul__(other)": "IndexSecond.__matmul__()", "IndexSecond.__mod__(other)": "IndexSecond.__mod__()", "IndexSecond.__mul__(other)": "IndexSecond.__mul__()", "IndexSecond.__ne__(other)": "IndexSecond.__ne__()", "IndexSecond.__or__(other)": "IndexSecond.__or__()", "IndexSecond.__pow__(other)": "IndexSecond.__pow__()", "IndexSecond.__radd__(other)": "IndexSecond.__radd__()", "IndexSecond.__rfloordiv__(other)": "IndexSecond.__rfloordiv__()", "IndexSecond.__rmatmul__(other)": "IndexSecond.__rmatmul__()", "IndexSecond.__rmul__(other)": "IndexSecond.__rmul__()", "IndexSecond.__rshift__(other)": "IndexSecond.__rshift__()", "IndexSecond.__rsub__(other)": "IndexSecond.__rsub__()", "IndexSecond.__rtruediv__(other)": "IndexSecond.__rtruediv__()", "IndexSecond.__sub__(other)": "IndexSecond.__sub__()", "IndexSecond.__truediv__(other)": "IndexSecond.__truediv__()", "IndexSecond.__xor__(other)": "IndexSecond.__xor__()", "IndexSecond.__abs__()": "IndexSecond.__abs__()", "IndexSecond.__invert__()": "IndexSecond.__invert__()", "IndexSecond.__neg__()": "IndexSecond.__neg__()", "IndexSecond.__pos__()": "IndexSecond.__pos__()", "IndexSecond.via_values.apply(func, *args, **kwargs)": "IndexSecond.via_values.apply()", "IndexSecond.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexSecond.via_values.__array_ufunc__()", "IndexSecond.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexSecond.via_values.__call__()", "IndexSecond.via_dt.__call__(*, fill_value)": "IndexSecond.via_dt.__call__()", "IndexSecond.via_dt.year": "IndexSecond.via_dt.year", "IndexSecond.via_dt.year_month": "IndexSecond.via_dt.year_month", "IndexSecond.via_dt.year_quarter": "IndexSecond.via_dt.year_quarter", "IndexSecond.via_dt.month": "IndexSecond.via_dt.month", "IndexSecond.via_dt.day": "IndexSecond.via_dt.day", "IndexSecond.via_dt.hour": "IndexSecond.via_dt.hour", "IndexSecond.via_dt.minute": "IndexSecond.via_dt.minute", "IndexSecond.via_dt.second": "IndexSecond.via_dt.second", "IndexSecond.via_dt.weekday()": "IndexSecond.via_dt.weekday()", "IndexSecond.via_dt.quarter()": "IndexSecond.via_dt.quarter()", "IndexSecond.via_dt.is_month_end()": "IndexSecond.via_dt.is_month_end()", "IndexSecond.via_dt.is_month_start()": "IndexSecond.via_dt.is_month_start()", "IndexSecond.via_dt.is_year_end()": "IndexSecond.via_dt.is_year_end()", "IndexSecond.via_dt.is_year_start()": "IndexSecond.via_dt.is_year_start()", "IndexSecond.via_dt.is_quarter_end()": "IndexSecond.via_dt.is_quarter_end()", "IndexSecond.via_dt.is_quarter_start()": "IndexSecond.via_dt.is_quarter_start()", "IndexSecond.via_dt.timetuple()": "IndexSecond.via_dt.timetuple()", "IndexSecond.via_dt.isoformat(sep, timespec)": "IndexSecond.via_dt.isoformat()", "IndexSecond.via_dt.fromisoformat()": "IndexSecond.via_dt.fromisoformat()", "IndexSecond.via_dt.strftime(format)": "IndexSecond.via_dt.strftime()", "IndexSecond.via_dt.strptime(format)": "IndexSecond.via_dt.strptime()", "IndexSecond.via_dt.strpdate(format)": "IndexSecond.via_dt.strpdate()", "IndexSecond.via_str.__getitem__(key)": "IndexSecond.via_str.__getitem__()", "IndexSecond.via_str.capitalize()": "IndexSecond.via_str.capitalize()", "IndexSecond.via_str.center(width, fillchar)": "IndexSecond.via_str.center()", "IndexSecond.via_str.contains(item)": "IndexSecond.via_str.contains()", "IndexSecond.via_str.count(sub, start, end)": "IndexSecond.via_str.count()", "IndexSecond.via_str.decode(encoding, errors)": "IndexSecond.via_str.decode()", "IndexSecond.via_str.encode(encoding, errors)": "IndexSecond.via_str.encode()", "IndexSecond.via_str.endswith(suffix, start, end)": "IndexSecond.via_str.endswith()", "IndexSecond.via_str.find(sub, start, end)": "IndexSecond.via_str.find()", "IndexSecond.via_str.format(format)": "IndexSecond.via_str.format()", "IndexSecond.via_str.index(sub, start, end)": "IndexSecond.via_str.index()", "IndexSecond.via_str.isalnum()": "IndexSecond.via_str.isalnum()", "IndexSecond.via_str.isalpha()": "IndexSecond.via_str.isalpha()", "IndexSecond.via_str.isdecimal()": "IndexSecond.via_str.isdecimal()", "IndexSecond.via_str.isdigit()": "IndexSecond.via_str.isdigit()", "IndexSecond.via_str.islower()": "IndexSecond.via_str.islower()", "IndexSecond.via_str.isnumeric()": "IndexSecond.via_str.isnumeric()", "IndexSecond.via_str.isspace()": "IndexSecond.via_str.isspace()", "IndexSecond.via_str.istitle()": "IndexSecond.via_str.istitle()", "IndexSecond.via_str.isupper()": "IndexSecond.via_str.isupper()", "IndexSecond.via_str.ljust(width, fillchar)": "IndexSecond.via_str.ljust()", "IndexSecond.via_str.len()": "IndexSecond.via_str.len()", "IndexSecond.via_str.lower()": "IndexSecond.via_str.lower()", "IndexSecond.via_str.lstrip(chars)": "IndexSecond.via_str.lstrip()", "IndexSecond.via_str.partition(sep)": "IndexSecond.via_str.partition()", "IndexSecond.via_str.replace(old, new, count)": "IndexSecond.via_str.replace()", "IndexSecond.via_str.rfind(sub, start, end)": "IndexSecond.via_str.rfind()", "IndexSecond.via_str.rindex(sub, start, end)": "IndexSecond.via_str.rindex()", "IndexSecond.via_str.rjust(width, fillchar)": "IndexSecond.via_str.rjust()", "IndexSecond.via_str.rpartition(sep)": "IndexSecond.via_str.rpartition()", "IndexSecond.via_str.rsplit(sep, maxsplit)": "IndexSecond.via_str.rsplit()", "IndexSecond.via_str.rstrip(chars)": "IndexSecond.via_str.rstrip()", "IndexSecond.via_str.split(sep, maxsplit)": "IndexSecond.via_str.split()", "IndexSecond.via_str.startswith(prefix, start, end)": "IndexSecond.via_str.startswith()", "IndexSecond.via_str.strip(chars)": "IndexSecond.via_str.strip()", "IndexSecond.via_str.swapcase()": "IndexSecond.via_str.swapcase()", "IndexSecond.via_str.title()": "IndexSecond.via_str.title()", "IndexSecond.via_str.upper()": "IndexSecond.via_str.upper()", "IndexSecond.via_str.zfill(width)": "IndexSecond.via_str.zfill()", "IndexSecond.via_re(pattern, flags).search(pos, endpos)": "IndexSecond.via_re().search()", "IndexSecond.via_re(pattern, flags).match(pos, endpos)": "IndexSecond.via_re().match()", "IndexSecond.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexSecond.via_re().fullmatch()", "IndexSecond.via_re(pattern, flags).split(maxsplit)": "IndexSecond.via_re().split()", "IndexSecond.via_re(pattern, flags).findall(pos, endpos)": "IndexSecond.via_re().findall()", "IndexSecond.via_re(pattern, flags).sub(repl, count)": "IndexSecond.via_re().sub()", "IndexSecond.via_re(pattern, flags).subn(repl, count)": "IndexSecond.via_re().subn()", "IndexSecond.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexSecond.via_hashlib().to_bytes()", "IndexSecond.via_hashlib(include_name, include_class, encoding).md5()": "IndexSecond.via_hashlib().md5()", "IndexSecond.via_hashlib(include_name, include_class, encoding).sha256()": "IndexSecond.via_hashlib().sha256()", "IndexSecond.via_hashlib(include_name, include_class, encoding).sha512()": "IndexSecond.via_hashlib().sha512()", "IndexSecond.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexSecond.via_hashlib().sha3_256()", "IndexSecond.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexSecond.via_hashlib().sha3_512()", "IndexSecond.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexSecond.via_hashlib().shake_128()", "IndexSecond.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexSecond.via_hashlib().shake_256()", "IndexSecond.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexSecond.via_hashlib().blake2b()", "IndexSecond.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexSecond.via_hashlib().blake2s()", "IndexSecond.via_type_clinic.to_hint()": "IndexSecond.via_type_clinic.to_hint()", "IndexSecond.via_type_clinic.check(hint, *, fail_fast)": "IndexSecond.via_type_clinic.check()", "IndexSecond.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexSecond.via_type_clinic.warn()", "IndexSecond.via_type_clinic.__call__(hint, *, fail_fast)": "IndexSecond.via_type_clinic.__call__()", "IndexSecond.via_type_clinic.__repr__()": "IndexSecond.via_type_clinic.__repr__()", "IndexSecondGO.__init__(labels, *, loc_is_iloc, name)": "IndexSecondGO.__init__()", "IndexSecondGO.from_labels(labels, *, name)": "IndexSecondGO.from_labels()", "IndexSecondGO.from_pandas(value)": "IndexSecondGO.from_pandas()", "IndexSecondGO.to_html(config, style_config)": "IndexSecondGO.to_html()", "IndexSecondGO.to_html_datatables(fp, *, show, config)": "IndexSecondGO.to_html_datatables()", "IndexSecondGO.to_pandas()": "IndexSecondGO.to_pandas()", "IndexSecondGO.to_series()": "IndexSecondGO.to_series()", "IndexSecondGO.to_visidata()": "IndexSecondGO.to_visidata()", "IndexSecondGO.STATIC": "IndexSecondGO.STATIC", "IndexSecondGO.depth": "IndexSecondGO.depth", "IndexSecondGO.dtype": "IndexSecondGO.dtype", "IndexSecondGO.index_types": "IndexSecondGO.index_types", "IndexSecondGO.memory": "IndexSecondGO.memory", "IndexSecondGO.mloc": "IndexSecondGO.mloc", "IndexSecondGO.name": "IndexSecondGO.name", "IndexSecondGO.names": "IndexSecondGO.names", "IndexSecondGO.nbytes": "IndexSecondGO.nbytes", "IndexSecondGO.ndim": "IndexSecondGO.ndim", "IndexSecondGO.positions": "IndexSecondGO.positions", "IndexSecondGO.shape": "IndexSecondGO.shape", "IndexSecondGO.size": "IndexSecondGO.size", "IndexSecondGO.__array__(dtype)": "IndexSecondGO.__array__()", "IndexSecondGO.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexSecondGO.__array_ufunc__()", "IndexSecondGO.__bool__()": "IndexSecondGO.__bool__()", "IndexSecondGO.__copy__()": "IndexSecondGO.__copy__()", "IndexSecondGO.__deepcopy__(memo)": "IndexSecondGO.__deepcopy__()", "IndexSecondGO.__len__()": "IndexSecondGO.__len__()", "IndexSecondGO.all(axis, skipna, out)": "IndexSecondGO.all()", "IndexSecondGO.any(axis, skipna, out)": "IndexSecondGO.any()", "IndexSecondGO.append(value)": "IndexSecondGO.append()", "IndexSecondGO.astype(dtype)": "IndexSecondGO.astype()", "IndexSecondGO.copy()": "IndexSecondGO.copy()", "IndexSecondGO.cumprod(axis, skipna)": "IndexSecondGO.cumprod()", "IndexSecondGO.cumsum(axis, skipna)": "IndexSecondGO.cumsum()", "IndexSecondGO.difference(*others)": "IndexSecondGO.difference()", "IndexSecondGO.dropfalsy()": "IndexSecondGO.dropfalsy()", "IndexSecondGO.dropna()": "IndexSecondGO.dropna()", "IndexSecondGO.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexSecondGO.equals()", "IndexSecondGO.extend(values)": "IndexSecondGO.extend()", "IndexSecondGO.fillfalsy(value)": "IndexSecondGO.fillfalsy()", "IndexSecondGO.fillna(value)": "IndexSecondGO.fillna()", "IndexSecondGO.head(count)": "IndexSecondGO.head()", "IndexSecondGO.iloc_searchsorted(values, *, side_left)": "IndexSecondGO.iloc_searchsorted()", "IndexSecondGO.intersection(*others)": "IndexSecondGO.intersection()", "IndexSecondGO.isfalsy()": "IndexSecondGO.isfalsy()", "IndexSecondGO.isin(other)": "IndexSecondGO.isin()", "IndexSecondGO.isna()": "IndexSecondGO.isna()", "IndexSecondGO.label_widths_at_depth(depth_level)": "IndexSecondGO.label_widths_at_depth()", "IndexSecondGO.level_add(level, *, index_constructor)": "IndexSecondGO.level_add()", "IndexSecondGO.loc_searchsorted(values, *, side_left, fill_value)": "IndexSecondGO.loc_searchsorted()", "IndexSecondGO.loc_to_iloc(key)": "IndexSecondGO.loc_to_iloc()", "IndexSecondGO.max(axis, skipna, out)": "IndexSecondGO.max()", "IndexSecondGO.mean(axis, skipna, out)": "IndexSecondGO.mean()", "IndexSecondGO.median(axis, skipna, out)": "IndexSecondGO.median()", "IndexSecondGO.min(axis, skipna, out)": "IndexSecondGO.min()", "IndexSecondGO.notfalsy()": "IndexSecondGO.notfalsy()", "IndexSecondGO.notna()": "IndexSecondGO.notna()", "IndexSecondGO.prod(axis, skipna, allna, out)": "IndexSecondGO.prod()", "IndexSecondGO.relabel(mapper)": "IndexSecondGO.relabel()", "IndexSecondGO.rename(name)": "IndexSecondGO.rename()", "IndexSecondGO.roll(shift)": "IndexSecondGO.roll()", "IndexSecondGO.sample(count, *, seed)": "IndexSecondGO.sample()", "IndexSecondGO.sort(ascending, kind, key)": "IndexSecondGO.sort()", "IndexSecondGO.std(axis, skipna, ddof, out)": "IndexSecondGO.std()", "IndexSecondGO.sum(axis, skipna, allna, out)": "IndexSecondGO.sum()", "IndexSecondGO.tail(count)": "IndexSecondGO.tail()", "IndexSecondGO.union(*others)": "IndexSecondGO.union()", "IndexSecondGO.unique(depth_level, order_by_occurrence)": "IndexSecondGO.unique()", "IndexSecondGO.values_at_depth(depth_level)": "IndexSecondGO.values_at_depth()", "IndexSecondGO.var(axis, skipna, ddof, out)": "IndexSecondGO.var()", "IndexSecondGO.__contains__(value)": "IndexSecondGO.__contains__()", "IndexSecondGO.__iter__()": "IndexSecondGO.__iter__()", "IndexSecondGO.__reversed__()": "IndexSecondGO.__reversed__()", "IndexSecondGO.values": "IndexSecondGO.values", "IndexSecondGO.interface": "IndexSecondGO.interface", "IndexSecondGO.__repr__()": "IndexSecondGO.__repr__()", "IndexSecondGO.__str__()": "IndexSecondGO.__str__()", "IndexSecondGO.display(config, *, style_config)": "IndexSecondGO.display()", "IndexSecondGO.display_tall(config)": "IndexSecondGO.display_tall()", "IndexSecondGO.display_wide(config)": "IndexSecondGO.display_wide()", "IndexSecondGO.drop.iloc[key]": "IndexSecondGO.drop.iloc[]", "IndexSecondGO.drop.loc[key]": "IndexSecondGO.drop.loc[]", "IndexSecondGO.[key]": "IndexSecondGO.[]", "IndexSecondGO.iloc[key]": "IndexSecondGO.iloc[]", "IndexSecondGO.loc[key]": "IndexSecondGO.loc[]", "IndexSecondGO.iter_label(depth_level)": "IndexSecondGO.iter_label()", "IndexSecondGO.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexSecondGO.iter_label().apply()", "IndexSecondGO.iter_label(depth_level).apply_iter(func)": "IndexSecondGO.iter_label().apply_iter()", "IndexSecondGO.iter_label(depth_level).apply_iter_items(func)": "IndexSecondGO.iter_label().apply_iter_items()", "IndexSecondGO.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexSecondGO.iter_label().apply_pool()", "IndexSecondGO.__add__(other)": "IndexSecondGO.__add__()", "IndexSecondGO.__and__(other)": "IndexSecondGO.__and__()", "IndexSecondGO.__eq__(other)": "IndexSecondGO.__eq__()", "IndexSecondGO.__floordiv__(other)": "IndexSecondGO.__floordiv__()", "IndexSecondGO.__ge__(other)": "IndexSecondGO.__ge__()", "IndexSecondGO.__gt__(other)": "IndexSecondGO.__gt__()", "IndexSecondGO.__le__(other)": "IndexSecondGO.__le__()", "IndexSecondGO.__lt__(other)": "IndexSecondGO.__lt__()", "IndexSecondGO.__matmul__(other)": "IndexSecondGO.__matmul__()", "IndexSecondGO.__mod__(other)": "IndexSecondGO.__mod__()", "IndexSecondGO.__mul__(other)": "IndexSecondGO.__mul__()", "IndexSecondGO.__ne__(other)": "IndexSecondGO.__ne__()", "IndexSecondGO.__or__(other)": "IndexSecondGO.__or__()", "IndexSecondGO.__pow__(other)": "IndexSecondGO.__pow__()", "IndexSecondGO.__radd__(other)": "IndexSecondGO.__radd__()", "IndexSecondGO.__rfloordiv__(other)": "IndexSecondGO.__rfloordiv__()", "IndexSecondGO.__rmatmul__(other)": "IndexSecondGO.__rmatmul__()", "IndexSecondGO.__rmul__(other)": "IndexSecondGO.__rmul__()", "IndexSecondGO.__rshift__(other)": "IndexSecondGO.__rshift__()", "IndexSecondGO.__rsub__(other)": "IndexSecondGO.__rsub__()", "IndexSecondGO.__rtruediv__(other)": "IndexSecondGO.__rtruediv__()", "IndexSecondGO.__sub__(other)": "IndexSecondGO.__sub__()", "IndexSecondGO.__truediv__(other)": "IndexSecondGO.__truediv__()", "IndexSecondGO.__xor__(other)": "IndexSecondGO.__xor__()", "IndexSecondGO.__abs__()": "IndexSecondGO.__abs__()", "IndexSecondGO.__invert__()": "IndexSecondGO.__invert__()", "IndexSecondGO.__neg__()": "IndexSecondGO.__neg__()", "IndexSecondGO.__pos__()": "IndexSecondGO.__pos__()", "IndexSecondGO.via_values.apply(func, *args, **kwargs)": "IndexSecondGO.via_values.apply()", "IndexSecondGO.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexSecondGO.via_values.__array_ufunc__()", "IndexSecondGO.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexSecondGO.via_values.__call__()", "IndexSecondGO.via_dt.__call__(*, fill_value)": "IndexSecondGO.via_dt.__call__()", "IndexSecondGO.via_dt.year": "IndexSecondGO.via_dt.year", "IndexSecondGO.via_dt.year_month": "IndexSecondGO.via_dt.year_month", "IndexSecondGO.via_dt.year_quarter": "IndexSecondGO.via_dt.year_quarter", "IndexSecondGO.via_dt.month": "IndexSecondGO.via_dt.month", "IndexSecondGO.via_dt.day": "IndexSecondGO.via_dt.day", "IndexSecondGO.via_dt.hour": "IndexSecondGO.via_dt.hour", "IndexSecondGO.via_dt.minute": "IndexSecondGO.via_dt.minute", "IndexSecondGO.via_dt.second": "IndexSecondGO.via_dt.second", "IndexSecondGO.via_dt.weekday()": "IndexSecondGO.via_dt.weekday()", "IndexSecondGO.via_dt.quarter()": "IndexSecondGO.via_dt.quarter()", "IndexSecondGO.via_dt.is_month_end()": "IndexSecondGO.via_dt.is_month_end()", "IndexSecondGO.via_dt.is_month_start()": "IndexSecondGO.via_dt.is_month_start()", "IndexSecondGO.via_dt.is_year_end()": "IndexSecondGO.via_dt.is_year_end()", "IndexSecondGO.via_dt.is_year_start()": "IndexSecondGO.via_dt.is_year_start()", "IndexSecondGO.via_dt.is_quarter_end()": "IndexSecondGO.via_dt.is_quarter_end()", "IndexSecondGO.via_dt.is_quarter_start()": "IndexSecondGO.via_dt.is_quarter_start()", "IndexSecondGO.via_dt.timetuple()": "IndexSecondGO.via_dt.timetuple()", "IndexSecondGO.via_dt.isoformat(sep, timespec)": "IndexSecondGO.via_dt.isoformat()", "IndexSecondGO.via_dt.fromisoformat()": "IndexSecondGO.via_dt.fromisoformat()", "IndexSecondGO.via_dt.strftime(format)": "IndexSecondGO.via_dt.strftime()", "IndexSecondGO.via_dt.strptime(format)": "IndexSecondGO.via_dt.strptime()", "IndexSecondGO.via_dt.strpdate(format)": "IndexSecondGO.via_dt.strpdate()", "IndexSecondGO.via_str.__getitem__(key)": "IndexSecondGO.via_str.__getitem__()", "IndexSecondGO.via_str.capitalize()": "IndexSecondGO.via_str.capitalize()", "IndexSecondGO.via_str.center(width, fillchar)": "IndexSecondGO.via_str.center()", "IndexSecondGO.via_str.contains(item)": "IndexSecondGO.via_str.contains()", "IndexSecondGO.via_str.count(sub, start, end)": "IndexSecondGO.via_str.count()", "IndexSecondGO.via_str.decode(encoding, errors)": "IndexSecondGO.via_str.decode()", "IndexSecondGO.via_str.encode(encoding, errors)": "IndexSecondGO.via_str.encode()", "IndexSecondGO.via_str.endswith(suffix, start, end)": "IndexSecondGO.via_str.endswith()", "IndexSecondGO.via_str.find(sub, start, end)": "IndexSecondGO.via_str.find()", "IndexSecondGO.via_str.format(format)": "IndexSecondGO.via_str.format()", "IndexSecondGO.via_str.index(sub, start, end)": "IndexSecondGO.via_str.index()", "IndexSecondGO.via_str.isalnum()": "IndexSecondGO.via_str.isalnum()", "IndexSecondGO.via_str.isalpha()": "IndexSecondGO.via_str.isalpha()", "IndexSecondGO.via_str.isdecimal()": "IndexSecondGO.via_str.isdecimal()", "IndexSecondGO.via_str.isdigit()": "IndexSecondGO.via_str.isdigit()", "IndexSecondGO.via_str.islower()": "IndexSecondGO.via_str.islower()", "IndexSecondGO.via_str.isnumeric()": "IndexSecondGO.via_str.isnumeric()", "IndexSecondGO.via_str.isspace()": "IndexSecondGO.via_str.isspace()", "IndexSecondGO.via_str.istitle()": "IndexSecondGO.via_str.istitle()", "IndexSecondGO.via_str.isupper()": "IndexSecondGO.via_str.isupper()", "IndexSecondGO.via_str.ljust(width, fillchar)": "IndexSecondGO.via_str.ljust()", "IndexSecondGO.via_str.len()": "IndexSecondGO.via_str.len()", "IndexSecondGO.via_str.lower()": "IndexSecondGO.via_str.lower()", "IndexSecondGO.via_str.lstrip(chars)": "IndexSecondGO.via_str.lstrip()", "IndexSecondGO.via_str.partition(sep)": "IndexSecondGO.via_str.partition()", "IndexSecondGO.via_str.replace(old, new, count)": "IndexSecondGO.via_str.replace()", "IndexSecondGO.via_str.rfind(sub, start, end)": "IndexSecondGO.via_str.rfind()", "IndexSecondGO.via_str.rindex(sub, start, end)": "IndexSecondGO.via_str.rindex()", "IndexSecondGO.via_str.rjust(width, fillchar)": "IndexSecondGO.via_str.rjust()", "IndexSecondGO.via_str.rpartition(sep)": "IndexSecondGO.via_str.rpartition()", "IndexSecondGO.via_str.rsplit(sep, maxsplit)": "IndexSecondGO.via_str.rsplit()", "IndexSecondGO.via_str.rstrip(chars)": "IndexSecondGO.via_str.rstrip()", "IndexSecondGO.via_str.split(sep, maxsplit)": "IndexSecondGO.via_str.split()", "IndexSecondGO.via_str.startswith(prefix, start, end)": "IndexSecondGO.via_str.startswith()", "IndexSecondGO.via_str.strip(chars)": "IndexSecondGO.via_str.strip()", "IndexSecondGO.via_str.swapcase()": "IndexSecondGO.via_str.swapcase()", "IndexSecondGO.via_str.title()": "IndexSecondGO.via_str.title()", "IndexSecondGO.via_str.upper()": "IndexSecondGO.via_str.upper()", "IndexSecondGO.via_str.zfill(width)": "IndexSecondGO.via_str.zfill()", "IndexSecondGO.via_re(pattern, flags).search(pos, endpos)": "IndexSecondGO.via_re().search()", "IndexSecondGO.via_re(pattern, flags).match(pos, endpos)": "IndexSecondGO.via_re().match()", "IndexSecondGO.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexSecondGO.via_re().fullmatch()", "IndexSecondGO.via_re(pattern, flags).split(maxsplit)": "IndexSecondGO.via_re().split()", "IndexSecondGO.via_re(pattern, flags).findall(pos, endpos)": "IndexSecondGO.via_re().findall()", "IndexSecondGO.via_re(pattern, flags).sub(repl, count)": "IndexSecondGO.via_re().sub()", "IndexSecondGO.via_re(pattern, flags).subn(repl, count)": "IndexSecondGO.via_re().subn()", "IndexSecondGO.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexSecondGO.via_hashlib().to_bytes()", "IndexSecondGO.via_hashlib(include_name, include_class, encoding).md5()": "IndexSecondGO.via_hashlib().md5()", "IndexSecondGO.via_hashlib(include_name, include_class, encoding).sha256()": "IndexSecondGO.via_hashlib().sha256()", "IndexSecondGO.via_hashlib(include_name, include_class, encoding).sha512()": "IndexSecondGO.via_hashlib().sha512()", "IndexSecondGO.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexSecondGO.via_hashlib().sha3_256()", "IndexSecondGO.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexSecondGO.via_hashlib().sha3_512()", "IndexSecondGO.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexSecondGO.via_hashlib().shake_128()", "IndexSecondGO.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexSecondGO.via_hashlib().shake_256()", "IndexSecondGO.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexSecondGO.via_hashlib().blake2b()", "IndexSecondGO.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexSecondGO.via_hashlib().blake2s()", "IndexSecondGO.via_type_clinic.to_hint()": "IndexSecondGO.via_type_clinic.to_hint()", "IndexSecondGO.via_type_clinic.check(hint, *, fail_fast)": "IndexSecondGO.via_type_clinic.check()", "IndexSecondGO.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexSecondGO.via_type_clinic.warn()", "IndexSecondGO.via_type_clinic.__call__(hint, *, fail_fast)": "IndexSecondGO.via_type_clinic.__call__()", "IndexSecondGO.via_type_clinic.__repr__()": "IndexSecondGO.via_type_clinic.__repr__()", "IndexMillisecond.__init__(labels, *, loc_is_iloc, name)": "IndexMillisecond.__init__()", "IndexMillisecond.from_labels(labels, *, name)": "IndexMillisecond.from_labels()", "IndexMillisecond.from_pandas(value)": "IndexMillisecond.from_pandas()", "IndexMillisecond.to_html(config, style_config)": "IndexMillisecond.to_html()", "IndexMillisecond.to_html_datatables(fp, *, show, config)": "IndexMillisecond.to_html_datatables()", "IndexMillisecond.to_pandas()": "IndexMillisecond.to_pandas()", "IndexMillisecond.to_series()": "IndexMillisecond.to_series()", "IndexMillisecond.to_visidata()": "IndexMillisecond.to_visidata()", "IndexMillisecond.STATIC": "IndexMillisecond.STATIC", "IndexMillisecond.depth": "IndexMillisecond.depth", "IndexMillisecond.dtype": "IndexMillisecond.dtype", "IndexMillisecond.index_types": "IndexMillisecond.index_types", "IndexMillisecond.memory": "IndexMillisecond.memory", "IndexMillisecond.mloc": "IndexMillisecond.mloc", "IndexMillisecond.name": "IndexMillisecond.name", "IndexMillisecond.names": "IndexMillisecond.names", "IndexMillisecond.nbytes": "IndexMillisecond.nbytes", "IndexMillisecond.ndim": "IndexMillisecond.ndim", "IndexMillisecond.positions": "IndexMillisecond.positions", "IndexMillisecond.shape": "IndexMillisecond.shape", "IndexMillisecond.size": "IndexMillisecond.size", "IndexMillisecond.__array__(dtype)": "IndexMillisecond.__array__()", "IndexMillisecond.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexMillisecond.__array_ufunc__()", "IndexMillisecond.__bool__()": "IndexMillisecond.__bool__()", "IndexMillisecond.__copy__()": "IndexMillisecond.__copy__()", "IndexMillisecond.__deepcopy__(memo)": "IndexMillisecond.__deepcopy__()", "IndexMillisecond.__len__()": "IndexMillisecond.__len__()", "IndexMillisecond.all(axis, skipna, out)": "IndexMillisecond.all()", "IndexMillisecond.any(axis, skipna, out)": "IndexMillisecond.any()", "IndexMillisecond.astype(dtype)": "IndexMillisecond.astype()", "IndexMillisecond.copy()": "IndexMillisecond.copy()", "IndexMillisecond.cumprod(axis, skipna)": "IndexMillisecond.cumprod()", "IndexMillisecond.cumsum(axis, skipna)": "IndexMillisecond.cumsum()", "IndexMillisecond.difference(*others)": "IndexMillisecond.difference()", "IndexMillisecond.dropfalsy()": "IndexMillisecond.dropfalsy()", "IndexMillisecond.dropna()": "IndexMillisecond.dropna()", "IndexMillisecond.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexMillisecond.equals()", "IndexMillisecond.fillfalsy(value)": "IndexMillisecond.fillfalsy()", "IndexMillisecond.fillna(value)": "IndexMillisecond.fillna()", "IndexMillisecond.head(count)": "IndexMillisecond.head()", "IndexMillisecond.iloc_searchsorted(values, *, side_left)": "IndexMillisecond.iloc_searchsorted()", "IndexMillisecond.intersection(*others)": "IndexMillisecond.intersection()", "IndexMillisecond.isfalsy()": "IndexMillisecond.isfalsy()", "IndexMillisecond.isin(other)": "IndexMillisecond.isin()", "IndexMillisecond.isna()": "IndexMillisecond.isna()", "IndexMillisecond.label_widths_at_depth(depth_level)": "IndexMillisecond.label_widths_at_depth()", "IndexMillisecond.level_add(level, *, index_constructor)": "IndexMillisecond.level_add()", "IndexMillisecond.loc_searchsorted(values, *, side_left, fill_value)": "IndexMillisecond.loc_searchsorted()", "IndexMillisecond.loc_to_iloc(key)": "IndexMillisecond.loc_to_iloc()", "IndexMillisecond.max(axis, skipna, out)": "IndexMillisecond.max()", "IndexMillisecond.mean(axis, skipna, out)": "IndexMillisecond.mean()", "IndexMillisecond.median(axis, skipna, out)": "IndexMillisecond.median()", "IndexMillisecond.min(axis, skipna, out)": "IndexMillisecond.min()", "IndexMillisecond.notfalsy()": "IndexMillisecond.notfalsy()", "IndexMillisecond.notna()": "IndexMillisecond.notna()", "IndexMillisecond.prod(axis, skipna, allna, out)": "IndexMillisecond.prod()", "IndexMillisecond.relabel(mapper)": "IndexMillisecond.relabel()", "IndexMillisecond.rename(name)": "IndexMillisecond.rename()", "IndexMillisecond.roll(shift)": "IndexMillisecond.roll()", "IndexMillisecond.sample(count, *, seed)": "IndexMillisecond.sample()", "IndexMillisecond.sort(ascending, kind, key)": "IndexMillisecond.sort()", "IndexMillisecond.std(axis, skipna, ddof, out)": "IndexMillisecond.std()", "IndexMillisecond.sum(axis, skipna, allna, out)": "IndexMillisecond.sum()", "IndexMillisecond.tail(count)": "IndexMillisecond.tail()", "IndexMillisecond.union(*others)": "IndexMillisecond.union()", "IndexMillisecond.unique(depth_level, order_by_occurrence)": "IndexMillisecond.unique()", "IndexMillisecond.values_at_depth(depth_level)": "IndexMillisecond.values_at_depth()", "IndexMillisecond.var(axis, skipna, ddof, out)": "IndexMillisecond.var()", "IndexMillisecond.__contains__(value)": "IndexMillisecond.__contains__()", "IndexMillisecond.__iter__()": "IndexMillisecond.__iter__()", "IndexMillisecond.__reversed__()": "IndexMillisecond.__reversed__()", "IndexMillisecond.values": "IndexMillisecond.values", "IndexMillisecond.interface": "IndexMillisecond.interface", "IndexMillisecond.__repr__()": "IndexMillisecond.__repr__()", "IndexMillisecond.__str__()": "IndexMillisecond.__str__()", "IndexMillisecond.display(config, *, style_config)": "IndexMillisecond.display()", "IndexMillisecond.display_tall(config)": "IndexMillisecond.display_tall()", "IndexMillisecond.display_wide(config)": "IndexMillisecond.display_wide()", "IndexMillisecond.drop.iloc[key]": "IndexMillisecond.drop.iloc[]", "IndexMillisecond.drop.loc[key]": "IndexMillisecond.drop.loc[]", "IndexMillisecond.[key]": "IndexMillisecond.[]", "IndexMillisecond.iloc[key]": "IndexMillisecond.iloc[]", "IndexMillisecond.loc[key]": "IndexMillisecond.loc[]", "IndexMillisecond.iter_label(depth_level)": "IndexMillisecond.iter_label()", "IndexMillisecond.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexMillisecond.iter_label().apply()", "IndexMillisecond.iter_label(depth_level).apply_iter(func)": "IndexMillisecond.iter_label().apply_iter()", "IndexMillisecond.iter_label(depth_level).apply_iter_items(func)": "IndexMillisecond.iter_label().apply_iter_items()", "IndexMillisecond.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexMillisecond.iter_label().apply_pool()", "IndexMillisecond.__add__(other)": "IndexMillisecond.__add__()", "IndexMillisecond.__and__(other)": "IndexMillisecond.__and__()", "IndexMillisecond.__eq__(other)": "IndexMillisecond.__eq__()", "IndexMillisecond.__floordiv__(other)": "IndexMillisecond.__floordiv__()", "IndexMillisecond.__ge__(other)": "IndexMillisecond.__ge__()", "IndexMillisecond.__gt__(other)": "IndexMillisecond.__gt__()", "IndexMillisecond.__le__(other)": "IndexMillisecond.__le__()", "IndexMillisecond.__lt__(other)": "IndexMillisecond.__lt__()", "IndexMillisecond.__matmul__(other)": "IndexMillisecond.__matmul__()", "IndexMillisecond.__mod__(other)": "IndexMillisecond.__mod__()", "IndexMillisecond.__mul__(other)": "IndexMillisecond.__mul__()", "IndexMillisecond.__ne__(other)": "IndexMillisecond.__ne__()", "IndexMillisecond.__or__(other)": "IndexMillisecond.__or__()", "IndexMillisecond.__pow__(other)": "IndexMillisecond.__pow__()", "IndexMillisecond.__radd__(other)": "IndexMillisecond.__radd__()", "IndexMillisecond.__rfloordiv__(other)": "IndexMillisecond.__rfloordiv__()", "IndexMillisecond.__rmatmul__(other)": "IndexMillisecond.__rmatmul__()", "IndexMillisecond.__rmul__(other)": "IndexMillisecond.__rmul__()", "IndexMillisecond.__rshift__(other)": "IndexMillisecond.__rshift__()", "IndexMillisecond.__rsub__(other)": "IndexMillisecond.__rsub__()", "IndexMillisecond.__rtruediv__(other)": "IndexMillisecond.__rtruediv__()", "IndexMillisecond.__sub__(other)": "IndexMillisecond.__sub__()", "IndexMillisecond.__truediv__(other)": "IndexMillisecond.__truediv__()", "IndexMillisecond.__xor__(other)": "IndexMillisecond.__xor__()", "IndexMillisecond.__abs__()": "IndexMillisecond.__abs__()", "IndexMillisecond.__invert__()": "IndexMillisecond.__invert__()", "IndexMillisecond.__neg__()": "IndexMillisecond.__neg__()", "IndexMillisecond.__pos__()": "IndexMillisecond.__pos__()", "IndexMillisecond.via_values.apply(func, *args, **kwargs)": "IndexMillisecond.via_values.apply()", "IndexMillisecond.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexMillisecond.via_values.__array_ufunc__()", "IndexMillisecond.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexMillisecond.via_values.__call__()", "IndexMillisecond.via_dt.__call__(*, fill_value)": "IndexMillisecond.via_dt.__call__()", "IndexMillisecond.via_dt.year": "IndexMillisecond.via_dt.year", "IndexMillisecond.via_dt.year_month": "IndexMillisecond.via_dt.year_month", "IndexMillisecond.via_dt.year_quarter": "IndexMillisecond.via_dt.year_quarter", "IndexMillisecond.via_dt.month": "IndexMillisecond.via_dt.month", "IndexMillisecond.via_dt.day": "IndexMillisecond.via_dt.day", "IndexMillisecond.via_dt.hour": "IndexMillisecond.via_dt.hour", "IndexMillisecond.via_dt.minute": "IndexMillisecond.via_dt.minute", "IndexMillisecond.via_dt.second": "IndexMillisecond.via_dt.second", "IndexMillisecond.via_dt.weekday()": "IndexMillisecond.via_dt.weekday()", "IndexMillisecond.via_dt.quarter()": "IndexMillisecond.via_dt.quarter()", "IndexMillisecond.via_dt.is_month_end()": "IndexMillisecond.via_dt.is_month_end()", "IndexMillisecond.via_dt.is_month_start()": "IndexMillisecond.via_dt.is_month_start()", "IndexMillisecond.via_dt.is_year_end()": "IndexMillisecond.via_dt.is_year_end()", "IndexMillisecond.via_dt.is_year_start()": "IndexMillisecond.via_dt.is_year_start()", "IndexMillisecond.via_dt.is_quarter_end()": "IndexMillisecond.via_dt.is_quarter_end()", "IndexMillisecond.via_dt.is_quarter_start()": "IndexMillisecond.via_dt.is_quarter_start()", "IndexMillisecond.via_dt.timetuple()": "IndexMillisecond.via_dt.timetuple()", "IndexMillisecond.via_dt.isoformat(sep, timespec)": "IndexMillisecond.via_dt.isoformat()", "IndexMillisecond.via_dt.fromisoformat()": "IndexMillisecond.via_dt.fromisoformat()", "IndexMillisecond.via_dt.strftime(format)": "IndexMillisecond.via_dt.strftime()", "IndexMillisecond.via_dt.strptime(format)": "IndexMillisecond.via_dt.strptime()", "IndexMillisecond.via_dt.strpdate(format)": "IndexMillisecond.via_dt.strpdate()", "IndexMillisecond.via_str.__getitem__(key)": "IndexMillisecond.via_str.__getitem__()", "IndexMillisecond.via_str.capitalize()": "IndexMillisecond.via_str.capitalize()", "IndexMillisecond.via_str.center(width, fillchar)": "IndexMillisecond.via_str.center()", "IndexMillisecond.via_str.contains(item)": "IndexMillisecond.via_str.contains()", "IndexMillisecond.via_str.count(sub, start, end)": "IndexMillisecond.via_str.count()", "IndexMillisecond.via_str.decode(encoding, errors)": "IndexMillisecond.via_str.decode()", "IndexMillisecond.via_str.encode(encoding, errors)": "IndexMillisecond.via_str.encode()", "IndexMillisecond.via_str.endswith(suffix, start, end)": "IndexMillisecond.via_str.endswith()", "IndexMillisecond.via_str.find(sub, start, end)": "IndexMillisecond.via_str.find()", "IndexMillisecond.via_str.format(format)": "IndexMillisecond.via_str.format()", "IndexMillisecond.via_str.index(sub, start, end)": "IndexMillisecond.via_str.index()", "IndexMillisecond.via_str.isalnum()": "IndexMillisecond.via_str.isalnum()", "IndexMillisecond.via_str.isalpha()": "IndexMillisecond.via_str.isalpha()", "IndexMillisecond.via_str.isdecimal()": "IndexMillisecond.via_str.isdecimal()", "IndexMillisecond.via_str.isdigit()": "IndexMillisecond.via_str.isdigit()", "IndexMillisecond.via_str.islower()": "IndexMillisecond.via_str.islower()", "IndexMillisecond.via_str.isnumeric()": "IndexMillisecond.via_str.isnumeric()", "IndexMillisecond.via_str.isspace()": "IndexMillisecond.via_str.isspace()", "IndexMillisecond.via_str.istitle()": "IndexMillisecond.via_str.istitle()", "IndexMillisecond.via_str.isupper()": "IndexMillisecond.via_str.isupper()", "IndexMillisecond.via_str.ljust(width, fillchar)": "IndexMillisecond.via_str.ljust()", "IndexMillisecond.via_str.len()": "IndexMillisecond.via_str.len()", "IndexMillisecond.via_str.lower()": "IndexMillisecond.via_str.lower()", "IndexMillisecond.via_str.lstrip(chars)": "IndexMillisecond.via_str.lstrip()", "IndexMillisecond.via_str.partition(sep)": "IndexMillisecond.via_str.partition()", "IndexMillisecond.via_str.replace(old, new, count)": "IndexMillisecond.via_str.replace()", "IndexMillisecond.via_str.rfind(sub, start, end)": "IndexMillisecond.via_str.rfind()", "IndexMillisecond.via_str.rindex(sub, start, end)": "IndexMillisecond.via_str.rindex()", "IndexMillisecond.via_str.rjust(width, fillchar)": "IndexMillisecond.via_str.rjust()", "IndexMillisecond.via_str.rpartition(sep)": "IndexMillisecond.via_str.rpartition()", "IndexMillisecond.via_str.rsplit(sep, maxsplit)": "IndexMillisecond.via_str.rsplit()", "IndexMillisecond.via_str.rstrip(chars)": "IndexMillisecond.via_str.rstrip()", "IndexMillisecond.via_str.split(sep, maxsplit)": "IndexMillisecond.via_str.split()", "IndexMillisecond.via_str.startswith(prefix, start, end)": "IndexMillisecond.via_str.startswith()", "IndexMillisecond.via_str.strip(chars)": "IndexMillisecond.via_str.strip()", "IndexMillisecond.via_str.swapcase()": "IndexMillisecond.via_str.swapcase()", "IndexMillisecond.via_str.title()": "IndexMillisecond.via_str.title()", "IndexMillisecond.via_str.upper()": "IndexMillisecond.via_str.upper()", "IndexMillisecond.via_str.zfill(width)": "IndexMillisecond.via_str.zfill()", "IndexMillisecond.via_re(pattern, flags).search(pos, endpos)": "IndexMillisecond.via_re().search()", "IndexMillisecond.via_re(pattern, flags).match(pos, endpos)": "IndexMillisecond.via_re().match()", "IndexMillisecond.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexMillisecond.via_re().fullmatch()", "IndexMillisecond.via_re(pattern, flags).split(maxsplit)": "IndexMillisecond.via_re().split()", "IndexMillisecond.via_re(pattern, flags).findall(pos, endpos)": "IndexMillisecond.via_re().findall()", "IndexMillisecond.via_re(pattern, flags).sub(repl, count)": "IndexMillisecond.via_re().sub()", "IndexMillisecond.via_re(pattern, flags).subn(repl, count)": "IndexMillisecond.via_re().subn()", "IndexMillisecond.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexMillisecond.via_hashlib().to_bytes()", "IndexMillisecond.via_hashlib(include_name, include_class, encoding).md5()": "IndexMillisecond.via_hashlib().md5()", "IndexMillisecond.via_hashlib(include_name, include_class, encoding).sha256()": "IndexMillisecond.via_hashlib().sha256()", "IndexMillisecond.via_hashlib(include_name, include_class, encoding).sha512()": "IndexMillisecond.via_hashlib().sha512()", "IndexMillisecond.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexMillisecond.via_hashlib().sha3_256()", "IndexMillisecond.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexMillisecond.via_hashlib().sha3_512()", "IndexMillisecond.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexMillisecond.via_hashlib().shake_128()", "IndexMillisecond.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexMillisecond.via_hashlib().shake_256()", "IndexMillisecond.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexMillisecond.via_hashlib().blake2b()", "IndexMillisecond.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexMillisecond.via_hashlib().blake2s()", "IndexMillisecond.via_type_clinic.to_hint()": "IndexMillisecond.via_type_clinic.to_hint()", "IndexMillisecond.via_type_clinic.check(hint, *, fail_fast)": "IndexMillisecond.via_type_clinic.check()", "IndexMillisecond.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexMillisecond.via_type_clinic.warn()", "IndexMillisecond.via_type_clinic.__call__(hint, *, fail_fast)": "IndexMillisecond.via_type_clinic.__call__()", "IndexMillisecond.via_type_clinic.__repr__()": "IndexMillisecond.via_type_clinic.__repr__()", "IndexMillisecondGO.__init__(labels, *, loc_is_iloc, name)": "IndexMillisecondGO.__init__()", "IndexMillisecondGO.from_labels(labels, *, name)": "IndexMillisecondGO.from_labels()", "IndexMillisecondGO.from_pandas(value)": "IndexMillisecondGO.from_pandas()", "IndexMillisecondGO.to_html(config, style_config)": "IndexMillisecondGO.to_html()", "IndexMillisecondGO.to_html_datatables(fp, *, show, config)": "IndexMillisecondGO.to_html_datatables()", "IndexMillisecondGO.to_pandas()": "IndexMillisecondGO.to_pandas()", "IndexMillisecondGO.to_series()": "IndexMillisecondGO.to_series()", "IndexMillisecondGO.to_visidata()": "IndexMillisecondGO.to_visidata()", "IndexMillisecondGO.STATIC": "IndexMillisecondGO.STATIC", "IndexMillisecondGO.depth": "IndexMillisecondGO.depth", "IndexMillisecondGO.dtype": "IndexMillisecondGO.dtype", "IndexMillisecondGO.index_types": "IndexMillisecondGO.index_types", "IndexMillisecondGO.memory": "IndexMillisecondGO.memory", "IndexMillisecondGO.mloc": "IndexMillisecondGO.mloc", "IndexMillisecondGO.name": "IndexMillisecondGO.name", "IndexMillisecondGO.names": "IndexMillisecondGO.names", "IndexMillisecondGO.nbytes": "IndexMillisecondGO.nbytes", "IndexMillisecondGO.ndim": "IndexMillisecondGO.ndim", "IndexMillisecondGO.positions": "IndexMillisecondGO.positions", "IndexMillisecondGO.shape": "IndexMillisecondGO.shape", "IndexMillisecondGO.size": "IndexMillisecondGO.size", "IndexMillisecondGO.__array__(dtype)": "IndexMillisecondGO.__array__()", "IndexMillisecondGO.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexMillisecondGO.__array_ufunc__()", "IndexMillisecondGO.__bool__()": "IndexMillisecondGO.__bool__()", "IndexMillisecondGO.__copy__()": "IndexMillisecondGO.__copy__()", "IndexMillisecondGO.__deepcopy__(memo)": "IndexMillisecondGO.__deepcopy__()", "IndexMillisecondGO.__len__()": "IndexMillisecondGO.__len__()", "IndexMillisecondGO.all(axis, skipna, out)": "IndexMillisecondGO.all()", "IndexMillisecondGO.any(axis, skipna, out)": "IndexMillisecondGO.any()", "IndexMillisecondGO.append(value)": "IndexMillisecondGO.append()", "IndexMillisecondGO.astype(dtype)": "IndexMillisecondGO.astype()", "IndexMillisecondGO.copy()": "IndexMillisecondGO.copy()", "IndexMillisecondGO.cumprod(axis, skipna)": "IndexMillisecondGO.cumprod()", "IndexMillisecondGO.cumsum(axis, skipna)": "IndexMillisecondGO.cumsum()", "IndexMillisecondGO.difference(*others)": "IndexMillisecondGO.difference()", "IndexMillisecondGO.dropfalsy()": "IndexMillisecondGO.dropfalsy()", "IndexMillisecondGO.dropna()": "IndexMillisecondGO.dropna()", "IndexMillisecondGO.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexMillisecondGO.equals()", "IndexMillisecondGO.extend(values)": "IndexMillisecondGO.extend()", "IndexMillisecondGO.fillfalsy(value)": "IndexMillisecondGO.fillfalsy()", "IndexMillisecondGO.fillna(value)": "IndexMillisecondGO.fillna()", "IndexMillisecondGO.head(count)": "IndexMillisecondGO.head()", "IndexMillisecondGO.iloc_searchsorted(values, *, side_left)": "IndexMillisecondGO.iloc_searchsorted()", "IndexMillisecondGO.intersection(*others)": "IndexMillisecondGO.intersection()", "IndexMillisecondGO.isfalsy()": "IndexMillisecondGO.isfalsy()", "IndexMillisecondGO.isin(other)": "IndexMillisecondGO.isin()", "IndexMillisecondGO.isna()": "IndexMillisecondGO.isna()", "IndexMillisecondGO.label_widths_at_depth(depth_level)": "IndexMillisecondGO.label_widths_at_depth()", "IndexMillisecondGO.level_add(level, *, index_constructor)": "IndexMillisecondGO.level_add()", "IndexMillisecondGO.loc_searchsorted(values, *, side_left, fill_value)": "IndexMillisecondGO.loc_searchsorted()", "IndexMillisecondGO.loc_to_iloc(key)": "IndexMillisecondGO.loc_to_iloc()", "IndexMillisecondGO.max(axis, skipna, out)": "IndexMillisecondGO.max()", "IndexMillisecondGO.mean(axis, skipna, out)": "IndexMillisecondGO.mean()", "IndexMillisecondGO.median(axis, skipna, out)": "IndexMillisecondGO.median()", "IndexMillisecondGO.min(axis, skipna, out)": "IndexMillisecondGO.min()", "IndexMillisecondGO.notfalsy()": "IndexMillisecondGO.notfalsy()", "IndexMillisecondGO.notna()": "IndexMillisecondGO.notna()", "IndexMillisecondGO.prod(axis, skipna, allna, out)": "IndexMillisecondGO.prod()", "IndexMillisecondGO.relabel(mapper)": "IndexMillisecondGO.relabel()", "IndexMillisecondGO.rename(name)": "IndexMillisecondGO.rename()", "IndexMillisecondGO.roll(shift)": "IndexMillisecondGO.roll()", "IndexMillisecondGO.sample(count, *, seed)": "IndexMillisecondGO.sample()", "IndexMillisecondGO.sort(ascending, kind, key)": "IndexMillisecondGO.sort()", "IndexMillisecondGO.std(axis, skipna, ddof, out)": "IndexMillisecondGO.std()", "IndexMillisecondGO.sum(axis, skipna, allna, out)": "IndexMillisecondGO.sum()", "IndexMillisecondGO.tail(count)": "IndexMillisecondGO.tail()", "IndexMillisecondGO.union(*others)": "IndexMillisecondGO.union()", "IndexMillisecondGO.unique(depth_level, order_by_occurrence)": "IndexMillisecondGO.unique()", "IndexMillisecondGO.values_at_depth(depth_level)": "IndexMillisecondGO.values_at_depth()", "IndexMillisecondGO.var(axis, skipna, ddof, out)": "IndexMillisecondGO.var()", "IndexMillisecondGO.__contains__(value)": "IndexMillisecondGO.__contains__()", "IndexMillisecondGO.__iter__()": "IndexMillisecondGO.__iter__()", "IndexMillisecondGO.__reversed__()": "IndexMillisecondGO.__reversed__()", "IndexMillisecondGO.values": "IndexMillisecondGO.values", "IndexMillisecondGO.interface": "IndexMillisecondGO.interface", "IndexMillisecondGO.__repr__()": "IndexMillisecondGO.__repr__()", "IndexMillisecondGO.__str__()": "IndexMillisecondGO.__str__()", "IndexMillisecondGO.display(config, *, style_config)": "IndexMillisecondGO.display()", "IndexMillisecondGO.display_tall(config)": "IndexMillisecondGO.display_tall()", "IndexMillisecondGO.display_wide(config)": "IndexMillisecondGO.display_wide()", "IndexMillisecondGO.drop.iloc[key]": "IndexMillisecondGO.drop.iloc[]", "IndexMillisecondGO.drop.loc[key]": "IndexMillisecondGO.drop.loc[]", "IndexMillisecondGO.[key]": "IndexMillisecondGO.[]", "IndexMillisecondGO.iloc[key]": "IndexMillisecondGO.iloc[]", "IndexMillisecondGO.loc[key]": "IndexMillisecondGO.loc[]", "IndexMillisecondGO.iter_label(depth_level)": "IndexMillisecondGO.iter_label()", "IndexMillisecondGO.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexMillisecondGO.iter_label().apply()", "IndexMillisecondGO.iter_label(depth_level).apply_iter(func)": "IndexMillisecondGO.iter_label().apply_iter()", "IndexMillisecondGO.iter_label(depth_level).apply_iter_items(func)": "IndexMillisecondGO.iter_label().apply_iter_items()", "IndexMillisecondGO.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexMillisecondGO.iter_label().apply_pool()", "IndexMillisecondGO.__add__(other)": "IndexMillisecondGO.__add__()", "IndexMillisecondGO.__and__(other)": "IndexMillisecondGO.__and__()", "IndexMillisecondGO.__eq__(other)": "IndexMillisecondGO.__eq__()", "IndexMillisecondGO.__floordiv__(other)": "IndexMillisecondGO.__floordiv__()", "IndexMillisecondGO.__ge__(other)": "IndexMillisecondGO.__ge__()", "IndexMillisecondGO.__gt__(other)": "IndexMillisecondGO.__gt__()", "IndexMillisecondGO.__le__(other)": "IndexMillisecondGO.__le__()", "IndexMillisecondGO.__lt__(other)": "IndexMillisecondGO.__lt__()", "IndexMillisecondGO.__matmul__(other)": "IndexMillisecondGO.__matmul__()", "IndexMillisecondGO.__mod__(other)": "IndexMillisecondGO.__mod__()", "IndexMillisecondGO.__mul__(other)": "IndexMillisecondGO.__mul__()", "IndexMillisecondGO.__ne__(other)": "IndexMillisecondGO.__ne__()", "IndexMillisecondGO.__or__(other)": "IndexMillisecondGO.__or__()", "IndexMillisecondGO.__pow__(other)": "IndexMillisecondGO.__pow__()", "IndexMillisecondGO.__radd__(other)": "IndexMillisecondGO.__radd__()", "IndexMillisecondGO.__rfloordiv__(other)": "IndexMillisecondGO.__rfloordiv__()", "IndexMillisecondGO.__rmatmul__(other)": "IndexMillisecondGO.__rmatmul__()", "IndexMillisecondGO.__rmul__(other)": "IndexMillisecondGO.__rmul__()", "IndexMillisecondGO.__rshift__(other)": "IndexMillisecondGO.__rshift__()", "IndexMillisecondGO.__rsub__(other)": "IndexMillisecondGO.__rsub__()", "IndexMillisecondGO.__rtruediv__(other)": "IndexMillisecondGO.__rtruediv__()", "IndexMillisecondGO.__sub__(other)": "IndexMillisecondGO.__sub__()", "IndexMillisecondGO.__truediv__(other)": "IndexMillisecondGO.__truediv__()", "IndexMillisecondGO.__xor__(other)": "IndexMillisecondGO.__xor__()", "IndexMillisecondGO.__abs__()": "IndexMillisecondGO.__abs__()", "IndexMillisecondGO.__invert__()": "IndexMillisecondGO.__invert__()", "IndexMillisecondGO.__neg__()": "IndexMillisecondGO.__neg__()", "IndexMillisecondGO.__pos__()": "IndexMillisecondGO.__pos__()", "IndexMillisecondGO.via_values.apply(func, *args, **kwargs)": "IndexMillisecondGO.via_values.apply()", "IndexMillisecondGO.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexMillisecondGO.via_values.__array_ufunc__()", "IndexMillisecondGO.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexMillisecondGO.via_values.__call__()", "IndexMillisecondGO.via_dt.__call__(*, fill_value)": "IndexMillisecondGO.via_dt.__call__()", "IndexMillisecondGO.via_dt.year": "IndexMillisecondGO.via_dt.year", "IndexMillisecondGO.via_dt.year_month": "IndexMillisecondGO.via_dt.year_month", "IndexMillisecondGO.via_dt.year_quarter": "IndexMillisecondGO.via_dt.year_quarter", "IndexMillisecondGO.via_dt.month": "IndexMillisecondGO.via_dt.month", "IndexMillisecondGO.via_dt.day": "IndexMillisecondGO.via_dt.day", "IndexMillisecondGO.via_dt.hour": "IndexMillisecondGO.via_dt.hour", "IndexMillisecondGO.via_dt.minute": "IndexMillisecondGO.via_dt.minute", "IndexMillisecondGO.via_dt.second": "IndexMillisecondGO.via_dt.second", "IndexMillisecondGO.via_dt.weekday()": "IndexMillisecondGO.via_dt.weekday()", "IndexMillisecondGO.via_dt.quarter()": "IndexMillisecondGO.via_dt.quarter()", "IndexMillisecondGO.via_dt.is_month_end()": "IndexMillisecondGO.via_dt.is_month_end()", "IndexMillisecondGO.via_dt.is_month_start()": "IndexMillisecondGO.via_dt.is_month_start()", "IndexMillisecondGO.via_dt.is_year_end()": "IndexMillisecondGO.via_dt.is_year_end()", "IndexMillisecondGO.via_dt.is_year_start()": "IndexMillisecondGO.via_dt.is_year_start()", "IndexMillisecondGO.via_dt.is_quarter_end()": "IndexMillisecondGO.via_dt.is_quarter_end()", "IndexMillisecondGO.via_dt.is_quarter_start()": "IndexMillisecondGO.via_dt.is_quarter_start()", "IndexMillisecondGO.via_dt.timetuple()": "IndexMillisecondGO.via_dt.timetuple()", "IndexMillisecondGO.via_dt.isoformat(sep, timespec)": "IndexMillisecondGO.via_dt.isoformat()", "IndexMillisecondGO.via_dt.fromisoformat()": "IndexMillisecondGO.via_dt.fromisoformat()", "IndexMillisecondGO.via_dt.strftime(format)": "IndexMillisecondGO.via_dt.strftime()", "IndexMillisecondGO.via_dt.strptime(format)": "IndexMillisecondGO.via_dt.strptime()", "IndexMillisecondGO.via_dt.strpdate(format)": "IndexMillisecondGO.via_dt.strpdate()", "IndexMillisecondGO.via_str.__getitem__(key)": "IndexMillisecondGO.via_str.__getitem__()", "IndexMillisecondGO.via_str.capitalize()": "IndexMillisecondGO.via_str.capitalize()", "IndexMillisecondGO.via_str.center(width, fillchar)": "IndexMillisecondGO.via_str.center()", "IndexMillisecondGO.via_str.contains(item)": "IndexMillisecondGO.via_str.contains()", "IndexMillisecondGO.via_str.count(sub, start, end)": "IndexMillisecondGO.via_str.count()", "IndexMillisecondGO.via_str.decode(encoding, errors)": "IndexMillisecondGO.via_str.decode()", "IndexMillisecondGO.via_str.encode(encoding, errors)": "IndexMillisecondGO.via_str.encode()", "IndexMillisecondGO.via_str.endswith(suffix, start, end)": "IndexMillisecondGO.via_str.endswith()", "IndexMillisecondGO.via_str.find(sub, start, end)": "IndexMillisecondGO.via_str.find()", "IndexMillisecondGO.via_str.format(format)": "IndexMillisecondGO.via_str.format()", "IndexMillisecondGO.via_str.index(sub, start, end)": "IndexMillisecondGO.via_str.index()", "IndexMillisecondGO.via_str.isalnum()": "IndexMillisecondGO.via_str.isalnum()", "IndexMillisecondGO.via_str.isalpha()": "IndexMillisecondGO.via_str.isalpha()", "IndexMillisecondGO.via_str.isdecimal()": "IndexMillisecondGO.via_str.isdecimal()", "IndexMillisecondGO.via_str.isdigit()": "IndexMillisecondGO.via_str.isdigit()", "IndexMillisecondGO.via_str.islower()": "IndexMillisecondGO.via_str.islower()", "IndexMillisecondGO.via_str.isnumeric()": "IndexMillisecondGO.via_str.isnumeric()", "IndexMillisecondGO.via_str.isspace()": "IndexMillisecondGO.via_str.isspace()", "IndexMillisecondGO.via_str.istitle()": "IndexMillisecondGO.via_str.istitle()", "IndexMillisecondGO.via_str.isupper()": "IndexMillisecondGO.via_str.isupper()", "IndexMillisecondGO.via_str.ljust(width, fillchar)": "IndexMillisecondGO.via_str.ljust()", "IndexMillisecondGO.via_str.len()": "IndexMillisecondGO.via_str.len()", "IndexMillisecondGO.via_str.lower()": "IndexMillisecondGO.via_str.lower()", "IndexMillisecondGO.via_str.lstrip(chars)": "IndexMillisecondGO.via_str.lstrip()", "IndexMillisecondGO.via_str.partition(sep)": "IndexMillisecondGO.via_str.partition()", "IndexMillisecondGO.via_str.replace(old, new, count)": "IndexMillisecondGO.via_str.replace()", "IndexMillisecondGO.via_str.rfind(sub, start, end)": "IndexMillisecondGO.via_str.rfind()", "IndexMillisecondGO.via_str.rindex(sub, start, end)": "IndexMillisecondGO.via_str.rindex()", "IndexMillisecondGO.via_str.rjust(width, fillchar)": "IndexMillisecondGO.via_str.rjust()", "IndexMillisecondGO.via_str.rpartition(sep)": "IndexMillisecondGO.via_str.rpartition()", "IndexMillisecondGO.via_str.rsplit(sep, maxsplit)": "IndexMillisecondGO.via_str.rsplit()", "IndexMillisecondGO.via_str.rstrip(chars)": "IndexMillisecondGO.via_str.rstrip()", "IndexMillisecondGO.via_str.split(sep, maxsplit)": "IndexMillisecondGO.via_str.split()", "IndexMillisecondGO.via_str.startswith(prefix, start, end)": "IndexMillisecondGO.via_str.startswith()", "IndexMillisecondGO.via_str.strip(chars)": "IndexMillisecondGO.via_str.strip()", "IndexMillisecondGO.via_str.swapcase()": "IndexMillisecondGO.via_str.swapcase()", "IndexMillisecondGO.via_str.title()": "IndexMillisecondGO.via_str.title()", "IndexMillisecondGO.via_str.upper()": "IndexMillisecondGO.via_str.upper()", "IndexMillisecondGO.via_str.zfill(width)": "IndexMillisecondGO.via_str.zfill()", "IndexMillisecondGO.via_re(pattern, flags).search(pos, endpos)": "IndexMillisecondGO.via_re().search()", "IndexMillisecondGO.via_re(pattern, flags).match(pos, endpos)": "IndexMillisecondGO.via_re().match()", "IndexMillisecondGO.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexMillisecondGO.via_re().fullmatch()", "IndexMillisecondGO.via_re(pattern, flags).split(maxsplit)": "IndexMillisecondGO.via_re().split()", "IndexMillisecondGO.via_re(pattern, flags).findall(pos, endpos)": "IndexMillisecondGO.via_re().findall()", "IndexMillisecondGO.via_re(pattern, flags).sub(repl, count)": "IndexMillisecondGO.via_re().sub()", "IndexMillisecondGO.via_re(pattern, flags).subn(repl, count)": "IndexMillisecondGO.via_re().subn()", "IndexMillisecondGO.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexMillisecondGO.via_hashlib().to_bytes()", "IndexMillisecondGO.via_hashlib(include_name, include_class, encoding).md5()": "IndexMillisecondGO.via_hashlib().md5()", "IndexMillisecondGO.via_hashlib(include_name, include_class, encoding).sha256()": "IndexMillisecondGO.via_hashlib().sha256()", "IndexMillisecondGO.via_hashlib(include_name, include_class, encoding).sha512()": "IndexMillisecondGO.via_hashlib().sha512()", "IndexMillisecondGO.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexMillisecondGO.via_hashlib().sha3_256()", "IndexMillisecondGO.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexMillisecondGO.via_hashlib().sha3_512()", "IndexMillisecondGO.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexMillisecondGO.via_hashlib().shake_128()", "IndexMillisecondGO.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexMillisecondGO.via_hashlib().shake_256()", "IndexMillisecondGO.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexMillisecondGO.via_hashlib().blake2b()", "IndexMillisecondGO.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexMillisecondGO.via_hashlib().blake2s()", "IndexMillisecondGO.via_type_clinic.to_hint()": "IndexMillisecondGO.via_type_clinic.to_hint()", "IndexMillisecondGO.via_type_clinic.check(hint, *, fail_fast)": "IndexMillisecondGO.via_type_clinic.check()", "IndexMillisecondGO.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexMillisecondGO.via_type_clinic.warn()", "IndexMillisecondGO.via_type_clinic.__call__(hint, *, fail_fast)": "IndexMillisecondGO.via_type_clinic.__call__()", "IndexMillisecondGO.via_type_clinic.__repr__()": "IndexMillisecondGO.via_type_clinic.__repr__()", "IndexMicrosecond.__init__(labels, *, loc_is_iloc, name)": "IndexMicrosecond.__init__()", "IndexMicrosecond.from_labels(labels, *, name)": "IndexMicrosecond.from_labels()", "IndexMicrosecond.from_pandas(value)": "IndexMicrosecond.from_pandas()", "IndexMicrosecond.to_html(config, style_config)": "IndexMicrosecond.to_html()", "IndexMicrosecond.to_html_datatables(fp, *, show, config)": "IndexMicrosecond.to_html_datatables()", "IndexMicrosecond.to_pandas()": "IndexMicrosecond.to_pandas()", "IndexMicrosecond.to_series()": "IndexMicrosecond.to_series()", "IndexMicrosecond.to_visidata()": "IndexMicrosecond.to_visidata()", "IndexMicrosecond.STATIC": "IndexMicrosecond.STATIC", "IndexMicrosecond.depth": "IndexMicrosecond.depth", "IndexMicrosecond.dtype": "IndexMicrosecond.dtype", "IndexMicrosecond.index_types": "IndexMicrosecond.index_types", "IndexMicrosecond.memory": "IndexMicrosecond.memory", "IndexMicrosecond.mloc": "IndexMicrosecond.mloc", "IndexMicrosecond.name": "IndexMicrosecond.name", "IndexMicrosecond.names": "IndexMicrosecond.names", "IndexMicrosecond.nbytes": "IndexMicrosecond.nbytes", "IndexMicrosecond.ndim": "IndexMicrosecond.ndim", "IndexMicrosecond.positions": "IndexMicrosecond.positions", "IndexMicrosecond.shape": "IndexMicrosecond.shape", "IndexMicrosecond.size": "IndexMicrosecond.size", "IndexMicrosecond.__array__(dtype)": "IndexMicrosecond.__array__()", "IndexMicrosecond.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexMicrosecond.__array_ufunc__()", "IndexMicrosecond.__bool__()": "IndexMicrosecond.__bool__()", "IndexMicrosecond.__copy__()": "IndexMicrosecond.__copy__()", "IndexMicrosecond.__deepcopy__(memo)": "IndexMicrosecond.__deepcopy__()", "IndexMicrosecond.__len__()": "IndexMicrosecond.__len__()", "IndexMicrosecond.all(axis, skipna, out)": "IndexMicrosecond.all()", "IndexMicrosecond.any(axis, skipna, out)": "IndexMicrosecond.any()", "IndexMicrosecond.astype(dtype)": "IndexMicrosecond.astype()", "IndexMicrosecond.copy()": "IndexMicrosecond.copy()", "IndexMicrosecond.cumprod(axis, skipna)": "IndexMicrosecond.cumprod()", "IndexMicrosecond.cumsum(axis, skipna)": "IndexMicrosecond.cumsum()", "IndexMicrosecond.difference(*others)": "IndexMicrosecond.difference()", "IndexMicrosecond.dropfalsy()": "IndexMicrosecond.dropfalsy()", "IndexMicrosecond.dropna()": "IndexMicrosecond.dropna()", "IndexMicrosecond.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexMicrosecond.equals()", "IndexMicrosecond.fillfalsy(value)": "IndexMicrosecond.fillfalsy()", "IndexMicrosecond.fillna(value)": "IndexMicrosecond.fillna()", "IndexMicrosecond.head(count)": "IndexMicrosecond.head()", "IndexMicrosecond.iloc_searchsorted(values, *, side_left)": "IndexMicrosecond.iloc_searchsorted()", "IndexMicrosecond.intersection(*others)": "IndexMicrosecond.intersection()", "IndexMicrosecond.isfalsy()": "IndexMicrosecond.isfalsy()", "IndexMicrosecond.isin(other)": "IndexMicrosecond.isin()", "IndexMicrosecond.isna()": "IndexMicrosecond.isna()", "IndexMicrosecond.label_widths_at_depth(depth_level)": "IndexMicrosecond.label_widths_at_depth()", "IndexMicrosecond.level_add(level, *, index_constructor)": "IndexMicrosecond.level_add()", "IndexMicrosecond.loc_searchsorted(values, *, side_left, fill_value)": "IndexMicrosecond.loc_searchsorted()", "IndexMicrosecond.loc_to_iloc(key)": "IndexMicrosecond.loc_to_iloc()", "IndexMicrosecond.max(axis, skipna, out)": "IndexMicrosecond.max()", "IndexMicrosecond.mean(axis, skipna, out)": "IndexMicrosecond.mean()", "IndexMicrosecond.median(axis, skipna, out)": "IndexMicrosecond.median()", "IndexMicrosecond.min(axis, skipna, out)": "IndexMicrosecond.min()", "IndexMicrosecond.notfalsy()": "IndexMicrosecond.notfalsy()", "IndexMicrosecond.notna()": "IndexMicrosecond.notna()", "IndexMicrosecond.prod(axis, skipna, allna, out)": "IndexMicrosecond.prod()", "IndexMicrosecond.relabel(mapper)": "IndexMicrosecond.relabel()", "IndexMicrosecond.rename(name)": "IndexMicrosecond.rename()", "IndexMicrosecond.roll(shift)": "IndexMicrosecond.roll()", "IndexMicrosecond.sample(count, *, seed)": "IndexMicrosecond.sample()", "IndexMicrosecond.sort(ascending, kind, key)": "IndexMicrosecond.sort()", "IndexMicrosecond.std(axis, skipna, ddof, out)": "IndexMicrosecond.std()", "IndexMicrosecond.sum(axis, skipna, allna, out)": "IndexMicrosecond.sum()", "IndexMicrosecond.tail(count)": "IndexMicrosecond.tail()", "IndexMicrosecond.union(*others)": "IndexMicrosecond.union()", "IndexMicrosecond.unique(depth_level, order_by_occurrence)": "IndexMicrosecond.unique()", "IndexMicrosecond.values_at_depth(depth_level)": "IndexMicrosecond.values_at_depth()", "IndexMicrosecond.var(axis, skipna, ddof, out)": "IndexMicrosecond.var()", "IndexMicrosecond.__contains__(value)": "IndexMicrosecond.__contains__()", "IndexMicrosecond.__iter__()": "IndexMicrosecond.__iter__()", "IndexMicrosecond.__reversed__()": "IndexMicrosecond.__reversed__()", "IndexMicrosecond.values": "IndexMicrosecond.values", "IndexMicrosecond.interface": "IndexMicrosecond.interface", "IndexMicrosecond.__repr__()": "IndexMicrosecond.__repr__()", "IndexMicrosecond.__str__()": "IndexMicrosecond.__str__()", "IndexMicrosecond.display(config, *, style_config)": "IndexMicrosecond.display()", "IndexMicrosecond.display_tall(config)": "IndexMicrosecond.display_tall()", "IndexMicrosecond.display_wide(config)": "IndexMicrosecond.display_wide()", "IndexMicrosecond.drop.iloc[key]": "IndexMicrosecond.drop.iloc[]", "IndexMicrosecond.drop.loc[key]": "IndexMicrosecond.drop.loc[]", "IndexMicrosecond.[key]": "IndexMicrosecond.[]", "IndexMicrosecond.iloc[key]": "IndexMicrosecond.iloc[]", "IndexMicrosecond.loc[key]": "IndexMicrosecond.loc[]", "IndexMicrosecond.iter_label(depth_level)": "IndexMicrosecond.iter_label()", "IndexMicrosecond.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexMicrosecond.iter_label().apply()", "IndexMicrosecond.iter_label(depth_level).apply_iter(func)": "IndexMicrosecond.iter_label().apply_iter()", "IndexMicrosecond.iter_label(depth_level).apply_iter_items(func)": "IndexMicrosecond.iter_label().apply_iter_items()", "IndexMicrosecond.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexMicrosecond.iter_label().apply_pool()", "IndexMicrosecond.__add__(other)": "IndexMicrosecond.__add__()", "IndexMicrosecond.__and__(other)": "IndexMicrosecond.__and__()", "IndexMicrosecond.__eq__(other)": "IndexMicrosecond.__eq__()", "IndexMicrosecond.__floordiv__(other)": "IndexMicrosecond.__floordiv__()", "IndexMicrosecond.__ge__(other)": "IndexMicrosecond.__ge__()", "IndexMicrosecond.__gt__(other)": "IndexMicrosecond.__gt__()", "IndexMicrosecond.__le__(other)": "IndexMicrosecond.__le__()", "IndexMicrosecond.__lt__(other)": "IndexMicrosecond.__lt__()", "IndexMicrosecond.__matmul__(other)": "IndexMicrosecond.__matmul__()", "IndexMicrosecond.__mod__(other)": "IndexMicrosecond.__mod__()", "IndexMicrosecond.__mul__(other)": "IndexMicrosecond.__mul__()", "IndexMicrosecond.__ne__(other)": "IndexMicrosecond.__ne__()", "IndexMicrosecond.__or__(other)": "IndexMicrosecond.__or__()", "IndexMicrosecond.__pow__(other)": "IndexMicrosecond.__pow__()", "IndexMicrosecond.__radd__(other)": "IndexMicrosecond.__radd__()", "IndexMicrosecond.__rfloordiv__(other)": "IndexMicrosecond.__rfloordiv__()", "IndexMicrosecond.__rmatmul__(other)": "IndexMicrosecond.__rmatmul__()", "IndexMicrosecond.__rmul__(other)": "IndexMicrosecond.__rmul__()", "IndexMicrosecond.__rshift__(other)": "IndexMicrosecond.__rshift__()", "IndexMicrosecond.__rsub__(other)": "IndexMicrosecond.__rsub__()", "IndexMicrosecond.__rtruediv__(other)": "IndexMicrosecond.__rtruediv__()", "IndexMicrosecond.__sub__(other)": "IndexMicrosecond.__sub__()", "IndexMicrosecond.__truediv__(other)": "IndexMicrosecond.__truediv__()", "IndexMicrosecond.__xor__(other)": "IndexMicrosecond.__xor__()", "IndexMicrosecond.__abs__()": "IndexMicrosecond.__abs__()", "IndexMicrosecond.__invert__()": "IndexMicrosecond.__invert__()", "IndexMicrosecond.__neg__()": "IndexMicrosecond.__neg__()", "IndexMicrosecond.__pos__()": "IndexMicrosecond.__pos__()", "IndexMicrosecond.via_values.apply(func, *args, **kwargs)": "IndexMicrosecond.via_values.apply()", "IndexMicrosecond.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexMicrosecond.via_values.__array_ufunc__()", "IndexMicrosecond.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexMicrosecond.via_values.__call__()", "IndexMicrosecond.via_dt.__call__(*, fill_value)": "IndexMicrosecond.via_dt.__call__()", "IndexMicrosecond.via_dt.year": "IndexMicrosecond.via_dt.year", "IndexMicrosecond.via_dt.year_month": "IndexMicrosecond.via_dt.year_month", "IndexMicrosecond.via_dt.year_quarter": "IndexMicrosecond.via_dt.year_quarter", "IndexMicrosecond.via_dt.month": "IndexMicrosecond.via_dt.month", "IndexMicrosecond.via_dt.day": "IndexMicrosecond.via_dt.day", "IndexMicrosecond.via_dt.hour": "IndexMicrosecond.via_dt.hour", "IndexMicrosecond.via_dt.minute": "IndexMicrosecond.via_dt.minute", "IndexMicrosecond.via_dt.second": "IndexMicrosecond.via_dt.second", "IndexMicrosecond.via_dt.weekday()": "IndexMicrosecond.via_dt.weekday()", "IndexMicrosecond.via_dt.quarter()": "IndexMicrosecond.via_dt.quarter()", "IndexMicrosecond.via_dt.is_month_end()": "IndexMicrosecond.via_dt.is_month_end()", "IndexMicrosecond.via_dt.is_month_start()": "IndexMicrosecond.via_dt.is_month_start()", "IndexMicrosecond.via_dt.is_year_end()": "IndexMicrosecond.via_dt.is_year_end()", "IndexMicrosecond.via_dt.is_year_start()": "IndexMicrosecond.via_dt.is_year_start()", "IndexMicrosecond.via_dt.is_quarter_end()": "IndexMicrosecond.via_dt.is_quarter_end()", "IndexMicrosecond.via_dt.is_quarter_start()": "IndexMicrosecond.via_dt.is_quarter_start()", "IndexMicrosecond.via_dt.timetuple()": "IndexMicrosecond.via_dt.timetuple()", "IndexMicrosecond.via_dt.isoformat(sep, timespec)": "IndexMicrosecond.via_dt.isoformat()", "IndexMicrosecond.via_dt.fromisoformat()": "IndexMicrosecond.via_dt.fromisoformat()", "IndexMicrosecond.via_dt.strftime(format)": "IndexMicrosecond.via_dt.strftime()", "IndexMicrosecond.via_dt.strptime(format)": "IndexMicrosecond.via_dt.strptime()", "IndexMicrosecond.via_dt.strpdate(format)": "IndexMicrosecond.via_dt.strpdate()", "IndexMicrosecond.via_str.__getitem__(key)": "IndexMicrosecond.via_str.__getitem__()", "IndexMicrosecond.via_str.capitalize()": "IndexMicrosecond.via_str.capitalize()", "IndexMicrosecond.via_str.center(width, fillchar)": "IndexMicrosecond.via_str.center()", "IndexMicrosecond.via_str.contains(item)": "IndexMicrosecond.via_str.contains()", "IndexMicrosecond.via_str.count(sub, start, end)": "IndexMicrosecond.via_str.count()", "IndexMicrosecond.via_str.decode(encoding, errors)": "IndexMicrosecond.via_str.decode()", "IndexMicrosecond.via_str.encode(encoding, errors)": "IndexMicrosecond.via_str.encode()", "IndexMicrosecond.via_str.endswith(suffix, start, end)": "IndexMicrosecond.via_str.endswith()", "IndexMicrosecond.via_str.find(sub, start, end)": "IndexMicrosecond.via_str.find()", "IndexMicrosecond.via_str.format(format)": "IndexMicrosecond.via_str.format()", "IndexMicrosecond.via_str.index(sub, start, end)": "IndexMicrosecond.via_str.index()", "IndexMicrosecond.via_str.isalnum()": "IndexMicrosecond.via_str.isalnum()", "IndexMicrosecond.via_str.isalpha()": "IndexMicrosecond.via_str.isalpha()", "IndexMicrosecond.via_str.isdecimal()": "IndexMicrosecond.via_str.isdecimal()", "IndexMicrosecond.via_str.isdigit()": "IndexMicrosecond.via_str.isdigit()", "IndexMicrosecond.via_str.islower()": "IndexMicrosecond.via_str.islower()", "IndexMicrosecond.via_str.isnumeric()": "IndexMicrosecond.via_str.isnumeric()", "IndexMicrosecond.via_str.isspace()": "IndexMicrosecond.via_str.isspace()", "IndexMicrosecond.via_str.istitle()": "IndexMicrosecond.via_str.istitle()", "IndexMicrosecond.via_str.isupper()": "IndexMicrosecond.via_str.isupper()", "IndexMicrosecond.via_str.ljust(width, fillchar)": "IndexMicrosecond.via_str.ljust()", "IndexMicrosecond.via_str.len()": "IndexMicrosecond.via_str.len()", "IndexMicrosecond.via_str.lower()": "IndexMicrosecond.via_str.lower()", "IndexMicrosecond.via_str.lstrip(chars)": "IndexMicrosecond.via_str.lstrip()", "IndexMicrosecond.via_str.partition(sep)": "IndexMicrosecond.via_str.partition()", "IndexMicrosecond.via_str.replace(old, new, count)": "IndexMicrosecond.via_str.replace()", "IndexMicrosecond.via_str.rfind(sub, start, end)": "IndexMicrosecond.via_str.rfind()", "IndexMicrosecond.via_str.rindex(sub, start, end)": "IndexMicrosecond.via_str.rindex()", "IndexMicrosecond.via_str.rjust(width, fillchar)": "IndexMicrosecond.via_str.rjust()", "IndexMicrosecond.via_str.rpartition(sep)": "IndexMicrosecond.via_str.rpartition()", "IndexMicrosecond.via_str.rsplit(sep, maxsplit)": "IndexMicrosecond.via_str.rsplit()", "IndexMicrosecond.via_str.rstrip(chars)": "IndexMicrosecond.via_str.rstrip()", "IndexMicrosecond.via_str.split(sep, maxsplit)": "IndexMicrosecond.via_str.split()", "IndexMicrosecond.via_str.startswith(prefix, start, end)": "IndexMicrosecond.via_str.startswith()", "IndexMicrosecond.via_str.strip(chars)": "IndexMicrosecond.via_str.strip()", "IndexMicrosecond.via_str.swapcase()": "IndexMicrosecond.via_str.swapcase()", "IndexMicrosecond.via_str.title()": "IndexMicrosecond.via_str.title()", "IndexMicrosecond.via_str.upper()": "IndexMicrosecond.via_str.upper()", "IndexMicrosecond.via_str.zfill(width)": "IndexMicrosecond.via_str.zfill()", "IndexMicrosecond.via_re(pattern, flags).search(pos, endpos)": "IndexMicrosecond.via_re().search()", "IndexMicrosecond.via_re(pattern, flags).match(pos, endpos)": "IndexMicrosecond.via_re().match()", "IndexMicrosecond.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexMicrosecond.via_re().fullmatch()", "IndexMicrosecond.via_re(pattern, flags).split(maxsplit)": "IndexMicrosecond.via_re().split()", "IndexMicrosecond.via_re(pattern, flags).findall(pos, endpos)": "IndexMicrosecond.via_re().findall()", "IndexMicrosecond.via_re(pattern, flags).sub(repl, count)": "IndexMicrosecond.via_re().sub()", "IndexMicrosecond.via_re(pattern, flags).subn(repl, count)": "IndexMicrosecond.via_re().subn()", "IndexMicrosecond.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexMicrosecond.via_hashlib().to_bytes()", "IndexMicrosecond.via_hashlib(include_name, include_class, encoding).md5()": "IndexMicrosecond.via_hashlib().md5()", "IndexMicrosecond.via_hashlib(include_name, include_class, encoding).sha256()": "IndexMicrosecond.via_hashlib().sha256()", "IndexMicrosecond.via_hashlib(include_name, include_class, encoding).sha512()": "IndexMicrosecond.via_hashlib().sha512()", "IndexMicrosecond.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexMicrosecond.via_hashlib().sha3_256()", "IndexMicrosecond.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexMicrosecond.via_hashlib().sha3_512()", "IndexMicrosecond.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexMicrosecond.via_hashlib().shake_128()", "IndexMicrosecond.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexMicrosecond.via_hashlib().shake_256()", "IndexMicrosecond.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexMicrosecond.via_hashlib().blake2b()", "IndexMicrosecond.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexMicrosecond.via_hashlib().blake2s()", "IndexMicrosecond.via_type_clinic.to_hint()": "IndexMicrosecond.via_type_clinic.to_hint()", "IndexMicrosecond.via_type_clinic.check(hint, *, fail_fast)": "IndexMicrosecond.via_type_clinic.check()", "IndexMicrosecond.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexMicrosecond.via_type_clinic.warn()", "IndexMicrosecond.via_type_clinic.__call__(hint, *, fail_fast)": "IndexMicrosecond.via_type_clinic.__call__()", "IndexMicrosecond.via_type_clinic.__repr__()": "IndexMicrosecond.via_type_clinic.__repr__()", "IndexMicrosecondGO.__init__(labels, *, loc_is_iloc, name)": "IndexMicrosecondGO.__init__()", "IndexMicrosecondGO.from_labels(labels, *, name)": "IndexMicrosecondGO.from_labels()", "IndexMicrosecondGO.from_pandas(value)": "IndexMicrosecondGO.from_pandas()", "IndexMicrosecondGO.to_html(config, style_config)": "IndexMicrosecondGO.to_html()", "IndexMicrosecondGO.to_html_datatables(fp, *, show, config)": "IndexMicrosecondGO.to_html_datatables()", "IndexMicrosecondGO.to_pandas()": "IndexMicrosecondGO.to_pandas()", "IndexMicrosecondGO.to_series()": "IndexMicrosecondGO.to_series()", "IndexMicrosecondGO.to_visidata()": "IndexMicrosecondGO.to_visidata()", "IndexMicrosecondGO.STATIC": "IndexMicrosecondGO.STATIC", "IndexMicrosecondGO.depth": "IndexMicrosecondGO.depth", "IndexMicrosecondGO.dtype": "IndexMicrosecondGO.dtype", "IndexMicrosecondGO.index_types": "IndexMicrosecondGO.index_types", "IndexMicrosecondGO.memory": "IndexMicrosecondGO.memory", "IndexMicrosecondGO.mloc": "IndexMicrosecondGO.mloc", "IndexMicrosecondGO.name": "IndexMicrosecondGO.name", "IndexMicrosecondGO.names": "IndexMicrosecondGO.names", "IndexMicrosecondGO.nbytes": "IndexMicrosecondGO.nbytes", "IndexMicrosecondGO.ndim": "IndexMicrosecondGO.ndim", "IndexMicrosecondGO.positions": "IndexMicrosecondGO.positions", "IndexMicrosecondGO.shape": "IndexMicrosecondGO.shape", "IndexMicrosecondGO.size": "IndexMicrosecondGO.size", "IndexMicrosecondGO.__array__(dtype)": "IndexMicrosecondGO.__array__()", "IndexMicrosecondGO.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexMicrosecondGO.__array_ufunc__()", "IndexMicrosecondGO.__bool__()": "IndexMicrosecondGO.__bool__()", "IndexMicrosecondGO.__copy__()": "IndexMicrosecondGO.__copy__()", "IndexMicrosecondGO.__deepcopy__(memo)": "IndexMicrosecondGO.__deepcopy__()", "IndexMicrosecondGO.__len__()": "IndexMicrosecondGO.__len__()", "IndexMicrosecondGO.all(axis, skipna, out)": "IndexMicrosecondGO.all()", "IndexMicrosecondGO.any(axis, skipna, out)": "IndexMicrosecondGO.any()", "IndexMicrosecondGO.append(value)": "IndexMicrosecondGO.append()", "IndexMicrosecondGO.astype(dtype)": "IndexMicrosecondGO.astype()", "IndexMicrosecondGO.copy()": "IndexMicrosecondGO.copy()", "IndexMicrosecondGO.cumprod(axis, skipna)": "IndexMicrosecondGO.cumprod()", "IndexMicrosecondGO.cumsum(axis, skipna)": "IndexMicrosecondGO.cumsum()", "IndexMicrosecondGO.difference(*others)": "IndexMicrosecondGO.difference()", "IndexMicrosecondGO.dropfalsy()": "IndexMicrosecondGO.dropfalsy()", "IndexMicrosecondGO.dropna()": "IndexMicrosecondGO.dropna()", "IndexMicrosecondGO.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexMicrosecondGO.equals()", "IndexMicrosecondGO.extend(values)": "IndexMicrosecondGO.extend()", "IndexMicrosecondGO.fillfalsy(value)": "IndexMicrosecondGO.fillfalsy()", "IndexMicrosecondGO.fillna(value)": "IndexMicrosecondGO.fillna()", "IndexMicrosecondGO.head(count)": "IndexMicrosecondGO.head()", "IndexMicrosecondGO.iloc_searchsorted(values, *, side_left)": "IndexMicrosecondGO.iloc_searchsorted()", "IndexMicrosecondGO.intersection(*others)": "IndexMicrosecondGO.intersection()", "IndexMicrosecondGO.isfalsy()": "IndexMicrosecondGO.isfalsy()", "IndexMicrosecondGO.isin(other)": "IndexMicrosecondGO.isin()", "IndexMicrosecondGO.isna()": "IndexMicrosecondGO.isna()", "IndexMicrosecondGO.label_widths_at_depth(depth_level)": "IndexMicrosecondGO.label_widths_at_depth()", "IndexMicrosecondGO.level_add(level, *, index_constructor)": "IndexMicrosecondGO.level_add()", "IndexMicrosecondGO.loc_searchsorted(values, *, side_left, fill_value)": "IndexMicrosecondGO.loc_searchsorted()", "IndexMicrosecondGO.loc_to_iloc(key)": "IndexMicrosecondGO.loc_to_iloc()", "IndexMicrosecondGO.max(axis, skipna, out)": "IndexMicrosecondGO.max()", "IndexMicrosecondGO.mean(axis, skipna, out)": "IndexMicrosecondGO.mean()", "IndexMicrosecondGO.median(axis, skipna, out)": "IndexMicrosecondGO.median()", "IndexMicrosecondGO.min(axis, skipna, out)": "IndexMicrosecondGO.min()", "IndexMicrosecondGO.notfalsy()": "IndexMicrosecondGO.notfalsy()", "IndexMicrosecondGO.notna()": "IndexMicrosecondGO.notna()", "IndexMicrosecondGO.prod(axis, skipna, allna, out)": "IndexMicrosecondGO.prod()", "IndexMicrosecondGO.relabel(mapper)": "IndexMicrosecondGO.relabel()", "IndexMicrosecondGO.rename(name)": "IndexMicrosecondGO.rename()", "IndexMicrosecondGO.roll(shift)": "IndexMicrosecondGO.roll()", "IndexMicrosecondGO.sample(count, *, seed)": "IndexMicrosecondGO.sample()", "IndexMicrosecondGO.sort(ascending, kind, key)": "IndexMicrosecondGO.sort()", "IndexMicrosecondGO.std(axis, skipna, ddof, out)": "IndexMicrosecondGO.std()", "IndexMicrosecondGO.sum(axis, skipna, allna, out)": "IndexMicrosecondGO.sum()", "IndexMicrosecondGO.tail(count)": "IndexMicrosecondGO.tail()", "IndexMicrosecondGO.union(*others)": "IndexMicrosecondGO.union()", "IndexMicrosecondGO.unique(depth_level, order_by_occurrence)": "IndexMicrosecondGO.unique()", "IndexMicrosecondGO.values_at_depth(depth_level)": "IndexMicrosecondGO.values_at_depth()", "IndexMicrosecondGO.var(axis, skipna, ddof, out)": "IndexMicrosecondGO.var()", "IndexMicrosecondGO.__contains__(value)": "IndexMicrosecondGO.__contains__()", "IndexMicrosecondGO.__iter__()": "IndexMicrosecondGO.__iter__()", "IndexMicrosecondGO.__reversed__()": "IndexMicrosecondGO.__reversed__()", "IndexMicrosecondGO.values": "IndexMicrosecondGO.values", "IndexMicrosecondGO.interface": "IndexMicrosecondGO.interface", "IndexMicrosecondGO.__repr__()": "IndexMicrosecondGO.__repr__()", "IndexMicrosecondGO.__str__()": "IndexMicrosecondGO.__str__()", "IndexMicrosecondGO.display(config, *, style_config)": "IndexMicrosecondGO.display()", "IndexMicrosecondGO.display_tall(config)": "IndexMicrosecondGO.display_tall()", "IndexMicrosecondGO.display_wide(config)": "IndexMicrosecondGO.display_wide()", "IndexMicrosecondGO.drop.iloc[key]": "IndexMicrosecondGO.drop.iloc[]", "IndexMicrosecondGO.drop.loc[key]": "IndexMicrosecondGO.drop.loc[]", "IndexMicrosecondGO.[key]": "IndexMicrosecondGO.[]", "IndexMicrosecondGO.iloc[key]": "IndexMicrosecondGO.iloc[]", "IndexMicrosecondGO.loc[key]": "IndexMicrosecondGO.loc[]", "IndexMicrosecondGO.iter_label(depth_level)": "IndexMicrosecondGO.iter_label()", "IndexMicrosecondGO.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexMicrosecondGO.iter_label().apply()", "IndexMicrosecondGO.iter_label(depth_level).apply_iter(func)": "IndexMicrosecondGO.iter_label().apply_iter()", "IndexMicrosecondGO.iter_label(depth_level).apply_iter_items(func)": "IndexMicrosecondGO.iter_label().apply_iter_items()", "IndexMicrosecondGO.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexMicrosecondGO.iter_label().apply_pool()", "IndexMicrosecondGO.__add__(other)": "IndexMicrosecondGO.__add__()", "IndexMicrosecondGO.__and__(other)": "IndexMicrosecondGO.__and__()", "IndexMicrosecondGO.__eq__(other)": "IndexMicrosecondGO.__eq__()", "IndexMicrosecondGO.__floordiv__(other)": "IndexMicrosecondGO.__floordiv__()", "IndexMicrosecondGO.__ge__(other)": "IndexMicrosecondGO.__ge__()", "IndexMicrosecondGO.__gt__(other)": "IndexMicrosecondGO.__gt__()", "IndexMicrosecondGO.__le__(other)": "IndexMicrosecondGO.__le__()", "IndexMicrosecondGO.__lt__(other)": "IndexMicrosecondGO.__lt__()", "IndexMicrosecondGO.__matmul__(other)": "IndexMicrosecondGO.__matmul__()", "IndexMicrosecondGO.__mod__(other)": "IndexMicrosecondGO.__mod__()", "IndexMicrosecondGO.__mul__(other)": "IndexMicrosecondGO.__mul__()", "IndexMicrosecondGO.__ne__(other)": "IndexMicrosecondGO.__ne__()", "IndexMicrosecondGO.__or__(other)": "IndexMicrosecondGO.__or__()", "IndexMicrosecondGO.__pow__(other)": "IndexMicrosecondGO.__pow__()", "IndexMicrosecondGO.__radd__(other)": "IndexMicrosecondGO.__radd__()", "IndexMicrosecondGO.__rfloordiv__(other)": "IndexMicrosecondGO.__rfloordiv__()", "IndexMicrosecondGO.__rmatmul__(other)": "IndexMicrosecondGO.__rmatmul__()", "IndexMicrosecondGO.__rmul__(other)": "IndexMicrosecondGO.__rmul__()", "IndexMicrosecondGO.__rshift__(other)": "IndexMicrosecondGO.__rshift__()", "IndexMicrosecondGO.__rsub__(other)": "IndexMicrosecondGO.__rsub__()", "IndexMicrosecondGO.__rtruediv__(other)": "IndexMicrosecondGO.__rtruediv__()", "IndexMicrosecondGO.__sub__(other)": "IndexMicrosecondGO.__sub__()", "IndexMicrosecondGO.__truediv__(other)": "IndexMicrosecondGO.__truediv__()", "IndexMicrosecondGO.__xor__(other)": "IndexMicrosecondGO.__xor__()", "IndexMicrosecondGO.__abs__()": "IndexMicrosecondGO.__abs__()", "IndexMicrosecondGO.__invert__()": "IndexMicrosecondGO.__invert__()", "IndexMicrosecondGO.__neg__()": "IndexMicrosecondGO.__neg__()", "IndexMicrosecondGO.__pos__()": "IndexMicrosecondGO.__pos__()", "IndexMicrosecondGO.via_values.apply(func, *args, **kwargs)": "IndexMicrosecondGO.via_values.apply()", "IndexMicrosecondGO.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexMicrosecondGO.via_values.__array_ufunc__()", "IndexMicrosecondGO.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexMicrosecondGO.via_values.__call__()", "IndexMicrosecondGO.via_dt.__call__(*, fill_value)": "IndexMicrosecondGO.via_dt.__call__()", "IndexMicrosecondGO.via_dt.year": "IndexMicrosecondGO.via_dt.year", "IndexMicrosecondGO.via_dt.year_month": "IndexMicrosecondGO.via_dt.year_month", "IndexMicrosecondGO.via_dt.year_quarter": "IndexMicrosecondGO.via_dt.year_quarter", "IndexMicrosecondGO.via_dt.month": "IndexMicrosecondGO.via_dt.month", "IndexMicrosecondGO.via_dt.day": "IndexMicrosecondGO.via_dt.day", "IndexMicrosecondGO.via_dt.hour": "IndexMicrosecondGO.via_dt.hour", "IndexMicrosecondGO.via_dt.minute": "IndexMicrosecondGO.via_dt.minute", "IndexMicrosecondGO.via_dt.second": "IndexMicrosecondGO.via_dt.second", "IndexMicrosecondGO.via_dt.weekday()": "IndexMicrosecondGO.via_dt.weekday()", "IndexMicrosecondGO.via_dt.quarter()": "IndexMicrosecondGO.via_dt.quarter()", "IndexMicrosecondGO.via_dt.is_month_end()": "IndexMicrosecondGO.via_dt.is_month_end()", "IndexMicrosecondGO.via_dt.is_month_start()": "IndexMicrosecondGO.via_dt.is_month_start()", "IndexMicrosecondGO.via_dt.is_year_end()": "IndexMicrosecondGO.via_dt.is_year_end()", "IndexMicrosecondGO.via_dt.is_year_start()": "IndexMicrosecondGO.via_dt.is_year_start()", "IndexMicrosecondGO.via_dt.is_quarter_end()": "IndexMicrosecondGO.via_dt.is_quarter_end()", "IndexMicrosecondGO.via_dt.is_quarter_start()": "IndexMicrosecondGO.via_dt.is_quarter_start()", "IndexMicrosecondGO.via_dt.timetuple()": "IndexMicrosecondGO.via_dt.timetuple()", "IndexMicrosecondGO.via_dt.isoformat(sep, timespec)": "IndexMicrosecondGO.via_dt.isoformat()", "IndexMicrosecondGO.via_dt.fromisoformat()": "IndexMicrosecondGO.via_dt.fromisoformat()", "IndexMicrosecondGO.via_dt.strftime(format)": "IndexMicrosecondGO.via_dt.strftime()", "IndexMicrosecondGO.via_dt.strptime(format)": "IndexMicrosecondGO.via_dt.strptime()", "IndexMicrosecondGO.via_dt.strpdate(format)": "IndexMicrosecondGO.via_dt.strpdate()", "IndexMicrosecondGO.via_str.__getitem__(key)": "IndexMicrosecondGO.via_str.__getitem__()", "IndexMicrosecondGO.via_str.capitalize()": "IndexMicrosecondGO.via_str.capitalize()", "IndexMicrosecondGO.via_str.center(width, fillchar)": "IndexMicrosecondGO.via_str.center()", "IndexMicrosecondGO.via_str.contains(item)": "IndexMicrosecondGO.via_str.contains()", "IndexMicrosecondGO.via_str.count(sub, start, end)": "IndexMicrosecondGO.via_str.count()", "IndexMicrosecondGO.via_str.decode(encoding, errors)": "IndexMicrosecondGO.via_str.decode()", "IndexMicrosecondGO.via_str.encode(encoding, errors)": "IndexMicrosecondGO.via_str.encode()", "IndexMicrosecondGO.via_str.endswith(suffix, start, end)": "IndexMicrosecondGO.via_str.endswith()", "IndexMicrosecondGO.via_str.find(sub, start, end)": "IndexMicrosecondGO.via_str.find()", "IndexMicrosecondGO.via_str.format(format)": "IndexMicrosecondGO.via_str.format()", "IndexMicrosecondGO.via_str.index(sub, start, end)": "IndexMicrosecondGO.via_str.index()", "IndexMicrosecondGO.via_str.isalnum()": "IndexMicrosecondGO.via_str.isalnum()", "IndexMicrosecondGO.via_str.isalpha()": "IndexMicrosecondGO.via_str.isalpha()", "IndexMicrosecondGO.via_str.isdecimal()": "IndexMicrosecondGO.via_str.isdecimal()", "IndexMicrosecondGO.via_str.isdigit()": "IndexMicrosecondGO.via_str.isdigit()", "IndexMicrosecondGO.via_str.islower()": "IndexMicrosecondGO.via_str.islower()", "IndexMicrosecondGO.via_str.isnumeric()": "IndexMicrosecondGO.via_str.isnumeric()", "IndexMicrosecondGO.via_str.isspace()": "IndexMicrosecondGO.via_str.isspace()", "IndexMicrosecondGO.via_str.istitle()": "IndexMicrosecondGO.via_str.istitle()", "IndexMicrosecondGO.via_str.isupper()": "IndexMicrosecondGO.via_str.isupper()", "IndexMicrosecondGO.via_str.ljust(width, fillchar)": "IndexMicrosecondGO.via_str.ljust()", "IndexMicrosecondGO.via_str.len()": "IndexMicrosecondGO.via_str.len()", "IndexMicrosecondGO.via_str.lower()": "IndexMicrosecondGO.via_str.lower()", "IndexMicrosecondGO.via_str.lstrip(chars)": "IndexMicrosecondGO.via_str.lstrip()", "IndexMicrosecondGO.via_str.partition(sep)": "IndexMicrosecondGO.via_str.partition()", "IndexMicrosecondGO.via_str.replace(old, new, count)": "IndexMicrosecondGO.via_str.replace()", "IndexMicrosecondGO.via_str.rfind(sub, start, end)": "IndexMicrosecondGO.via_str.rfind()", "IndexMicrosecondGO.via_str.rindex(sub, start, end)": "IndexMicrosecondGO.via_str.rindex()", "IndexMicrosecondGO.via_str.rjust(width, fillchar)": "IndexMicrosecondGO.via_str.rjust()", "IndexMicrosecondGO.via_str.rpartition(sep)": "IndexMicrosecondGO.via_str.rpartition()", "IndexMicrosecondGO.via_str.rsplit(sep, maxsplit)": "IndexMicrosecondGO.via_str.rsplit()", "IndexMicrosecondGO.via_str.rstrip(chars)": "IndexMicrosecondGO.via_str.rstrip()", "IndexMicrosecondGO.via_str.split(sep, maxsplit)": "IndexMicrosecondGO.via_str.split()", "IndexMicrosecondGO.via_str.startswith(prefix, start, end)": "IndexMicrosecondGO.via_str.startswith()", "IndexMicrosecondGO.via_str.strip(chars)": "IndexMicrosecondGO.via_str.strip()", "IndexMicrosecondGO.via_str.swapcase()": "IndexMicrosecondGO.via_str.swapcase()", "IndexMicrosecondGO.via_str.title()": "IndexMicrosecondGO.via_str.title()", "IndexMicrosecondGO.via_str.upper()": "IndexMicrosecondGO.via_str.upper()", "IndexMicrosecondGO.via_str.zfill(width)": "IndexMicrosecondGO.via_str.zfill()", "IndexMicrosecondGO.via_re(pattern, flags).search(pos, endpos)": "IndexMicrosecondGO.via_re().search()", "IndexMicrosecondGO.via_re(pattern, flags).match(pos, endpos)": "IndexMicrosecondGO.via_re().match()", "IndexMicrosecondGO.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexMicrosecondGO.via_re().fullmatch()", "IndexMicrosecondGO.via_re(pattern, flags).split(maxsplit)": "IndexMicrosecondGO.via_re().split()", "IndexMicrosecondGO.via_re(pattern, flags).findall(pos, endpos)": "IndexMicrosecondGO.via_re().findall()", "IndexMicrosecondGO.via_re(pattern, flags).sub(repl, count)": "IndexMicrosecondGO.via_re().sub()", "IndexMicrosecondGO.via_re(pattern, flags).subn(repl, count)": "IndexMicrosecondGO.via_re().subn()", "IndexMicrosecondGO.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexMicrosecondGO.via_hashlib().to_bytes()", "IndexMicrosecondGO.via_hashlib(include_name, include_class, encoding).md5()": "IndexMicrosecondGO.via_hashlib().md5()", "IndexMicrosecondGO.via_hashlib(include_name, include_class, encoding).sha256()": "IndexMicrosecondGO.via_hashlib().sha256()", "IndexMicrosecondGO.via_hashlib(include_name, include_class, encoding).sha512()": "IndexMicrosecondGO.via_hashlib().sha512()", "IndexMicrosecondGO.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexMicrosecondGO.via_hashlib().sha3_256()", "IndexMicrosecondGO.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexMicrosecondGO.via_hashlib().sha3_512()", "IndexMicrosecondGO.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexMicrosecondGO.via_hashlib().shake_128()", "IndexMicrosecondGO.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexMicrosecondGO.via_hashlib().shake_256()", "IndexMicrosecondGO.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexMicrosecondGO.via_hashlib().blake2b()", "IndexMicrosecondGO.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexMicrosecondGO.via_hashlib().blake2s()", "IndexMicrosecondGO.via_type_clinic.to_hint()": "IndexMicrosecondGO.via_type_clinic.to_hint()", "IndexMicrosecondGO.via_type_clinic.check(hint, *, fail_fast)": "IndexMicrosecondGO.via_type_clinic.check()", "IndexMicrosecondGO.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexMicrosecondGO.via_type_clinic.warn()", "IndexMicrosecondGO.via_type_clinic.__call__(hint, *, fail_fast)": "IndexMicrosecondGO.via_type_clinic.__call__()", "IndexMicrosecondGO.via_type_clinic.__repr__()": "IndexMicrosecondGO.via_type_clinic.__repr__()", "IndexNanosecond.__init__(labels, *, loc_is_iloc, name)": "IndexNanosecond.__init__()", "IndexNanosecond.from_labels(labels, *, name)": "IndexNanosecond.from_labels()", "IndexNanosecond.from_pandas(value)": "IndexNanosecond.from_pandas()", "IndexNanosecond.to_html(config, style_config)": "IndexNanosecond.to_html()", "IndexNanosecond.to_html_datatables(fp, *, show, config)": "IndexNanosecond.to_html_datatables()", "IndexNanosecond.to_pandas()": "IndexNanosecond.to_pandas()", "IndexNanosecond.to_series()": "IndexNanosecond.to_series()", "IndexNanosecond.to_visidata()": "IndexNanosecond.to_visidata()", "IndexNanosecond.STATIC": "IndexNanosecond.STATIC", "IndexNanosecond.depth": "IndexNanosecond.depth", "IndexNanosecond.dtype": "IndexNanosecond.dtype", "IndexNanosecond.index_types": "IndexNanosecond.index_types", "IndexNanosecond.memory": "IndexNanosecond.memory", "IndexNanosecond.mloc": "IndexNanosecond.mloc", "IndexNanosecond.name": "IndexNanosecond.name", "IndexNanosecond.names": "IndexNanosecond.names", "IndexNanosecond.nbytes": "IndexNanosecond.nbytes", "IndexNanosecond.ndim": "IndexNanosecond.ndim", "IndexNanosecond.positions": "IndexNanosecond.positions", "IndexNanosecond.shape": "IndexNanosecond.shape", "IndexNanosecond.size": "IndexNanosecond.size", "IndexNanosecond.__array__(dtype)": "IndexNanosecond.__array__()", "IndexNanosecond.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexNanosecond.__array_ufunc__()", "IndexNanosecond.__bool__()": "IndexNanosecond.__bool__()", "IndexNanosecond.__copy__()": "IndexNanosecond.__copy__()", "IndexNanosecond.__deepcopy__(memo)": "IndexNanosecond.__deepcopy__()", "IndexNanosecond.__len__()": "IndexNanosecond.__len__()", "IndexNanosecond.all(axis, skipna, out)": "IndexNanosecond.all()", "IndexNanosecond.any(axis, skipna, out)": "IndexNanosecond.any()", "IndexNanosecond.astype(dtype)": "IndexNanosecond.astype()", "IndexNanosecond.copy()": "IndexNanosecond.copy()", "IndexNanosecond.cumprod(axis, skipna)": "IndexNanosecond.cumprod()", "IndexNanosecond.cumsum(axis, skipna)": "IndexNanosecond.cumsum()", "IndexNanosecond.difference(*others)": "IndexNanosecond.difference()", "IndexNanosecond.dropfalsy()": "IndexNanosecond.dropfalsy()", "IndexNanosecond.dropna()": "IndexNanosecond.dropna()", "IndexNanosecond.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexNanosecond.equals()", "IndexNanosecond.fillfalsy(value)": "IndexNanosecond.fillfalsy()", "IndexNanosecond.fillna(value)": "IndexNanosecond.fillna()", "IndexNanosecond.head(count)": "IndexNanosecond.head()", "IndexNanosecond.iloc_searchsorted(values, *, side_left)": "IndexNanosecond.iloc_searchsorted()", "IndexNanosecond.intersection(*others)": "IndexNanosecond.intersection()", "IndexNanosecond.isfalsy()": "IndexNanosecond.isfalsy()", "IndexNanosecond.isin(other)": "IndexNanosecond.isin()", "IndexNanosecond.isna()": "IndexNanosecond.isna()", "IndexNanosecond.label_widths_at_depth(depth_level)": "IndexNanosecond.label_widths_at_depth()", "IndexNanosecond.level_add(level, *, index_constructor)": "IndexNanosecond.level_add()", "IndexNanosecond.loc_searchsorted(values, *, side_left, fill_value)": "IndexNanosecond.loc_searchsorted()", "IndexNanosecond.loc_to_iloc(key)": "IndexNanosecond.loc_to_iloc()", "IndexNanosecond.max(axis, skipna, out)": "IndexNanosecond.max()", "IndexNanosecond.mean(axis, skipna, out)": "IndexNanosecond.mean()", "IndexNanosecond.median(axis, skipna, out)": "IndexNanosecond.median()", "IndexNanosecond.min(axis, skipna, out)": "IndexNanosecond.min()", "IndexNanosecond.notfalsy()": "IndexNanosecond.notfalsy()", "IndexNanosecond.notna()": "IndexNanosecond.notna()", "IndexNanosecond.prod(axis, skipna, allna, out)": "IndexNanosecond.prod()", "IndexNanosecond.relabel(mapper)": "IndexNanosecond.relabel()", "IndexNanosecond.rename(name)": "IndexNanosecond.rename()", "IndexNanosecond.roll(shift)": "IndexNanosecond.roll()", "IndexNanosecond.sample(count, *, seed)": "IndexNanosecond.sample()", "IndexNanosecond.sort(ascending, kind, key)": "IndexNanosecond.sort()", "IndexNanosecond.std(axis, skipna, ddof, out)": "IndexNanosecond.std()", "IndexNanosecond.sum(axis, skipna, allna, out)": "IndexNanosecond.sum()", "IndexNanosecond.tail(count)": "IndexNanosecond.tail()", "IndexNanosecond.union(*others)": "IndexNanosecond.union()", "IndexNanosecond.unique(depth_level, order_by_occurrence)": "IndexNanosecond.unique()", "IndexNanosecond.values_at_depth(depth_level)": "IndexNanosecond.values_at_depth()", "IndexNanosecond.var(axis, skipna, ddof, out)": "IndexNanosecond.var()", "IndexNanosecond.__contains__(value)": "IndexNanosecond.__contains__()", "IndexNanosecond.__iter__()": "IndexNanosecond.__iter__()", "IndexNanosecond.__reversed__()": "IndexNanosecond.__reversed__()", "IndexNanosecond.values": "IndexNanosecond.values", "IndexNanosecond.interface": "IndexNanosecond.interface", "IndexNanosecond.__repr__()": "IndexNanosecond.__repr__()", "IndexNanosecond.__str__()": "IndexNanosecond.__str__()", "IndexNanosecond.display(config, *, style_config)": "IndexNanosecond.display()", "IndexNanosecond.display_tall(config)": "IndexNanosecond.display_tall()", "IndexNanosecond.display_wide(config)": "IndexNanosecond.display_wide()", "IndexNanosecond.drop.iloc[key]": "IndexNanosecond.drop.iloc[]", "IndexNanosecond.drop.loc[key]": "IndexNanosecond.drop.loc[]", "IndexNanosecond.[key]": "IndexNanosecond.[]", "IndexNanosecond.iloc[key]": "IndexNanosecond.iloc[]", "IndexNanosecond.loc[key]": "IndexNanosecond.loc[]", "IndexNanosecond.iter_label(depth_level)": "IndexNanosecond.iter_label()", "IndexNanosecond.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexNanosecond.iter_label().apply()", "IndexNanosecond.iter_label(depth_level).apply_iter(func)": "IndexNanosecond.iter_label().apply_iter()", "IndexNanosecond.iter_label(depth_level).apply_iter_items(func)": "IndexNanosecond.iter_label().apply_iter_items()", "IndexNanosecond.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexNanosecond.iter_label().apply_pool()", "IndexNanosecond.__add__(other)": "IndexNanosecond.__add__()", "IndexNanosecond.__and__(other)": "IndexNanosecond.__and__()", "IndexNanosecond.__eq__(other)": "IndexNanosecond.__eq__()", "IndexNanosecond.__floordiv__(other)": "IndexNanosecond.__floordiv__()", "IndexNanosecond.__ge__(other)": "IndexNanosecond.__ge__()", "IndexNanosecond.__gt__(other)": "IndexNanosecond.__gt__()", "IndexNanosecond.__le__(other)": "IndexNanosecond.__le__()", "IndexNanosecond.__lt__(other)": "IndexNanosecond.__lt__()", "IndexNanosecond.__matmul__(other)": "IndexNanosecond.__matmul__()", "IndexNanosecond.__mod__(other)": "IndexNanosecond.__mod__()", "IndexNanosecond.__mul__(other)": "IndexNanosecond.__mul__()", "IndexNanosecond.__ne__(other)": "IndexNanosecond.__ne__()", "IndexNanosecond.__or__(other)": "IndexNanosecond.__or__()", "IndexNanosecond.__pow__(other)": "IndexNanosecond.__pow__()", "IndexNanosecond.__radd__(other)": "IndexNanosecond.__radd__()", "IndexNanosecond.__rfloordiv__(other)": "IndexNanosecond.__rfloordiv__()", "IndexNanosecond.__rmatmul__(other)": "IndexNanosecond.__rmatmul__()", "IndexNanosecond.__rmul__(other)": "IndexNanosecond.__rmul__()", "IndexNanosecond.__rshift__(other)": "IndexNanosecond.__rshift__()", "IndexNanosecond.__rsub__(other)": "IndexNanosecond.__rsub__()", "IndexNanosecond.__rtruediv__(other)": "IndexNanosecond.__rtruediv__()", "IndexNanosecond.__sub__(other)": "IndexNanosecond.__sub__()", "IndexNanosecond.__truediv__(other)": "IndexNanosecond.__truediv__()", "IndexNanosecond.__xor__(other)": "IndexNanosecond.__xor__()", "IndexNanosecond.__abs__()": "IndexNanosecond.__abs__()", "IndexNanosecond.__invert__()": "IndexNanosecond.__invert__()", "IndexNanosecond.__neg__()": "IndexNanosecond.__neg__()", "IndexNanosecond.__pos__()": "IndexNanosecond.__pos__()", "IndexNanosecond.via_values.apply(func, *args, **kwargs)": "IndexNanosecond.via_values.apply()", "IndexNanosecond.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexNanosecond.via_values.__array_ufunc__()", "IndexNanosecond.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexNanosecond.via_values.__call__()", "IndexNanosecond.via_dt.__call__(*, fill_value)": "IndexNanosecond.via_dt.__call__()", "IndexNanosecond.via_dt.year": "IndexNanosecond.via_dt.year", "IndexNanosecond.via_dt.year_month": "IndexNanosecond.via_dt.year_month", "IndexNanosecond.via_dt.year_quarter": "IndexNanosecond.via_dt.year_quarter", "IndexNanosecond.via_dt.month": "IndexNanosecond.via_dt.month", "IndexNanosecond.via_dt.day": "IndexNanosecond.via_dt.day", "IndexNanosecond.via_dt.hour": "IndexNanosecond.via_dt.hour", "IndexNanosecond.via_dt.minute": "IndexNanosecond.via_dt.minute", "IndexNanosecond.via_dt.second": "IndexNanosecond.via_dt.second", "IndexNanosecond.via_dt.weekday()": "IndexNanosecond.via_dt.weekday()", "IndexNanosecond.via_dt.quarter()": "IndexNanosecond.via_dt.quarter()", "IndexNanosecond.via_dt.is_month_end()": "IndexNanosecond.via_dt.is_month_end()", "IndexNanosecond.via_dt.is_month_start()": "IndexNanosecond.via_dt.is_month_start()", "IndexNanosecond.via_dt.is_year_end()": "IndexNanosecond.via_dt.is_year_end()", "IndexNanosecond.via_dt.is_year_start()": "IndexNanosecond.via_dt.is_year_start()", "IndexNanosecond.via_dt.is_quarter_end()": "IndexNanosecond.via_dt.is_quarter_end()", "IndexNanosecond.via_dt.is_quarter_start()": "IndexNanosecond.via_dt.is_quarter_start()", "IndexNanosecond.via_dt.timetuple()": "IndexNanosecond.via_dt.timetuple()", "IndexNanosecond.via_dt.isoformat(sep, timespec)": "IndexNanosecond.via_dt.isoformat()", "IndexNanosecond.via_dt.fromisoformat()": "IndexNanosecond.via_dt.fromisoformat()", "IndexNanosecond.via_dt.strftime(format)": "IndexNanosecond.via_dt.strftime()", "IndexNanosecond.via_dt.strptime(format)": "IndexNanosecond.via_dt.strptime()", "IndexNanosecond.via_dt.strpdate(format)": "IndexNanosecond.via_dt.strpdate()", "IndexNanosecond.via_str.__getitem__(key)": "IndexNanosecond.via_str.__getitem__()", "IndexNanosecond.via_str.capitalize()": "IndexNanosecond.via_str.capitalize()", "IndexNanosecond.via_str.center(width, fillchar)": "IndexNanosecond.via_str.center()", "IndexNanosecond.via_str.contains(item)": "IndexNanosecond.via_str.contains()", "IndexNanosecond.via_str.count(sub, start, end)": "IndexNanosecond.via_str.count()", "IndexNanosecond.via_str.decode(encoding, errors)": "IndexNanosecond.via_str.decode()", "IndexNanosecond.via_str.encode(encoding, errors)": "IndexNanosecond.via_str.encode()", "IndexNanosecond.via_str.endswith(suffix, start, end)": "IndexNanosecond.via_str.endswith()", "IndexNanosecond.via_str.find(sub, start, end)": "IndexNanosecond.via_str.find()", "IndexNanosecond.via_str.format(format)": "IndexNanosecond.via_str.format()", "IndexNanosecond.via_str.index(sub, start, end)": "IndexNanosecond.via_str.index()", "IndexNanosecond.via_str.isalnum()": "IndexNanosecond.via_str.isalnum()", "IndexNanosecond.via_str.isalpha()": "IndexNanosecond.via_str.isalpha()", "IndexNanosecond.via_str.isdecimal()": "IndexNanosecond.via_str.isdecimal()", "IndexNanosecond.via_str.isdigit()": "IndexNanosecond.via_str.isdigit()", "IndexNanosecond.via_str.islower()": "IndexNanosecond.via_str.islower()", "IndexNanosecond.via_str.isnumeric()": "IndexNanosecond.via_str.isnumeric()", "IndexNanosecond.via_str.isspace()": "IndexNanosecond.via_str.isspace()", "IndexNanosecond.via_str.istitle()": "IndexNanosecond.via_str.istitle()", "IndexNanosecond.via_str.isupper()": "IndexNanosecond.via_str.isupper()", "IndexNanosecond.via_str.ljust(width, fillchar)": "IndexNanosecond.via_str.ljust()", "IndexNanosecond.via_str.len()": "IndexNanosecond.via_str.len()", "IndexNanosecond.via_str.lower()": "IndexNanosecond.via_str.lower()", "IndexNanosecond.via_str.lstrip(chars)": "IndexNanosecond.via_str.lstrip()", "IndexNanosecond.via_str.partition(sep)": "IndexNanosecond.via_str.partition()", "IndexNanosecond.via_str.replace(old, new, count)": "IndexNanosecond.via_str.replace()", "IndexNanosecond.via_str.rfind(sub, start, end)": "IndexNanosecond.via_str.rfind()", "IndexNanosecond.via_str.rindex(sub, start, end)": "IndexNanosecond.via_str.rindex()", "IndexNanosecond.via_str.rjust(width, fillchar)": "IndexNanosecond.via_str.rjust()", "IndexNanosecond.via_str.rpartition(sep)": "IndexNanosecond.via_str.rpartition()", "IndexNanosecond.via_str.rsplit(sep, maxsplit)": "IndexNanosecond.via_str.rsplit()", "IndexNanosecond.via_str.rstrip(chars)": "IndexNanosecond.via_str.rstrip()", "IndexNanosecond.via_str.split(sep, maxsplit)": "IndexNanosecond.via_str.split()", "IndexNanosecond.via_str.startswith(prefix, start, end)": "IndexNanosecond.via_str.startswith()", "IndexNanosecond.via_str.strip(chars)": "IndexNanosecond.via_str.strip()", "IndexNanosecond.via_str.swapcase()": "IndexNanosecond.via_str.swapcase()", "IndexNanosecond.via_str.title()": "IndexNanosecond.via_str.title()", "IndexNanosecond.via_str.upper()": "IndexNanosecond.via_str.upper()", "IndexNanosecond.via_str.zfill(width)": "IndexNanosecond.via_str.zfill()", "IndexNanosecond.via_re(pattern, flags).search(pos, endpos)": "IndexNanosecond.via_re().search()", "IndexNanosecond.via_re(pattern, flags).match(pos, endpos)": "IndexNanosecond.via_re().match()", "IndexNanosecond.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexNanosecond.via_re().fullmatch()", "IndexNanosecond.via_re(pattern, flags).split(maxsplit)": "IndexNanosecond.via_re().split()", "IndexNanosecond.via_re(pattern, flags).findall(pos, endpos)": "IndexNanosecond.via_re().findall()", "IndexNanosecond.via_re(pattern, flags).sub(repl, count)": "IndexNanosecond.via_re().sub()", "IndexNanosecond.via_re(pattern, flags).subn(repl, count)": "IndexNanosecond.via_re().subn()", "IndexNanosecond.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexNanosecond.via_hashlib().to_bytes()", "IndexNanosecond.via_hashlib(include_name, include_class, encoding).md5()": "IndexNanosecond.via_hashlib().md5()", "IndexNanosecond.via_hashlib(include_name, include_class, encoding).sha256()": "IndexNanosecond.via_hashlib().sha256()", "IndexNanosecond.via_hashlib(include_name, include_class, encoding).sha512()": "IndexNanosecond.via_hashlib().sha512()", "IndexNanosecond.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexNanosecond.via_hashlib().sha3_256()", "IndexNanosecond.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexNanosecond.via_hashlib().sha3_512()", "IndexNanosecond.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexNanosecond.via_hashlib().shake_128()", "IndexNanosecond.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexNanosecond.via_hashlib().shake_256()", "IndexNanosecond.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexNanosecond.via_hashlib().blake2b()", "IndexNanosecond.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexNanosecond.via_hashlib().blake2s()", "IndexNanosecond.via_type_clinic.to_hint()": "IndexNanosecond.via_type_clinic.to_hint()", "IndexNanosecond.via_type_clinic.check(hint, *, fail_fast)": "IndexNanosecond.via_type_clinic.check()", "IndexNanosecond.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexNanosecond.via_type_clinic.warn()", "IndexNanosecond.via_type_clinic.__call__(hint, *, fail_fast)": "IndexNanosecond.via_type_clinic.__call__()", "IndexNanosecond.via_type_clinic.__repr__()": "IndexNanosecond.via_type_clinic.__repr__()", "IndexNanosecondGO.__init__(labels, *, loc_is_iloc, name)": "IndexNanosecondGO.__init__()", "IndexNanosecondGO.from_labels(labels, *, name)": "IndexNanosecondGO.from_labels()", "IndexNanosecondGO.from_pandas(value)": "IndexNanosecondGO.from_pandas()", "IndexNanosecondGO.to_html(config, style_config)": "IndexNanosecondGO.to_html()", "IndexNanosecondGO.to_html_datatables(fp, *, show, config)": "IndexNanosecondGO.to_html_datatables()", "IndexNanosecondGO.to_pandas()": "IndexNanosecondGO.to_pandas()", "IndexNanosecondGO.to_series()": "IndexNanosecondGO.to_series()", "IndexNanosecondGO.to_visidata()": "IndexNanosecondGO.to_visidata()", "IndexNanosecondGO.STATIC": "IndexNanosecondGO.STATIC", "IndexNanosecondGO.depth": "IndexNanosecondGO.depth", "IndexNanosecondGO.dtype": "IndexNanosecondGO.dtype", "IndexNanosecondGO.index_types": "IndexNanosecondGO.index_types", "IndexNanosecondGO.memory": "IndexNanosecondGO.memory", "IndexNanosecondGO.mloc": "IndexNanosecondGO.mloc", "IndexNanosecondGO.name": "IndexNanosecondGO.name", "IndexNanosecondGO.names": "IndexNanosecondGO.names", "IndexNanosecondGO.nbytes": "IndexNanosecondGO.nbytes", "IndexNanosecondGO.ndim": "IndexNanosecondGO.ndim", "IndexNanosecondGO.positions": "IndexNanosecondGO.positions", "IndexNanosecondGO.shape": "IndexNanosecondGO.shape", "IndexNanosecondGO.size": "IndexNanosecondGO.size", "IndexNanosecondGO.__array__(dtype)": "IndexNanosecondGO.__array__()", "IndexNanosecondGO.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexNanosecondGO.__array_ufunc__()", "IndexNanosecondGO.__bool__()": "IndexNanosecondGO.__bool__()", "IndexNanosecondGO.__copy__()": "IndexNanosecondGO.__copy__()", "IndexNanosecondGO.__deepcopy__(memo)": "IndexNanosecondGO.__deepcopy__()", "IndexNanosecondGO.__len__()": "IndexNanosecondGO.__len__()", "IndexNanosecondGO.all(axis, skipna, out)": "IndexNanosecondGO.all()", "IndexNanosecondGO.any(axis, skipna, out)": "IndexNanosecondGO.any()", "IndexNanosecondGO.append(value)": "IndexNanosecondGO.append()", "IndexNanosecondGO.astype(dtype)": "IndexNanosecondGO.astype()", "IndexNanosecondGO.copy()": "IndexNanosecondGO.copy()", "IndexNanosecondGO.cumprod(axis, skipna)": "IndexNanosecondGO.cumprod()", "IndexNanosecondGO.cumsum(axis, skipna)": "IndexNanosecondGO.cumsum()", "IndexNanosecondGO.difference(*others)": "IndexNanosecondGO.difference()", "IndexNanosecondGO.dropfalsy()": "IndexNanosecondGO.dropfalsy()", "IndexNanosecondGO.dropna()": "IndexNanosecondGO.dropna()", "IndexNanosecondGO.equals(other, *, compare_name, compare_dtype, compare_class, skipna)": "IndexNanosecondGO.equals()", "IndexNanosecondGO.extend(values)": "IndexNanosecondGO.extend()", "IndexNanosecondGO.fillfalsy(value)": "IndexNanosecondGO.fillfalsy()", "IndexNanosecondGO.fillna(value)": "IndexNanosecondGO.fillna()", "IndexNanosecondGO.head(count)": "IndexNanosecondGO.head()", "IndexNanosecondGO.iloc_searchsorted(values, *, side_left)": "IndexNanosecondGO.iloc_searchsorted()", "IndexNanosecondGO.intersection(*others)": "IndexNanosecondGO.intersection()", "IndexNanosecondGO.isfalsy()": "IndexNanosecondGO.isfalsy()", "IndexNanosecondGO.isin(other)": "IndexNanosecondGO.isin()", "IndexNanosecondGO.isna()": "IndexNanosecondGO.isna()", "IndexNanosecondGO.label_widths_at_depth(depth_level)": "IndexNanosecondGO.label_widths_at_depth()", "IndexNanosecondGO.level_add(level, *, index_constructor)": "IndexNanosecondGO.level_add()", "IndexNanosecondGO.loc_searchsorted(values, *, side_left, fill_value)": "IndexNanosecondGO.loc_searchsorted()", "IndexNanosecondGO.loc_to_iloc(key)": "IndexNanosecondGO.loc_to_iloc()", "IndexNanosecondGO.max(axis, skipna, out)": "IndexNanosecondGO.max()", "IndexNanosecondGO.mean(axis, skipna, out)": "IndexNanosecondGO.mean()", "IndexNanosecondGO.median(axis, skipna, out)": "IndexNanosecondGO.median()", "IndexNanosecondGO.min(axis, skipna, out)": "IndexNanosecondGO.min()", "IndexNanosecondGO.notfalsy()": "IndexNanosecondGO.notfalsy()", "IndexNanosecondGO.notna()": "IndexNanosecondGO.notna()", "IndexNanosecondGO.prod(axis, skipna, allna, out)": "IndexNanosecondGO.prod()", "IndexNanosecondGO.relabel(mapper)": "IndexNanosecondGO.relabel()", "IndexNanosecondGO.rename(name)": "IndexNanosecondGO.rename()", "IndexNanosecondGO.roll(shift)": "IndexNanosecondGO.roll()", "IndexNanosecondGO.sample(count, *, seed)": "IndexNanosecondGO.sample()", "IndexNanosecondGO.sort(ascending, kind, key)": "IndexNanosecondGO.sort()", "IndexNanosecondGO.std(axis, skipna, ddof, out)": "IndexNanosecondGO.std()", "IndexNanosecondGO.sum(axis, skipna, allna, out)": "IndexNanosecondGO.sum()", "IndexNanosecondGO.tail(count)": "IndexNanosecondGO.tail()", "IndexNanosecondGO.union(*others)": "IndexNanosecondGO.union()", "IndexNanosecondGO.unique(depth_level, order_by_occurrence)": "IndexNanosecondGO.unique()", "IndexNanosecondGO.values_at_depth(depth_level)": "IndexNanosecondGO.values_at_depth()", "IndexNanosecondGO.var(axis, skipna, ddof, out)": "IndexNanosecondGO.var()", "IndexNanosecondGO.__contains__(value)": "IndexNanosecondGO.__contains__()", "IndexNanosecondGO.__iter__()": "IndexNanosecondGO.__iter__()", "IndexNanosecondGO.__reversed__()": "IndexNanosecondGO.__reversed__()", "IndexNanosecondGO.values": "IndexNanosecondGO.values", "IndexNanosecondGO.interface": "IndexNanosecondGO.interface", "IndexNanosecondGO.__repr__()": "IndexNanosecondGO.__repr__()", "IndexNanosecondGO.__str__()": "IndexNanosecondGO.__str__()", "IndexNanosecondGO.display(config, *, style_config)": "IndexNanosecondGO.display()", "IndexNanosecondGO.display_tall(config)": "IndexNanosecondGO.display_tall()", "IndexNanosecondGO.display_wide(config)": "IndexNanosecondGO.display_wide()", "IndexNanosecondGO.drop.iloc[key]": "IndexNanosecondGO.drop.iloc[]", "IndexNanosecondGO.drop.loc[key]": "IndexNanosecondGO.drop.loc[]", "IndexNanosecondGO.[key]": "IndexNanosecondGO.[]", "IndexNanosecondGO.iloc[key]": "IndexNanosecondGO.iloc[]", "IndexNanosecondGO.loc[key]": "IndexNanosecondGO.loc[]", "IndexNanosecondGO.iter_label(depth_level)": "IndexNanosecondGO.iter_label()", "IndexNanosecondGO.iter_label(depth_level).apply(func, *, dtype, name, index_constructor, columns_constructor)": "IndexNanosecondGO.iter_label().apply()", "IndexNanosecondGO.iter_label(depth_level).apply_iter(func)": "IndexNanosecondGO.iter_label().apply_iter()", "IndexNanosecondGO.iter_label(depth_level).apply_iter_items(func)": "IndexNanosecondGO.iter_label().apply_iter_items()", "IndexNanosecondGO.iter_label(depth_level).apply_pool(func, *, dtype, name, index_constructor, max_workers, chunksize, use_threads)": "IndexNanosecondGO.iter_label().apply_pool()", "IndexNanosecondGO.__add__(other)": "IndexNanosecondGO.__add__()", "IndexNanosecondGO.__and__(other)": "IndexNanosecondGO.__and__()", "IndexNanosecondGO.__eq__(other)": "IndexNanosecondGO.__eq__()", "IndexNanosecondGO.__floordiv__(other)": "IndexNanosecondGO.__floordiv__()", "IndexNanosecondGO.__ge__(other)": "IndexNanosecondGO.__ge__()", "IndexNanosecondGO.__gt__(other)": "IndexNanosecondGO.__gt__()", "IndexNanosecondGO.__le__(other)": "IndexNanosecondGO.__le__()", "IndexNanosecondGO.__lt__(other)": "IndexNanosecondGO.__lt__()", "IndexNanosecondGO.__matmul__(other)": "IndexNanosecondGO.__matmul__()", "IndexNanosecondGO.__mod__(other)": "IndexNanosecondGO.__mod__()", "IndexNanosecondGO.__mul__(other)": "IndexNanosecondGO.__mul__()", "IndexNanosecondGO.__ne__(other)": "IndexNanosecondGO.__ne__()", "IndexNanosecondGO.__or__(other)": "IndexNanosecondGO.__or__()", "IndexNanosecondGO.__pow__(other)": "IndexNanosecondGO.__pow__()", "IndexNanosecondGO.__radd__(other)": "IndexNanosecondGO.__radd__()", "IndexNanosecondGO.__rfloordiv__(other)": "IndexNanosecondGO.__rfloordiv__()", "IndexNanosecondGO.__rmatmul__(other)": "IndexNanosecondGO.__rmatmul__()", "IndexNanosecondGO.__rmul__(other)": "IndexNanosecondGO.__rmul__()", "IndexNanosecondGO.__rshift__(other)": "IndexNanosecondGO.__rshift__()", "IndexNanosecondGO.__rsub__(other)": "IndexNanosecondGO.__rsub__()", "IndexNanosecondGO.__rtruediv__(other)": "IndexNanosecondGO.__rtruediv__()", "IndexNanosecondGO.__sub__(other)": "IndexNanosecondGO.__sub__()", "IndexNanosecondGO.__truediv__(other)": "IndexNanosecondGO.__truediv__()", "IndexNanosecondGO.__xor__(other)": "IndexNanosecondGO.__xor__()", "IndexNanosecondGO.__abs__()": "IndexNanosecondGO.__abs__()", "IndexNanosecondGO.__invert__()": "IndexNanosecondGO.__invert__()", "IndexNanosecondGO.__neg__()": "IndexNanosecondGO.__neg__()", "IndexNanosecondGO.__pos__()": "IndexNanosecondGO.__pos__()", "IndexNanosecondGO.via_values.apply(func, *args, **kwargs)": "IndexNanosecondGO.via_values.apply()", "IndexNanosecondGO.via_values.__array_ufunc__(ufunc, method, *args, **kwargs)": "IndexNanosecondGO.via_values.__array_ufunc__()", "IndexNanosecondGO.via_values.__call__(*, consolidate_blocks, unify_blocks, dtype)": "IndexNanosecondGO.via_values.__call__()", "IndexNanosecondGO.via_dt.__call__(*, fill_value)": "IndexNanosecondGO.via_dt.__call__()", "IndexNanosecondGO.via_dt.year": "IndexNanosecondGO.via_dt.year", "IndexNanosecondGO.via_dt.year_month": "IndexNanosecondGO.via_dt.year_month", "IndexNanosecondGO.via_dt.year_quarter": "IndexNanosecondGO.via_dt.year_quarter", "IndexNanosecondGO.via_dt.month": "IndexNanosecondGO.via_dt.month", "IndexNanosecondGO.via_dt.day": "IndexNanosecondGO.via_dt.day", "IndexNanosecondGO.via_dt.hour": "IndexNanosecondGO.via_dt.hour", "IndexNanosecondGO.via_dt.minute": "IndexNanosecondGO.via_dt.minute", "IndexNanosecondGO.via_dt.second": "IndexNanosecondGO.via_dt.second", "IndexNanosecondGO.via_dt.weekday()": "IndexNanosecondGO.via_dt.weekday()", "IndexNanosecondGO.via_dt.quarter()": "IndexNanosecondGO.via_dt.quarter()", "IndexNanosecondGO.via_dt.is_month_end()": "IndexNanosecondGO.via_dt.is_month_end()", "IndexNanosecondGO.via_dt.is_month_start()": "IndexNanosecondGO.via_dt.is_month_start()", "IndexNanosecondGO.via_dt.is_year_end()": "IndexNanosecondGO.via_dt.is_year_end()", "IndexNanosecondGO.via_dt.is_year_start()": "IndexNanosecondGO.via_dt.is_year_start()", "IndexNanosecondGO.via_dt.is_quarter_end()": "IndexNanosecondGO.via_dt.is_quarter_end()", "IndexNanosecondGO.via_dt.is_quarter_start()": "IndexNanosecondGO.via_dt.is_quarter_start()", "IndexNanosecondGO.via_dt.timetuple()": "IndexNanosecondGO.via_dt.timetuple()", "IndexNanosecondGO.via_dt.isoformat(sep, timespec)": "IndexNanosecondGO.via_dt.isoformat()", "IndexNanosecondGO.via_dt.fromisoformat()": "IndexNanosecondGO.via_dt.fromisoformat()", "IndexNanosecondGO.via_dt.strftime(format)": "IndexNanosecondGO.via_dt.strftime()", "IndexNanosecondGO.via_dt.strptime(format)": "IndexNanosecondGO.via_dt.strptime()", "IndexNanosecondGO.via_dt.strpdate(format)": "IndexNanosecondGO.via_dt.strpdate()", "IndexNanosecondGO.via_str.__getitem__(key)": "IndexNanosecondGO.via_str.__getitem__()", "IndexNanosecondGO.via_str.capitalize()": "IndexNanosecondGO.via_str.capitalize()", "IndexNanosecondGO.via_str.center(width, fillchar)": "IndexNanosecondGO.via_str.center()", "IndexNanosecondGO.via_str.contains(item)": "IndexNanosecondGO.via_str.contains()", "IndexNanosecondGO.via_str.count(sub, start, end)": "IndexNanosecondGO.via_str.count()", "IndexNanosecondGO.via_str.decode(encoding, errors)": "IndexNanosecondGO.via_str.decode()", "IndexNanosecondGO.via_str.encode(encoding, errors)": "IndexNanosecondGO.via_str.encode()", "IndexNanosecondGO.via_str.endswith(suffix, start, end)": "IndexNanosecondGO.via_str.endswith()", "IndexNanosecondGO.via_str.find(sub, start, end)": "IndexNanosecondGO.via_str.find()", "IndexNanosecondGO.via_str.format(format)": "IndexNanosecondGO.via_str.format()", "IndexNanosecondGO.via_str.index(sub, start, end)": "IndexNanosecondGO.via_str.index()", "IndexNanosecondGO.via_str.isalnum()": "IndexNanosecondGO.via_str.isalnum()", "IndexNanosecondGO.via_str.isalpha()": "IndexNanosecondGO.via_str.isalpha()", "IndexNanosecondGO.via_str.isdecimal()": "IndexNanosecondGO.via_str.isdecimal()", "IndexNanosecondGO.via_str.isdigit()": "IndexNanosecondGO.via_str.isdigit()", "IndexNanosecondGO.via_str.islower()": "IndexNanosecondGO.via_str.islower()", "IndexNanosecondGO.via_str.isnumeric()": "IndexNanosecondGO.via_str.isnumeric()", "IndexNanosecondGO.via_str.isspace()": "IndexNanosecondGO.via_str.isspace()", "IndexNanosecondGO.via_str.istitle()": "IndexNanosecondGO.via_str.istitle()", "IndexNanosecondGO.via_str.isupper()": "IndexNanosecondGO.via_str.isupper()", "IndexNanosecondGO.via_str.ljust(width, fillchar)": "IndexNanosecondGO.via_str.ljust()", "IndexNanosecondGO.via_str.len()": "IndexNanosecondGO.via_str.len()", "IndexNanosecondGO.via_str.lower()": "IndexNanosecondGO.via_str.lower()", "IndexNanosecondGO.via_str.lstrip(chars)": "IndexNanosecondGO.via_str.lstrip()", "IndexNanosecondGO.via_str.partition(sep)": "IndexNanosecondGO.via_str.partition()", "IndexNanosecondGO.via_str.replace(old, new, count)": "IndexNanosecondGO.via_str.replace()", "IndexNanosecondGO.via_str.rfind(sub, start, end)": "IndexNanosecondGO.via_str.rfind()", "IndexNanosecondGO.via_str.rindex(sub, start, end)": "IndexNanosecondGO.via_str.rindex()", "IndexNanosecondGO.via_str.rjust(width, fillchar)": "IndexNanosecondGO.via_str.rjust()", "IndexNanosecondGO.via_str.rpartition(sep)": "IndexNanosecondGO.via_str.rpartition()", "IndexNanosecondGO.via_str.rsplit(sep, maxsplit)": "IndexNanosecondGO.via_str.rsplit()", "IndexNanosecondGO.via_str.rstrip(chars)": "IndexNanosecondGO.via_str.rstrip()", "IndexNanosecondGO.via_str.split(sep, maxsplit)": "IndexNanosecondGO.via_str.split()", "IndexNanosecondGO.via_str.startswith(prefix, start, end)": "IndexNanosecondGO.via_str.startswith()", "IndexNanosecondGO.via_str.strip(chars)": "IndexNanosecondGO.via_str.strip()", "IndexNanosecondGO.via_str.swapcase()": "IndexNanosecondGO.via_str.swapcase()", "IndexNanosecondGO.via_str.title()": "IndexNanosecondGO.via_str.title()", "IndexNanosecondGO.via_str.upper()": "IndexNanosecondGO.via_str.upper()", "IndexNanosecondGO.via_str.zfill(width)": "IndexNanosecondGO.via_str.zfill()", "IndexNanosecondGO.via_re(pattern, flags).search(pos, endpos)": "IndexNanosecondGO.via_re().search()", "IndexNanosecondGO.via_re(pattern, flags).match(pos, endpos)": "IndexNanosecondGO.via_re().match()", "IndexNanosecondGO.via_re(pattern, flags).fullmatch(pos, endpos)": "IndexNanosecondGO.via_re().fullmatch()", "IndexNanosecondGO.via_re(pattern, flags).split(maxsplit)": "IndexNanosecondGO.via_re().split()", "IndexNanosecondGO.via_re(pattern, flags).findall(pos, endpos)": "IndexNanosecondGO.via_re().findall()", "IndexNanosecondGO.via_re(pattern, flags).sub(repl, count)": "IndexNanosecondGO.via_re().sub()", "IndexNanosecondGO.via_re(pattern, flags).subn(repl, count)": "IndexNanosecondGO.via_re().subn()", "IndexNanosecondGO.via_hashlib(include_name, include_class, encoding).to_bytes()": "IndexNanosecondGO.via_hashlib().to_bytes()", "IndexNanosecondGO.via_hashlib(include_name, include_class, encoding).md5()": "IndexNanosecondGO.via_hashlib().md5()", "IndexNanosecondGO.via_hashlib(include_name, include_class, encoding).sha256()": "IndexNanosecondGO.via_hashlib().sha256()", "IndexNanosecondGO.via_hashlib(include_name, include_class, encoding).sha512()": "IndexNanosecondGO.via_hashlib().sha512()", "IndexNanosecondGO.via_hashlib(include_name, include_class, encoding).sha3_256()": "IndexNanosecondGO.via_hashlib().sha3_256()", "IndexNanosecondGO.via_hashlib(include_name, include_class, encoding).sha3_512()": "IndexNanosecondGO.via_hashlib().sha3_512()", "IndexNanosecondGO.via_hashlib(include_name, include_class, encoding).shake_128()": "IndexNanosecondGO.via_hashlib().shake_128()", "IndexNanosecondGO.via_hashlib(include_name, include_class, encoding).shake_256()": "IndexNanosecondGO.via_hashlib().shake_256()", "IndexNanosecondGO.via_hashlib(include_name, include_class, encoding).blake2b(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexNanosecondGO.via_hashlib().blake2b()", "IndexNanosecondGO.via_hashlib(include_name, include_class, encoding).blake2s(*, digest_size, key, salt, person, fanout, depth, leaf_size, node_offset, node_depth, inner_size, last_node)": "IndexNanosecondGO.via_hashlib().blake2s()", "IndexNanosecondGO.via_type_clinic.to_hint()": "IndexNanosecondGO.via_type_clinic.to_hint()", "IndexNanosecondGO.via_type_clinic.check(hint, *, fail_fast)": "IndexNanosecondGO.via_type_clinic.check()", "IndexNanosecondGO.via_type_clinic.warn(hint, *, fail_fast, category)": "IndexNanosecondGO.via_type_clinic.warn()", "IndexNanosecondGO.via_type_clinic.__call__(hint, *, fail_fast)": "IndexNanosecondGO.via_type_clinic.__call__()", "IndexNanosecondGO.via_type_clinic.__repr__()": "IndexNanosecondGO.via_type_clinic.__repr__()", "HLoc.__init__(key)": "HLoc.__init__()", "HLoc.STATIC": "HLoc.STATIC", "HLoc.key": "HLoc.key", "HLoc.__len__()": "HLoc.__len__()", "HLoc.__iter__()": "HLoc.__iter__()", "HLoc.__repr__()": "HLoc.__repr__()", "HLoc.__str__()": "HLoc.__str__()", "ILoc.__init__(key)": "ILoc.__init__()", "ILoc.STATIC": "ILoc.STATIC", "ILoc.key": "ILoc.key", "ILoc.__repr__()": "ILoc.__repr__()", "ILoc.__str__()": "ILoc.__str__()", "TypeClinic.__init__(value)": "TypeClinic.__init__()", "TypeClinic.to_hint()": "TypeClinic.to_hint()", "TypeClinic.__call__(hint, *, fail_fast)": "TypeClinic.__call__()", "TypeClinic.check(hint, *, fail_fast)": "TypeClinic.check()", "TypeClinic.warn(hint, *, fail_fast, category)": "TypeClinic.warn()", "TypeClinic.__repr__()": "TypeClinic.__repr__()", "TypeClinic.__str__()": "TypeClinic.__str__()", "CallGuard.check(func, *, fail_fast)": "CallGuard.check()", "CallGuard.warn(func, *, fail_fast, category)": "CallGuard.warn()", "ClinicResult.__init__(log)": "ClinicResult.__init__()", "ClinicResult.to_str()": "ClinicResult.to_str()", "ClinicResult.validated": "ClinicResult.validated", "ClinicResult.__bool__()": "ClinicResult.__bool__()", "ClinicResult.__len__()": "ClinicResult.__len__()", "ClinicResult.__iter__()": "ClinicResult.__iter__()", "ClinicResult.__repr__()": "ClinicResult.__repr__()", "ClinicResult.__str__()": "ClinicResult.__str__()", "Require.Apply(func)": "Require.Apply()", "Require.LabelsMatch(*labels)": "Require.LabelsMatch()", "Require.LabelsOrder(*labels)": "Require.LabelsOrder()", "Require.Len(len)": "Require.Len()", "Require.Name(name)": "Require.Name()", "Require.Shape(*shape)": "Require.Shape()", "WWW.from_file(url, *, encoding, in_memory, buffer_size, fp)": "WWW.from_file()", "WWW.from_gzip(url, *, encoding, in_memory, buffer_size, fp)": "WWW.from_gzip()", "WWW.from_zip(url, *, encoding, in_memory, buffer_size, fp, component)": "WWW.from_zip()", "FillValueAuto.__init__(b, i, u, f, c, m, M, O, S, U, V)": "FillValueAuto.__init__()", "FillValueAuto.from_default(b, i, u, f, c, m, M, O, S, U, V)": "FillValueAuto.from_default()", "FillValueAuto.M": "FillValueAuto.M", "FillValueAuto.O": "FillValueAuto.O", "FillValueAuto.S": "FillValueAuto.S", "FillValueAuto.U": "FillValueAuto.U", "FillValueAuto.V": "FillValueAuto.V", "FillValueAuto.b": "FillValueAuto.b", "FillValueAuto.c": "FillValueAuto.c", "FillValueAuto.f": "FillValueAuto.f", "FillValueAuto.i": "FillValueAuto.i", "FillValueAuto.m": "FillValueAuto.m", "FillValueAuto.u": "FillValueAuto.u", "FillValueAuto.__repr__()": "FillValueAuto.__repr__()", "FillValueAuto.__str__()": "FillValueAuto.__str__()", "FillValueAuto.[dtype]": "FillValueAuto.[]", "DisplayActive.__init__(*args, **kwargs)": "DisplayActive.__init__()", "DisplayActive.FILE_NAME": "DisplayActive.FILE_NAME", "DisplayActive.read(fp)": "DisplayActive.read()", "DisplayActive.set(dc)": "DisplayActive.set()", "DisplayActive.update(**kwargs)": "DisplayActive.update()", "DisplayActive.write(fp)": "DisplayActive.write()", "DisplayActive.get(**kwargs)": "DisplayActive.get()", "DisplayActive.__repr__()": "DisplayActive.__repr__()", "DisplayActive.__str__()": "DisplayActive.__str__()", "DisplayConfig.__init__(*, type_show, type_color, type_color_default, type_color_int, type_color_float, type_color_complex, type_color_bool, type_color_object, type_color_str, type_color_datetime, type_color_timedelta, type_color_index, type_color_series, type_color_frame, type_color_bus, type_color_quilt, type_delimiter_left, type_delimiter_right, value_format_float_positional, value_format_float_scientific, value_format_complex_positional, value_format_complex_scientific, cell_placeholder, display_format, display_columns, display_rows, include_columns, include_index, cell_max_width, cell_max_width_leftmost, cell_align_left)": "DisplayConfig.__init__()", "DisplayConfig.from_default(**kwargs)": "DisplayConfig.from_default()", "DisplayConfig.from_file(fp)": "DisplayConfig.from_file()", "DisplayConfig.from_json(json_str)": "DisplayConfig.from_json()", "DisplayConfig.to_dict(**kwargs)": "DisplayConfig.to_dict()", "DisplayConfig.to_display_config(**kwargs)": "DisplayConfig.to_display_config()", "DisplayConfig.to_json()": "DisplayConfig.to_json()", "DisplayConfig.to_transpose()": "DisplayConfig.to_transpose()", "DisplayConfig.cell_align_left": "DisplayConfig.cell_align_left", "DisplayConfig.cell_max_width": "DisplayConfig.cell_max_width", "DisplayConfig.cell_max_width_leftmost": "DisplayConfig.cell_max_width_leftmost", "DisplayConfig.cell_placeholder": "DisplayConfig.cell_placeholder", "DisplayConfig.display_columns": "DisplayConfig.display_columns", "DisplayConfig.display_format": "DisplayConfig.display_format", "DisplayConfig.display_rows": "DisplayConfig.display_rows", "DisplayConfig.include_columns": "DisplayConfig.include_columns", "DisplayConfig.include_index": "DisplayConfig.include_index", "DisplayConfig.type_color": "DisplayConfig.type_color", "DisplayConfig.type_color_bool": "DisplayConfig.type_color_bool", "DisplayConfig.type_color_bus": "DisplayConfig.type_color_bus", "DisplayConfig.type_color_complex": "DisplayConfig.type_color_complex", "DisplayConfig.type_color_datetime": "DisplayConfig.type_color_datetime", "DisplayConfig.type_color_default": "DisplayConfig.type_color_default", "DisplayConfig.type_color_float": "DisplayConfig.type_color_float", "DisplayConfig.type_color_frame": "DisplayConfig.type_color_frame", "DisplayConfig.type_color_index": "DisplayConfig.type_color_index", "DisplayConfig.type_color_int": "DisplayConfig.type_color_int", "DisplayConfig.type_color_object": "DisplayConfig.type_color_object", "DisplayConfig.type_color_quilt": "DisplayConfig.type_color_quilt", "DisplayConfig.type_color_series": "DisplayConfig.type_color_series", "DisplayConfig.type_color_str": "DisplayConfig.type_color_str", "DisplayConfig.type_color_timedelta": "DisplayConfig.type_color_timedelta", "DisplayConfig.type_delimiter_left": "DisplayConfig.type_delimiter_left", "DisplayConfig.type_delimiter_right": "DisplayConfig.type_delimiter_right", "DisplayConfig.type_show": "DisplayConfig.type_show", "DisplayConfig.value_format_complex_positional": "DisplayConfig.value_format_complex_positional", "DisplayConfig.value_format_complex_scientific": "DisplayConfig.value_format_complex_scientific", "DisplayConfig.value_format_float_positional": "DisplayConfig.value_format_float_positional", "DisplayConfig.value_format_float_scientific": "DisplayConfig.value_format_float_scientific", "DisplayConfig.write(fp)": "DisplayConfig.write()", "DisplayConfig.interface": "DisplayConfig.interface", "DisplayConfig.__repr__()": "DisplayConfig.__repr__()", "DisplayConfig.__str__()": "DisplayConfig.__str__()", "StoreConfig.__init__(*, index_depth, index_name_depth_level, index_constructors, columns_depth, columns_name_depth_level, columns_constructors, columns_select, dtypes, consolidate_blocks, skip_header, skip_footer, trim_nadir, include_index, include_index_name, include_columns, include_columns_name, merge_hierarchical_labels, label_encoder, label_decoder, read_max_workers, read_chunksize, write_max_workers, write_chunksize, mp_context)": "StoreConfig.__init__()", "StoreConfig.from_frame(frame)": "StoreConfig.from_frame()", "StoreConfig.to_store_config_he()": "StoreConfig.to_store_config_he()", "StoreConfig.columns_constructors": "StoreConfig.columns_constructors", "StoreConfig.columns_depth": "StoreConfig.columns_depth", "StoreConfig.columns_name_depth_level": "StoreConfig.columns_name_depth_level", "StoreConfig.columns_select": "StoreConfig.columns_select", "StoreConfig.consolidate_blocks": "StoreConfig.consolidate_blocks", "StoreConfig.dtypes": "StoreConfig.dtypes", "StoreConfig.include_columns": "StoreConfig.include_columns", "StoreConfig.include_columns_name": "StoreConfig.include_columns_name", "StoreConfig.include_index": "StoreConfig.include_index", "StoreConfig.include_index_name": "StoreConfig.include_index_name", "StoreConfig.index_constructors": "StoreConfig.index_constructors", "StoreConfig.index_depth": "StoreConfig.index_depth", "StoreConfig.index_name_depth_level": "StoreConfig.index_name_depth_level", "StoreConfig.label_decoder": "StoreConfig.label_decoder", "StoreConfig.label_encoder": "StoreConfig.label_encoder", "StoreConfig.merge_hierarchical_labels": "StoreConfig.merge_hierarchical_labels", "StoreConfig.mp_context": "StoreConfig.mp_context", "StoreConfig.read_chunksize": "StoreConfig.read_chunksize", "StoreConfig.read_max_workers": "StoreConfig.read_max_workers", "StoreConfig.skip_footer": "StoreConfig.skip_footer", "StoreConfig.skip_header": "StoreConfig.skip_header", "StoreConfig.trim_nadir": "StoreConfig.trim_nadir", "StoreConfig.write_chunksize": "StoreConfig.write_chunksize", "StoreConfig.write_max_workers": "StoreConfig.write_max_workers", "StoreConfig.label_decode(label)": "StoreConfig.label_decode()", "StoreConfig.label_encode(label)": "StoreConfig.label_encode()", "StoreConfig.interface": "StoreConfig.interface", "StoreConfig.__repr__()": "StoreConfig.__repr__()", "StoreConfig.__str__()": "StoreConfig.__str__()", "StoreFilter.__init__(*, from_nan, from_nat, from_none, from_posinf, from_neginf, to_nan, to_nat, to_none, to_posinf, to_neginf, value_format_float_positional, value_format_float_scientific, value_format_complex_positional, value_format_complex_scientific)": "StoreFilter.__init__()", "StoreFilter.from_type_filter_array(array)": "StoreFilter.from_type_filter_array()", "StoreFilter.from_type_filter_element(value)": "StoreFilter.from_type_filter_element()", "StoreFilter.to_type_filter_array(array)": "StoreFilter.to_type_filter_array()", "StoreFilter.to_type_filter_element(value)": "StoreFilter.to_type_filter_element()", "StoreFilter.from_nan": "StoreFilter.from_nan", "StoreFilter.from_nat": "StoreFilter.from_nat", "StoreFilter.from_neginf": "StoreFilter.from_neginf", "StoreFilter.from_none": "StoreFilter.from_none", "StoreFilter.from_posinf": "StoreFilter.from_posinf", "StoreFilter.to_nan": "StoreFilter.to_nan", "StoreFilter.to_nat": "StoreFilter.to_nat", "StoreFilter.to_neginf": "StoreFilter.to_neginf", "StoreFilter.to_none": "StoreFilter.to_none", "StoreFilter.to_posinf": "StoreFilter.to_posinf", "StoreFilter.value_format_complex_positional": "StoreFilter.value_format_complex_positional", "StoreFilter.value_format_complex_scientific": "StoreFilter.value_format_complex_scientific", "StoreFilter.value_format_float_positional": "StoreFilter.value_format_float_positional", "StoreFilter.value_format_float_scientific": "StoreFilter.value_format_float_scientific", "StoreFilter.interface": "StoreFilter.interface", "StoreFilter.__repr__()": "StoreFilter.__repr__()", "StoreFilter.__str__()": "StoreFilter.__str__()", "IndexAutoFactory.__init__(size, *, name)": "IndexAutoFactory.__init__()", "IndexAutoFactory.from_optional_constructor(initializer, *, default_constructor, explicit_constructor)": "IndexAutoFactory.from_optional_constructor()", "IndexAutoFactory.to_index(*, default_constructor, explicit_constructor)": "IndexAutoFactory.to_index()", "IndexAutoFactory.__repr__()": "IndexAutoFactory.__repr__()", "IndexAutoFactory.__str__()": "IndexAutoFactory.__str__()", "IndexDefaultConstructorFactory.__init__(name)": "IndexDefaultConstructorFactory.__init__()", "IndexDefaultConstructorFactory.__call__(labels, *, name, default_constructor)": "IndexDefaultConstructorFactory.__call__()", "IndexDefaultConstructorFactory.__repr__()": "IndexDefaultConstructorFactory.__repr__()", "IndexDefaultConstructorFactory.__str__()": "IndexDefaultConstructorFactory.__str__()", "IndexAutoConstructorFactory.__init__(name)": "IndexAutoConstructorFactory.__init__()", "IndexAutoConstructorFactory.to_index(labels, *, default_constructor, name)": "IndexAutoConstructorFactory.to_index()", "IndexAutoConstructorFactory.__call__(labels, *, name, default_constructor)": "IndexAutoConstructorFactory.__call__()", "IndexAutoConstructorFactory.__repr__()": "IndexAutoConstructorFactory.__repr__()", "IndexAutoConstructorFactory.__str__()": "IndexAutoConstructorFactory.__str__()", "NPZ.__init__(fp, mode)": "NPZ.__init__()", "NPZ.from_arrays(blocks, *, index, columns, name, axis)": "NPZ.from_arrays()", "NPZ.from_frames(frames, *, include_index, include_columns, axis, union, name, fill_value)": "NPZ.from_frames()", "NPZ.contents": "NPZ.contents", "NPZ.nbytes": "NPZ.nbytes", "NPZ.__enter__()": "NPZ.__enter__()", "NPZ.__exit__(type, value, traceback)": "NPZ.__exit__()", "NPZ.interface": "NPZ.interface", "NPZ.__repr__()": "NPZ.__repr__()", "NPZ.__str__()": "NPZ.__str__()", "NPY.__init__(fp, mode)": "NPY.__init__()", "NPY.from_arrays(blocks, *, index, columns, name, axis)": "NPY.from_arrays()", "NPY.from_frames(frames, *, include_index, include_columns, axis, union, name, fill_value)": "NPY.from_frames()", "NPY.contents": "NPY.contents", "NPY.nbytes": "NPY.nbytes", "NPY.__enter__()": "NPY.__enter__()", "NPY.__exit__(type, value, traceback)": "NPY.__exit__()", "NPY.interface": "NPY.interface", "NPY.__repr__()": "NPY.__repr__()", "NPY.__str__()": "NPY.__str__()", "MemoryDisplay.__init__(frame)": "MemoryDisplay.__init__()", "MemoryDisplay.from_any(obj, label_component_pairs)": "MemoryDisplay.from_any()", "MemoryDisplay.to_frame()": "MemoryDisplay.to_frame()", "MemoryDisplay.__repr__()": "MemoryDisplay.__repr__()", "MemoryDisplay.__str__()": "MemoryDisplay.__str__()", "Platform.__init__(*args, **kwargs)": "Platform.__init__()", "Platform.to_series()": "Platform.to_series()", "Platform.__repr__()": "Platform.__repr__()", "Platform.__str__()": "Platform.__str__()", "Platform.display()": "Platform.display()"}