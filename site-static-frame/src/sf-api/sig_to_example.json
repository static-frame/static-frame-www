{"Series.__init__()": [">>> sf.Series((10, 2, 8), index=('a', 'b', 'c'))", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>"], "Series.from_concat()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s1", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s2 = sf.Series((4, 3, 12), index=('d', 'e', 'f'))", ">>> s2", "<Series>", "<Index>", "d        4", "e        3", "f        12", "<<U1>    <int64>", ">>> sf.Series.from_concat((s1, s2))", "<Series>", "<Index>", "a        10", "b        2", "c        8", "d        4", "e        3", "f        12", "<<U1>    <int64>"], "Series.from_concat_items()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s1", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s2 = sf.Series((4, 3, 12), index=('d', 'e', 'f'))", ">>> s2", "<Series>", "<Index>", "d        4", "e        3", "f        12", "<<U1>    <int64>", ">>> sf.Series.from_concat_items((('x', s1), ('y', s2)))", "<Series>", "<IndexHierarchy>", "x                a     10", "x                b     2", "x                c     8", "y                d     4", "y                e     3", "y                f     12", "<<U1>            <<U1> <int64>"], "Series.from_delimited()": [">>> sf.Series.from_delimited('1.2|5.5|8.2|-3.0', delimiter='|')", "<Series>", "<Index>", "0        1.2", "1        5.5", "2        8.2", "3        -3.0", "<int64>  <float64>", ">>> sf.Series.from_delimited('2021-01:1517-04:1620-12', delimiter=':', dtype=np.datetime64)", "<Series>", "<Index>", "0        2021-01", "1        1517-04", "2        1620-12", "<int64>  <datetime64[M]>"], "Series.from_dict()": [">>> sf.Series.from_dict(dict(a=10, b=2, c=8))", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>"], "Series.from_element()": [">>> sf.Series.from_element(-1, index=('a', 'b', 'c'), name='x')", "<Series: x>", "<Index>", "a           -1", "b           -1", "c           -1", "<<U1>       <int64>"], "Series.from_items()": [">>> sf.Series.from_items((('a', 10), ('b', 2), ('c', 8)), name='x')", "<Series: x>", "<Index>", "a           10", "b           2", "c           8", "<<U1>       <int64>"], "Series.from_overlay()": [">>> s1 = sf.Series((11, 1, None), index=('a', 'b', 'c'))", ">>> s1", "<Series>", "<Index>", "a        11", "b        1", "c        None", "<<U1>    <object>", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2", "<Series>", "<Index>", "b        2", "c        8", "d        19", "<<U1>    <int64>", ">>> sf.Series.from_overlay((s1, s2))", "<Series>", "<Index>", "a        11", "b        1", "c        8", "d        19", "<<U1>    <object>"], "Series.from_pandas()": [">>> df = pd.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> sf.Series.from_pandas(df)", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<object> <int64>"], "Series.to_frame()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "a       10", "b       2", "c       8", "<<U1>   <int64>"], "Series.to_frame_go()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.to_frame_go()", "<FrameGO>", "<IndexGO> 0       <int64>", "<Index>", "a         10", "b         2", "c         8", "<<U1>     <int64>"], "Series.to_frame_he()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.to_frame_he()", "<FrameHE>", "<Index>   0       <int64>", "<Index>", "a         10", "b         2", "c         8", "<<U1>     <int64>"], "Series.to_pairs()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.to_pairs()", "(('a', 10), ('b', 2), ('c', 8))"], "Series.to_pandas()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.to_pandas()", "a    10", "b     2", "c     8", "dtype: int64"], "Series.to_series_he()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.to_series_he()", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>"], "Series.STATIC": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.STATIC", "True"], "Series.T": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.T", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>"], "Series.dtype": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.dtype", "int64"], "Series.index": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.index", "<Index>", "a", "b", "c", "<<U1>"], "Series.memory": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.memory", "       L   Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu", "Name   16  B     16   B     16  B     16   B     16   B     16  B", "Index  800 B     832  B     576 B     8.89 KB    856  B     600 B", "Values 136 B     152  B     24  B     136  B     152  B     24  B", "Total  992 B     1.02 KB    656 B     9.08 KB    1.04 KB    680 B"], "Series.name": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.name"], "Series.nbytes": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.nbytes", "24"], "Series.ndim": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.ndim", "1"], "Series.shape": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.shape", "(3,)"], "Series.size": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.size", "3"], "Series.__array__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.__array__()", "[10  2  8]"], "Series.__array_ufunc__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> np.array((0, 1, 0)) * s", "<Series>", "<Index>", "a        0", "b        2", "c        0", "<<U1>    <int64>"], "Series.__bool__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> bool(s)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "Series.__deepcopy__()": [">>> import copy", ">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> copy.deepcopy(s)", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>"], "Series.__len__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> len(s)", "3"], "Series.__round__()": [">>> s = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        8.734", "<<U1>    <float64>", ">>> round(s, 1)", "<Series>", "<Index>", "a        10.2", "b        2.1", "c        8.7", "<<U1>    <float64>"], "Series.all()": [">>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        False", "b        False", "c        True", "<<U1>    <bool>", ">>> s.all()", "False"], "Series.any()": [">>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        False", "b        False", "c        True", "<<U1>    <bool>", ">>> s.any()", "True"], "Series.astype()": [">>> s = sf.Series((11, 1, None), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        11", "b        1", "c        None", "<<U1>    <object>", ">>> s.astype(float)", "<Series>", "<Index>", "a        11.0", "b        1.0", "c        nan", "<<U1>    <float64>"], "Series.clip()": [">>> s = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        8.734", "<<U1>    <float64>", ">>> s.clip(lower=2.5, upper=10.1)", "<Series>", "<Index>", "a        10.1", "b        2.5", "c        8.734", "<<U1>    <float64>"], "Series.corr()": [">>> s1 = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))", ">>> s1", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        8.734", "<<U1>    <float64>", ">>> s2 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s1.corr(s2)", "0.9977051066985492"], "Series.count()": [">>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        None", "d        8", "<<U1>    <object>", ">>> s.count(skipna=True)", "3", ">>> s.count(unique=True)", "2"], "Series.cov()": [">>> s1 = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))", ">>> s1", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        8.734", "<<U1>    <float64>", ">>> s2 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s1.cov(s2)", "17.924999999999997"], "Series.cumprod()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.cumprod()", "<Series>", "<Index>", "a        10", "b        20", "c        160", "<<U1>    <int64>"], "Series.cumsum()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.cumsum()", "<Series>", "<Index>", "a        10", "b        12", "c        20", "<<U1>    <int64>"], "Series.drop_duplicated()": [">>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        None", "d        8", "<<U1>    <object>", ">>> s.drop_duplicated()", "<Series>", "<Index>", "b        5", "c        None", "<<U1>    <object>"], "Series.dropfalsy()": [">>> s = sf.Series(('q', 'r', '', 's'), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        q", "b        r", "c", "d        s", "<<U1>    <<U1>", ">>> s.dropfalsy()", "<Series>", "<Index>", "a        q", "b        r", "d        s", "<<U1>    <<U1>"], "Series.dropna()": [">>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        None", "d        8", "<<U1>    <object>", ">>> s.dropna()", "<Series>", "<Index>", "a        8", "b        5", "d        8", "<<U1>    <object>"], "Series.duplicated()": [">>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        None", "d        8", "<<U1>    <object>", ">>> s.duplicated()", "<Series>", "<Index>", "a        True", "b        False", "c        False", "d        True", "<<U1>    <bool>"], "Series.equals()": [">>> s1 = sf.Series((10.235, 2.124, 8.734), index=('a', 'b', 'c'))", ">>> s1", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        8.734", "<<U1>    <float64>", ">>> s2 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s1.equals(s2)", "False"], "Series.fillfalsy()": [">>> s = sf.Series(('q', 'r', '', 's'), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        q", "b        r", "c", "d        s", "<<U1>    <<U1>", ">>> s.fillfalsy('missing')", "<Series>", "<Index>", "a        q", "b        r", "c        missing", "d        s", "<<U1>    <<U7>"], "Series.fillfalsy_backward()": [">>> s = sf.Series(('', '', 'r', 's'), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a", "b", "c        r", "d        s", "<<U1>    <<U1>", ">>> s.fillfalsy_backward()", "<Series>", "<Index>", "a        r", "b        r", "c        r", "d        s", "<<U1>    <<U1>"], "Series.fillfalsy_forward()": [">>> s = sf.Series(('p', 'q', '', ''), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        p", "b        q", "c", "d", "<<U1>    <<U1>", ">>> s.fillfalsy_forward()", "<Series>", "<Index>", "a        p", "b        q", "c        q", "d        q", "<<U1>    <<U1>"], "Series.fillfalsy_leading()": [">>> s = sf.Series(('', '', 'r', 's'), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a", "b", "c        r", "d        s", "<<U1>    <<U1>", ">>> s.fillfalsy_leading('missing')", "<Series>", "<Index>", "a        missing", "b        missing", "c        r", "d        s", "<<U1>    <<U7>"], "Series.fillfalsy_trailing()": [">>> s = sf.Series(('p', 'q', '', ''), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        p", "b        q", "c", "d", "<<U1>    <<U1>", ">>> s.fillfalsy_trailing('missing')", "<Series>", "<Index>", "a        p", "b        q", "c        missing", "d        missing", "<<U1>    <<U7>"], "Series.fillna()": [">>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        nan", "d        8.734", "e        nan", "<<U1>    <float64>", ">>> s.fillna(0.0)", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        0.0", "d        8.734", "e        0.0", "<<U1>    <float64>"], "Series.fillna_backward()": [">>> s = sf.Series((np.nan, np.nan, 10.235, 2.124, 8.734), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        nan", "b        nan", "c        10.235", "d        2.124", "e        8.734", "<<U1>    <float64>", ">>> s.fillna_backward()", "<Series>", "<Index>", "a        10.235", "b        10.235", "c        10.235", "d        2.124", "e        8.734", "<<U1>    <float64>"], "Series.fillna_forward()": [">>> s = sf.Series((10.235, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        8.734", "d        nan", "e        nan", "<<U1>    <float64>", ">>> s.fillna_forward()", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        8.734", "d        8.734", "e        8.734", "<<U1>    <float64>"], "Series.fillna_leading()": [">>> s = sf.Series((np.nan, np.nan, 10.235, 2.124, 8.734), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        nan", "b        nan", "c        10.235", "d        2.124", "e        8.734", "<<U1>    <float64>", ">>> s.fillna_leading(0.0)", "<Series>", "<Index>", "a        0.0", "b        0.0", "c        10.235", "d        2.124", "e        8.734", "<<U1>    <float64>"], "Series.fillna_trailing()": [">>> s = sf.Series((10.235, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        8.734", "d        nan", "e        nan", "<<U1>    <float64>", ">>> s.fillna_trailing(0.0)", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        8.734", "d        0.0", "e        0.0", "<<U1>    <float64>"], "Series.head()": [">>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        nan", "d        8.734", "e        nan", "<<U1>    <float64>", ">>> s.head(2)", "<Series>", "<Index>", "a        10.235", "b        2.124", "<<U1>    <float64>"], "Series.iloc_max()": [">>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        nan", "d        8.734", "e        nan", "<<U1>    <float64>", ">>> s.iloc_max()", "0"], "Series.iloc_min()": [">>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        nan", "d        8.734", "e        nan", "<<U1>    <float64>", ">>> s.iloc_min()", "1"], "Series.iloc_notfalsy_first()": [">>> s = sf.Series(('', '', 19, 34, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a", "b", "c        19", "d        34", "e        None", "<<U1>    <object>", ">>> s.iloc_notfalsy_first()", "2"], "Series.iloc_notfalsy_last()": [">>> s = sf.Series(('', '', 19, 34, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a", "b", "c        19", "d        34", "e        None", "<<U1>    <object>", ">>> s.iloc_notfalsy_last()", "3"], "Series.iloc_notna_first()": [">>> s = sf.Series((np.nan, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        nan", "b        2.124", "c        8.734", "d        nan", "e        nan", "<<U1>    <float64>", ">>> s.iloc_notna_first()", "1"], "Series.iloc_notna_last()": [">>> s = sf.Series((np.nan, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        nan", "b        2.124", "c        8.734", "d        nan", "e        nan", "<<U1>    <float64>", ">>> s.iloc_notna_last()", "2"], "Series.iloc_searchsorted()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iloc_searchsorted(18)", "2"], "Series.insert_after()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((4, 3, 12), index=('d', 'e', 'f'))", ">>> s1.insert_after('b', s2)", "<Series>", "<Index>", "a        10", "b        2", "d        4", "e        3", "f        12", "c        8", "<<U1>    <int64>"], "Series.insert_before()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((4, 3, 12), index=('d', 'e', 'f'))", ">>> s1.insert_before('b', s2)", "<Series>", "<Index>", "a        10", "d        4", "e        3", "f        12", "b        2", "c        8", "<<U1>    <int64>"], "Series.isfalsy()": [">>> s = sf.Series((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b", "c        19", "d        0", "e        None", "<<U1>    <object>", ">>> s.isfalsy()", "<Series>", "<Index>", "a        False", "b        True", "c        False", "d        True", "e        True", "<<U1>    <bool>"], "Series.isin()": [">>> s = sf.Series((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s.isin((2, 19))", "<Series>", "<Index>", "a        True", "b        False", "c        True", "d        False", "e        False", "<<U1>    <bool>"], "Series.isna()": [">>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        nan", "d        8.734", "e        nan", "<<U1>    <float64>", ">>> s.isna()", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        False", "e        True", "<<U1>    <bool>"], "Series.loc_max()": [">>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        nan", "d        8.734", "e        nan", "<<U1>    <float64>", ">>> s.loc_max()", "a"], "Series.loc_min()": [">>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        nan", "d        8.734", "e        nan", "<<U1>    <float64>", ">>> s.loc_min()", "b"], "Series.loc_notfalsy_first()": [">>> s = sf.Series(('', '', 19, 34, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a", "b", "c        19", "d        34", "e        None", "<<U1>    <object>", ">>> s.loc_notfalsy_first()", "c"], "Series.loc_notfalsy_last()": [">>> s = sf.Series(('', '', 19, 34, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a", "b", "c        19", "d        34", "e        None", "<<U1>    <object>", ">>> s.loc_notfalsy_last()", "d"], "Series.loc_notna_first()": [">>> s = sf.Series((np.nan, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        nan", "b        2.124", "c        8.734", "d        nan", "e        nan", "<<U1>    <float64>", ">>> s.loc_notna_first()", "b"], "Series.loc_notna_last()": [">>> s = sf.Series((np.nan, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        nan", "b        2.124", "c        8.734", "d        nan", "e        nan", "<<U1>    <float64>", ">>> s.loc_notna_last()", "c"], "Series.loc_searchsorted()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.loc_searchsorted(18)", "c"], "Series.max()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.max()", "10"], "Series.mean()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.mean()", "6.666666666666667"], "Series.median()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.median()", "8.0"], "Series.min()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.min()", "2"], "Series.notfalsy()": [">>> s = sf.Series((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b", "c        19", "d        0", "e        None", "<<U1>    <object>", ">>> s.notfalsy()", "<Series>", "<Index>", "a        True", "b        False", "c        True", "d        False", "e        False", "<<U1>    <bool>"], "Series.notna()": [">>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        nan", "d        8.734", "e        nan", "<<U1>    <float64>", ">>> s.notna()", "<Series>", "<Index>", "a        True", "b        True", "c        False", "d        True", "e        False", "<<U1>    <bool>"], "Series.prod()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.prod()", "160"], "Series.rank_dense()": [">>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        0", "d        8", "<<U1>    <int64>", ">>> s.rank_dense()", "<Series>", "<Index>", "a        2", "b        1", "c        0", "d        2", "<<U1>    <int64>"], "Series.rank_max()": [">>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        0", "d        8", "<<U1>    <int64>", ">>> s.rank_max()", "<Series>", "<Index>", "a        3", "b        1", "c        0", "d        3", "<<U1>    <int64>"], "Series.rank_mean()": [">>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        0", "d        8", "<<U1>    <int64>", ">>> s.rank_mean()", "<Series>", "<Index>", "a        2.5", "b        1.0", "c        0.0", "d        2.5", "<<U1>    <float64>"], "Series.rank_min()": [">>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        0", "d        8", "<<U1>    <int64>", ">>> s.rank_min()", "<Series>", "<Index>", "a        2", "b        1", "c        0", "d        2", "<<U1>    <int64>"], "Series.rank_ordinal()": [">>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        0", "d        8", "<<U1>    <int64>", ">>> s.rank_ordinal()", "<Series>", "<Index>", "a        2", "b        1", "c        0", "d        3", "<<U1>    <int64>"], "Series.rehierarch()": [">>> s = sf.Series((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))", ">>> s", "<Series>", "<IndexHierarchy>", "1                a     3", "1                b     2", "2                a     8", "2                b     7", "<int64>          <<U1> <int64>", ">>> s.rehierarch((1, 0))", "<Series>", "<IndexHierarchy>", "a                1       3", "a                2       8", "b                1       2", "b                2       7", "<<U1>            <int64> <int64>"], "Series.reindex()": [">>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        0", "d        8", "<<U1>    <int64>", ">>> s.reindex(('d', 'f', 'e', 'c'), fill_value=-1)", "<Series>", "<Index>", "d        8", "f        -1", "e        -1", "c        0", "<<U1>    <int64>"], "Series.relabel()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.relabel(('x', 'y', 'z'))", "<Series>", "<Index>", "x        10", "y        2", "z        8", "<<U1>    <int64>", ">>> s.relabel(dict(a='x', b='y'))", "<Series>", "<Index>", "x        10", "y        2", "c        8", "<<U1>    <int64>", ">>> s.relabel(lambda l: f'+{l.upper()}+')", "<Series>", "<Index>", "+A+      10", "+B+      2", "+C+      8", "<<U3>    <int64>"], "Series.relabel_flat()": [">>> s = sf.Series((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))", ">>> s", "<Series>", "<IndexHierarchy>", "1                a     3", "1                b     2", "2                a     8", "2                b     7", "<int64>          <<U1> <int64>", ">>> s.relabel_flat()", "<Series>", "<Index>", "(1, 'a') 3", "(1, 'b') 2", "(2, 'a') 8", "(2, 'b') 7", "<object> <int64>"], "Series.relabel_level_add()": [">>> s = sf.Series((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))", ">>> s", "<Series>", "<IndexHierarchy>", "1                a     3", "1                b     2", "2                a     8", "2                b     7", "<int64>          <<U1> <int64>", ">>> s.relabel_level_add('x')", "<Series>", "<IndexHierarchy>", "x                1       a     3", "x                1       b     2", "x                2       a     8", "x                2       b     7", "<<U1>            <int64> <<U1> <int64>"], "Series.relabel_level_drop()": [">>> s = sf.Series((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))", ">>> s", "<Series>", "<IndexHierarchy>", "1                a     3", "1                b     2", "2                a     8", "2                b     7", "<int64>          <<U1> <int64>", ">>> s.iloc[:2].relabel_level_drop(1)", "<Series>", "<Index>", "a        3", "b        2", "<<U1>    <int64>"], "Series.rename()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'), name='x')", ">>> s", "<Series: x>", "<Index>", "a           10", "b           2", "c           8", "<<U1>       <int64>", ">>> s.rename('y')", "<Series: y>", "<Index>", "a           10", "b           2", "c           8", "<<U1>       <int64>"], "Series.roll()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.roll(2)", "<Series>", "<Index>", "a        34", "b        54", "c        2", "d        8", "e        19", "<<U1>    <int64>"], "Series.sample()": [">>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        nan", "d        8.734", "e        nan", "<<U1>    <float64>", ">>> s.sample(2, seed=0)", "<Series>", "<Index>", "a        10.235", "c        nan", "<<U1>    <float64>"], "Series.shift()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.shift(2)", "<Series>", "<Index>", "a        nan", "b        nan", "c        2.0", "d        8.0", "e        19.0", "<<U1>    <float64>"], "Series.sort_index()": [">>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        0", "d        8", "<<U1>    <int64>", ">>> s.sort_index()", "<Series>", "<Index>", "a        8", "b        5", "c        0", "d        8", "<<U1>    <int64>", ">>> s.sort_index(ascending=False)", "<Series>", "<Index>", "d        8", "c        0", "b        5", "a        8", "<<U1>    <int64>"], "Series.sort_values()": [">>> s = sf.Series((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        0", "d        8", "<<U1>    <int64>", ">>> s.sort_values()", "<Series>", "<Index>", "c        0", "b        5", "a        8", "d        8", "<<U1>    <int64>", ">>> s.sort_values(ascending=False)", "<Series>", "<Index>", "d        8", "a        8", "b        5", "c        0", "<<U1>    <int64>"], "Series.std()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.std()", "3.39934634239519"], "Series.sum()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.sum()", "20"], "Series.tail()": [">>> s = sf.Series((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        10.235", "b        2.124", "c        nan", "d        8.734", "e        nan", "<<U1>    <float64>", ">>> s.tail(2)", "<Series>", "<Index>", "d        8.734", "e        nan", "<<U1>    <float64>"], "Series.transpose()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.transpose()", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>"], "Series.unique()": [">>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        None", "d        8", "<<U1>    <object>", ">>> s.unique()", "[8 5 None]"], "Series.unique_enumerated()": [">>> s = sf.Series((8, 5, None, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        8", "b        5", "c        None", "d        8", "<<U1>    <object>", ">>> s.unique_enumerated()", "(array([0, 1, 2, 0]), array([8, 5, None], dtype=object))"], "Series.var()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.var()", "11.555555555555557"], "Series.__contains__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.__contains__('a')", "True"], "Series.__iter__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.__iter__())", "('a', 'b', 'c')"], "Series.__reversed__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.__reversed__())", "('c', 'b', 'a')"], "Series.get()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.get('a')", "10", ">>> s.get('z', -1)", "-1"], "Series.items()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.items())", "(('a', 10), ('b', 2), ('c', 8))"], "Series.keys()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.keys()", "<Index>", "a", "b", "c", "<<U1>"], "Series.values": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.values", "[10  2  8]"], "Series.interface": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.interface", "<Frame>", "<Index>                              cls_name group                doc                  <<U18>", "<Index: signature>", "__init__(values, *, index, name, ... Series   Constructor          Initializer. Args...", "from_concat(containers, *, index,... Series   Constructor          Concatenate multi...", "from_concat_items(items, *, name,... Series   Constructor          Produce a Series ...", "from_delimited(delimited, *, deli... Series   Constructor          Series constructi...", "from_dict(mapping, *, dtype, name... Series   Constructor          Series constructi...", "from_element(element, *, index, d... Series   Constructor          Create a Series f...", "from_items(pairs, *, dtype, name,... Series   Constructor          Series constructi...", "from_overlay(containers, *, index... Series   Constructor          Return a new Seri...", "from_pandas(value, *, index, inde... Series   Constructor          Given a Pandas Se...", "to_frame(axis, *, index, index_co... Series   Exporter             Return a Frame vi...", "to_frame_go(axis, *, index, index... Series   Exporter             Return FrameGO vi...", "to_frame_he(axis, *, index, index... Series   Exporter             Return FrameHE vi...", "to_html(config, style_config)        Series   Exporter             Return an HTML ta...", "to_html_datatables(fp, show, config) Series   Exporter             Return a complete...", "to_pairs()                           Series   Exporter             Return a tuple of...", "to_pandas()                          Series   Exporter             Return a Pandas S...", "to_series_he()                       Series   Exporter             Return a SeriesHE...", "...                                  ...      ...                  ...", "via_hashlib(include_name, include... Series   Accessor Hashlib", "via_hashlib(include_name, include... Series   Accessor Hashlib", "via_hashlib(include_name, include... Series   Accessor Hashlib", "via_hashlib(include_name, include... Series   Accessor Hashlib", "via_type_clinic.to_hint()            Series   Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... Series   Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... Series   Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... Series   Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           Series   Accessor Type Clinic Return a compact ...", "via_mapping.__getitem__(key)         Series   Accessor Mapping", "via_mapping.__iter__()               Series   Accessor Mapping", "via_mapping.__len__()                Series   Accessor Mapping", "via_mapping.__contains__(key)        Series   Accessor Mapping", "via_mapping.__repr__()               Series   Accessor Mapping", "via_mapping.keys()                   Series   Accessor Mapping", "via_mapping.values()                 Series   Accessor Mapping", "via_mapping.items()                  Series   Accessor Mapping", "<<U94>                               <<U6>    <<U27>               <<U83>"], "Series.__repr__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> repr(s)", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>"], "Series.__str__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> str(s)", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>"], "Series.display()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.display()", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.display(sf.DisplayConfig(type_show=False))", "a 10", "b 2", "c 8"], "Series.display_tall()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.display_tall()", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>"], "Series.display_wide()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.display_wide()", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>"], "Series.assign[]()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.assign['c']('x')", "<Series>", "<Index>", "a        2", "b        8", "c        x", "d        34", "e        54", "<<U1>    <object>", ">>> s.assign['c':]('x')", "<Series>", "<Index>", "a        2", "b        8", "c        x", "d        x", "e        x", "<<U1>    <object>", ">>> s.assign[['a', 'd']](('x', 'y'))", "<Series>", "<Index>", "a        x", "b        8", "c        19", "d        y", "e        54", "<<U1>    <object>"], "Series.assign[].apply()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.assign['c':].apply(lambda s: s / 100)", "<Series>", "<Index>", "a        2.0", "b        8.0", "c        0.19", "d        0.34", "e        0.54", "<<U1>    <float64>"], "Series.assign[].apply_element()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.assign['b':].apply_element(lambda e: e if e < 10 else f'--{{e}}--')", "<Series>", "<Index>", "a        2", "b        8", "c        --{e}--", "d        --{e}--", "e        --{e}--", "<<U1>    <object>"], "Series.assign[].apply_element_items()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.assign['b':].apply_element_items(lambda l, e: e if l == 'c' else f'--{{e}}--')", "<Series>", "<Index>", "a        2", "b        --{e}--", "c        19", "d        --{e}--", "e        --{e}--", "<<U1>    <object>"], "Series.assign.iloc[]()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.assign.iloc[2]('x')", "<Series>", "<Index>", "a        2", "b        8", "c        x", "d        34", "e        54", "<<U1>    <object>", ">>> s.assign.iloc[2:]('x')", "<Series>", "<Index>", "a        2", "b        8", "c        x", "d        x", "e        x", "<<U1>    <object>", ">>> s.assign.iloc[[0, 4]](('x', 'y'))", "<Series>", "<Index>", "a        x", "b        8", "c        19", "d        34", "e        y", "<<U1>    <object>"], "Series.assign.iloc[].apply()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.assign.iloc[2:].apply(lambda s: s / 100)", "<Series>", "<Index>", "a        2.0", "b        8.0", "c        0.19", "d        0.34", "e        0.54", "<<U1>    <float64>"], "Series.assign.iloc[].apply_element()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.assign.iloc[2:].apply_element(lambda e: e / 100 if e < 10 else e)", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>"], "Series.assign.iloc[].apply_element_items()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.assign.iloc[2:].apply_element_items(lambda l, e: e if l == 'c' else f'--{{e}}--')", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        --{e}--", "e        --{e}--", "<<U1>    <object>"], "Series.assign.loc[]()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.assign.loc['c']('x')", "<Series>", "<Index>", "a        2", "b        8", "c        x", "d        34", "e        54", "<<U1>    <object>", ">>> s.assign.loc['c':]('x')", "<Series>", "<Index>", "a        2", "b        8", "c        x", "d        x", "e        x", "<<U1>    <object>", ">>> s.assign.loc[['a', 'd']](('x', 'y'))", "<Series>", "<Index>", "a        x", "b        8", "c        19", "d        y", "e        54", "<<U1>    <object>"], "Series.assign.loc[].apply()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.assign.loc['c':].apply(lambda s: s / 100)", "<Series>", "<Index>", "a        2.0", "b        8.0", "c        0.19", "d        0.34", "e        0.54", "<<U1>    <float64>"], "Series.assign.loc[].apply_element()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.assign.loc['c':].apply_element(lambda e: e / 100 if e < 10 else e)", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>"], "Series.assign.loc[].apply_element_items()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.assign.loc['c':].apply_element_items(lambda l, e: e / 100 if l == 'c' else e)", "<Series>", "<Index>", "a        2.0", "b        8.0", "c        0.19", "d        34.0", "e        54.0", "<<U1>    <float64>"], "Series.drop[]": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.drop['c']", "<Series>", "<Index>", "a        2", "b        8", "d        34", "e        54", "<<U1>    <int64>", ">>> s.drop['c':]", "<Series>", "<Index>", "a        2", "b        8", "<<U1>    <int64>", ">>> s.drop[['a', 'd']]", "<Series>", "<Index>", "b        8", "c        19", "e        54", "<<U1>    <int64>"], "Series.drop.iloc[]": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.drop.iloc[2]", "<Series>", "<Index>", "a        2", "b        8", "d        34", "e        54", "<<U1>    <int64>", ">>> s.drop.iloc[2:]", "<Series>", "<Index>", "a        2", "b        8", "<<U1>    <int64>", ">>> s.drop.iloc[[0, 4]]", "<Series>", "<Index>", "b        8", "c        19", "d        34", "<<U1>    <int64>"], "Series.drop.loc[]": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.drop.loc['c']", "<Series>", "<Index>", "a        2", "b        8", "d        34", "e        54", "<<U1>    <int64>", ">>> s.drop.loc['c':]", "<Series>", "<Index>", "a        2", "b        8", "<<U1>    <int64>", ">>> s.drop.loc[['a', 'd']]", "<Series>", "<Index>", "b        8", "c        19", "e        54", "<<U1>    <int64>"], "Series.mask[]": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.mask['c']", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        False", "e        False", "<<U1>    <bool>", ">>> s.mask['c':]", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "e        True", "<<U1>    <bool>", ">>> s.mask[['a', 'd']]", "<Series>", "<Index>", "a        True", "b        False", "c        False", "d        True", "e        False", "<<U1>    <bool>"], "Series.mask.iloc[]": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.mask.iloc[2]", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        False", "e        False", "<<U1>    <bool>", ">>> s.mask.iloc[2:]", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "e        True", "<<U1>    <bool>", ">>> s.mask.iloc[[0, 4]]", "<Series>", "<Index>", "a        True", "b        False", "c        False", "d        False", "e        True", "<<U1>    <bool>"], "Series.mask.loc[]": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.mask.loc['c']", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        False", "e        False", "<<U1>    <bool>", ">>> s.mask.loc['c':]", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "e        True", "<<U1>    <bool>", ">>> s.mask.loc[['a', 'd']]", "<Series>", "<Index>", "a        True", "b        False", "c        False", "d        True", "e        False", "<<U1>    <bool>"], "Series.masked_array[]": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.masked_array['c']", "[2 8 -- 34 54]", ">>> s.masked_array['c':]", "[2 8 -- -- --]", ">>> s.masked_array[['a', 'd']]", "[-- 8 19 -- 54]"], "Series.masked_array.iloc[]": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.masked_array.iloc[2]", "[2 8 -- 34 54]", ">>> s.masked_array.iloc[2:]", "[2 8 -- -- --]", ">>> s.masked_array.iloc[[0, 4]]", "[-- 8 19 34 --]"], "Series.masked_array.loc[]": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.masked_array.loc['c']", "[2 8 -- 34 54]", ">>> s.masked_array.loc['c':]", "[2 8 -- -- --]", ">>> s.masked_array.loc[['a', 'd']]", "[-- 8 19 -- 54]"], "Series.[]": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s['c']", "19", ">>> s['c':]", "<Series>", "<Index>", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s[['a', 'd']]", "<Series>", "<Index>", "a        2", "d        34", "<<U1>    <int64>"], "Series.iloc[]": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iloc[2]", "19", ">>> s.iloc[2:]", "<Series>", "<Index>", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iloc[[0, 4]]", "<Series>", "<Index>", "a        2", "e        54", "<<U1>    <int64>"], "Series.loc[]": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.loc['c']", "19", ">>> s.loc['c':]", "<Series>", "<Index>", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.loc[['a', 'd']]", "<Series>", "<Index>", "a        2", "d        34", "<<U1>    <int64>"], "Series.iter_element()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_element())", "(2, 8, 19, 34, 54)"], "Series.iter_element().apply()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iter_element().apply(lambda e: e > 10)", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "e        True", "<<U1>    <bool>"], "Series.iter_element().apply_iter()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_element().apply_iter(lambda e: e > 10))", "(False, False, True, True, True)"], "Series.iter_element().apply_iter_items()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_element().apply_iter_items(lambda e: e > 10))", "(('a', False), ('b', False), ('c', True), ('d', True), ('e', True))"], "Series.iter_element().apply_pool()": [">>> def func(e): return e > 10", ">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iter_element().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "e        True", "<<U1>    <bool>"], "Series.iter_element().map_all()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.iter_element().map_all({2: 200, 10: -1, 8: 45})", "<Series>", "<Index>", "a        -1", "b        200", "c        45", "<<U1>    <int64>"], "Series.iter_element().map_all_iter()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_element().map_all_iter({2: 200, 10: -1, 8: 45}))", "(-1, 200, 45)"], "Series.iter_element().map_all_iter_items()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_element().map_all_iter_items({2: 200, 10: -1, 8: 45}))", "(('a', -1), ('b', 200), ('c', 45))"], "Series.iter_element().map_any()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.iter_element().map_any({10: -1, 8: 45})", "<Series>", "<Index>", "a        -1", "b        2", "c        45", "<<U1>    <int64>"], "Series.iter_element().map_any_iter()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_element().map_any_iter({10: -1, 8: 45}))", "(-1, 2, 45)"], "Series.iter_element().map_any_iter_items()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_element().map_any_iter_items({10: -1, 8: 45}))", "(('a', -1), ('b', 2), ('c', 45))"], "Series.iter_element().map_fill()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.iter_element().map_fill({10: -1, 8: 45}, fill_value=np.nan)", "<Series>", "<Index>", "a        -1.0", "b        nan", "c        45.0", "<<U1>    <float64>"], "Series.iter_element().map_fill_iter()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_element().map_fill_iter({10: -1, 8: 45}, fill_value=np.nan))", "(-1, nan, 45)"], "Series.iter_element().map_fill_iter_items()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_element().map_fill_iter_items({10: -1, 8: 45}, fill_value=np.nan))", "(('a', -1), ('b', nan), ('c', 45))"], "Series.iter_element_items()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_element_items())", "(('a', 2), ('b', 8), ('c', 19), ('d', 34), ('e', 54))"], "Series.iter_element_items().apply()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iter_element_items().apply(lambda l, e: e > 10 if l != 'c' else 0)", "<Series>", "<Index>", "a        0", "b        0", "c        0", "d        1", "e        1", "<<U1>    <int64>"], "Series.iter_element_items().apply_iter()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_element_items().apply_iter(lambda l, e: e > 10 and l != 'e'))", "(False, False, True, True, False)"], "Series.iter_element_items().apply_iter_items()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_element_items().apply_iter_items(lambda l, e: e > 10 and l != 'e'))", "(('a', False), ('b', False), ('c', True), ('d', True), ('e', False))"], "Series.iter_element_items().apply_pool()": [">>> def func(pair): return pair[1] > 10 and pair[0] != 'e'", ">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iter_element_items().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "e        False", "<<U1>    <bool>"], "Series.iter_element_items().map_all()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.iter_element_items().map_all({('b', 2): 200, ('a', 10): -1, ('c', 8): 45})", "<Series>", "<Index>", "a        -1", "b        200", "c        45", "<<U1>    <int64>"], "Series.iter_element_items().map_all_iter()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_element_items().map_all_iter({('b', 2): 200, ('a', 10): -1, ('c', 8): 45}))", "(-1, 200, 45)"], "Series.iter_element_items().map_all_iter_items()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_element_items().map_all_iter_items({('b', 2): 200, ('a', 10): -1, ('c', 8): 45}))", "(('a', -1), ('b', 200), ('c', 45))"], "Series.iter_element_items().map_any()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.iter_element_items().map_any({('a', 10): -1, ('c', 8): 45})", "<Series>", "<Index>", "a        -1", "b        2", "c        45", "<<U1>    <int64>"], "Series.iter_element_items().map_any_iter()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_element_items().map_any_iter({('a', 10): -1, ('c', 8): 45}))", "(-1, 2, 45)"], "Series.iter_element_items().map_any_iter_items()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_element_items().map_any_iter_items({('a', 10): -1, ('c', 8): 45}))", "(('a', -1), ('b', 2), ('c', 45))"], "Series.iter_element_items().map_fill()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.iter_element_items().map_fill({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan)", "<Series>", "<Index>", "a        -1.0", "b        nan", "c        45.0", "<<U1>    <float64>"], "Series.iter_element_items().map_fill_iter()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_element_items().map_fill_iter({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan))", "(-1, nan, 45)"], "Series.iter_element_items().map_fill_iter_items()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_element_items().map_fill_iter_items({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan))", "(('a', -1), ('b', nan), ('c', 45))"], "Series.iter_group()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group())", "(<Series>", "<Index>", "a        -2", "d        -2", "<<U1>    <int64>, <Series>", "<Index>", "b        8", "e        8", "<<U1>    <int64>, <Series>", "<Index>", "c        19", "<<U1>    <int64>)"], "Series.iter_group().apply()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group().apply(lambda s: s.sum())", "<Series>", "<Index>", "-2       -4", "8        16", "19       19", "<int64>  <int64>"], "Series.iter_group().apply_iter()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group().apply_iter(lambda s: s.sum()))", "(-4, 16, 19)"], "Series.iter_group().apply_iter_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group().apply_iter_items(lambda s: s.sum()))", "((-2, -4), (8, 16), (19, 19))"], "Series.iter_group().apply_pool()": [">>> def func(s): return s.sum()", ">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "-2       -4", "8        16", "19       19", "<int64>  <int64>"], "Series.iter_group_array()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_array())", "(array([-2, -2]), array([8, 8]), array([19]))"], "Series.iter_group_array().apply()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_array().apply(lambda s: s.sum())", "<Series>", "<Index>", "-2       -4", "8        16", "19       19", "<int64>  <int64>"], "Series.iter_group_array().apply_iter()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_array().apply_iter(lambda s: s.sum()))", "(-4, 16, 19)"], "Series.iter_group_array().apply_iter_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_array().apply_iter_items(lambda s: s.sum()))", "((-2, -4), (8, 16), (19, 19))"], "Series.iter_group_array().apply_pool()": [">>> def func(s): return s.sum()", ">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_array().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "-2       -4", "8        16", "19       19", "<int64>  <int64>"], "Series.iter_group_array_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_array_items())", "((-2, array([-2, -2])), (8, array([8, 8])), (19, array([19])))"], "Series.iter_group_array_items().apply()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_array_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)", "<Series>", "<Index>", "-2       -4", "8        (2,)", "19       19", "<int64>  <object>"], "Series.iter_group_array_items().apply_iter()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_array_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))", "(-4, -1, 19)"], "Series.iter_group_array_items().apply_iter_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_array_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))", "((-2, -4), (8, -1), (19, 19))"], "Series.iter_group_array_items().apply_pool()": [">>> def func(pair): return pair[1].sum()", ">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_array_items().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "-2       -4", "8        16", "19       19", "<int64>  <int64>"], "Series.iter_group_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_items())", "((-2, <Series>", "<Index>", "a        -2", "d        -2", "<<U1>    <int64>), (8, <Series>", "<Index>", "b        8", "e        8", "<<U1>    <int64>), (19, <Series>", "<Index>", "c        19", "<<U1>    <int64>))"], "Series.iter_group_items().apply()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)", "<Series>", "<Index>", "-2       -4", "8        (2,)", "19       19", "<int64>  <object>"], "Series.iter_group_items().apply_iter()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))", "(-4, -1, 19)"], "Series.iter_group_items().apply_iter_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))", "((-2, -4), (8, -1), (19, 19))"], "Series.iter_group_items().apply_pool()": [">>> def func(pair): return pair[1].sum()", ">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_items().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "-2       -4", "8        16", "19       19", "<int64>  <int64>"], "Series.iter_group_labels()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_labels())", "(<Series>", "<Index>", "a        10", "<<U1>    <int64>, <Series>", "<Index>", "b        2", "<<U1>    <int64>, <Series>", "<Index>", "c        8", "<<U1>    <int64>)"], "Series.iter_group_labels().apply()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_labels().apply(lambda s: s.sum())", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "Series.iter_group_labels().apply_iter()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_labels().apply_iter(lambda s: s.sum()))", "(-2, 8, 19, -2, 8)"], "Series.iter_group_labels().apply_iter_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_labels().apply_iter_items(lambda s: s.sum()))", "(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))"], "Series.iter_group_labels().apply_pool()": [">>> def func(s): return s.sum()", ">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_labels().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "Series.iter_group_labels_array()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_labels_array())", "(array([10]), array([2]), array([8]))"], "Series.iter_group_labels_array().apply()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_labels_array().apply(lambda s: s.sum())", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "Series.iter_group_labels_array().apply_iter()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_labels_array().apply_iter(lambda s: s.sum()))", "(-2, 8, 19, -2, 8)"], "Series.iter_group_labels_array().apply_iter_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_labels_array().apply_iter_items(lambda s: s.sum()))", "(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))"], "Series.iter_group_labels_array().apply_pool()": [">>> def func(s): return s.sum()", ">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_labels_array().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "Series.iter_group_labels_array_items()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_labels_array_items())", "(('a', array([10])), ('b', array([2])), ('c', array([8])))"], "Series.iter_group_labels_array_items().apply()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_labels_array_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "Series.iter_group_labels_array_items().apply_iter()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_labels_array_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))", "(-2, 8, 19, -2, 8)"], "Series.iter_group_labels_array_items().apply_iter_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_labels_array_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))", "(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))"], "Series.iter_group_labels_array_items().apply_pool()": [">>> def func(pair): return pair[1].sum()", ">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_labels_array_items().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "Series.iter_group_labels_items()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_labels_items())", "(('a', <Series>", "<Index>", "a        10", "<<U1>    <int64>), ('b', <Series>", "<Index>", "b        2", "<<U1>    <int64>), ('c', <Series>", "<Index>", "c        8", "<<U1>    <int64>))"], "Series.iter_group_labels_items().apply()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_labels_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "Series.iter_group_labels_items().apply_iter()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_labels_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))", "(-2, 8, 19, -2, 8)"], "Series.iter_group_labels_items().apply_iter_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_labels_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))", "(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))"], "Series.iter_group_labels_items().apply_pool()": [">>> def func(pair): return pair[1].sum()", ">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_labels_items().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "Series.iter_group_other()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_other(np.arange(len(s)) % 2))", "(<Series>", "<Index>", "a        -2", "c        19", "e        8", "<<U1>    <int64>, <Series>", "<Index>", "b        8", "d        -2", "<<U1>    <int64>)"], "Series.iter_group_other().apply()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_other(np.arange(len(s)) % 3).apply(lambda s: s.sum())", "<Series>", "<Index>", "0        -4", "1        16", "2        19", "<int64>  <int64>"], "Series.iter_group_other().apply_iter()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_other(np.arange(len(s)) % 3).apply_iter(lambda s: s.sum()))", "(-4, 16, 19)"], "Series.iter_group_other().apply_iter_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_other(np.arange(len(s)) % 3).apply_iter_items(lambda s: s.sum()))", "((0, -4), (1, 16), (2, 19))"], "Series.iter_group_other().apply_pool()": [">>> def func(s): return s.sum()", ">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_other(np.arange(len(s)) % 3).apply_pool(func, use_threads=True)", "<Series>", "<Index>", "0        -4", "1        16", "2        19", "<int64>  <int64>"], "Series.iter_group_other_array()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_other_array(np.arange(len(s)) % 2))", "(array([-2, 19,  8]), array([ 8, -2]))"], "Series.iter_group_other_array().apply()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_other_array(np.arange(len(s)) % 3).apply(lambda s: s.sum())", "<Series>", "<Index>", "0        -4", "1        16", "2        19", "<int64>  <int64>"], "Series.iter_group_other_array().apply_iter()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_other_array(np.arange(len(s)) % 3).apply_iter(lambda s: s.sum()))", "(-4, 16, 19)"], "Series.iter_group_other_array().apply_iter_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_other_array(np.arange(len(s)) % 3).apply_iter_items(lambda s: s.sum()))", "((0, -4), (1, 16), (2, 19))"], "Series.iter_group_other_array().apply_pool()": [">>> def func(s): return s.sum()", ">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_other_array(np.arange(len(s)) % 3).apply_pool(func, use_threads=True)", "<Series>", "<Index>", "0        -4", "1        16", "2        19", "<int64>  <int64>"], "Series.iter_group_other_array_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_other_array_items(np.arange(len(s)) % 2))", "((0, array([-2, 19,  8])), (1, array([ 8, -2])))"], "Series.iter_group_other_array_items().apply()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_other_array_items(np.arange(len(s)) % 3).apply(lambda s: s.sum())", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "Series.iter_group_other_array_items().apply_iter()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_other_array_items(np.arange(len(s)) % 3).apply_iter(lambda s: s.sum()))", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "Series.iter_group_other_array_items().apply_iter_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_other_array_items(np.arange(len(s)) % 3).apply_iter_items(lambda s: s.sum()))", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "Series.iter_group_other_array_items().apply_pool()": [">>> def func(pair): return pair[1].sum()", ">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_other_array_items(np.arange(len(s)) % 3).apply_pool(func, use_threads=True)", "<Series>", "<Index>", "0        -4", "1        16", "2        19", "<int64>  <int64>"], "Series.iter_group_other_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_other_items(np.arange(len(s)) % 2))", "((0, <Series>", "<Index>", "a        -2", "c        19", "e        8", "<<U1>    <int64>), (1, <Series>", "<Index>", "b        8", "d        -2", "<<U1>    <int64>))"], "Series.iter_group_other_items().apply()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_other_items(np.arange(len(s)) % 3).apply(lambda s: s.sum())", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "Series.iter_group_other_items().apply_iter()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_other_items(np.arange(len(s)) % 3).apply_iter(lambda s: s.sum()))", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "Series.iter_group_other_items().apply_iter_items()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> tuple(s.iter_group_other_items(np.arange(len(s)) % 3).apply_iter_items(lambda s: s.sum()))", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "Series.iter_group_other_items().apply_pool()": [">>> def func(pair): return pair[1].sum()", ">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.iter_group_other_items(np.arange(len(s)) % 3).apply_pool(func, use_threads=True)", "<Series>", "<Index>", "0        -4", "1        16", "2        19", "<int64>  <int64>"], "Series.iter_window()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> tuple(s.iter_window(size=3, step=1))", "(<Series>", "<Index>", "a        2", "b        8", "c        19", "<<U1>    <int64>, <Series>", "<Index>", "b        8", "c        19", "d        34", "<<U1>    <int64>, <Series>", "<Index>", "c        19", "d        34", "e        54", "<<U1>    <int64>)"], "Series.iter_window().apply()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iter_window(size=3, step=1).apply(lambda s: s.sum())", "<Series>", "<Index>", "c        29", "d        61", "e        107", "<<U1>    <int64>"], "Series.iter_window().apply_iter()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_window(size=3, step=1).apply_iter(lambda s: s.sum()))", "(29, 61, 107)"], "Series.iter_window().apply_iter_items()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_window(size=3, step=1).apply_iter_items(lambda s: s.sum()))", "(('c', 29), ('d', 61), ('e', 107))"], "Series.iter_window().apply_pool()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iter_window(size=3, step=1).apply_pool(lambda s: s.sum(), use_threads=True)", "<Series>", "<Index>", "c        29", "d        61", "e        107", "<<U1>    <int64>"], "Series.iter_window_array()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> tuple(s.iter_window_array(size=3, step=1))", "(array([ 2,  8, 19]), array([ 8, 19, 34]), array([19, 34, 54]))"], "Series.iter_window_array().apply()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iter_window_array(size=3, step=1).apply(lambda s: s.sum())", "<Series>", "<Index>", "c        29", "d        61", "e        107", "<<U1>    <int64>"], "Series.iter_window_array().apply_iter()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_window_array(size=3, step=1).apply_iter(lambda s: s.sum()))", "(29, 61, 107)"], "Series.iter_window_array().apply_iter_items()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_window_array(size=3, step=1).apply_iter_items(lambda s: s.sum()))", "(('c', 29), ('d', 61), ('e', 107))"], "Series.iter_window_array().apply_pool()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iter_window_array(size=3, step=1).apply_pool(lambda s: s.sum(), use_threads=True)", "<Series>", "<Index>", "c        29", "d        61", "e        107", "<<U1>    <int64>"], "Series.iter_window_array_items()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> tuple(s.iter_window_array_items(size=3, step=1))", "(('c', array([ 2,  8, 19])), ('d', array([ 8, 19, 34])), ('e', array([19, 34, 54])))"], "Series.iter_window_array_items().apply()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iter_window_array_items(size=3, step=1).apply(lambda l, s: s.sum() if l != 'd' else -1)", "<Series>", "<Index>", "c        29", "d        -1", "e        107", "<<U1>    <int64>"], "Series.iter_window_array_items().apply_iter()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_window_array_items(size=3, step=1).apply_iter(lambda l, s: s.sum() if l != 'd' else -1))", "(29, -1, 107)"], "Series.iter_window_array_items().apply_iter_items()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_window_array_items(size=3, step=1).apply_iter_items(lambda l, s: s.sum() if l != 'd' else -1))", "(('c', 29), ('d', -1), ('e', 107))"], "Series.iter_window_array_items().apply_pool()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iter_window_array_items(size=3, step=1).apply_pool(lambda pair: pair[1].sum(), use_threads=True)", "<Series>", "<Index>", "c        29", "d        61", "e        107", "<<U1>    <int64>"], "Series.iter_window_items()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> tuple(s.iter_window_items(size=3, step=1))", "(('c', <Series>", "<Index>", "a        2", "b        8", "c        19", "<<U1>    <int64>), ('d', <Series>", "<Index>", "b        8", "c        19", "d        34", "<<U1>    <int64>), ('e', <Series>", "<Index>", "c        19", "d        34", "e        54", "<<U1>    <int64>))"], "Series.iter_window_items().apply()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iter_window_items(size=3, step=1).apply(lambda l, s: s.sum() if l != 'd' else -1)", "<Series>", "<Index>", "c        29", "d        -1", "e        107", "<<U1>    <int64>"], "Series.iter_window_items().apply_iter()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_window_items(size=3, step=1).apply_iter(lambda l, s: s.sum() if l != 'd' else -1))", "(29, -1, 107)"], "Series.iter_window_items().apply_iter_items()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> tuple(s.iter_window_items(size=3, step=1).apply_iter_items(lambda l, s: s.sum() if l != 'd' else -1))", "(('c', 29), ('d', -1), ('e', 107))"], "Series.iter_window_items().apply_pool()": [">>> s = sf.Series((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        34", "e        54", "<<U1>    <int64>", ">>> s.iter_window_items(size=3, step=1).apply_pool(lambda pair: pair[1].sum(), use_threads=True)", "<Series>", "<Index>", "c        29", "d        61", "e        107", "<<U1>    <int64>"], "Series.__add__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s + 8", "<Series>", "<Index>", "a        18", "b        10", "c        16", "<<U1>    <int64>", ">>> s + s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        nan", "b        4.0", "c        16.0", "<<U1>    <float64>"], "Series.__and__()": [">>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        False", "b        False", "c        True", "<<U1>    <bool>", ">>> s & True", "<Series>", "<Index>", "a        False", "b        False", "c        True", "<<U1>    <bool>", ">>> s & (True, False, True)", "<Series>", "<Index>", "a        False", "b        False", "c        True", "<<U1>    <bool>"], "Series.__eq__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s == 8", "<Series>", "<Index>", "a        False", "b        False", "c        True", "<<U1>    <bool>", ">>> s == s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        False", "b        True", "c        True", "<<U1>    <bool>"], "Series.__floordiv__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s // 8", "<Series>", "<Index>", "a        1", "b        0", "c        1", "<<U1>    <int64>", ">>> s // s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        nan", "b        1.0", "c        1.0", "<<U1>    <float64>"], "Series.__ge__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s >= 8", "<Series>", "<Index>", "a        True", "b        False", "c        True", "<<U1>    <bool>", ">>> s >= s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        False", "b        True", "c        True", "<<U1>    <bool>"], "Series.__gt__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s > 8", "<Series>", "<Index>", "a        True", "b        False", "c        False", "<<U1>    <bool>", ">>> s > s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        False", "b        False", "c        False", "<<U1>    <bool>"], "Series.__le__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s <= 8", "<Series>", "<Index>", "a        False", "b        True", "c        True", "<<U1>    <bool>", ">>> s <= s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        False", "b        True", "c        True", "<<U1>    <bool>"], "Series.__lt__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s < 8", "<Series>", "<Index>", "a        False", "b        True", "c        False", "<<U1>    <bool>", ">>> s < s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        False", "b        False", "c        False", "<<U1>    <bool>"], "Series.__matmul__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s @ (3, 0, 4)", "62"], "Series.__mod__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s % 8", "<Series>", "<Index>", "a        2", "b        2", "c        0", "<<U1>    <int64>", ">>> s % s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        nan", "b        0.0", "c        0.0", "<<U1>    <float64>"], "Series.__mul__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s * 8", "<Series>", "<Index>", "a        80", "b        16", "c        64", "<<U1>    <int64>", ">>> s * s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        nan", "b        4.0", "c        64.0", "<<U1>    <float64>"], "Series.__ne__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s != 8", "<Series>", "<Index>", "a        True", "b        True", "c        False", "<<U1>    <bool>", ">>> s != s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        True", "b        False", "c        False", "<<U1>    <bool>"], "Series.__or__()": [">>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        False", "b        False", "c        True", "<<U1>    <bool>", ">>> s | True", "<Series>", "<Index>", "a        True", "b        True", "c        True", "<<U1>    <bool>", ">>> s | (True, False, True)", "<Series>", "<Index>", "a        True", "b        False", "c        True", "<<U1>    <bool>"], "Series.__pow__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s ** 8", "<Series>", "<Index>", "a        100000000", "b        256", "c        16777216", "<<U1>    <int64>", ">>> s ** s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        nan", "b        4.0", "c        16777216.0", "<<U1>    <float64>"], "Series.__radd__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> 8 + s", "<Series>", "<Index>", "a        18", "b        10", "c        16", "<<U1>    <int64>"], "Series.__rfloordiv__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> 8 // s", "<Series>", "<Index>", "a        0", "b        4", "c        1", "<<U1>    <int64>"], "Series.__rmatmul__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s @ (3, 0, 4)", "62"], "Series.__rmul__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> 8 * s", "<Series>", "<Index>", "a        80", "b        16", "c        64", "<<U1>    <int64>"], "Series.__rshift__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s >> 1", "<Series>", "<Index>", "a        5", "b        1", "c        4", "<<U1>    <int64>"], "Series.__rsub__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> 8 - s", "<Series>", "<Index>", "a        -2", "b        6", "c        0", "<<U1>    <int64>"], "Series.__rtruediv__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> 8 / s", "<Series>", "<Index>", "a        0.8", "b        4.0", "c        1.0", "<<U1>    <float64>"], "Series.__sub__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s - 8", "<Series>", "<Index>", "a        2", "b        -6", "c        0", "<<U1>    <int64>", ">>> s - s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        nan", "b        0.0", "c        0.0", "<<U1>    <float64>"], "Series.__truediv__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s / 8", "<Series>", "<Index>", "a        1.25", "b        0.25", "c        1.0", "<<U1>    <float64>", ">>> s / s.reindex(('c', 'b'))", "<Series>", "<Index>", "a        nan", "b        1.0", "c        1.0", "<<U1>    <float64>"], "Series.__xor__()": [">>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        False", "b        False", "c        True", "<<U1>    <bool>", ">>> s ^ True", "<Series>", "<Index>", "a        True", "b        True", "c        False", "<<U1>    <bool>", ">>> s ^ (True, False, True)", "<Series>", "<Index>", "a        True", "b        False", "c        False", "<<U1>    <bool>"], "Series.__abs__()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> abs(s)", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        2", "e        8", "<<U1>    <int64>"], "Series.__invert__()": [">>> s = sf.Series((False, False, True), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        False", "b        False", "c        True", "<<U1>    <bool>", ">>> ~s", "<Series>", "<Index>", "a        True", "b        True", "c        False", "<<U1>    <bool>"], "Series.__neg__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> -s", "<Series>", "<Index>", "a        -10", "b        -2", "c        -8", "<<U1>    <int64>"], "Series.__pos__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> +s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>"], "Series.abs()": [">>> s = sf.Series((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>", ">>> s.abs()", "<Series>", "<Index>", "a        2", "b        8", "c        19", "d        2", "e        8", "<<U1>    <int64>"], "Series.via_dt.__call__()": [">>> s = sf.Series(('1517-01-01', 'nat', '1517-12-31', 'nat', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        NaT", "c        1517-12-31", "d        NaT", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt(fill_value=-1).year", "<Series>", "<Index>", "a        1517", "b        -1", "c        1517", "d        -1", "e        1517", "<<U1>    <int64>"], "Series.via_dt.year": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.year", "<Series>", "<Index>", "a        1517", "b        1517", "c        1517", "d        1517", "e        1517", "<<U1>    <int64>"], "Series.via_dt.year_month": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.year_month", "<Series>", "<Index>", "a        1517-01", "b        1517-04", "c        1517-12", "d        1517-06", "e        1517-10", "<<U1>    <<U7>"], "Series.via_dt.year_quarter": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.year_quarter", "<Series>", "<Index>", "a        1517-Q1", "b        1517-Q2", "c        1517-Q4", "d        1517-Q2", "e        1517-Q4", "<<U1>    <<U7>"], "Series.via_dt.month": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.month", "<Series>", "<Index>", "a        1", "b        4", "c        12", "d        6", "e        10", "<<U1>    <int64>"], "Series.via_dt.day": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.day", "<Series>", "<Index>", "a        1", "b        1", "c        31", "d        30", "e        1", "<<U1>    <int64>"], "Series.via_dt.hour": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.hour", "<Series>", "<Index>", "a        0", "b        0", "c        0", "d        0", "e        0", "<<U1>    <int64>"], "Series.via_dt.minute": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.minute", "<Series>", "<Index>", "a        0", "b        0", "c        0", "d        0", "e        0", "<<U1>    <int64>"], "Series.via_dt.second": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.second", "<Series>", "<Index>", "a        0", "b        0", "c        0", "d        0", "e        0", "<<U1>    <int64>"], "Series.via_dt.weekday()": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.weekday()", "<Series>", "<Index>", "a        0", "b        6", "c        0", "d        5", "e        0", "<<U1>    <int64>"], "Series.via_dt.quarter()": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.quarter()", "<Series>", "<Index>", "a        1", "b        2", "c        4", "d        2", "e        4", "<<U1>    <int64>"], "Series.via_dt.is_month_end()": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.is_month_end()", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "e        False", "<<U1>    <bool>"], "Series.via_dt.is_month_start()": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.is_month_start()", "<Series>", "<Index>", "a        True", "b        True", "c        False", "d        False", "e        True", "<<U1>    <bool>"], "Series.via_dt.is_year_end()": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.is_year_end()", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        False", "e        False", "<<U1>    <bool>"], "Series.via_dt.is_year_start()": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.is_year_start()", "<Series>", "<Index>", "a        True", "b        False", "c        False", "d        False", "e        False", "<<U1>    <bool>"], "Series.via_dt.is_quarter_end()": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.is_quarter_end()", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "e        False", "<<U1>    <bool>"], "Series.via_dt.is_quarter_start()": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.is_quarter_start()", "<Series>", "<Index>", "a        True", "b        True", "c        False", "d        False", "e        True", "<<U1>    <bool>"], "Series.via_dt.timetuple()": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.timetuple()", "<Series>", "<Index>", "a        time.struct_time(...", "b        time.struct_time(...", "c        time.struct_time(...", "d        time.struct_time(...", "e        time.struct_time(...", "<<U1>    <object>"], "Series.via_dt.isoformat()": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.isoformat()", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <<U10>"], "Series.via_dt.fromisoformat()": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <<U10>", ">>> s.via_dt.fromisoformat()", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <object>"], "Series.via_dt.strftime()": [">>> s = sf.Series(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-12-31", "d        1517-06-30", "e        1517-10-01", "<<U1>    <datetime64[D]>", ">>> s.via_dt.strftime(\"%A | %B\")", "<Series>", "<Index>", "a        Monday | January", "b        Sunday | April", "c        Monday | December", "d        Saturday | June", "e        Monday | October", "<<U1>    <<U17>"], "Series.via_dt.strptime()": [">>> s = sf.Series(('1/1/1517', '4/1/1517', '6/30/1517'), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        1/1/1517", "b        4/1/1517", "c        6/30/1517", "<<U1>    <<U9>", ">>> s.via_dt.strptime(\"%m/%d/%Y\")", "<Series>", "<Index>", "a        1517-01-01 00:00:00", "b        1517-04-01 00:00:00", "c        1517-06-30 00:00:00", "<<U1>    <object>"], "Series.via_dt.strpdate()": [">>> s = sf.Series(('1/1/1517', '4/1/1517', '6/30/1517'), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        1/1/1517", "b        4/1/1517", "c        6/30/1517", "<<U1>    <<U9>", ">>> s.via_dt.strpdate(\"%m/%d/%Y\")", "<Series>", "<Index>", "a        1517-01-01", "b        1517-04-01", "c        1517-06-30", "<<U1>    <object>"], "Series.via_str.__getitem__()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str[-1]", "<Series>", "<Index>", "a", "b        Z", "c        3", "d", "<<U1>    <<U1>"], "Series.via_str.capitalize()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.capitalize()", "<Series>", "<Index>", "a        Qrs", "b        Xyz", "c        123", "d         wx", "<<U1>    <<U4>"], "Series.via_str.center()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.center(8)", "<Series>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>    <<U8>"], "Series.via_str.contains()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.contains('X')", "<Series>", "<Index>", "a        False", "b        True", "c        False", "d        True", "<<U1>    <bool>"], "Series.via_str.count()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.count('X')", "<Series>", "<Index>", "a        0", "b        1", "c        0", "d        1", "<<U1>    <int64>"], "Series.via_str.decode()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd')).astype(bytes)", ">>> s", "<Series>", "<Index>", "a        b'qrs '", "b        b'XYZ'", "c        b'123'", "d        b' wX '", "<<U1>    <|S4>", ">>> s.via_str.decode()", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>"], "Series.via_str.encode()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.encode()", "<Series>", "<Index>", "a        b'qrs '", "b        b'XYZ'", "c        b'123'", "d        b' wX '", "<<U1>    <|S4>"], "Series.via_str.endswith()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.endswith(' ')", "<Series>", "<Index>", "a        True", "b        False", "c        False", "d        True", "<<U1>    <bool>"], "Series.via_str.find()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.find('X')", "<Series>", "<Index>", "a        -1", "b        0", "c        -1", "d        2", "<<U1>    <int64>"], "Series.via_str.format()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.format('{:-^10}')", "<Series>", "<Index>", "a        ---qrs ---", "b        ---XYZ----", "c        ---123----", "d        --- wX ---", "<<U1>    <<U10>"], "Series.via_str.index()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.index('X')", "ValueError('substring not found')"], "Series.via_str.isalnum()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.isalnum()", "<Series>", "<Index>", "a        False", "b        True", "c        True", "d        False", "<<U1>    <bool>"], "Series.via_str.isalpha()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.isalpha()", "<Series>", "<Index>", "a        False", "b        True", "c        False", "d        False", "<<U1>    <bool>"], "Series.via_str.isdecimal()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.isdecimal()", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        False", "<<U1>    <bool>"], "Series.via_str.isdigit()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.isdigit()", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        False", "<<U1>    <bool>"], "Series.via_str.islower()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.islower()", "<Series>", "<Index>", "a        True", "b        False", "c        False", "d        False", "<<U1>    <bool>"], "Series.via_str.isnumeric()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.isnumeric()", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        False", "<<U1>    <bool>"], "Series.via_str.isspace()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.isspace()", "<Series>", "<Index>", "a        False", "b        False", "c        False", "d        False", "<<U1>    <bool>"], "Series.via_str.istitle()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.istitle()", "<Series>", "<Index>", "a        False", "b        False", "c        False", "d        False", "<<U1>    <bool>"], "Series.via_str.isupper()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.isupper()", "<Series>", "<Index>", "a        False", "b        True", "c        False", "d        False", "<<U1>    <bool>"], "Series.via_str.ljust()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.ljust(8)", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U8>"], "Series.via_str.len()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.len()", "<Series>", "<Index>", "a        4", "b        3", "c        3", "d        4", "<<U1>    <int64>"], "Series.via_str.lower()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.lower()", "<Series>", "<Index>", "a        qrs", "b        xyz", "c        123", "d         wx", "<<U1>    <<U4>"], "Series.via_str.lstrip()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.lstrip()", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d        wX", "<<U1>    <<U4>"], "Series.via_str.partition()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.partition('X')", "<Series>", "<Index>", "a        ('qrs ', '', '')", "b        ('', 'X', 'YZ')", "c        ('123', '', '')", "d        (' w', 'X', ' ')", "<<U1>    <object>"], "Series.via_str.replace()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.replace('X', '*')", "<Series>", "<Index>", "a        qrs", "b        *YZ", "c        123", "d         w*", "<<U1>    <<U4>"], "Series.via_str.rfind()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.rfind('X')", "<Series>", "<Index>", "a        -1", "b        0", "c        -1", "d        2", "<<U1>    <int64>"], "Series.via_str.rindex()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.rindex('X')", "ValueError('substring not found')"], "Series.via_str.rjust()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.rjust(8)", "<Series>", "<Index>", "a            qrs", "b             XYZ", "c             123", "d             wX", "<<U1>    <<U8>"], "Series.via_str.rpartition()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.rpartition('X')", "<Series>", "<Index>", "a        ('', '', 'qrs ')", "b        ('', 'X', 'YZ')", "c        ('', '', '123')", "d        (' w', 'X', ' ')", "<<U1>    <object>"], "Series.via_str.rsplit()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.rsplit('X')", "<Series>", "<Index>", "a        ('qrs ',)", "b        ('', 'YZ')", "c        ('123',)", "d        (' w', ' ')", "<<U1>    <object>"], "Series.via_str.rstrip()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.rstrip()", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>"], "Series.via_str.split()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.split('X')", "<Series>", "<Index>", "a        ('qrs ',)", "b        ('', 'YZ')", "c        ('123',)", "d        (' w', ' ')", "<<U1>    <object>"], "Series.via_str.startswith()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.startswith('X')", "<Series>", "<Index>", "a        False", "b        True", "c        False", "d        False", "<<U1>    <bool>"], "Series.via_str.strip()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.strip()", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d        wX", "<<U1>    <<U4>"], "Series.via_str.swapcase()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.swapcase()", "<Series>", "<Index>", "a        QRS", "b        xyz", "c        123", "d         Wx", "<<U1>    <<U4>"], "Series.via_str.title()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.title()", "<Series>", "<Index>", "a        Qrs", "b        Xyz", "c        123", "d         Wx", "<<U1>    <<U4>"], "Series.via_str.upper()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.upper()", "<Series>", "<Index>", "a        QRS", "b        XYZ", "c        123", "d         WX", "<<U1>    <<U4>"], "Series.via_str.zfill()": [">>> s = sf.Series(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<Series>", "<Index>", "a        qrs", "b        XYZ", "c        123", "d         wX", "<<U1>    <<U4>", ">>> s.via_str.zfill(8)", "<Series>", "<Index>", "a        0000qrs", "b        00000XYZ", "c        00000123", "d        0000 wX", "<<U1>    <<U8>"], "Series.via_fill_value().loc": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_fill_value(0).loc[['a', 'c', 'd', 'e']]", "<Series>", "<Index>", "a        10", "c        8", "d        0", "e        0", "<<U1>    <int64>"], "Series.via_fill_value().__getitem__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_fill_value(0)[['a', 'c', 'd', 'e']]", "<Series>", "<Index>", "a        10", "c        8", "d        0", "e        0", "<<U1>    <int64>"], "Series.via_fill_value().via_T": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_fill_value().via_T", "NotImplementedError('via_T functionality only available on Frame')"], "Series.via_fill_value().__add__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) + s2", "<Series>", "<Index>", "a        10", "b        4", "c        16", "d        19", "<<U1>    <int64>"], "Series.via_fill_value().__sub__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) - s2", "<Series>", "<Index>", "a        10", "b        0", "c        0", "d        -19", "<<U1>    <int64>"], "Series.via_fill_value().__mul__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) * s2", "<Series>", "<Index>", "a        0", "b        4", "c        64", "d        0", "<<U1>    <int64>"], "Series.via_fill_value().__truediv__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) / s2", "<Series>", "<Index>", "a        inf", "b        1.0", "c        1.0", "d        0.0", "<<U1>    <float64>"], "Series.via_fill_value().__floordiv__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) // s2", "<Series>", "<Index>", "a        0", "b        1", "c        1", "d        0", "<<U1>    <int64>"], "Series.via_fill_value().__mod__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) % s2", "<Series>", "<Index>", "a        0", "b        0", "c        0", "d        0", "<<U1>    <int64>"], "Series.via_fill_value().__pow__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) ** s2", "<Series>", "<Index>", "a        1", "b        4", "c        16777216", "d        0", "<<U1>    <int64>"], "Series.via_fill_value().__lshift__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s1", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2", "<Series>", "<Index>", "b        2", "c        8", "d        19", "<<U1>    <int64>", ">>> s1.via_fill_value(0) << s2", "<Series>", "<Index>", "a        10", "b        8", "c        2048", "d        0", "<<U1>    <int64>"], "Series.via_fill_value().__rshift__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s1", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2", "<Series>", "<Index>", "b        2", "c        8", "d        19", "<<U1>    <int64>", ">>> s1.via_fill_value(0) >> s2", "<Series>", "<Index>", "a        10", "b        0", "c        0", "d        0", "<<U1>    <int64>"], "Series.via_fill_value().__and__()": [">>> s1 = sf.Series((False, False, True), index=('a', 'b', 'c'))", ">>> s1", "<Series>", "<Index>", "a        False", "b        False", "c        True", "<<U1>    <bool>", ">>> s2 = sf.Series((False, False, True), index=('b', 'c', 'd'))", ">>> s2", "<Series>", "<Index>", "b        False", "c        False", "d        True", "<<U1>    <bool>", ">>> s1.via_fill_value(False) & s2", "<Series>", "<Index>", "a        False", "b        False", "c        False", "d        False", "<<U1>    <bool>"], "Series.via_fill_value().__xor__()": [">>> s1 = sf.Series((False, False, True), index=('a', 'b', 'c'))", ">>> s1", "<Series>", "<Index>", "a        False", "b        False", "c        True", "<<U1>    <bool>", ">>> s2 = sf.Series((False, False, True), index=('b', 'c', 'd'))", ">>> s2", "<Series>", "<Index>", "b        False", "c        False", "d        True", "<<U1>    <bool>", ">>> s1.via_fill_value(False) ^ s2", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "<<U1>    <bool>"], "Series.via_fill_value().__or__()": [">>> s1 = sf.Series((False, False, True), index=('a', 'b', 'c'))", ">>> s1", "<Series>", "<Index>", "a        False", "b        False", "c        True", "<<U1>    <bool>", ">>> s2 = sf.Series((False, False, True), index=('b', 'c', 'd'))", ">>> s2", "<Series>", "<Index>", "b        False", "c        False", "d        True", "<<U1>    <bool>", ">>> s1.via_fill_value(False) | s2", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "<<U1>    <bool>"], "Series.via_fill_value().__lt__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) < s2", "<Series>", "<Index>", "a        False", "b        False", "c        False", "d        True", "<<U1>    <bool>"], "Series.via_fill_value().__le__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) <= s2", "<Series>", "<Index>", "a        False", "b        True", "c        True", "d        True", "<<U1>    <bool>"], "Series.via_fill_value().__eq__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) == s2", "<Series>", "<Index>", "a        False", "b        True", "c        True", "d        False", "<<U1>    <bool>"], "Series.via_fill_value().__ne__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) != s2", "<Series>", "<Index>", "a        True", "b        False", "c        False", "d        True", "<<U1>    <bool>"], "Series.via_fill_value().__gt__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) > s2", "<Series>", "<Index>", "a        True", "b        False", "c        False", "d        False", "<<U1>    <bool>"], "Series.via_fill_value().__ge__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) >= s2", "<Series>", "<Index>", "a        True", "b        True", "c        True", "d        False", "<<U1>    <bool>"], "Series.via_fill_value().__radd__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2 + s1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "Series.via_fill_value().__rsub__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2 - s1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "Series.via_fill_value().__rmul__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2 * s1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "Series.via_fill_value().__rtruediv__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2 / s1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "Series.via_fill_value().__rfloordiv__()": [">>> s1 = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2 // s1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "Series.via_re().search()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_re('[X123]').search()", "<Series>", "<Index>", "a        True", "b        True", "c        False", "<<U1>    <bool>"], "Series.via_re().match()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_re('[X123]').match()", "<Series>", "<Index>", "a        True", "b        True", "c        False", "<<U1>    <bool>"], "Series.via_re().fullmatch()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_re('123').fullmatch()", "<Series>", "<Index>", "a        False", "b        False", "c        False", "<<U1>    <bool>"], "Series.via_re().split()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_re('[X123]').split()", "<Series>", "<Index>", "a        ('', '0')", "b        ('', '')", "c        ('8',)", "<<U1>    <object>"], "Series.via_re().findall()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_re('[X123]').findall()", "<Series>", "<Index>", "a        ('1',)", "b        ('2',)", "c        ()", "<<U1>    <object>"], "Series.via_re().sub()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_re('[X123]').sub('==')", "<Series>", "<Index>", "a        ==0", "b        ==", "c        8", "<<U1>    <<U3>"], "Series.via_re().subn()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_re('[X123]').subn('==', 1)", "<Series>", "<Index>", "a        ('==0', 1)", "b        ('==', 1)", "c        ('8', 0)", "<<U1>    <object>"], "Series.via_hashlib().to_bytes()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_hashlib(include_name=False).to_bytes()", "b'SeriesIndexa\\x00\\x00\\x00b\\x00\\x00\\x00c\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"], "Series.via_hashlib().md5()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_hashlib(include_name=False).md5().hexdigest()", "26bd37f450abdd377203e09caf69938f"], "Series.via_hashlib().sha256()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_hashlib(include_name=False).sha256().hexdigest()", "c5ec06f331d6d46619d0aaf80ec108ed75c19c7eadab02eb8b9cfedfeacb545a"], "Series.via_hashlib().sha512()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_hashlib(include_name=False).sha512().hexdigest()", "bd2bdf65190bea5c9791a93a4054a017d734e9d0a3b70fe653e57a8a439471799772c3d5c27a526cd75f38b71bb76b6986890af526f585c5fd1948e0e6be593d"], "Series.via_hashlib().sha3_256()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_hashlib(include_name=False).sha3_256().hexdigest()", "725b43097dd0cd431472ecbca282f4b266572e95566934283454d0da2cc4e4a6"], "Series.via_hashlib().sha3_512()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_hashlib(include_name=False).sha3_512().hexdigest()", "257e480af41633d847bd14b25fe44215cf399e1551ad9595843a2ffd0c8aef29c08ed46cae57f1d643f9008cb6540939da09d3d7e647175700bb3c673580c3e7"], "Series.via_hashlib().shake_128()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_hashlib(include_name=False).shake_128().hexdigest(8)", "68bdf5ad76781e02"], "Series.via_hashlib().shake_256()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_hashlib(include_name=False).shake_256().hexdigest(8)", "8e306e9b6678acd8"], "Series.via_hashlib().blake2b()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_hashlib(include_name=False).blake2b().hexdigest()", "4265680faba702878390c51479bdbdd36eb8baeb7f4dba4e67aa4926c26b8eb398a560cd63f2207025530f0d924fc0714eca431da1918a39c4075c4815f50b3a"], "Series.via_hashlib().blake2s()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_hashlib(include_name=False).blake2s().hexdigest()", "74f1f9284284a7c12d12f149f642fc264f1041f3fcfdc2ed233eacc27288bde0"], "Series.via_values.apply()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> s.via_values.apply(np.sin)", "<Series>", "<Index>", "a        -0.5440211108893698", "b        0.9092974268256817", "c        0.9893582466233818", "<<U1>    <float64>"], "Series.via_values.__array_ufunc__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> np.sin(s.via_values)", "<Series>", "<Index>", "a        -0.5440211108893698", "b        0.9092974268256817", "c        0.9893582466233818", "<<U1>    <float64>"], "Series.via_values.__call__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>", ">>> np.sin(s.via_values(unify_blocks=True))", "<Series>", "<Index>", "a        -0.5440211108893698", "b        0.9092974268256817", "c        0.9893582466233818", "<<U1>    <float64>"], "Series.via_type_clinic.to_hint()": [">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> s.via_type_clinic.to_hint()", "static_frame.core.series.Series[static_frame.core.index.Index[numpy.str_], numpy.bool_]"], "Series.via_type_clinic.check()": [">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> s.via_type_clinic.check(sf.Series[sf.Index[np.str_], np.int64])", "ClinicError('\\nIn Series[Index[str_], int64]\\n\u2514\u2500\u2500 Expected int64, provided bool_ invalid')"], "Series.via_type_clinic.__call__()": [">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> cr = s.via_type_clinic(sf.Series[sf.Index[np.str_], np.int64])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Series[Index[str_], int64]", "\u2514\u2500\u2500 Expected int64, provided bool_ invalid"], "Series.via_type_clinic.__repr__()": [">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> s.via_type_clinic", "Series[Index[str_], bool_]"], "Series.via_mapping.__getitem__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.via_mapping['c']", "8"], "Series.via_mapping.__iter__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> tuple(s.via_mapping)", "('a', 'b', 'c')"], "Series.via_mapping.__len__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> len(s.via_mapping)", "3"], "Series.via_mapping.__contains__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> 'c' in s.via_mapping", "True"], "Series.via_mapping.__repr__()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.via_mapping", "SeriesMapping({a: 10, b: 2, c: 8})"], "Series.via_mapping.keys()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> tuple(s.via_mapping.keys())", "('a', 'b', 'c')"], "Series.via_mapping.values()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> tuple(s.via_mapping.values())", "(10, 2, 8)"], "Series.via_mapping.items()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> tuple(s.via_mapping.items())", "(('a', 10), ('b', 2), ('c', 8))"], "SeriesHE.__init__()": [">>> sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>"], "SeriesHE.from_concat()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s1", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s2 = sf.SeriesHE((4, 3, 12), index=('d', 'e', 'f'))", ">>> s2", "<SeriesHE>", "<Index>", "d          4", "e          3", "f          12", "<<U1>      <int64>", ">>> sf.SeriesHE.from_concat((s1, s2))", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "d          4", "e          3", "f          12", "<<U1>      <int64>"], "SeriesHE.from_concat_items()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s1", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s2 = sf.SeriesHE((4, 3, 12), index=('d', 'e', 'f'))", ">>> s2", "<SeriesHE>", "<Index>", "d          4", "e          3", "f          12", "<<U1>      <int64>", ">>> sf.SeriesHE.from_concat_items((('x', s1), ('y', s2)))", "<SeriesHE>", "<IndexHierarchy>", "x                a     10", "x                b     2", "x                c     8", "y                d     4", "y                e     3", "y                f     12", "<<U1>            <<U1> <int64>"], "SeriesHE.from_delimited()": [">>> sf.SeriesHE.from_delimited('1.2|5.5|8.2|-3.0', delimiter='|')", "<SeriesHE>", "<Index>", "0          1.2", "1          5.5", "2          8.2", "3          -3.0", "<int64>    <float64>", ">>> sf.SeriesHE.from_delimited('2021-01:1517-04:1620-12', delimiter=':', dtype=np.datetime64)", "<SeriesHE>", "<Index>", "0          2021-01", "1          1517-04", "2          1620-12", "<int64>    <datetime64[M]>"], "SeriesHE.from_dict()": [">>> sf.SeriesHE.from_dict(dict(a=10, b=2, c=8))", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>"], "SeriesHE.from_element()": [">>> sf.SeriesHE.from_element(-1, index=('a', 'b', 'c'), name='x')", "<SeriesHE: x>", "<Index>", "a             -1", "b             -1", "c             -1", "<<U1>         <int64>"], "SeriesHE.from_items()": [">>> sf.SeriesHE.from_items((('a', 10), ('b', 2), ('c', 8)), name='x')", "<SeriesHE: x>", "<Index>", "a             10", "b             2", "c             8", "<<U1>         <int64>"], "SeriesHE.from_overlay()": [">>> s1 = sf.SeriesHE((11, 1, None), index=('a', 'b', 'c'))", ">>> s1", "<SeriesHE>", "<Index>", "a          11", "b          1", "c          None", "<<U1>      <object>", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2", "<SeriesHE>", "<Index>", "b          2", "c          8", "d          19", "<<U1>      <int64>", ">>> sf.SeriesHE.from_overlay((s1, s2))", "<SeriesHE>", "<Index>", "a          11", "b          1", "c          8", "d          19", "<<U1>      <object>"], "SeriesHE.from_pandas()": [">>> df = pd.Series((10, 2, 8), index=('a', 'b', 'c'))", ">>> sf.SeriesHE.from_pandas(df)", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<object>   <int64>"], "SeriesHE.to_frame()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "a       10", "b       2", "c       8", "<<U1>   <int64>"], "SeriesHE.to_frame_go()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.to_frame_go()", "<FrameGO>", "<IndexGO> 0       <int64>", "<Index>", "a         10", "b         2", "c         8", "<<U1>     <int64>"], "SeriesHE.to_frame_he()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.to_frame_he()", "<FrameHE>", "<Index>   0       <int64>", "<Index>", "a         10", "b         2", "c         8", "<<U1>     <int64>"], "SeriesHE.to_pairs()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.to_pairs()", "(('a', 10), ('b', 2), ('c', 8))"], "SeriesHE.to_pandas()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.to_pandas()", "a    10", "b     2", "c     8", "dtype: int64"], "SeriesHE.to_series()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.to_series()", "<Series>", "<Index>", "a        10", "b        2", "c        8", "<<U1>    <int64>"], "SeriesHE.to_series_he()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.to_series_he()", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>"], "SeriesHE.STATIC": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.STATIC", "True"], "SeriesHE.T": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.T", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>"], "SeriesHE.dtype": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.dtype", "int64"], "SeriesHE.index": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.index", "<Index>", "a", "b", "c", "<<U1>"], "SeriesHE.memory": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.memory", "       L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu", "Name   16   B     16   B     16  B     16   B     16   B     16  B", "Index  800  B     832  B     576 B     8.89 KB    856  B     600 B", "Values 136  B     152  B     24  B     136  B     152  B     24  B", "Total  1000 B     1.02 KB    664 B     9.09 KB    1.05 KB    688 B"], "SeriesHE.name": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.name"], "SeriesHE.nbytes": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.nbytes", "24"], "SeriesHE.ndim": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.ndim", "1"], "SeriesHE.shape": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.shape", "(3,)"], "SeriesHE.size": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.size", "3"], "SeriesHE.__array__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.__array__()", "[10  2  8]"], "SeriesHE.__array_ufunc__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> np.array((0, 1, 0)) * s", "<SeriesHE>", "<Index>", "a          0", "b          2", "c          0", "<<U1>      <int64>"], "SeriesHE.__bool__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> bool(s)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "SeriesHE.__deepcopy__()": [">>> import copy", ">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> copy.deepcopy(s)", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>"], "SeriesHE.__len__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> len(s)", "3"], "SeriesHE.__round__()": [">>> s = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          8.734", "<<U1>      <float64>", ">>> round(s, 1)", "<SeriesHE>", "<Index>", "a          10.2", "b          2.1", "c          8.7", "<<U1>      <float64>"], "SeriesHE.all()": [">>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "<<U1>      <bool>", ">>> s.all()", "False"], "SeriesHE.any()": [">>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "<<U1>      <bool>", ">>> s.any()", "True"], "SeriesHE.astype()": [">>> s = sf.SeriesHE((11, 1, None), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          11", "b          1", "c          None", "<<U1>      <object>", ">>> s.astype(float)", "<SeriesHE>", "<Index>", "a          11.0", "b          1.0", "c          nan", "<<U1>      <float64>"], "SeriesHE.clip()": [">>> s = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          8.734", "<<U1>      <float64>", ">>> s.clip(lower=2.5, upper=10.1)", "<SeriesHE>", "<Index>", "a          10.1", "b          2.5", "c          8.734", "<<U1>      <float64>"], "SeriesHE.corr()": [">>> s1 = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))", ">>> s1", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          8.734", "<<U1>      <float64>", ">>> s2 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s1.corr(s2)", "0.9977051066985492"], "SeriesHE.count()": [">>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          None", "d          8", "<<U1>      <object>", ">>> s.count(skipna=True)", "3", ">>> s.count(unique=True)", "2"], "SeriesHE.cov()": [">>> s1 = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))", ">>> s1", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          8.734", "<<U1>      <float64>", ">>> s2 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s1.cov(s2)", "17.924999999999997"], "SeriesHE.cumprod()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.cumprod()", "<SeriesHE>", "<Index>", "a          10", "b          20", "c          160", "<<U1>      <int64>"], "SeriesHE.cumsum()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.cumsum()", "<SeriesHE>", "<Index>", "a          10", "b          12", "c          20", "<<U1>      <int64>"], "SeriesHE.drop_duplicated()": [">>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          None", "d          8", "<<U1>      <object>", ">>> s.drop_duplicated()", "<SeriesHE>", "<Index>", "b          5", "c          None", "<<U1>      <object>"], "SeriesHE.dropfalsy()": [">>> s = sf.SeriesHE(('q', 'r', '', 's'), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          q", "b          r", "c", "d          s", "<<U1>      <<U1>", ">>> s.dropfalsy()", "<SeriesHE>", "<Index>", "a          q", "b          r", "d          s", "<<U1>      <<U1>"], "SeriesHE.dropna()": [">>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          None", "d          8", "<<U1>      <object>", ">>> s.dropna()", "<SeriesHE>", "<Index>", "a          8", "b          5", "d          8", "<<U1>      <object>"], "SeriesHE.duplicated()": [">>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          None", "d          8", "<<U1>      <object>", ">>> s.duplicated()", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          False", "d          True", "<<U1>      <bool>"], "SeriesHE.equals()": [">>> s1 = sf.SeriesHE((10.235, 2.124, 8.734), index=('a', 'b', 'c'))", ">>> s1", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          8.734", "<<U1>      <float64>", ">>> s2 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s1.equals(s2)", "False"], "SeriesHE.fillfalsy()": [">>> s = sf.SeriesHE(('q', 'r', '', 's'), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          q", "b          r", "c", "d          s", "<<U1>      <<U1>", ">>> s.fillfalsy('missing')", "<SeriesHE>", "<Index>", "a          q", "b          r", "c          missing", "d          s", "<<U1>      <<U7>"], "SeriesHE.fillfalsy_backward()": [">>> s = sf.SeriesHE(('', '', 'r', 's'), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a", "b", "c          r", "d          s", "<<U1>      <<U1>", ">>> s.fillfalsy_backward()", "<SeriesHE>", "<Index>", "a          r", "b          r", "c          r", "d          s", "<<U1>      <<U1>"], "SeriesHE.fillfalsy_forward()": [">>> s = sf.SeriesHE(('p', 'q', '', ''), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          p", "b          q", "c", "d", "<<U1>      <<U1>", ">>> s.fillfalsy_forward()", "<SeriesHE>", "<Index>", "a          p", "b          q", "c          q", "d          q", "<<U1>      <<U1>"], "SeriesHE.fillfalsy_leading()": [">>> s = sf.SeriesHE(('', '', 'r', 's'), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a", "b", "c          r", "d          s", "<<U1>      <<U1>", ">>> s.fillfalsy_leading('missing')", "<SeriesHE>", "<Index>", "a          missing", "b          missing", "c          r", "d          s", "<<U1>      <<U7>"], "SeriesHE.fillfalsy_trailing()": [">>> s = sf.SeriesHE(('p', 'q', '', ''), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          p", "b          q", "c", "d", "<<U1>      <<U1>", ">>> s.fillfalsy_trailing('missing')", "<SeriesHE>", "<Index>", "a          p", "b          q", "c          missing", "d          missing", "<<U1>      <<U7>"], "SeriesHE.fillna()": [">>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          nan", "d          8.734", "e          nan", "<<U1>      <float64>", ">>> s.fillna(0.0)", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          0.0", "d          8.734", "e          0.0", "<<U1>      <float64>"], "SeriesHE.fillna_backward()": [">>> s = sf.SeriesHE((np.nan, np.nan, 10.235, 2.124, 8.734), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          nan", "b          nan", "c          10.235", "d          2.124", "e          8.734", "<<U1>      <float64>", ">>> s.fillna_backward()", "<SeriesHE>", "<Index>", "a          10.235", "b          10.235", "c          10.235", "d          2.124", "e          8.734", "<<U1>      <float64>"], "SeriesHE.fillna_forward()": [">>> s = sf.SeriesHE((10.235, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          8.734", "d          nan", "e          nan", "<<U1>      <float64>", ">>> s.fillna_forward()", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          8.734", "d          8.734", "e          8.734", "<<U1>      <float64>"], "SeriesHE.fillna_leading()": [">>> s = sf.SeriesHE((np.nan, np.nan, 10.235, 2.124, 8.734), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          nan", "b          nan", "c          10.235", "d          2.124", "e          8.734", "<<U1>      <float64>", ">>> s.fillna_leading(0.0)", "<SeriesHE>", "<Index>", "a          0.0", "b          0.0", "c          10.235", "d          2.124", "e          8.734", "<<U1>      <float64>"], "SeriesHE.fillna_trailing()": [">>> s = sf.SeriesHE((10.235, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          8.734", "d          nan", "e          nan", "<<U1>      <float64>", ">>> s.fillna_trailing(0.0)", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          8.734", "d          0.0", "e          0.0", "<<U1>      <float64>"], "SeriesHE.head()": [">>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          nan", "d          8.734", "e          nan", "<<U1>      <float64>", ">>> s.head(2)", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "<<U1>      <float64>"], "SeriesHE.iloc_max()": [">>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          nan", "d          8.734", "e          nan", "<<U1>      <float64>", ">>> s.iloc_max()", "0"], "SeriesHE.iloc_min()": [">>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          nan", "d          8.734", "e          nan", "<<U1>      <float64>", ">>> s.iloc_min()", "1"], "SeriesHE.iloc_notfalsy_first()": [">>> s = sf.SeriesHE(('', '', 19, 34, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a", "b", "c          19", "d          34", "e          None", "<<U1>      <object>", ">>> s.iloc_notfalsy_first()", "2"], "SeriesHE.iloc_notfalsy_last()": [">>> s = sf.SeriesHE(('', '', 19, 34, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a", "b", "c          19", "d          34", "e          None", "<<U1>      <object>", ">>> s.iloc_notfalsy_last()", "3"], "SeriesHE.iloc_notna_first()": [">>> s = sf.SeriesHE((np.nan, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          nan", "b          2.124", "c          8.734", "d          nan", "e          nan", "<<U1>      <float64>", ">>> s.iloc_notna_first()", "1"], "SeriesHE.iloc_notna_last()": [">>> s = sf.SeriesHE((np.nan, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          nan", "b          2.124", "c          8.734", "d          nan", "e          nan", "<<U1>      <float64>", ">>> s.iloc_notna_last()", "2"], "SeriesHE.iloc_searchsorted()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iloc_searchsorted(18)", "2"], "SeriesHE.insert_after()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((4, 3, 12), index=('d', 'e', 'f'))", ">>> s1.insert_after('b', s2)", "<SeriesHE>", "<Index>", "a          10", "b          2", "d          4", "e          3", "f          12", "c          8", "<<U1>      <int64>"], "SeriesHE.insert_before()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((4, 3, 12), index=('d', 'e', 'f'))", ">>> s1.insert_before('b', s2)", "<SeriesHE>", "<Index>", "a          10", "d          4", "e          3", "f          12", "b          2", "c          8", "<<U1>      <int64>"], "SeriesHE.isfalsy()": [">>> s = sf.SeriesHE((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b", "c          19", "d          0", "e          None", "<<U1>      <object>", ">>> s.isfalsy()", "<SeriesHE>", "<Index>", "a          False", "b          True", "c          False", "d          True", "e          True", "<<U1>      <bool>"], "SeriesHE.isin()": [">>> s = sf.SeriesHE((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s.isin((2, 19))", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          True", "d          False", "e          False", "<<U1>      <bool>"], "SeriesHE.isna()": [">>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          nan", "d          8.734", "e          nan", "<<U1>      <float64>", ">>> s.isna()", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          False", "e          True", "<<U1>      <bool>"], "SeriesHE.loc_max()": [">>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          nan", "d          8.734", "e          nan", "<<U1>      <float64>", ">>> s.loc_max()", "a"], "SeriesHE.loc_min()": [">>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          nan", "d          8.734", "e          nan", "<<U1>      <float64>", ">>> s.loc_min()", "b"], "SeriesHE.loc_notfalsy_first()": [">>> s = sf.SeriesHE(('', '', 19, 34, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a", "b", "c          19", "d          34", "e          None", "<<U1>      <object>", ">>> s.loc_notfalsy_first()", "c"], "SeriesHE.loc_notfalsy_last()": [">>> s = sf.SeriesHE(('', '', 19, 34, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a", "b", "c          19", "d          34", "e          None", "<<U1>      <object>", ">>> s.loc_notfalsy_last()", "d"], "SeriesHE.loc_notna_first()": [">>> s = sf.SeriesHE((np.nan, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          nan", "b          2.124", "c          8.734", "d          nan", "e          nan", "<<U1>      <float64>", ">>> s.loc_notna_first()", "b"], "SeriesHE.loc_notna_last()": [">>> s = sf.SeriesHE((np.nan, 2.124, 8.734, np.nan, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          nan", "b          2.124", "c          8.734", "d          nan", "e          nan", "<<U1>      <float64>", ">>> s.loc_notna_last()", "c"], "SeriesHE.loc_searchsorted()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.loc_searchsorted(18)", "c"], "SeriesHE.max()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.max()", "10"], "SeriesHE.mean()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.mean()", "6.666666666666667"], "SeriesHE.median()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.median()", "8.0"], "SeriesHE.min()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.min()", "2"], "SeriesHE.notfalsy()": [">>> s = sf.SeriesHE((2, '', 19, 0, None), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b", "c          19", "d          0", "e          None", "<<U1>      <object>", ">>> s.notfalsy()", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          True", "d          False", "e          False", "<<U1>      <bool>"], "SeriesHE.notna()": [">>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          nan", "d          8.734", "e          nan", "<<U1>      <float64>", ">>> s.notna()", "<SeriesHE>", "<Index>", "a          True", "b          True", "c          False", "d          True", "e          False", "<<U1>      <bool>"], "SeriesHE.prod()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.prod()", "160"], "SeriesHE.rank_dense()": [">>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          0", "d          8", "<<U1>      <int64>", ">>> s.rank_dense()", "<SeriesHE>", "<Index>", "a          2", "b          1", "c          0", "d          2", "<<U1>      <int64>"], "SeriesHE.rank_max()": [">>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          0", "d          8", "<<U1>      <int64>", ">>> s.rank_max()", "<SeriesHE>", "<Index>", "a          3", "b          1", "c          0", "d          3", "<<U1>      <int64>"], "SeriesHE.rank_mean()": [">>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          0", "d          8", "<<U1>      <int64>", ">>> s.rank_mean()", "<SeriesHE>", "<Index>", "a          2.5", "b          1.0", "c          0.0", "d          2.5", "<<U1>      <float64>"], "SeriesHE.rank_min()": [">>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          0", "d          8", "<<U1>      <int64>", ">>> s.rank_min()", "<SeriesHE>", "<Index>", "a          2", "b          1", "c          0", "d          2", "<<U1>      <int64>"], "SeriesHE.rank_ordinal()": [">>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          0", "d          8", "<<U1>      <int64>", ">>> s.rank_ordinal()", "<SeriesHE>", "<Index>", "a          2", "b          1", "c          0", "d          3", "<<U1>      <int64>"], "SeriesHE.rehierarch()": [">>> s = sf.SeriesHE((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))", ">>> s", "<SeriesHE>", "<IndexHierarchy>", "1                a     3", "1                b     2", "2                a     8", "2                b     7", "<int64>          <<U1> <int64>", ">>> s.rehierarch((1, 0))", "<SeriesHE>", "<IndexHierarchy>", "a                1       3", "a                2       8", "b                1       2", "b                2       7", "<<U1>            <int64> <int64>"], "SeriesHE.reindex()": [">>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          0", "d          8", "<<U1>      <int64>", ">>> s.reindex(('d', 'f', 'e', 'c'), fill_value=-1)", "<SeriesHE>", "<Index>", "d          8", "f          -1", "e          -1", "c          0", "<<U1>      <int64>"], "SeriesHE.relabel()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.relabel(('x', 'y', 'z'))", "<SeriesHE>", "<Index>", "x          10", "y          2", "z          8", "<<U1>      <int64>", ">>> s.relabel(dict(a='x', b='y'))", "<SeriesHE>", "<Index>", "x          10", "y          2", "c          8", "<<U1>      <int64>", ">>> s.relabel(lambda l: f'+{l.upper()}+')", "<SeriesHE>", "<Index>", "+A+        10", "+B+        2", "+C+        8", "<<U3>      <int64>"], "SeriesHE.relabel_flat()": [">>> s = sf.SeriesHE((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))", ">>> s", "<SeriesHE>", "<IndexHierarchy>", "1                a     3", "1                b     2", "2                a     8", "2                b     7", "<int64>          <<U1> <int64>", ">>> s.relabel_flat()", "<SeriesHE>", "<Index>", "(1, 'a')   3", "(1, 'b')   2", "(2, 'a')   8", "(2, 'b')   7", "<object>   <int64>"], "SeriesHE.relabel_level_add()": [">>> s = sf.SeriesHE((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))", ">>> s", "<SeriesHE>", "<IndexHierarchy>", "1                a     3", "1                b     2", "2                a     8", "2                b     7", "<int64>          <<U1> <int64>", ">>> s.relabel_level_add('x')", "<SeriesHE>", "<IndexHierarchy>", "x                1       a     3", "x                1       b     2", "x                2       a     8", "x                2       b     7", "<<U1>            <int64> <<U1> <int64>"], "SeriesHE.relabel_level_drop()": [">>> s = sf.SeriesHE((3, 2, 8, 7), index=sf.IndexHierarchy.from_product((1, 2), ('a', 'b')))", ">>> s", "<SeriesHE>", "<IndexHierarchy>", "1                a     3", "1                b     2", "2                a     8", "2                b     7", "<int64>          <<U1> <int64>", ">>> s.iloc[:2].relabel_level_drop(1)", "<SeriesHE>", "<Index>", "a          3", "b          2", "<<U1>      <int64>"], "SeriesHE.rename()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'), name='x')", ">>> s", "<SeriesHE: x>", "<Index>", "a             10", "b             2", "c             8", "<<U1>         <int64>", ">>> s.rename('y')", "<SeriesHE: y>", "<Index>", "a             10", "b             2", "c             8", "<<U1>         <int64>"], "SeriesHE.roll()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.roll(2)", "<SeriesHE>", "<Index>", "a          34", "b          54", "c          2", "d          8", "e          19", "<<U1>      <int64>"], "SeriesHE.sample()": [">>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          nan", "d          8.734", "e          nan", "<<U1>      <float64>", ">>> s.sample(2, seed=0)", "<SeriesHE>", "<Index>", "a          10.235", "c          nan", "<<U1>      <float64>"], "SeriesHE.shift()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.shift(2)", "<SeriesHE>", "<Index>", "a          nan", "b          nan", "c          2.0", "d          8.0", "e          19.0", "<<U1>      <float64>"], "SeriesHE.sort_index()": [">>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          0", "d          8", "<<U1>      <int64>", ">>> s.sort_index()", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          0", "d          8", "<<U1>      <int64>", ">>> s.sort_index(ascending=False)", "<SeriesHE>", "<Index>", "d          8", "c          0", "b          5", "a          8", "<<U1>      <int64>"], "SeriesHE.sort_values()": [">>> s = sf.SeriesHE((8, 5, 0, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          0", "d          8", "<<U1>      <int64>", ">>> s.sort_values()", "<SeriesHE>", "<Index>", "c          0", "b          5", "a          8", "d          8", "<<U1>      <int64>", ">>> s.sort_values(ascending=False)", "<SeriesHE>", "<Index>", "d          8", "a          8", "b          5", "c          0", "<<U1>      <int64>"], "SeriesHE.std()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.std()", "3.39934634239519"], "SeriesHE.sum()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.sum()", "20"], "SeriesHE.tail()": [">>> s = sf.SeriesHE((10.235, 2.124, np.nan, 8.734, np.nan), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          10.235", "b          2.124", "c          nan", "d          8.734", "e          nan", "<<U1>      <float64>", ">>> s.tail(2)", "<SeriesHE>", "<Index>", "d          8.734", "e          nan", "<<U1>      <float64>"], "SeriesHE.transpose()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.transpose()", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>"], "SeriesHE.unique()": [">>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          None", "d          8", "<<U1>      <object>", ">>> s.unique()", "[8 5 None]"], "SeriesHE.unique_enumerated()": [">>> s = sf.SeriesHE((8, 5, None, 8), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          8", "b          5", "c          None", "d          8", "<<U1>      <object>", ">>> s.unique_enumerated()", "(array([0, 1, 2, 0]), array([8, 5, None], dtype=object))"], "SeriesHE.var()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.var()", "11.555555555555557"], "SeriesHE.__contains__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.__contains__('a')", "True"], "SeriesHE.__iter__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.__iter__())", "('a', 'b', 'c')"], "SeriesHE.__reversed__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.__reversed__())", "('c', 'b', 'a')"], "SeriesHE.get()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.get('a')", "10", ">>> s.get('z', -1)", "-1"], "SeriesHE.items()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.items())", "(('a', 10), ('b', 2), ('c', 8))"], "SeriesHE.keys()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.keys()", "<Index>", "a", "b", "c", "<<U1>"], "SeriesHE.values": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.values", "[10  2  8]"], "SeriesHE.interface": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.interface", "<Frame>", "<Index>                              cls_name group                doc                  <<U18>", "<Index: signature>", "__init__(values, *, index, name, ... SeriesHE Constructor          Initializer. Args...", "from_concat(containers, *, index,... SeriesHE Constructor          Concatenate multi...", "from_concat_items(items, *, name,... SeriesHE Constructor          Produce a Series ...", "from_delimited(delimited, *, deli... SeriesHE Constructor          Series constructi...", "from_dict(mapping, *, dtype, name... SeriesHE Constructor          Series constructi...", "from_element(element, *, index, d... SeriesHE Constructor          Create a Series f...", "from_items(pairs, *, dtype, name,... SeriesHE Constructor          Series constructi...", "from_overlay(containers, *, index... SeriesHE Constructor          Return a new Seri...", "from_pandas(value, *, index, inde... SeriesHE Constructor          Given a Pandas Se...", "to_frame(axis, *, index, index_co... SeriesHE Exporter             Return a Frame vi...", "to_frame_go(axis, *, index, index... SeriesHE Exporter             Return FrameGO vi...", "to_frame_he(axis, *, index, index... SeriesHE Exporter             Return FrameHE vi...", "to_html(config, style_config)        SeriesHE Exporter             Return an HTML ta...", "to_html_datatables(fp, show, config) SeriesHE Exporter             Return a complete...", "to_pairs()                           SeriesHE Exporter             Return a tuple of...", "to_pandas()                          SeriesHE Exporter             Return a Pandas S...", "to_series()                          SeriesHE Exporter             Return a Series f...", "...                                  ...      ...                  ...", "via_hashlib(include_name, include... SeriesHE Accessor Hashlib", "via_hashlib(include_name, include... SeriesHE Accessor Hashlib", "via_hashlib(include_name, include... SeriesHE Accessor Hashlib", "via_hashlib(include_name, include... SeriesHE Accessor Hashlib", "via_type_clinic.to_hint()            SeriesHE Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... SeriesHE Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... SeriesHE Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... SeriesHE Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           SeriesHE Accessor Type Clinic Return a compact ...", "via_mapping.__getitem__(key)         SeriesHE Accessor Mapping", "via_mapping.__iter__()               SeriesHE Accessor Mapping", "via_mapping.__len__()                SeriesHE Accessor Mapping", "via_mapping.__contains__(key)        SeriesHE Accessor Mapping", "via_mapping.__repr__()               SeriesHE Accessor Mapping", "via_mapping.keys()                   SeriesHE Accessor Mapping", "via_mapping.values()                 SeriesHE Accessor Mapping", "via_mapping.items()                  SeriesHE Accessor Mapping", "<<U94>                               <<U8>    <<U27>               <<U83>"], "SeriesHE.__repr__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> repr(s)", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>"], "SeriesHE.__str__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> str(s)", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>"], "SeriesHE.display()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.display()", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.display(sf.DisplayConfig(type_show=False))", "a 10", "b 2", "c 8"], "SeriesHE.display_tall()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.display_tall()", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>"], "SeriesHE.display_wide()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.display_wide()", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>"], "SeriesHE.assign[]()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.assign['c']('x')", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          x", "d          34", "e          54", "<<U1>      <object>", ">>> s.assign['c':]('x')", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          x", "d          x", "e          x", "<<U1>      <object>", ">>> s.assign[['a', 'd']](('x', 'y'))", "<SeriesHE>", "<Index>", "a          x", "b          8", "c          19", "d          y", "e          54", "<<U1>      <object>"], "SeriesHE.assign[].apply()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.assign['c':].apply(lambda s: s / 100)", "<SeriesHE>", "<Index>", "a          2.0", "b          8.0", "c          0.19", "d          0.34", "e          0.54", "<<U1>      <float64>"], "SeriesHE.assign[].apply_element()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.assign['b':].apply_element(lambda e: e if e < 10 else f'--{{e}}--')", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          --{e}--", "d          --{e}--", "e          --{e}--", "<<U1>      <object>"], "SeriesHE.assign[].apply_element_items()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.assign['b':].apply_element_items(lambda l, e: e if l == 'c' else f'--{{e}}--')", "<SeriesHE>", "<Index>", "a          2", "b          --{e}--", "c          19", "d          --{e}--", "e          --{e}--", "<<U1>      <object>"], "SeriesHE.assign.iloc[]()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.assign.iloc[2]('x')", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          x", "d          34", "e          54", "<<U1>      <object>", ">>> s.assign.iloc[2:]('x')", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          x", "d          x", "e          x", "<<U1>      <object>", ">>> s.assign.iloc[[0, 4]](('x', 'y'))", "<SeriesHE>", "<Index>", "a          x", "b          8", "c          19", "d          34", "e          y", "<<U1>      <object>"], "SeriesHE.assign.iloc[].apply()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.assign.iloc[2:].apply(lambda s: s / 100)", "<SeriesHE>", "<Index>", "a          2.0", "b          8.0", "c          0.19", "d          0.34", "e          0.54", "<<U1>      <float64>"], "SeriesHE.assign.iloc[].apply_element()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.assign.iloc[2:].apply_element(lambda e: e / 100 if e < 10 else e)", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>"], "SeriesHE.assign.iloc[].apply_element_items()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.assign.iloc[2:].apply_element_items(lambda l, e: e if l == 'c' else f'--{{e}}--')", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          --{e}--", "e          --{e}--", "<<U1>      <object>"], "SeriesHE.assign.loc[]()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.assign.loc['c']('x')", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          x", "d          34", "e          54", "<<U1>      <object>", ">>> s.assign.loc['c':]('x')", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          x", "d          x", "e          x", "<<U1>      <object>", ">>> s.assign.loc[['a', 'd']](('x', 'y'))", "<SeriesHE>", "<Index>", "a          x", "b          8", "c          19", "d          y", "e          54", "<<U1>      <object>"], "SeriesHE.assign.loc[].apply()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.assign.loc['c':].apply(lambda s: s / 100)", "<SeriesHE>", "<Index>", "a          2.0", "b          8.0", "c          0.19", "d          0.34", "e          0.54", "<<U1>      <float64>"], "SeriesHE.assign.loc[].apply_element()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.assign.loc['c':].apply_element(lambda e: e / 100 if e < 10 else e)", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>"], "SeriesHE.assign.loc[].apply_element_items()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.assign.loc['c':].apply_element_items(lambda l, e: e / 100 if l == 'c' else e)", "<SeriesHE>", "<Index>", "a          2.0", "b          8.0", "c          0.19", "d          34.0", "e          54.0", "<<U1>      <float64>"], "SeriesHE.drop[]": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.drop['c']", "<SeriesHE>", "<Index>", "a          2", "b          8", "d          34", "e          54", "<<U1>      <int64>", ">>> s.drop['c':]", "<SeriesHE>", "<Index>", "a          2", "b          8", "<<U1>      <int64>", ">>> s.drop[['a', 'd']]", "<SeriesHE>", "<Index>", "b          8", "c          19", "e          54", "<<U1>      <int64>"], "SeriesHE.drop.iloc[]": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.drop.iloc[2]", "<SeriesHE>", "<Index>", "a          2", "b          8", "d          34", "e          54", "<<U1>      <int64>", ">>> s.drop.iloc[2:]", "<SeriesHE>", "<Index>", "a          2", "b          8", "<<U1>      <int64>", ">>> s.drop.iloc[[0, 4]]", "<SeriesHE>", "<Index>", "b          8", "c          19", "d          34", "<<U1>      <int64>"], "SeriesHE.drop.loc[]": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.drop.loc['c']", "<SeriesHE>", "<Index>", "a          2", "b          8", "d          34", "e          54", "<<U1>      <int64>", ">>> s.drop.loc['c':]", "<SeriesHE>", "<Index>", "a          2", "b          8", "<<U1>      <int64>", ">>> s.drop.loc[['a', 'd']]", "<SeriesHE>", "<Index>", "b          8", "c          19", "e          54", "<<U1>      <int64>"], "SeriesHE.mask[]": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.mask['c']", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          False", "e          False", "<<U1>      <bool>", ">>> s.mask['c':]", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          True", "e          True", "<<U1>      <bool>", ">>> s.mask[['a', 'd']]", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          False", "d          True", "e          False", "<<U1>      <bool>"], "SeriesHE.mask.iloc[]": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.mask.iloc[2]", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          False", "e          False", "<<U1>      <bool>", ">>> s.mask.iloc[2:]", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          True", "e          True", "<<U1>      <bool>", ">>> s.mask.iloc[[0, 4]]", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          False", "d          False", "e          True", "<<U1>      <bool>"], "SeriesHE.mask.loc[]": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.mask.loc['c']", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          False", "e          False", "<<U1>      <bool>", ">>> s.mask.loc['c':]", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          True", "e          True", "<<U1>      <bool>", ">>> s.mask.loc[['a', 'd']]", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          False", "d          True", "e          False", "<<U1>      <bool>"], "SeriesHE.masked_array[]": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.masked_array['c']", "[2 8 -- 34 54]", ">>> s.masked_array['c':]", "[2 8 -- -- --]", ">>> s.masked_array[['a', 'd']]", "[-- 8 19 -- 54]"], "SeriesHE.masked_array.iloc[]": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.masked_array.iloc[2]", "[2 8 -- 34 54]", ">>> s.masked_array.iloc[2:]", "[2 8 -- -- --]", ">>> s.masked_array.iloc[[0, 4]]", "[-- 8 19 34 --]"], "SeriesHE.masked_array.loc[]": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.masked_array.loc['c']", "[2 8 -- 34 54]", ">>> s.masked_array.loc['c':]", "[2 8 -- -- --]", ">>> s.masked_array.loc[['a', 'd']]", "[-- 8 19 -- 54]"], "SeriesHE.[]": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s['c']", "19", ">>> s['c':]", "<SeriesHE>", "<Index>", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s[['a', 'd']]", "<SeriesHE>", "<Index>", "a          2", "d          34", "<<U1>      <int64>"], "SeriesHE.iloc[]": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iloc[2]", "19", ">>> s.iloc[2:]", "<SeriesHE>", "<Index>", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iloc[[0, 4]]", "<SeriesHE>", "<Index>", "a          2", "e          54", "<<U1>      <int64>"], "SeriesHE.loc[]": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.loc['c']", "19", ">>> s.loc['c':]", "<SeriesHE>", "<Index>", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.loc[['a', 'd']]", "<SeriesHE>", "<Index>", "a          2", "d          34", "<<U1>      <int64>"], "SeriesHE.iter_element()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_element())", "(2, 8, 19, 34, 54)"], "SeriesHE.iter_element().apply()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iter_element().apply(lambda e: e > 10)", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "e        True", "<<U1>    <bool>"], "SeriesHE.iter_element().apply_iter()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_element().apply_iter(lambda e: e > 10))", "(False, False, True, True, True)"], "SeriesHE.iter_element().apply_iter_items()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_element().apply_iter_items(lambda e: e > 10))", "(('a', False), ('b', False), ('c', True), ('d', True), ('e', True))"], "SeriesHE.iter_element().apply_pool()": [">>> def func(e): return e > 10", ">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iter_element().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "e        True", "<<U1>    <bool>"], "SeriesHE.iter_element().map_all()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.iter_element().map_all({2: 200, 10: -1, 8: 45})", "<Series>", "<Index>", "a        -1", "b        200", "c        45", "<<U1>    <int64>"], "SeriesHE.iter_element().map_all_iter()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_element().map_all_iter({2: 200, 10: -1, 8: 45}))", "(-1, 200, 45)"], "SeriesHE.iter_element().map_all_iter_items()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_element().map_all_iter_items({2: 200, 10: -1, 8: 45}))", "(('a', -1), ('b', 200), ('c', 45))"], "SeriesHE.iter_element().map_any()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.iter_element().map_any({10: -1, 8: 45})", "<Series>", "<Index>", "a        -1", "b        2", "c        45", "<<U1>    <int64>"], "SeriesHE.iter_element().map_any_iter()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_element().map_any_iter({10: -1, 8: 45}))", "(-1, 2, 45)"], "SeriesHE.iter_element().map_any_iter_items()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_element().map_any_iter_items({10: -1, 8: 45}))", "(('a', -1), ('b', 2), ('c', 45))"], "SeriesHE.iter_element().map_fill()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.iter_element().map_fill({10: -1, 8: 45}, fill_value=np.nan)", "<Series>", "<Index>", "a        -1.0", "b        nan", "c        45.0", "<<U1>    <float64>"], "SeriesHE.iter_element().map_fill_iter()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_element().map_fill_iter({10: -1, 8: 45}, fill_value=np.nan))", "(-1, nan, 45)"], "SeriesHE.iter_element().map_fill_iter_items()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_element().map_fill_iter_items({10: -1, 8: 45}, fill_value=np.nan))", "(('a', -1), ('b', nan), ('c', 45))"], "SeriesHE.iter_element_items()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_element_items())", "(('a', 2), ('b', 8), ('c', 19), ('d', 34), ('e', 54))"], "SeriesHE.iter_element_items().apply()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iter_element_items().apply(lambda l, e: e > 10 if l != 'c' else 0)", "<Series>", "<Index>", "a        0", "b        0", "c        0", "d        1", "e        1", "<<U1>    <int64>"], "SeriesHE.iter_element_items().apply_iter()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_element_items().apply_iter(lambda l, e: e > 10 and l != 'e'))", "(False, False, True, True, False)"], "SeriesHE.iter_element_items().apply_iter_items()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_element_items().apply_iter_items(lambda l, e: e > 10 and l != 'e'))", "(('a', False), ('b', False), ('c', True), ('d', True), ('e', False))"], "SeriesHE.iter_element_items().apply_pool()": [">>> def func(pair): return pair[1] > 10 and pair[0] != 'e'", ">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iter_element_items().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "a        False", "b        False", "c        True", "d        True", "e        False", "<<U1>    <bool>"], "SeriesHE.iter_element_items().map_all()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.iter_element_items().map_all({('b', 2): 200, ('a', 10): -1, ('c', 8): 45})", "<Series>", "<Index>", "a        -1", "b        200", "c        45", "<<U1>    <int64>"], "SeriesHE.iter_element_items().map_all_iter()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_element_items().map_all_iter({('b', 2): 200, ('a', 10): -1, ('c', 8): 45}))", "(-1, 200, 45)"], "SeriesHE.iter_element_items().map_all_iter_items()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_element_items().map_all_iter_items({('b', 2): 200, ('a', 10): -1, ('c', 8): 45}))", "(('a', -1), ('b', 200), ('c', 45))"], "SeriesHE.iter_element_items().map_any()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.iter_element_items().map_any({('a', 10): -1, ('c', 8): 45})", "<Series>", "<Index>", "a        -1", "b        2", "c        45", "<<U1>    <int64>"], "SeriesHE.iter_element_items().map_any_iter()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_element_items().map_any_iter({('a', 10): -1, ('c', 8): 45}))", "(-1, 2, 45)"], "SeriesHE.iter_element_items().map_any_iter_items()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_element_items().map_any_iter_items({('a', 10): -1, ('c', 8): 45}))", "(('a', -1), ('b', 2), ('c', 45))"], "SeriesHE.iter_element_items().map_fill()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.iter_element_items().map_fill({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan)", "<Series>", "<Index>", "a        -1.0", "b        nan", "c        45.0", "<<U1>    <float64>"], "SeriesHE.iter_element_items().map_fill_iter()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_element_items().map_fill_iter({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan))", "(-1, nan, 45)"], "SeriesHE.iter_element_items().map_fill_iter_items()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_element_items().map_fill_iter_items({('a', 10): -1, ('c', 8): 45}, fill_value=np.nan))", "(('a', -1), ('b', nan), ('c', 45))"], "SeriesHE.iter_group()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group())", "(<SeriesHE>", "<Index>", "a          -2", "d          -2", "<<U1>      <int64>, <SeriesHE>", "<Index>", "b          8", "e          8", "<<U1>      <int64>, <SeriesHE>", "<Index>", "c          19", "<<U1>      <int64>)"], "SeriesHE.iter_group().apply()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group().apply(lambda s: s.sum())", "<Series>", "<Index>", "-2       -4", "8        16", "19       19", "<int64>  <int64>"], "SeriesHE.iter_group().apply_iter()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group().apply_iter(lambda s: s.sum()))", "(-4, 16, 19)"], "SeriesHE.iter_group().apply_iter_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group().apply_iter_items(lambda s: s.sum()))", "((-2, -4), (8, 16), (19, 19))"], "SeriesHE.iter_group().apply_pool()": [">>> def func(s): return s.sum()", ">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "-2       -4", "8        16", "19       19", "<int64>  <int64>"], "SeriesHE.iter_group_array()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_array())", "(array([-2, -2]), array([8, 8]), array([19]))"], "SeriesHE.iter_group_array().apply()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_array().apply(lambda s: s.sum())", "<Series>", "<Index>", "-2       -4", "8        16", "19       19", "<int64>  <int64>"], "SeriesHE.iter_group_array().apply_iter()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_array().apply_iter(lambda s: s.sum()))", "(-4, 16, 19)"], "SeriesHE.iter_group_array().apply_iter_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_array().apply_iter_items(lambda s: s.sum()))", "((-2, -4), (8, 16), (19, 19))"], "SeriesHE.iter_group_array().apply_pool()": [">>> def func(s): return s.sum()", ">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_array().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "-2       -4", "8        16", "19       19", "<int64>  <int64>"], "SeriesHE.iter_group_array_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_array_items())", "((-2, array([-2, -2])), (8, array([8, 8])), (19, array([19])))"], "SeriesHE.iter_group_array_items().apply()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_array_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)", "<Series>", "<Index>", "-2       -4", "8        (2,)", "19       19", "<int64>  <object>"], "SeriesHE.iter_group_array_items().apply_iter()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_array_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))", "(-4, -1, 19)"], "SeriesHE.iter_group_array_items().apply_iter_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_array_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))", "((-2, -4), (8, -1), (19, 19))"], "SeriesHE.iter_group_array_items().apply_pool()": [">>> def func(pair): return pair[1].sum()", ">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_array_items().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "-2       -4", "8        16", "19       19", "<int64>  <int64>"], "SeriesHE.iter_group_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_items())", "((-2, <SeriesHE>", "<Index>", "a          -2", "d          -2", "<<U1>      <int64>), (8, <SeriesHE>", "<Index>", "b          8", "e          8", "<<U1>      <int64>), (19, <SeriesHE>", "<Index>", "c          19", "<<U1>      <int64>))"], "SeriesHE.iter_group_items().apply()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)", "<Series>", "<Index>", "-2       -4", "8        (2,)", "19       19", "<int64>  <object>"], "SeriesHE.iter_group_items().apply_iter()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))", "(-4, -1, 19)"], "SeriesHE.iter_group_items().apply_iter_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))", "((-2, -4), (8, -1), (19, 19))"], "SeriesHE.iter_group_items().apply_pool()": [">>> def func(pair): return pair[1].sum()", ">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_items().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "-2       -4", "8        16", "19       19", "<int64>  <int64>"], "SeriesHE.iter_group_labels()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_labels())", "(<SeriesHE>", "<Index>", "a          10", "<<U1>      <int64>, <SeriesHE>", "<Index>", "b          2", "<<U1>      <int64>, <SeriesHE>", "<Index>", "c          8", "<<U1>      <int64>)"], "SeriesHE.iter_group_labels().apply()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_labels().apply(lambda s: s.sum())", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "SeriesHE.iter_group_labels().apply_iter()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_labels().apply_iter(lambda s: s.sum()))", "(-2, 8, 19, -2, 8)"], "SeriesHE.iter_group_labels().apply_iter_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_labels().apply_iter_items(lambda s: s.sum()))", "(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))"], "SeriesHE.iter_group_labels().apply_pool()": [">>> def func(s): return s.sum()", ">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_labels().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "SeriesHE.iter_group_labels_array()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_labels_array())", "(array([10]), array([2]), array([8]))"], "SeriesHE.iter_group_labels_array().apply()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_labels_array().apply(lambda s: s.sum())", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "SeriesHE.iter_group_labels_array().apply_iter()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_labels_array().apply_iter(lambda s: s.sum()))", "(-2, 8, 19, -2, 8)"], "SeriesHE.iter_group_labels_array().apply_iter_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_labels_array().apply_iter_items(lambda s: s.sum()))", "(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))"], "SeriesHE.iter_group_labels_array().apply_pool()": [">>> def func(s): return s.sum()", ">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_labels_array().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "SeriesHE.iter_group_labels_array_items()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_labels_array_items())", "(('a', array([10])), ('b', array([2])), ('c', array([8])))"], "SeriesHE.iter_group_labels_array_items().apply()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_labels_array_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "SeriesHE.iter_group_labels_array_items().apply_iter()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_labels_array_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))", "(-2, 8, 19, -2, 8)"], "SeriesHE.iter_group_labels_array_items().apply_iter_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_labels_array_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))", "(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))"], "SeriesHE.iter_group_labels_array_items().apply_pool()": [">>> def func(pair): return pair[1].sum()", ">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_labels_array_items().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "SeriesHE.iter_group_labels_items()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_labels_items())", "(('a', <SeriesHE>", "<Index>", "a          10", "<<U1>      <int64>), ('b', <SeriesHE>", "<Index>", "b          2", "<<U1>      <int64>), ('c', <SeriesHE>", "<Index>", "c          8", "<<U1>      <int64>))"], "SeriesHE.iter_group_labels_items().apply()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_labels_items().apply(lambda l, s: s.sum() if l != 8 else s.shape)", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "SeriesHE.iter_group_labels_items().apply_iter()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_labels_items().apply_iter(lambda l, s: s.sum() if l != 8 else -1))", "(-2, 8, 19, -2, 8)"], "SeriesHE.iter_group_labels_items().apply_iter_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_labels_items().apply_iter_items(lambda l, s: s.sum() if l != 8 else -1))", "(('a', -2), ('b', 8), ('c', 19), ('d', -2), ('e', 8))"], "SeriesHE.iter_group_labels_items().apply_pool()": [">>> def func(pair): return pair[1].sum()", ">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_labels_items().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "a        -2", "b        8", "c        19", "d        -2", "e        8", "<<U1>    <int64>"], "SeriesHE.iter_group_other()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_other(np.arange(len(s)) % 2))", "(<SeriesHE>", "<Index>", "a          -2", "c          19", "e          8", "<<U1>      <int64>, <SeriesHE>", "<Index>", "b          8", "d          -2", "<<U1>      <int64>)"], "SeriesHE.iter_group_other().apply()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_other(np.arange(len(s)) % 3).apply(lambda s: s.sum())", "<Series>", "<Index>", "0        -4", "1        16", "2        19", "<int64>  <int64>"], "SeriesHE.iter_group_other().apply_iter()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_other(np.arange(len(s)) % 3).apply_iter(lambda s: s.sum()))", "(-4, 16, 19)"], "SeriesHE.iter_group_other().apply_iter_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_other(np.arange(len(s)) % 3).apply_iter_items(lambda s: s.sum()))", "((0, -4), (1, 16), (2, 19))"], "SeriesHE.iter_group_other().apply_pool()": [">>> def func(s): return s.sum()", ">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_other(np.arange(len(s)) % 3).apply_pool(func, use_threads=True)", "<Series>", "<Index>", "0        -4", "1        16", "2        19", "<int64>  <int64>"], "SeriesHE.iter_group_other_array()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_other_array(np.arange(len(s)) % 2))", "(array([-2, 19,  8]), array([ 8, -2]))"], "SeriesHE.iter_group_other_array().apply()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_other_array(np.arange(len(s)) % 3).apply(lambda s: s.sum())", "<Series>", "<Index>", "0        -4", "1        16", "2        19", "<int64>  <int64>"], "SeriesHE.iter_group_other_array().apply_iter()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_other_array(np.arange(len(s)) % 3).apply_iter(lambda s: s.sum()))", "(-4, 16, 19)"], "SeriesHE.iter_group_other_array().apply_iter_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_other_array(np.arange(len(s)) % 3).apply_iter_items(lambda s: s.sum()))", "((0, -4), (1, 16), (2, 19))"], "SeriesHE.iter_group_other_array().apply_pool()": [">>> def func(s): return s.sum()", ">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_other_array(np.arange(len(s)) % 3).apply_pool(func, use_threads=True)", "<Series>", "<Index>", "0        -4", "1        16", "2        19", "<int64>  <int64>"], "SeriesHE.iter_group_other_array_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_other_array_items(np.arange(len(s)) % 2))", "((0, array([-2, 19,  8])), (1, array([ 8, -2])))"], "SeriesHE.iter_group_other_array_items().apply()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_other_array_items(np.arange(len(s)) % 3).apply(lambda s: s.sum())", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "SeriesHE.iter_group_other_array_items().apply_iter()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_other_array_items(np.arange(len(s)) % 3).apply_iter(lambda s: s.sum()))", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "SeriesHE.iter_group_other_array_items().apply_iter_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_other_array_items(np.arange(len(s)) % 3).apply_iter_items(lambda s: s.sum()))", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "SeriesHE.iter_group_other_array_items().apply_pool()": [">>> def func(pair): return pair[1].sum()", ">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_other_array_items(np.arange(len(s)) % 3).apply_pool(func, use_threads=True)", "<Series>", "<Index>", "0        -4", "1        16", "2        19", "<int64>  <int64>"], "SeriesHE.iter_group_other_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_other_items(np.arange(len(s)) % 2))", "((0, <SeriesHE>", "<Index>", "a          -2", "c          19", "e          8", "<<U1>      <int64>), (1, <SeriesHE>", "<Index>", "b          8", "d          -2", "<<U1>      <int64>))"], "SeriesHE.iter_group_other_items().apply()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_other_items(np.arange(len(s)) % 3).apply(lambda s: s.sum())", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "SeriesHE.iter_group_other_items().apply_iter()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_other_items(np.arange(len(s)) % 3).apply_iter(lambda s: s.sum()))", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "SeriesHE.iter_group_other_items().apply_iter_items()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> tuple(s.iter_group_other_items(np.arange(len(s)) % 3).apply_iter_items(lambda s: s.sum()))", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "SeriesHE.iter_group_other_items().apply_pool()": [">>> def func(pair): return pair[1].sum()", ">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.iter_group_other_items(np.arange(len(s)) % 3).apply_pool(func, use_threads=True)", "<Series>", "<Index>", "0        -4", "1        16", "2        19", "<int64>  <int64>"], "SeriesHE.iter_window()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> tuple(s.iter_window(size=3, step=1))", "(<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "<<U1>      <int64>, <SeriesHE>", "<Index>", "b          8", "c          19", "d          34", "<<U1>      <int64>, <SeriesHE>", "<Index>", "c          19", "d          34", "e          54", "<<U1>      <int64>)"], "SeriesHE.iter_window().apply()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iter_window(size=3, step=1).apply(lambda s: s.sum())", "<Series>", "<Index>", "c        29", "d        61", "e        107", "<<U1>    <int64>"], "SeriesHE.iter_window().apply_iter()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_window(size=3, step=1).apply_iter(lambda s: s.sum()))", "(29, 61, 107)"], "SeriesHE.iter_window().apply_iter_items()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_window(size=3, step=1).apply_iter_items(lambda s: s.sum()))", "(('c', 29), ('d', 61), ('e', 107))"], "SeriesHE.iter_window().apply_pool()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iter_window(size=3, step=1).apply_pool(lambda s: s.sum(), use_threads=True)", "<Series>", "<Index>", "c        29", "d        61", "e        107", "<<U1>    <int64>"], "SeriesHE.iter_window_array()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> tuple(s.iter_window_array(size=3, step=1))", "(array([ 2,  8, 19]), array([ 8, 19, 34]), array([19, 34, 54]))"], "SeriesHE.iter_window_array().apply()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iter_window_array(size=3, step=1).apply(lambda s: s.sum())", "<Series>", "<Index>", "c        29", "d        61", "e        107", "<<U1>    <int64>"], "SeriesHE.iter_window_array().apply_iter()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_window_array(size=3, step=1).apply_iter(lambda s: s.sum()))", "(29, 61, 107)"], "SeriesHE.iter_window_array().apply_iter_items()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_window_array(size=3, step=1).apply_iter_items(lambda s: s.sum()))", "(('c', 29), ('d', 61), ('e', 107))"], "SeriesHE.iter_window_array().apply_pool()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iter_window_array(size=3, step=1).apply_pool(lambda s: s.sum(), use_threads=True)", "<Series>", "<Index>", "c        29", "d        61", "e        107", "<<U1>    <int64>"], "SeriesHE.iter_window_array_items()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> tuple(s.iter_window_array_items(size=3, step=1))", "(('c', array([ 2,  8, 19])), ('d', array([ 8, 19, 34])), ('e', array([19, 34, 54])))"], "SeriesHE.iter_window_array_items().apply()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iter_window_array_items(size=3, step=1).apply(lambda l, s: s.sum() if l != 'd' else -1)", "<Series>", "<Index>", "c        29", "d        -1", "e        107", "<<U1>    <int64>"], "SeriesHE.iter_window_array_items().apply_iter()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_window_array_items(size=3, step=1).apply_iter(lambda l, s: s.sum() if l != 'd' else -1))", "(29, -1, 107)"], "SeriesHE.iter_window_array_items().apply_iter_items()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_window_array_items(size=3, step=1).apply_iter_items(lambda l, s: s.sum() if l != 'd' else -1))", "(('c', 29), ('d', -1), ('e', 107))"], "SeriesHE.iter_window_array_items().apply_pool()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iter_window_array_items(size=3, step=1).apply_pool(lambda pair: pair[1].sum(), use_threads=True)", "<Series>", "<Index>", "c        29", "d        61", "e        107", "<<U1>    <int64>"], "SeriesHE.iter_window_items()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> tuple(s.iter_window_items(size=3, step=1))", "(('c', <SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "<<U1>      <int64>), ('d', <SeriesHE>", "<Index>", "b          8", "c          19", "d          34", "<<U1>      <int64>), ('e', <SeriesHE>", "<Index>", "c          19", "d          34", "e          54", "<<U1>      <int64>))"], "SeriesHE.iter_window_items().apply()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iter_window_items(size=3, step=1).apply(lambda l, s: s.sum() if l != 'd' else -1)", "<Series>", "<Index>", "c        29", "d        -1", "e        107", "<<U1>    <int64>"], "SeriesHE.iter_window_items().apply_iter()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_window_items(size=3, step=1).apply_iter(lambda l, s: s.sum() if l != 'd' else -1))", "(29, -1, 107)"], "SeriesHE.iter_window_items().apply_iter_items()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> tuple(s.iter_window_items(size=3, step=1).apply_iter_items(lambda l, s: s.sum() if l != 'd' else -1))", "(('c', 29), ('d', -1), ('e', 107))"], "SeriesHE.iter_window_items().apply_pool()": [">>> s = sf.SeriesHE((2, 8, 19, 34, 54), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          34", "e          54", "<<U1>      <int64>", ">>> s.iter_window_items(size=3, step=1).apply_pool(lambda pair: pair[1].sum(), use_threads=True)", "<Series>", "<Index>", "c        29", "d        61", "e        107", "<<U1>    <int64>"], "SeriesHE.__add__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s + 8", "<SeriesHE>", "<Index>", "a          18", "b          10", "c          16", "<<U1>      <int64>", ">>> s + s.reindex(('c', 'b'))", "<SeriesHE>", "<Index>", "a          nan", "b          4.0", "c          16.0", "<<U1>      <float64>"], "SeriesHE.__and__()": [">>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "<<U1>      <bool>", ">>> s & True", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "<<U1>      <bool>", ">>> s & (True, False, True)", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "<<U1>      <bool>"], "SeriesHE.__eq__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s == 8", "False", ">>> s == s.reindex(('c', 'b'))", "False"], "SeriesHE.__floordiv__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s // 8", "<SeriesHE>", "<Index>", "a          1", "b          0", "c          1", "<<U1>      <int64>", ">>> s // s.reindex(('c', 'b'))", "<SeriesHE>", "<Index>", "a          nan", "b          1.0", "c          1.0", "<<U1>      <float64>"], "SeriesHE.__ge__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s >= 8", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          True", "<<U1>      <bool>", ">>> s >= s.reindex(('c', 'b'))", "<SeriesHE>", "<Index>", "a          False", "b          True", "c          True", "<<U1>      <bool>"], "SeriesHE.__gt__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s > 8", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          False", "<<U1>      <bool>", ">>> s > s.reindex(('c', 'b'))", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          False", "<<U1>      <bool>"], "SeriesHE.__le__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s <= 8", "<SeriesHE>", "<Index>", "a          False", "b          True", "c          True", "<<U1>      <bool>", ">>> s <= s.reindex(('c', 'b'))", "<SeriesHE>", "<Index>", "a          False", "b          True", "c          True", "<<U1>      <bool>"], "SeriesHE.__lt__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s < 8", "<SeriesHE>", "<Index>", "a          False", "b          True", "c          False", "<<U1>      <bool>", ">>> s < s.reindex(('c', 'b'))", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          False", "<<U1>      <bool>"], "SeriesHE.__matmul__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s @ (3, 0, 4)", "62"], "SeriesHE.__mod__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s % 8", "<SeriesHE>", "<Index>", "a          2", "b          2", "c          0", "<<U1>      <int64>", ">>> s % s.reindex(('c', 'b'))", "<SeriesHE>", "<Index>", "a          nan", "b          0.0", "c          0.0", "<<U1>      <float64>"], "SeriesHE.__mul__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s * 8", "<SeriesHE>", "<Index>", "a          80", "b          16", "c          64", "<<U1>      <int64>", ">>> s * s.reindex(('c', 'b'))", "<SeriesHE>", "<Index>", "a          nan", "b          4.0", "c          64.0", "<<U1>      <float64>"], "SeriesHE.__ne__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s != 8", "True", ">>> s != s.reindex(('c', 'b'))", "True"], "SeriesHE.__or__()": [">>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "<<U1>      <bool>", ">>> s | True", "<SeriesHE>", "<Index>", "a          True", "b          True", "c          True", "<<U1>      <bool>", ">>> s | (True, False, True)", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          True", "<<U1>      <bool>"], "SeriesHE.__pow__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s ** 8", "<SeriesHE>", "<Index>", "a          100000000", "b          256", "c          16777216", "<<U1>      <int64>", ">>> s ** s.reindex(('c', 'b'))", "<SeriesHE>", "<Index>", "a          nan", "b          4.0", "c          16777216.0", "<<U1>      <float64>"], "SeriesHE.__radd__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> 8 + s", "<SeriesHE>", "<Index>", "a          18", "b          10", "c          16", "<<U1>      <int64>"], "SeriesHE.__rfloordiv__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> 8 // s", "<SeriesHE>", "<Index>", "a          0", "b          4", "c          1", "<<U1>      <int64>"], "SeriesHE.__rmatmul__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s @ (3, 0, 4)", "62"], "SeriesHE.__rmul__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> 8 * s", "<SeriesHE>", "<Index>", "a          80", "b          16", "c          64", "<<U1>      <int64>"], "SeriesHE.__rshift__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s >> 1", "<SeriesHE>", "<Index>", "a          5", "b          1", "c          4", "<<U1>      <int64>"], "SeriesHE.__rsub__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> 8 - s", "<SeriesHE>", "<Index>", "a          -2", "b          6", "c          0", "<<U1>      <int64>"], "SeriesHE.__rtruediv__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> 8 / s", "<SeriesHE>", "<Index>", "a          0.8", "b          4.0", "c          1.0", "<<U1>      <float64>"], "SeriesHE.__sub__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s - 8", "<SeriesHE>", "<Index>", "a          2", "b          -6", "c          0", "<<U1>      <int64>", ">>> s - s.reindex(('c', 'b'))", "<SeriesHE>", "<Index>", "a          nan", "b          0.0", "c          0.0", "<<U1>      <float64>"], "SeriesHE.__truediv__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s / 8", "<SeriesHE>", "<Index>", "a          1.25", "b          0.25", "c          1.0", "<<U1>      <float64>", ">>> s / s.reindex(('c', 'b'))", "<SeriesHE>", "<Index>", "a          nan", "b          1.0", "c          1.0", "<<U1>      <float64>"], "SeriesHE.__xor__()": [">>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "<<U1>      <bool>", ">>> s ^ True", "<SeriesHE>", "<Index>", "a          True", "b          True", "c          False", "<<U1>      <bool>", ">>> s ^ (True, False, True)", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          False", "<<U1>      <bool>"], "SeriesHE.__abs__()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> abs(s)", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          2", "e          8", "<<U1>      <int64>"], "SeriesHE.__invert__()": [">>> s = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "<<U1>      <bool>", ">>> ~s", "<SeriesHE>", "<Index>", "a          True", "b          True", "c          False", "<<U1>      <bool>"], "SeriesHE.__neg__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> -s", "<SeriesHE>", "<Index>", "a          -10", "b          -2", "c          -8", "<<U1>      <int64>"], "SeriesHE.__pos__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> +s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>"], "SeriesHE.abs()": [">>> s = sf.SeriesHE((-2, 8, 19, -2, 8), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          -2", "b          8", "c          19", "d          -2", "e          8", "<<U1>      <int64>", ">>> s.abs()", "<SeriesHE>", "<Index>", "a          2", "b          8", "c          19", "d          2", "e          8", "<<U1>      <int64>"], "SeriesHE.via_dt.__call__()": [">>> s = sf.SeriesHE(('1517-01-01', 'nat', '1517-12-31', 'nat', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          NaT", "c          1517-12-31", "d          NaT", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt(fill_value=-1).year", "<SeriesHE>", "<Index>", "a          1517", "b          -1", "c          1517", "d          -1", "e          1517", "<<U1>      <int64>"], "SeriesHE.via_dt.year": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.year", "<SeriesHE>", "<Index>", "a          1517", "b          1517", "c          1517", "d          1517", "e          1517", "<<U1>      <int64>"], "SeriesHE.via_dt.year_month": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.year_month", "<SeriesHE>", "<Index>", "a          1517-01", "b          1517-04", "c          1517-12", "d          1517-06", "e          1517-10", "<<U1>      <<U7>"], "SeriesHE.via_dt.year_quarter": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.year_quarter", "<SeriesHE>", "<Index>", "a          1517-Q1", "b          1517-Q2", "c          1517-Q4", "d          1517-Q2", "e          1517-Q4", "<<U1>      <<U7>"], "SeriesHE.via_dt.month": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.month", "<SeriesHE>", "<Index>", "a          1", "b          4", "c          12", "d          6", "e          10", "<<U1>      <int64>"], "SeriesHE.via_dt.day": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.day", "<SeriesHE>", "<Index>", "a          1", "b          1", "c          31", "d          30", "e          1", "<<U1>      <int64>"], "SeriesHE.via_dt.hour": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.hour", "<SeriesHE>", "<Index>", "a          0", "b          0", "c          0", "d          0", "e          0", "<<U1>      <int64>"], "SeriesHE.via_dt.minute": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.minute", "<SeriesHE>", "<Index>", "a          0", "b          0", "c          0", "d          0", "e          0", "<<U1>      <int64>"], "SeriesHE.via_dt.second": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.second", "<SeriesHE>", "<Index>", "a          0", "b          0", "c          0", "d          0", "e          0", "<<U1>      <int64>"], "SeriesHE.via_dt.weekday()": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.weekday()", "<SeriesHE>", "<Index>", "a          0", "b          6", "c          0", "d          5", "e          0", "<<U1>      <int64>"], "SeriesHE.via_dt.quarter()": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.quarter()", "<SeriesHE>", "<Index>", "a          1", "b          2", "c          4", "d          2", "e          4", "<<U1>      <int64>"], "SeriesHE.via_dt.is_month_end()": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.is_month_end()", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          True", "e          False", "<<U1>      <bool>"], "SeriesHE.via_dt.is_month_start()": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.is_month_start()", "<SeriesHE>", "<Index>", "a          True", "b          True", "c          False", "d          False", "e          True", "<<U1>      <bool>"], "SeriesHE.via_dt.is_year_end()": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.is_year_end()", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          False", "e          False", "<<U1>      <bool>"], "SeriesHE.via_dt.is_year_start()": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.is_year_start()", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          False", "d          False", "e          False", "<<U1>      <bool>"], "SeriesHE.via_dt.is_quarter_end()": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.is_quarter_end()", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          True", "e          False", "<<U1>      <bool>"], "SeriesHE.via_dt.is_quarter_start()": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.is_quarter_start()", "<SeriesHE>", "<Index>", "a          True", "b          True", "c          False", "d          False", "e          True", "<<U1>      <bool>"], "SeriesHE.via_dt.timetuple()": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.timetuple()", "<SeriesHE>", "<Index>", "a          time.struct_time(...", "b          time.struct_time(...", "c          time.struct_time(...", "d          time.struct_time(...", "e          time.struct_time(...", "<<U1>      <object>"], "SeriesHE.via_dt.isoformat()": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.isoformat()", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <<U10>"], "SeriesHE.via_dt.fromisoformat()": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'))", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <<U10>", ">>> s.via_dt.fromisoformat()", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <object>"], "SeriesHE.via_dt.strftime()": [">>> s = sf.SeriesHE(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'), index=('a', 'b', 'c', 'd', 'e'), dtype=np.datetime64)", ">>> s", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-12-31", "d          1517-06-30", "e          1517-10-01", "<<U1>      <datetime64[D]>", ">>> s.via_dt.strftime(\"%A | %B\")", "<SeriesHE>", "<Index>", "a          Monday | January", "b          Sunday | April", "c          Monday | December", "d          Saturday | June", "e          Monday | October", "<<U1>      <<U17>"], "SeriesHE.via_dt.strptime()": [">>> s = sf.SeriesHE(('1/1/1517', '4/1/1517', '6/30/1517'), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          1/1/1517", "b          4/1/1517", "c          6/30/1517", "<<U1>      <<U9>", ">>> s.via_dt.strptime(\"%m/%d/%Y\")", "<SeriesHE>", "<Index>", "a          1517-01-01 00:00:00", "b          1517-04-01 00:00:00", "c          1517-06-30 00:00:00", "<<U1>      <object>"], "SeriesHE.via_dt.strpdate()": [">>> s = sf.SeriesHE(('1/1/1517', '4/1/1517', '6/30/1517'), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          1/1/1517", "b          4/1/1517", "c          6/30/1517", "<<U1>      <<U9>", ">>> s.via_dt.strpdate(\"%m/%d/%Y\")", "<SeriesHE>", "<Index>", "a          1517-01-01", "b          1517-04-01", "c          1517-06-30", "<<U1>      <object>"], "SeriesHE.via_str.__getitem__()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str[-1]", "<SeriesHE>", "<Index>", "a", "b          Z", "c          3", "d", "<<U1>      <<U1>"], "SeriesHE.via_str.capitalize()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.capitalize()", "<SeriesHE>", "<Index>", "a          Qrs", "b          Xyz", "c          123", "d           wx", "<<U1>      <<U4>"], "SeriesHE.via_str.center()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.center(8)", "<SeriesHE>", "<Index>", "a            qrs", "b            XYZ", "c            123", "d             wX", "<<U1>      <<U8>"], "SeriesHE.via_str.contains()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.contains('X')", "<SeriesHE>", "<Index>", "a          False", "b          True", "c          False", "d          True", "<<U1>      <bool>"], "SeriesHE.via_str.count()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.count('X')", "<SeriesHE>", "<Index>", "a          0", "b          1", "c          0", "d          1", "<<U1>      <int64>"], "SeriesHE.via_str.decode()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd')).astype(bytes)", ">>> s", "<SeriesHE>", "<Index>", "a          b'qrs '", "b          b'XYZ'", "c          b'123'", "d          b' wX '", "<<U1>      <|S4>", ">>> s.via_str.decode()", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>"], "SeriesHE.via_str.encode()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.encode()", "<SeriesHE>", "<Index>", "a          b'qrs '", "b          b'XYZ'", "c          b'123'", "d          b' wX '", "<<U1>      <|S4>"], "SeriesHE.via_str.endswith()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.endswith(' ')", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          False", "d          True", "<<U1>      <bool>"], "SeriesHE.via_str.find()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.find('X')", "<SeriesHE>", "<Index>", "a          -1", "b          0", "c          -1", "d          2", "<<U1>      <int64>"], "SeriesHE.via_str.format()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.format('{:-^10}')", "<SeriesHE>", "<Index>", "a          ---qrs ---", "b          ---XYZ----", "c          ---123----", "d          --- wX ---", "<<U1>      <<U10>"], "SeriesHE.via_str.index()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.index('X')", "ValueError('substring not found')"], "SeriesHE.via_str.isalnum()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.isalnum()", "<SeriesHE>", "<Index>", "a          False", "b          True", "c          True", "d          False", "<<U1>      <bool>"], "SeriesHE.via_str.isalpha()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.isalpha()", "<SeriesHE>", "<Index>", "a          False", "b          True", "c          False", "d          False", "<<U1>      <bool>"], "SeriesHE.via_str.isdecimal()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.isdecimal()", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          False", "<<U1>      <bool>"], "SeriesHE.via_str.isdigit()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.isdigit()", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          False", "<<U1>      <bool>"], "SeriesHE.via_str.islower()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.islower()", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          False", "d          False", "<<U1>      <bool>"], "SeriesHE.via_str.isnumeric()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.isnumeric()", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          False", "<<U1>      <bool>"], "SeriesHE.via_str.isspace()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.isspace()", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          False", "d          False", "<<U1>      <bool>"], "SeriesHE.via_str.istitle()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.istitle()", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          False", "d          False", "<<U1>      <bool>"], "SeriesHE.via_str.isupper()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.isupper()", "<SeriesHE>", "<Index>", "a          False", "b          True", "c          False", "d          False", "<<U1>      <bool>"], "SeriesHE.via_str.ljust()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.ljust(8)", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U8>"], "SeriesHE.via_str.len()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.len()", "<SeriesHE>", "<Index>", "a          4", "b          3", "c          3", "d          4", "<<U1>      <int64>"], "SeriesHE.via_str.lower()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.lower()", "<SeriesHE>", "<Index>", "a          qrs", "b          xyz", "c          123", "d           wx", "<<U1>      <<U4>"], "SeriesHE.via_str.lstrip()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.lstrip()", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d          wX", "<<U1>      <<U4>"], "SeriesHE.via_str.partition()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.partition('X')", "<SeriesHE>", "<Index>", "a          ('qrs ', '', '')", "b          ('', 'X', 'YZ')", "c          ('123', '', '')", "d          (' w', 'X', ' ')", "<<U1>      <object>"], "SeriesHE.via_str.replace()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.replace('X', '*')", "<SeriesHE>", "<Index>", "a          qrs", "b          *YZ", "c          123", "d           w*", "<<U1>      <<U4>"], "SeriesHE.via_str.rfind()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.rfind('X')", "<SeriesHE>", "<Index>", "a          -1", "b          0", "c          -1", "d          2", "<<U1>      <int64>"], "SeriesHE.via_str.rindex()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.rindex('X')", "ValueError('substring not found')"], "SeriesHE.via_str.rjust()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.rjust(8)", "<SeriesHE>", "<Index>", "a              qrs", "b               XYZ", "c               123", "d               wX", "<<U1>      <<U8>"], "SeriesHE.via_str.rpartition()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.rpartition('X')", "<SeriesHE>", "<Index>", "a          ('', '', 'qrs ')", "b          ('', 'X', 'YZ')", "c          ('', '', '123')", "d          (' w', 'X', ' ')", "<<U1>      <object>"], "SeriesHE.via_str.rsplit()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.rsplit('X')", "<SeriesHE>", "<Index>", "a          ('qrs ',)", "b          ('', 'YZ')", "c          ('123',)", "d          (' w', ' ')", "<<U1>      <object>"], "SeriesHE.via_str.rstrip()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.rstrip()", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>"], "SeriesHE.via_str.split()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.split('X')", "<SeriesHE>", "<Index>", "a          ('qrs ',)", "b          ('', 'YZ')", "c          ('123',)", "d          (' w', ' ')", "<<U1>      <object>"], "SeriesHE.via_str.startswith()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.startswith('X')", "<SeriesHE>", "<Index>", "a          False", "b          True", "c          False", "d          False", "<<U1>      <bool>"], "SeriesHE.via_str.strip()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.strip()", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d          wX", "<<U1>      <<U4>"], "SeriesHE.via_str.swapcase()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.swapcase()", "<SeriesHE>", "<Index>", "a          QRS", "b          xyz", "c          123", "d           Wx", "<<U1>      <<U4>"], "SeriesHE.via_str.title()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.title()", "<SeriesHE>", "<Index>", "a          Qrs", "b          Xyz", "c          123", "d           Wx", "<<U1>      <<U4>"], "SeriesHE.via_str.upper()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.upper()", "<SeriesHE>", "<Index>", "a          QRS", "b          XYZ", "c          123", "d           WX", "<<U1>      <<U4>"], "SeriesHE.via_str.zfill()": [">>> s = sf.SeriesHE(('qrs ', 'XYZ', '123', ' wX '), index=('a', 'b', 'c', 'd'))", ">>> s", "<SeriesHE>", "<Index>", "a          qrs", "b          XYZ", "c          123", "d           wX", "<<U1>      <<U4>", ">>> s.via_str.zfill(8)", "<SeriesHE>", "<Index>", "a          0000qrs", "b          00000XYZ", "c          00000123", "d          0000 wX", "<<U1>      <<U8>"], "SeriesHE.via_fill_value().loc": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_fill_value(0).loc[['a', 'c', 'd', 'e']]", "<SeriesHE>", "<Index>", "a          10", "c          8", "d          0", "e          0", "<<U1>      <int64>"], "SeriesHE.via_fill_value().__getitem__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_fill_value(0)[['a', 'c', 'd', 'e']]", "<SeriesHE>", "<Index>", "a          10", "c          8", "d          0", "e          0", "<<U1>      <int64>"], "SeriesHE.via_fill_value().via_T": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_fill_value().via_T", "NotImplementedError('via_T functionality only available on Frame')"], "SeriesHE.via_fill_value().__add__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) + s2", "<SeriesHE>", "<Index>", "a          10", "b          4", "c          16", "d          19", "<<U1>      <int64>"], "SeriesHE.via_fill_value().__sub__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) - s2", "<SeriesHE>", "<Index>", "a          10", "b          0", "c          0", "d          -19", "<<U1>      <int64>"], "SeriesHE.via_fill_value().__mul__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) * s2", "<SeriesHE>", "<Index>", "a          0", "b          4", "c          64", "d          0", "<<U1>      <int64>"], "SeriesHE.via_fill_value().__truediv__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) / s2", "<SeriesHE>", "<Index>", "a          inf", "b          1.0", "c          1.0", "d          0.0", "<<U1>      <float64>"], "SeriesHE.via_fill_value().__floordiv__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) // s2", "<SeriesHE>", "<Index>", "a          0", "b          1", "c          1", "d          0", "<<U1>      <int64>"], "SeriesHE.via_fill_value().__mod__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) % s2", "<SeriesHE>", "<Index>", "a          0", "b          0", "c          0", "d          0", "<<U1>      <int64>"], "SeriesHE.via_fill_value().__pow__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) ** s2", "<SeriesHE>", "<Index>", "a          1", "b          4", "c          16777216", "d          0", "<<U1>      <int64>"], "SeriesHE.via_fill_value().__lshift__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s1", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2", "<SeriesHE>", "<Index>", "b          2", "c          8", "d          19", "<<U1>      <int64>", ">>> s1.via_fill_value(0) << s2", "<SeriesHE>", "<Index>", "a          10", "b          8", "c          2048", "d          0", "<<U1>      <int64>"], "SeriesHE.via_fill_value().__rshift__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s1", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2", "<SeriesHE>", "<Index>", "b          2", "c          8", "d          19", "<<U1>      <int64>", ">>> s1.via_fill_value(0) >> s2", "<SeriesHE>", "<Index>", "a          10", "b          0", "c          0", "d          0", "<<U1>      <int64>"], "SeriesHE.via_fill_value().__and__()": [">>> s1 = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))", ">>> s1", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "<<U1>      <bool>", ">>> s2 = sf.SeriesHE((False, False, True), index=('b', 'c', 'd'))", ">>> s2", "<SeriesHE>", "<Index>", "b          False", "c          False", "d          True", "<<U1>      <bool>", ">>> s1.via_fill_value(False) & s2", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          False", "d          False", "<<U1>      <bool>"], "SeriesHE.via_fill_value().__xor__()": [">>> s1 = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))", ">>> s1", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "<<U1>      <bool>", ">>> s2 = sf.SeriesHE((False, False, True), index=('b', 'c', 'd'))", ">>> s2", "<SeriesHE>", "<Index>", "b          False", "c          False", "d          True", "<<U1>      <bool>", ">>> s1.via_fill_value(False) ^ s2", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          True", "<<U1>      <bool>"], "SeriesHE.via_fill_value().__or__()": [">>> s1 = sf.SeriesHE((False, False, True), index=('a', 'b', 'c'))", ">>> s1", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "<<U1>      <bool>", ">>> s2 = sf.SeriesHE((False, False, True), index=('b', 'c', 'd'))", ">>> s2", "<SeriesHE>", "<Index>", "b          False", "c          False", "d          True", "<<U1>      <bool>", ">>> s1.via_fill_value(False) | s2", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          True", "d          True", "<<U1>      <bool>"], "SeriesHE.via_fill_value().__lt__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) < s2", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          False", "d          True", "<<U1>      <bool>"], "SeriesHE.via_fill_value().__le__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) <= s2", "<SeriesHE>", "<Index>", "a          False", "b          True", "c          True", "d          True", "<<U1>      <bool>"], "SeriesHE.via_fill_value().__eq__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) == s2", "<SeriesHE>", "<Index>", "a          False", "b          True", "c          True", "d          False", "<<U1>      <bool>"], "SeriesHE.via_fill_value().__ne__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) != s2", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          False", "d          True", "<<U1>      <bool>"], "SeriesHE.via_fill_value().__gt__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) > s2", "<SeriesHE>", "<Index>", "a          True", "b          False", "c          False", "d          False", "<<U1>      <bool>"], "SeriesHE.via_fill_value().__ge__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s1.via_fill_value(0) >= s2", "<SeriesHE>", "<Index>", "a          True", "b          True", "c          True", "d          False", "<<U1>      <bool>"], "SeriesHE.via_fill_value().__radd__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2 + s1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "SeriesHE.via_fill_value().__rsub__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2 - s1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "SeriesHE.via_fill_value().__rmul__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2 * s1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "SeriesHE.via_fill_value().__rtruediv__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2 / s1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "SeriesHE.via_fill_value().__rfloordiv__()": [">>> s1 = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s2 = sf.SeriesHE((2, 8, 19), index=('b', 'c', 'd'))", ">>> s2 // s1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "SeriesHE.via_re().search()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_re('[X123]').search()", "<SeriesHE>", "<Index>", "a          True", "b          True", "c          False", "<<U1>      <bool>"], "SeriesHE.via_re().match()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_re('[X123]').match()", "<SeriesHE>", "<Index>", "a          True", "b          True", "c          False", "<<U1>      <bool>"], "SeriesHE.via_re().fullmatch()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_re('123').fullmatch()", "<SeriesHE>", "<Index>", "a          False", "b          False", "c          False", "<<U1>      <bool>"], "SeriesHE.via_re().split()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_re('[X123]').split()", "<SeriesHE>", "<Index>", "a          ('', '0')", "b          ('', '')", "c          ('8',)", "<<U1>      <object>"], "SeriesHE.via_re().findall()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_re('[X123]').findall()", "<SeriesHE>", "<Index>", "a          ('1',)", "b          ('2',)", "c          ()", "<<U1>      <object>"], "SeriesHE.via_re().sub()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_re('[X123]').sub('==')", "<SeriesHE>", "<Index>", "a          ==0", "b          ==", "c          8", "<<U1>      <<U3>"], "SeriesHE.via_re().subn()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_re('[X123]').subn('==', 1)", "<SeriesHE>", "<Index>", "a          ('==0', 1)", "b          ('==', 1)", "c          ('8', 0)", "<<U1>      <object>"], "SeriesHE.via_hashlib().to_bytes()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_hashlib(include_name=False).to_bytes()", "b'SeriesHEIndexa\\x00\\x00\\x00b\\x00\\x00\\x00c\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"], "SeriesHE.via_hashlib().md5()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_hashlib(include_name=False).md5().hexdigest()", "cdfceabb6bce467728eac41862af05f0"], "SeriesHE.via_hashlib().sha256()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_hashlib(include_name=False).sha256().hexdigest()", "0e1cade1d8a0a05941e359f304b398aa35dd2cb1c02fa545de80fdabeebda5a5"], "SeriesHE.via_hashlib().sha512()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_hashlib(include_name=False).sha512().hexdigest()", "2aeea62d43f8d5c85a98e5d7ae14e1aec91bd4caa9d9ae09957c40930088f214239b14f097f1ef84353bc5078dc51b5081f8cc713b7361f4b32a221b5b74576e"], "SeriesHE.via_hashlib().sha3_256()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_hashlib(include_name=False).sha3_256().hexdigest()", "7994e617b917a0da162788679aecb5951ad391ba4eec7d4ab4c1ceeb55572268"], "SeriesHE.via_hashlib().sha3_512()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_hashlib(include_name=False).sha3_512().hexdigest()", "15925c0a2b36d3fe003e294d4b115d4d1e4968b738067ce88543bd49f1ab18e01943ac5ba1ffd988d001a227af4e83530ae43c82f2fb7399ad85fa6d6394f4c6"], "SeriesHE.via_hashlib().shake_128()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_hashlib(include_name=False).shake_128().hexdigest(8)", "f4ab1d6f54702e29"], "SeriesHE.via_hashlib().shake_256()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_hashlib(include_name=False).shake_256().hexdigest(8)", "d2f655ba436c6ba6"], "SeriesHE.via_hashlib().blake2b()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_hashlib(include_name=False).blake2b().hexdigest()", "c86fed470a72ca4f8212c529122b466d0594951df36bd167669772b181d32ff9b7f806a6d21c7f422439e861718cfcdca3c6ac61064da36858afa00bc21e7382"], "SeriesHE.via_hashlib().blake2s()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_hashlib(include_name=False).blake2s().hexdigest()", "68dbc43459028d232c158fed8e2d27a2113186900caf56b6bd94d142ab02c531"], "SeriesHE.via_values.apply()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> s.via_values.apply(np.sin)", "<SeriesHE>", "<Index>", "a          -0.5440211108893698", "b          0.9092974268256817", "c          0.9893582466233818", "<<U1>      <float64>"], "SeriesHE.via_values.__array_ufunc__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> np.sin(s.via_values)", "<SeriesHE>", "<Index>", "a          -0.5440211108893698", "b          0.9092974268256817", "c          0.9893582466233818", "<<U1>      <float64>"], "SeriesHE.via_values.__call__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s", "<SeriesHE>", "<Index>", "a          10", "b          2", "c          8", "<<U1>      <int64>", ">>> np.sin(s.via_values(unify_blocks=True))", "<SeriesHE>", "<Index>", "a          -0.5440211108893698", "b          0.9092974268256817", "c          0.9893582466233818", "<<U1>      <float64>"], "SeriesHE.via_type_clinic.to_hint()": [">>> s = sf.SeriesHE((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<SeriesHE>", "<Index>", "p          False", "q          True", "r          True", "<<U1>      <bool>", ">>> s.via_type_clinic.to_hint()", "static_frame.core.series.SeriesHE[static_frame.core.index.Index[numpy.str_], numpy.bool_]"], "SeriesHE.via_type_clinic.check()": [">>> s = sf.SeriesHE((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<SeriesHE>", "<Index>", "p          False", "q          True", "r          True", "<<U1>      <bool>", ">>> s.via_type_clinic.check(sf.Series[sf.Index[np.str_], np.int64])", "ClinicError('\\nIn Series[Index[str_], int64]\\n\u2514\u2500\u2500 Expected int64, provided bool_ invalid')"], "SeriesHE.via_type_clinic.__call__()": [">>> s = sf.SeriesHE((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<SeriesHE>", "<Index>", "p          False", "q          True", "r          True", "<<U1>      <bool>", ">>> cr = s.via_type_clinic(sf.Series[sf.Index[np.str_], np.int64])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Series[Index[str_], int64]", "\u2514\u2500\u2500 Expected int64, provided bool_ invalid"], "SeriesHE.via_type_clinic.__repr__()": [">>> s = sf.SeriesHE((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<SeriesHE>", "<Index>", "p          False", "q          True", "r          True", "<<U1>      <bool>", ">>> s.via_type_clinic", "SeriesHE[Index[str_], bool_]"], "SeriesHE.via_mapping.__getitem__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.via_mapping['c']", "8"], "SeriesHE.via_mapping.__iter__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> tuple(s.via_mapping)", "('a', 'b', 'c')"], "SeriesHE.via_mapping.__len__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> len(s.via_mapping)", "3"], "SeriesHE.via_mapping.__contains__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> 'c' in s.via_mapping", "True"], "SeriesHE.via_mapping.__repr__()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> s.via_mapping", "SeriesMapping({a: 10, b: 2, c: 8})"], "SeriesHE.via_mapping.keys()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> tuple(s.via_mapping.keys())", "('a', 'b', 'c')"], "SeriesHE.via_mapping.values()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> tuple(s.via_mapping.values())", "(10, 2, 8)"], "SeriesHE.via_mapping.items()": [">>> s = sf.SeriesHE((10, 2, 8), index=('a', 'b', 'c'))", ">>> tuple(s.via_mapping.items())", "(('a', 10), ('b', 2), ('c', 8))"], "Frame.__init__()": [">>> sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>"], "Frame.from_arrow()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> aw = f1.to_arrow()", ">>> aw", "pyarrow.Table", "__index0__: string", "a: int64", "b: int64", "----", "__index0__: [[\"p\",\"q\",\"r\"]]", "a: [[0,2,4]]", "b: [[1,3,5]]", ">>> sf.Frame.from_arrow(aw, index_depth=1)", "<Frame>", "<Index>  a       b       <<U1>", "<Index>", "p        0       1", "q        2       3", "r        4       5", "<object> <int64> <int64>"], "Frame.from_clipboard()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f1.to_clipboard()", "TclError('no display name and no $DISPLAY environment variable')", ">>> sf.Frame.from_clipboard(index_depth=1)", "TclError('no display name and no $DISPLAY environment variable')"], "Frame.from_concat()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>", ">>> sf.Frame.from_concat((f1, f2), axis=1)", "<Frame>", "<Index> a       b       c      d      <<U1>", "<Index>", "p       0       1       False  True", "q       2       3       False  True", "r       4       5       False  True", "<<U1>   <int64> <int64> <bool> <bool>", ">>> sf.Frame.from_concat((f1, f2.relabel(columns=('a', 'b'))), axis=0, index=sf.IndexAutoFactory)", "<Frame>", "<Index> a        b        <<U1>", "<Index>", "0       0        1", "1       2        3", "2       4        5", "3       False    True", "4       False    True", "5       False    True", "<int64> <object> <object>"], "Frame.from_concat_items()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>", ">>> sf.Frame.from_concat_items(((f1.name, f1), (f2.name, f2)), axis=1)", "<Frame>", "<IndexHierarchy> x       x       y      y      <<U1>", "                 a       b       c      d      <<U1>", "<Index>", "p                0       1       False  True", "q                2       3       False  True", "r                4       5       False  True", "<<U1>            <int64> <int64> <bool> <bool>", ">>> sf.Frame.from_concat_items(((f1.name, f1), (f2.name, f2.relabel(columns=('a', 'b')))), axis=0)", "<Frame>", "<Index>                a        b        <<U1>", "<IndexHierarchy>", "x                p     0        1", "x                q     2        3", "x                r     4        5", "y                p     False    True", "y                q     False    True", "y                r     False    True", "<<U1>            <<U1> <object> <object>"], "Frame.from_csv()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f1.to_csv('/tmp/f.csv')", ">>> from pathlib import Path", ">>> Path('/tmp/f.csv').read_text()", "__index0__,a,b", "p,0,1", "q,2,3", "r,4,5", "", ">>> sf.Frame.from_csv('/tmp/f.csv', index_depth=1)", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       0       1", "q       2       3", "r       4       5", "<<U1>   <int64> <int64>"], "Frame.from_delimited()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f1.to_delimited('/tmp/f.psv', delimiter='|')", ">>> from pathlib import Path", ">>> Path('/tmp/f.psv').read_text()", "__index0__|a|b", "p|0|1", "q|2|3", "r|4|5", "", ">>> sf.Frame.from_delimited('/tmp/f.psv', delimiter='|', index_depth=1)", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       0       1", "q       2       3", "r       4       5", "<<U1>   <int64> <int64>"], "Frame.from_dict()": [">>> sf.Frame.from_dict(mapping=dict(a=(10, 2, 8, 3), b=('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), dtypes=dict(b=np.datetime64), name='x')", "<Frame: x>", "<Index>    a       b               <<U1>", "<Index>", "0          10      1517-01-01", "1          2       1517-04-01", "2          8       1517-12-31", "3          3       1517-06-30", "<int64>    <int64> <datetime64[D]>"], "Frame.from_dict_fields()": [">>> sf.Frame.from_dict_fields(records=(dict(a=False, b=False, c=True), dict(a='1517-04-01', b='1517-01-01', c='1517-04-01')), columns=('p', 'q'), dtypes=dict(q=np.datetime64), name='x')", "TypeError(\"Frame.from_dict_fields() got an unexpected keyword argument 'records'\")"], "Frame.from_dict_records()": [">>> sf.Frame.from_dict_records(records=(dict(a=10, b=False, c='1517-01-01'), dict(a=8, b=True, c='1517-04-01')), index=('p', 'q'), dtypes=dict(c=np.datetime64), name='x')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "p          10      False  1517-01-01", "q          8       True   1517-04-01", "<<U1>      <int64> <bool> <datetime64[D]>"], "Frame.from_dict_records_items()": [">>> sf.Frame.from_dict_records_items(items=(('p', dict(a=10, b=False, c='1517-01-01')), ('q', dict(a=8, b=True, c='1517-04-01'))), dtypes=dict(c=np.datetime64), name='x')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "p          10      False  1517-01-01", "q          8       True   1517-04-01", "<<U1>      <int64> <bool> <datetime64[D]>"], "Frame.from_duckdb()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f1.to_duckdb('/tmp/f.db')", ">>> sf.Frame.from_duckdb('/tmp/f.db', label=f1.name, index_depth=1)", "<Frame: x>", "<Index>    a       b        <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<object>   <int64> <object>"], "Frame.from_element()": [">>> sf.Frame.from_element(0, index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       0", "q          0       0", "r          0       0", "<<U1>      <int64> <int64>"], "Frame.from_element_items()": [">>> sf.Frame.from_element_items(((('a', 0), -1), (('b', 0), 10), (('a', 1), 3), (('b', 'a'), 1)), columns=(0, 1), index=('a', 'b'), name='x', axis=1)", "ErrorInitTypeBlocks('Array block has unaligned row count: found 1, expected 2')"], "Frame.from_elements()": [">>> sf.Frame.from_elements((10, 2, 8, 3), index=('p', 'q', 'r', 's'), columns=['a'], name='x')", "<Frame: x>", "<Index>    a       <<U1>", "<Index>", "p          10", "q          2", "r          8", "s          3", "<<U1>      <int64>"], "Frame.from_fields()": [">>> sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.from_hdf5()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f1.to_hdf5('/tmp/f.hdf5')", ">>> f1.from_hdf5('/tmp/f.hdf5', label='x', index_depth=1)", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>"], "Frame.from_items()": [">>> sf.Frame.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>"], "Frame.from_json_columns()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_columns(indent=4)", ">>> msg", "{", "    \"a\": {", "        \"0\": 10,", "        \"1\": 2,", "        \"2\": 8,", "        \"3\": 3", "    },", "    \"b\": {", "        \"0\": false,", "        \"1\": true,", "        \"2\": true,", "        \"3\": false", "    },", "    \"c\": {", "        \"0\": \"1517-01-01\",", "        \"1\": \"1517-04-01\",", "        \"2\": \"1517-12-31\",", "        \"3\": \"1517-06-30\"", "    }", "}", ">>> sf.Frame.from_json_columns(msg, dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c          <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<<U1>   <int64> <bool> <<U10>"], "Frame.from_json_index()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_index(indent=4)", ">>> msg", "{", "    \"0\": {", "        \"a\": 10,", "        \"b\": false,", "        \"c\": \"1517-01-01\"", "    },", "    \"1\": {", "        \"a\": 2,", "        \"b\": true,", "        \"c\": \"1517-04-01\"", "    },", "    \"2\": {", "        \"a\": 8,", "        \"b\": true,", "        \"c\": \"1517-12-31\"", "    },", "    \"3\": {", "        \"a\": 3,", "        \"b\": false,", "        \"c\": \"1517-06-30\"", "    }", "}", ">>> sf.Frame.from_json_index(msg, dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<<U1>   <int64> <bool> <datetime64[D]>"], "Frame.from_json_records()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_records(indent=4)", ">>> msg", "[", "    {", "        \"a\": 10,", "        \"b\": false,", "        \"c\": \"1517-01-01\"", "    },", "    {", "        \"a\": 2,", "        \"b\": true,", "        \"c\": \"1517-04-01\"", "    },", "    {", "        \"a\": 8,", "        \"b\": true,", "        \"c\": \"1517-12-31\"", "    },", "    {", "        \"a\": 3,", "        \"b\": false,", "        \"c\": \"1517-06-30\"", "    }", "]", ">>> sf.Frame.from_json_records(msg, dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<int64> <int64> <bool> <datetime64[D]>"], "Frame.from_json_split()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_split(indent=4)", ">>> msg", "{", "    \"columns\": [", "        \"a\",", "        \"b\",", "        \"c\"", "    ],", "    \"index\": [", "        0,", "        1,", "        2,", "        3", "    ],", "    \"data\": [", "        [", "            10,", "            false,", "            \"1517-01-01\"", "        ],", "        [", "            2,", "            true,", "            \"1517-04-01\"", "        ],", "        [", "            8,", "            true,", "            \"1517-12-31\"", "        ],", "        [", "            3,", "            false,", "            \"1517-06-30\"", "        ]", "    ]", "}", ">>> sf.Frame.from_json_split(msg, dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<int64> <int64> <bool> <datetime64[D]>"], "Frame.from_json_typed()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_typed(indent=4)", ">>> msg", "{", "    \"columns\": [", "        \"a\",", "        \"b\",", "        \"c\"", "    ],", "    \"index\": [", "        [", "            0,", "            \"p\"", "        ],", "        [", "            0,", "            \"q\"", "        ],", "        [", "            1,", "            \"p\"", "        ],", "        [", "            1,", "            \"q\"", "        ]", "    ],", "    \"data\": [", "        [", "            10,", "            2,", "            8,", "            3", "        ],", "        [", "            false,", "            true,", "            true,", "            false", "        ],", "        [", "            \"1517-01-01\",", "            \"1517-04-01\",", "            \"1517-12-31\",", "            \"1517-06-30\"", "        ]", "    ],", "    \"__meta__\": {", "        \"__names__\": [", "            \"x\",", "            null,", "            null", "        ],", "        \"__dtypes__\": [", "            \"=i8\",", "            \"|b1\",", "            \"=M8[D]\"", "        ],", "        \"__dtypes_index__\": [", "            \"=i8\",", "            \"=U1\"", "        ],", "        \"__dtypes_columns__\": [", "            \"=U1\"", "        ],", "        \"__types__\": [", "            \"IndexHierarchy\",", "            \"Index\"", "        ],", "        \"__types_index__\": [", "            \"Index\",", "            \"Index\"", "        ],", "        \"__depths__\": [", "            3,", "            2,", "            1", "        ]", "    }", "}", ">>> sf.Frame.from_json_typed(msg)", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>"], "Frame.from_json_values()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_values(indent=4)", ">>> msg", "[", "    [", "        10,", "        false,", "        \"1517-01-01\"", "    ],", "    [", "        2,", "        true,", "        \"1517-04-01\"", "    ],", "    [", "        8,", "        true,", "        \"1517-12-31\"", "    ],", "    [", "        3,", "        false,", "        \"1517-06-30\"", "    ]", "]", ">>> sf.Frame.from_json_values(msg, columns=tuple('abc'), dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<int64> <int64> <bool> <datetime64[D]>"], "Frame.from_msgpack()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> mb = f1.to_msgpack()", ">>> mb", "b'\\x85\\xc4\\x02sf\\xa5Frame\\xc4\\x04name\\xa1x\\xc4\\x06blocks\\xc4\\xcd\\x82\\xc4\\x02sf\\xaaTypeBlocks\\xc4\\x06blocks\\xc4\\xb3\\x92\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<i8\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4 \\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U4\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4@q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x00\\xc4\\x05index\\xc4S\\x83\\xc4\\x02sf\\xa5Index\\xc4\\x04name\\xc0\\xc4\\x04data\\xc49\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U1\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4\\x10p\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00\\xc4\\x07columns\\xc4K\\x83\\xc4\\x02sf\\xa5Index\\xc4\\x04name\\xc0\\xc4\\x04data\\xc41\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U1\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x02\\xc4\\x04data\\xc4\\x08a\\x00\\x00\\x00b\\x00\\x00\\x00'", ">>> sf.Frame.from_msgpack(mb)", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>"], "Frame.from_npy()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f1.to_npy('/tmp/f.npy')", ">>> sf.Frame.from_npy('/tmp/f.npy')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> import shutil", ">>> shutil.rmtree('/tmp/f.npy')"], "Frame.from_npy_mmap()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f1.to_npy('/tmp/f.npy')", ">>> f2, closer = sf.Frame.from_npy_mmap('/tmp/f.npy')", ">>> f2", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> closer() # close mmaps after usage", ">>> import shutil", ">>> shutil.rmtree('/tmp/f.npy')"], "Frame.from_npz()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f1.to_npz('/tmp/f.npz')", ">>> sf.Frame.from_npz('/tmp/f.npz')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.from_overlay()": [">>> f1 = sf.Frame.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a         b        <<U1>", "<Index>", "p          10.0      qrs", "q          2.0       XYZ", "r          nan       None", "s          3.0       None", "<<U1>      <float64> <object>", ">>> f2 = sf.Frame.from_items((('a', (8, 3)), ('b', ('123', ' wX '))), index=('r', 's'), name='y')", ">>> f2", "<Frame: y>", "<Index>    a       b     <<U1>", "<Index>", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> sf.Frame.from_overlay((f1, f2))", "<Frame>", "<Index> a         b        <<U1>", "<Index>", "p       10.0      qrs", "q       2.0       XYZ", "r       8.0       123", "s       3.0        wX", "<<U1>   <float64> <object>"], "Frame.from_pandas()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> df = f1.to_pandas()", ">>> df", "    a     b", "p  10  qrs ", "q   2   XYZ", "r   8   123", "s   3   wX ", ">>> sf.Frame.from_pandas(df, dtypes=dict(b=str))", "<Frame: x>", "<Index>    a       b     <object>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<object>   <int64> <<U4>"], "Frame.from_parquet()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f1.to_parquet('/tmp/f.parquet')", ">>> sf.Frame.from_parquet('/tmp/f.parquet', index_depth=1)", "<Frame>", "<Index>  a       b        <<U1>", "<Index>", "p        10      qrs", "q        2       XYZ", "r        8       123", "s        3        wX", "<object> <int64> <object>"], "Frame.from_pickle()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f1.to_pickle('/tmp/f.pickle')", ">>> sf.Frame.from_pickle('/tmp/f.pickle')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.from_records()": [">>> sf.Frame.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "p          10      False  1517-01-01", "q          8       True   1517-04-01", "<<U1>      <int64> <bool> <datetime64[D]>"], "Frame.from_records_items()": [">>> sf.Frame.from_records_items((('p', (10, False, '1517-01-01')), ('q', (8, True,'1517-04-01'))), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "p          10      False  1517-01-01", "q          8       True   1517-04-01", "<<U1>      <int64> <bool> <datetime64[D]>"], "Frame.from_series()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'), name='x')", ">>> s", "<Series: x>", "<Index>", "a           10", "b           2", "c           8", "<<U1>       <int64>", ">>> sf.Frame.from_series(s)", "<Frame>", "<Index> x       <<U1>", "<Index>", "a       10", "b       2", "c       8", "<<U1>   <int64>"], "Frame.from_sql()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f1.to_sqlite('/tmp/f.db')", ">>> import sqlite3", ">>> conn = sqlite3.connect('/tmp/f.db')", ">>> sf.Frame.from_sql(\"select * from x limit 2\", connection=conn, index_depth=1)", "<Frame>", "<Index> a       b       c          <<U1>", "<Index>", "0       10      0       1517-01-01", "1       2       1       1517-04-01", "<int64> <int64> <int64> <<U10>"], "Frame.from_sqlite()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f1.to_sqlite('/tmp/f.db')", ">>> sf.Frame.from_sqlite('/tmp/f.db', label=f1.name, index_depth=1)", "<Frame: x>", "<Index>    a       b      c          <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <<U10>"], "Frame.from_structured_array()": [">>> sa = np.array([(False, 8), (True, 19)], dtype=[('a', bool), ('b', int)])", ">>> sa", "[(False,  8) ( True, 19)]", ">>> sf.Frame.from_structured_array(sa)", "<Frame>", "<Index> a      b       <<U1>", "<Index>", "0       False  8", "1       True   19", "<int64> <bool> <int64>"], "Frame.from_tsv()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f1.to_tsv('/tmp/f.tsv')", ">>> from pathlib import Path", ">>> Path('/tmp/f.tsv').read_text()", "__index0__\ta\tb", "p\t0\t1", "q\t2\t3", "r\t4\t5", "", ">>> sf.Frame.from_tsv('/tmp/f.tsv', index_depth=1)", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       0       1", "q       2       3", "r       4       5", "<<U1>   <int64> <int64>"], "Frame.from_xlsx()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f1.to_xlsx('/tmp/f.xlsx')", ">>> sf.Frame.from_xlsx('/tmp/f.xlsx', index_depth=1)", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       0       1", "q       2       3", "r       4       5", "<<U1>   <int64> <int64>"], "Frame.to_arrow()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.to_arrow()", "pyarrow.Table", "__index0__: string", "a: int64", "b: string", "----", "__index0__: [[\"p\",\"q\",\"r\",\"s\"]]", "a: [[10,2,8,3]]", "b: [[\"qrs \",\"XYZ\",\"123\",\" wX \"]]"], "Frame.to_clipboard()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1.to_clipboard()", "TclError('no display name and no $DISPLAY environment variable')"], "Frame.to_csv()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f1.to_csv('/tmp/f.csv')", ">>> from pathlib import Path", ">>> Path('/tmp/f.csv').read_text()", "__index0__,a,b", "p,0,1", "q,2,3", "r,4,5", ""], "Frame.to_delimited()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f1.to_delimited('/tmp/f.psv', delimiter='|')", ">>> from pathlib import Path", ">>> Path('/tmp/f.psv').read_text()", "__index0__|a|b", "p|0|1", "q|2|3", "r|4|5", ""], "Frame.to_duckdb()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f1.to_duckdb('/tmp/f.db')", ">>> import duckdb", ">>> conn = duckdb.connect('/tmp/f.db')", ">>> sf.Frame.from_sql(\"select * from x limit 2\", connection=conn, index_depth=1)", "TypeError(\"'duckdb.duckdb.DuckDBPyConnection' object is not iterable\")"], "Frame.to_frame()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.to_frame()", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>"], "Frame.to_frame_go()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.to_frame_go()", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>"], "Frame.to_frame_he()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.to_frame_he()", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>"], "Frame.to_hdf5()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f1.to_hdf5('/tmp/f.h5')"], "Frame.to_json_columns()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.to_json_columns(indent=4)", "{", "    \"a\": {", "        \"0\": 10,", "        \"1\": 2,", "        \"2\": 8,", "        \"3\": 3", "    },", "    \"b\": {", "        \"0\": false,", "        \"1\": true,", "        \"2\": true,", "        \"3\": false", "    },", "    \"c\": {", "        \"0\": \"1517-01-01\",", "        \"1\": \"1517-04-01\",", "        \"2\": \"1517-12-31\",", "        \"3\": \"1517-06-30\"", "    }", "}"], "Frame.to_json_index()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.to_json_index(indent=4)", "{", "    \"0\": {", "        \"a\": 10,", "        \"b\": false,", "        \"c\": \"1517-01-01\"", "    },", "    \"1\": {", "        \"a\": 2,", "        \"b\": true,", "        \"c\": \"1517-04-01\"", "    },", "    \"2\": {", "        \"a\": 8,", "        \"b\": true,", "        \"c\": \"1517-12-31\"", "    },", "    \"3\": {", "        \"a\": 3,", "        \"b\": false,", "        \"c\": \"1517-06-30\"", "    }", "}"], "Frame.to_json_records()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.to_json_records(indent=4)", "[", "    {", "        \"a\": 10,", "        \"b\": false,", "        \"c\": \"1517-01-01\"", "    },", "    {", "        \"a\": 2,", "        \"b\": true,", "        \"c\": \"1517-04-01\"", "    },", "    {", "        \"a\": 8,", "        \"b\": true,", "        \"c\": \"1517-12-31\"", "    },", "    {", "        \"a\": 3,", "        \"b\": false,", "        \"c\": \"1517-06-30\"", "    }", "]"], "Frame.to_json_split()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.to_json_split(indent=4)", "{", "    \"columns\": [", "        \"a\",", "        \"b\",", "        \"c\"", "    ],", "    \"index\": [", "        0,", "        1,", "        2,", "        3", "    ],", "    \"data\": [", "        [", "            10,", "            false,", "            \"1517-01-01\"", "        ],", "        [", "            2,", "            true,", "            \"1517-04-01\"", "        ],", "        [", "            8,", "            true,", "            \"1517-12-31\"", "        ],", "        [", "            3,", "            false,", "            \"1517-06-30\"", "        ]", "    ]", "}"], "Frame.to_json_typed()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.to_json_typed(indent=4)", "{", "    \"columns\": [", "        \"a\",", "        \"b\",", "        \"c\"", "    ],", "    \"index\": null,", "    \"data\": [", "        [", "            10,", "            2,", "            8,", "            3", "        ],", "        [", "            false,", "            true,", "            true,", "            false", "        ],", "        [", "            \"1517-01-01\",", "            \"1517-04-01\",", "            \"1517-12-31\",", "            \"1517-06-30\"", "        ]", "    ],", "    \"__meta__\": {", "        \"__names__\": [", "            \"x\",", "            null,", "            null", "        ],", "        \"__dtypes__\": [", "            \"=i8\",", "            \"|b1\",", "            \"=M8[D]\"", "        ],", "        \"__dtypes_index__\": [", "            \"=i8\"", "        ],", "        \"__dtypes_columns__\": [", "            \"=U1\"", "        ],", "        \"__types__\": [", "            \"Index\",", "            \"Index\"", "        ],", "        \"__depths__\": [", "            3,", "            1,", "            1", "        ]", "    }", "}"], "Frame.to_json_values()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.to_json_values(indent=4)", "[", "    [", "        10,", "        false,", "        \"1517-01-01\"", "    ],", "    [", "        2,", "        true,", "        \"1517-04-01\"", "    ],", "    [", "        8,", "        true,", "        \"1517-12-31\"", "    ],", "    [", "        3,", "        false,", "        \"1517-06-30\"", "    ]", "]"], "Frame.to_latex()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.to_latex()", "\\begin{table}[ht]", "\\centering", "\\begin{tabular}{c c c}", "\\hline\\hline", "   & a   & b    \\\\", "\\hline", "p  & 10  & qrs  \\\\", "q  & 2   & XYZ  \\\\", "r  & 8   & 123  \\\\", "s  & 3   &  wX  \\\\", "\\hline\\end{tabular}", "\\end{table}"], "Frame.to_markdown()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.to_markdown()", "|  |a  |b   |", "|--|---|----|", "|p |10 |qrs |", "|q |2  |XYZ |", "|r |8  |123 |", "|s |3  | wX |"], "Frame.to_msgpack()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.to_msgpack()", "b'\\x85\\xc4\\x02sf\\xa5Frame\\xc4\\x04name\\xa1x\\xc4\\x06blocks\\xc4\\xcd\\x82\\xc4\\x02sf\\xaaTypeBlocks\\xc4\\x06blocks\\xc4\\xb3\\x92\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<i8\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4 \\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U4\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4@q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x00\\xc4\\x05index\\xc4S\\x83\\xc4\\x02sf\\xa5Index\\xc4\\x04name\\xc0\\xc4\\x04data\\xc49\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U1\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4\\x10p\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00\\xc4\\x07columns\\xc4K\\x83\\xc4\\x02sf\\xa5Index\\xc4\\x04name\\xc0\\xc4\\x04data\\xc41\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U1\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x02\\xc4\\x04data\\xc4\\x08a\\x00\\x00\\x00b\\x00\\x00\\x00'"], "Frame.to_npy()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f1.to_npy('/tmp/f.npy')", ">>> sf.Frame.from_npy('/tmp/f.npy')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> import shutil", ">>> shutil.rmtree('/tmp/f.npy')"], "Frame.to_npz()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f1.to_npz('/tmp/f.npz')", ">>> sf.Frame.from_npz('/tmp/f.npz')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.to_pairs()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.to_pairs()", "(('a', (('p', 10), ('q', 2), ('r', 8), ('s', 3))), ('b', (('p', 'qrs '), ('q', 'XYZ'), ('r', '123'), ('s', ' wX '))))"], "Frame.to_pandas()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.to_pandas()", "    a     b", "p  10  qrs ", "q   2   XYZ", "r   8   123", "s   3   wX "], "Frame.to_parquet()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f1.to_parquet('/tmp/f.parquet')"], "Frame.to_pickle()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f1.to_pickle('/tmp/f.pickle')", ">>> sf.Frame.from_pickle('/tmp/f.pickle')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.to_rst()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.to_rst()", "+--+---+----+", "|  |a  |b   |", "+==+===+====+", "|p |10 |qrs |", "+--+---+----+", "|q |2  |XYZ |", "+--+---+----+", "|r |8  |123 |", "+--+---+----+", "|s |3  | wX |", "+--+---+----+"], "Frame.to_series()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.to_series()", "<Series: x>", "<Index>", "('p', 'a')  10", "('p', 'b')  qrs", "('q', 'a')  2", "('q', 'b')  XYZ", "('r', 'a')  8", "('r', 'b')  123", "('s', 'a')  3", "('s', 'b')   wX", "<object>    <object>"], "Frame.to_sql()": [">>> import sqlite3", ">>> conn = sqlite3.connect(':memory')", ">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1.to_sql(conn, include_index=False)", ">>> sf.Frame.from_sql(\"select * from x\", connection=conn)", "<Frame>", "<Index> a       b       c          <<U1>", "<Index>", "0       10      0       1517-01-01", "1       2       1       1517-04-01", "2       8       1       1517-12-31", "3       3       0       1517-06-30", "<int64> <int64> <int64> <<U10>"], "Frame.to_sqlite()": [">>> f1 = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f1.to_sqlite('/tmp/f.db')", ">>> import sqlite3", ">>> conn = sqlite3.connect('/tmp/f.db')", ">>> sf.Frame.from_sql(\"select * from x limit 2\", connection=conn, index_depth=1)", "<Frame>", "<Index> a       b       c          <<U1>", "<Index>", "0       10      0       1517-01-01", "1       2       1       1517-04-01", "<int64> <int64> <int64> <<U10>"], "Frame.to_tsv()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f1.to_tsv('/tmp/f.tsv')", ">>> from pathlib import Path", ">>> Path('/tmp/f.tsv').read_text()", "__index0__\ta\tb", "p\t0\t1", "q\t2\t3", "r\t4\t5", ""], "Frame.to_xarray()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.to_xarray()", "<xarray.Dataset>", "Dimensions:     (__index0__: 4)", "Coordinates:", "  * __index0__  (__index0__) <U1 'p' 'q' 'r' 's'", "Data variables:", "    a           (__index0__) int64 10 2 8 3", "    b           (__index0__) <U4 'qrs ' 'XYZ' '123' ' wX '"], "Frame.to_xlsx()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f1.to_xlsx('/tmp/f.xlsx')"], "Frame.STATIC": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.STATIC", "True"], "Frame.T": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.T", "<Frame: x>", "<Index>    0          1          2          3          <int64>", "<Index>", "a          10         2          8          3", "b          False      True       True       False", "c          1517-01-01 1517-04-01 1517-12-31 1517-06-30", "<<U1>      <object>   <object>   <object>   <object>"], "Frame.columns": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.columns", "<Index>", "a", "b", "c", "<<U1>"], "Frame.dtypes": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.dtypes", "<Series: x>", "<Index>", "a           int64", "b           bool", "c           datetime64[D]", "<<U1>       <object>"], "Frame.index": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.index", "<Index>", "0", "1", "2", "3", "<int64>"], "Frame.memory": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.memory", "        L    Lu    LM   LMu   LMD  LMDu  R    Ru    RM   RMu   RMD  RMDu", "Name    50   B     50   B     50   B     50   B     50   B     50   B", "Index   236  B     252  B     124  B     8.34 KB    284  B     156  B", "Columns 800  B     832  B     576  B     8.89 KB    856  B     600  B", "Blocks  748  B     796  B     412  B     748  B     796  B     412  B", "Total   1.82 KB    1.91 KB    1.16 KB    9.93 KB    1.97 KB    1.22 KB"], "Frame.name": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.name", "x"], "Frame.nbytes": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.nbytes", "68"], "Frame.ndim": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.ndim", "2"], "Frame.shape": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.shape", "(4, 3)"], "Frame.size": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.size", "12"], "Frame.__array__()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.__array__()", "[[0 1]", " [2 3]", " [4 5]]"], "Frame.__array_ufunc__()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> np.array((1, 0)) * f", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       0       0", "q       2       0", "r       4       0", "<<U1>   <int64> <int64>"], "Frame.__bool__()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> bool(f)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "Frame.__dataframe__()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> dfi = f.__dataframe__()", ">>> tuple(dfi.get_columns())", "(<DFIColumn: shape=(3,) dtype=<i8>, <DFIColumn: shape=(3,) dtype=<i8>)"], "Frame.__deepcopy__()": [">>> import copy", ">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> copy.deepcopy(f)", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>"], "Frame.__len__()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> len(f)", "3"], "Frame.__round__()": [">>> f = sf.Frame((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')", ">>> f", "<Frame: y>", "<Index>    a                  b                  <<U1>", "<Index>", "p          0.0                1.3333333333333333", "q          2.6666666666666665 4.0", "r          5.333333333333333  6.666666666666667", "<<U1>      <float64>          <float64>", ">>> round(f, 1)", "<Frame: y>", "<Index>    a         b         <<U1>", "<Index>", "p          0.0       1.3", "q          2.7       4.0", "r          5.3       6.7", "<<U1>      <float64> <float64>"], "Frame.all()": [">>> f = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f", "<Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>", ">>> f.all()", "<Series>", "<Index>", "c        False", "d        True", "<<U1>    <bool>"], "Frame.any()": [">>> f = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f", "<Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>", ">>> f.any()", "<Series>", "<Index>", "c        False", "d        True", "<<U1>    <bool>"], "Frame.astype[]()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.astype['c'](object)", "<Frame: x>", "<Index>    a       b      c          <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <object>"], "Frame.astype()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.astype(float)", "<Frame: x>", "<Index>    a         b         <<U1>", "<Index>", "p          0.0       1.0", "q          2.0       3.0", "r          4.0       5.0", "<<U1>      <float64> <float64>"], "Frame.clip()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.clip(lower=2, upper=4)", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       2", "q          2       3", "r          4       4", "<<U1>      <int64> <int64>"], "Frame.consolidate[]": [">>> f1 = sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1), (False, True, True, False), (True, True, False, True)), columns=('a', 'b', 'c', 'd', 'e'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       d      e      <<U1>", "<Index>", "0          0       20      0       False  True", "1          0       18      0       True   True", "2          10      -3      0       True   False", "3          2       18      1       False  True", "<int64>    <int64> <int64> <int64> <bool> <bool>", ">>> f1.consolidate.status", "<Frame>", "<Index> loc   iloc    dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       a     0       int64    (4,)     1       True    True         True", "1       b     1       int64    (4,)     1       True    True         True", "2       c     2       int64    (4,)     1       True    True         True", "3       d     3       bool     (4,)     1       True    True         True", "4       e     4       bool     (4,)     1       True    True         True", "<int64> <<U1> <int64> <object> <object> <int64> <bool>  <bool>       <bool>", ">>> f2 = f1.consolidate['a':'c']", ">>> f2.consolidate.status", "<Frame>", "<Index> loc                  iloc              dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       slice('a', 'c', N... slice(0, 3, None) int64    (4, 3)   2       True    False        True", "1       d                    3                 bool     (4,)     1       True    True         True", "2       e                    4                 bool     (4,)     1       True    True         True", "<int64> <object>             <object>          <object> <object> <int64> <bool>  <bool>       <bool>"], "Frame.consolidate()": [">>> f1 = sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1), (False, True, True, False), (True, True, False, True)), columns=('a', 'b', 'c', 'd', 'e'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       d      e      <<U1>", "<Index>", "0          0       20      0       False  True", "1          0       18      0       True   True", "2          10      -3      0       True   False", "3          2       18      1       False  True", "<int64>    <int64> <int64> <int64> <bool> <bool>", ">>> f1.consolidate.status", "<Frame>", "<Index> loc   iloc    dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       a     0       int64    (4,)     1       True    True         True", "1       b     1       int64    (4,)     1       True    True         True", "2       c     2       int64    (4,)     1       True    True         True", "3       d     3       bool     (4,)     1       True    True         True", "4       e     4       bool     (4,)     1       True    True         True", "<int64> <<U1> <int64> <object> <object> <int64> <bool>  <bool>       <bool>", ">>> f2 = f1.consolidate()", ">>> f2.consolidate.status", "<Frame>", "<Index> loc                  iloc                 dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       slice('a', 'c', N... slice(0, 3, None)    int64    (4, 3)   2       True    False        True", "1       slice('d', 'e', N... slice(3, None, None) bool     (4, 2)   2       True    False        True", "<int64> <object>             <object>             <object> <object> <int64> <bool>  <bool>       <bool>"], "Frame.consolidate.status": [">>> f1 = sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1), (False, True, True, False), (True, True, False, True)), columns=('a', 'b', 'c', 'd', 'e'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       d      e      <<U1>", "<Index>", "0          0       20      0       False  True", "1          0       18      0       True   True", "2          10      -3      0       True   False", "3          2       18      1       False  True", "<int64>    <int64> <int64> <int64> <bool> <bool>", ">>> f1.consolidate.status", "<Frame>", "<Index> loc   iloc    dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       a     0       int64    (4,)     1       True    True         True", "1       b     1       int64    (4,)     1       True    True         True", "2       c     2       int64    (4,)     1       True    True         True", "3       d     3       bool     (4,)     1       True    True         True", "4       e     4       bool     (4,)     1       True    True         True", "<int64> <<U1> <int64> <object> <object> <int64> <bool>  <bool>       <bool>", ">>> f2 = f1.consolidate()", ">>> f2.consolidate.status", "<Frame>", "<Index> loc                  iloc                 dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       slice('a', 'c', N... slice(0, 3, None)    int64    (4, 3)   2       True    False        True", "1       slice('d', 'e', N... slice(3, None, None) bool     (4, 2)   2       True    False        True", "<int64> <object>             <object>             <object> <object> <int64> <bool>  <bool>       <bool>"], "Frame.corr()": [">>> f1 = sf.Frame((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       d       <<U1>", "<Index>", "p          0       2       4       6", "q          8       10      12      14", "r          0       1       4       9", "s          16      25      36      49", "<<U1>      <int64> <int64> <int64> <int64>", ">>> f1.corr()", "<Frame: x>", "<Index>    a                  b                  c                  d                  <<U1>", "<Index>", "a          1.0                0.9888513796308233 0.965581028730576  0.9340437381585037", "b          0.9888513796308233 0.9999999999999999 0.9923448088115435 0.972134396307783", "c          0.9655810287305759 0.9923448088115435 0.9999999999999999 0.9934089501944108", "d          0.9340437381585037 0.9721343963077829 0.9934089501944108 1.0", "<<U1>      <float64>          <float64>          <float64>          <float64>"], "Frame.count()": [">>> f = sf.Frame.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b        <<U1>", "<Index>", "p          10.0      qrs", "q          2.0       XYZ", "r          nan       None", "s          3.0       None", "<<U1>      <float64> <object>", ">>> f.count(skipna=True)", "<Series>", "<Index>", "a        3", "b        2", "<<U1>    <int64>", ">>> f.count(unique=True)", "<Series>", "<Index>", "a        3", "b        2", "<<U1>    <int64>"], "Frame.cov()": [">>> f1 = sf.Frame((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       d       <<U1>", "<Index>", "p          0       2       4       6", "q          8       10      12      14", "r          0       1       4       9", "s          16      25      36      49", "<<U1>      <int64> <int64> <int64> <int64>", ">>> f1.cov()", "<Frame: x>", "<Index>    a                  b                  c                  d                  <<U1>", "<Index>", "a          58.666666666666664 84.0               112.0              142.66666666666666", "b          84.0               123.0              166.66666666666666 215.0", "c          112.0              166.66666666666666 229.33333333333331 300.0", "d          142.66666666666666 215.0              300.0              397.66666666666663", "<<U1>      <float64>          <float64>          <float64>          <float64>"], "Frame.cumprod()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.cumprod()", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       0       1", "q       0       3", "r       0       15", "<<U1>   <int64> <int64>"], "Frame.cumsum()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.cumsum()", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       0       1", "q       2       4", "r       6       9", "<<U1>   <int64> <int64>"], "Frame.drop_duplicated()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b        c               <<U1>", "<Index>", "0          10.0      False    1517-01-01", "1          2.0       True     1517-04-01", "2          nan       None     NaT", "3          2.0       True     1517-04-01", "<int64>    <float64> <object> <datetime64[D]>", ">>> f.drop_duplicated()", "<Frame: x>", "<Index>    a         b        c               <<U1>", "<Index>", "0          10.0      False    1517-01-01", "2          nan       None     NaT", "<int64>    <float64> <object> <datetime64[D]>"], "Frame.dropfalsy()": [">>> f = sf.Frame.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          0             NaT", "3          2       123   1517-04-01", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.dropfalsy()", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "3          2       123   1517-04-01", "<int64>    <int64> <<U4> <datetime64[D]>"], "Frame.dropna()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b        c               <<U1>", "<Index>", "0          10.0      False    1517-01-01", "1          2.0       True     1517-04-01", "2          nan       None     NaT", "3          2.0       True     1517-04-01", "<int64>    <float64> <object> <datetime64[D]>", ">>> f.dropna()", "<Frame: x>", "<Index>    a         b        c               <<U1>", "<Index>", "0          10.0      False    1517-01-01", "1          2.0       True     1517-04-01", "3          2.0       True     1517-04-01", "<int64>    <float64> <object> <datetime64[D]>"], "Frame.duplicated()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b        c               <<U1>", "<Index>", "0          10.0      False    1517-01-01", "1          2.0       True     1517-04-01", "2          nan       None     NaT", "3          2.0       True     1517-04-01", "<int64>    <float64> <object> <datetime64[D]>", ">>> f.duplicated()", "<Series>", "<Index>", "0        False", "1        True", "2        False", "3        True", "<int64>  <bool>"], "Frame.equals()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')", ">>> f2", "<Frame: y>", "<Index>    a                  b                  <<U1>", "<Index>", "p          0.0                1.3333333333333333", "q          2.6666666666666665 4.0", "r          5.333333333333333  6.666666666666667", "<<U1>      <float64>          <float64>", ">>> f1.equals(f2)", "False"], "Frame.fillfalsy()": [">>> f = sf.Frame.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          0             NaT", "3          2       123   1517-04-01", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.fillfalsy(dict(a=1, b='abc', c=np.datetime64('2022-01-10')))", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          1       abc   2022-01-10", "3          2       123   1517-04-01", "<int64>    <int64> <<U4> <datetime64[D]>"], "Frame.fillfalsy_backward()": [">>> f = sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          0       20      0", "1          0       18      0", "2          10      -3      0", "3          2       18      1", "<int64>    <int64> <int64> <int64>", ">>> f.fillfalsy_backward()", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          10      20      1", "1          10      18      1", "2          10      -3      1", "3          2       18      1", "<int64>    <int64> <int64> <int64>"], "Frame.fillfalsy_forward()": [">>> f = sf.Frame.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          10      8       1", "1          2       3       0", "2          0       8       0", "3          0       0       0", "<int64>    <int64> <int64> <int64>", ">>> f.fillfalsy_forward()", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          10      8       1", "1          2       3       1", "2          2       8       1", "3          2       8       1", "<int64>    <int64> <int64> <int64>"], "Frame.fillfalsy_leading()": [">>> f = sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          0       20      0", "1          0       18      0", "2          10      -3      0", "3          2       18      1", "<int64>    <int64> <int64> <int64>", ">>> f.fillfalsy_leading(-1)", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          -1      20      -1", "1          -1      18      -1", "2          10      -3      -1", "3          2       18      1", "<int64>    <int64> <int64> <int64>"], "Frame.fillfalsy_trailing()": [">>> f = sf.Frame.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          10      8       1", "1          2       3       0", "2          0       8       0", "3          0       0       0", "<int64>    <int64> <int64> <int64>", ">>> f.fillfalsy_trailing(-1)", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          10      8       1", "1          2       3       -1", "2          -1      8       -1", "3          -1      -1      -1", "<int64>    <int64> <int64> <int64>"], "Frame.fillna()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b     c               <<U1>", "<Index>", "0          10.0      qrs   1517-01-01", "1          2.0       XYZ   1517-04-01", "2          nan             NaT", "3          2.0       123   1517-04-01", "<int64>    <float64> <<U4> <datetime64[D]>", ">>> f.fillna(-1)", "<Frame: x>", "<Index>    a         b     c          <<U1>", "<Index>", "0          10.0      qrs   1517-01-01", "1          2.0       XYZ   1517-04-01", "2          -1.0            -1", "3          2.0       123   1517-04-01", "<int64>    <float64> <<U4> <object>"], "Frame.fillna_backward()": [">>> f = sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y')", ">>> f", "<Frame: y>", "<Index>    a         b         c         <<U1>", "<Index>", "0          nan       nan       nan", "1          nan       8.0       nan", "2          10.0      3.0       nan", "3          2.0       8.0       1.0", "<int64>    <float64> <float64> <float64>", ">>> f.fillna_backward()", "<Frame: y>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          10.0      8.0       1.0", "2          10.0      3.0       1.0", "3          2.0       8.0       1.0", "<int64>    <float64> <float64> <float64>"], "Frame.fillna_forward()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       nan", "2          nan       8.0       nan", "3          nan       nan       nan", "<int64>    <float64> <float64> <float64>", ">>> f.fillna_forward()", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       1.0", "2          2.0       8.0       1.0", "3          2.0       8.0       1.0", "<int64>    <float64> <float64> <float64>"], "Frame.fillna_leading()": [">>> f = sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y')", ">>> f", "<Frame: y>", "<Index>    a         b         c         <<U1>", "<Index>", "0          nan       nan       nan", "1          nan       8.0       nan", "2          10.0      3.0       nan", "3          2.0       8.0       1.0", "<int64>    <float64> <float64> <float64>", ">>> f.fillna_leading(-1)", "<Frame: y>", "<Index>    a         b         c         <<U1>", "<Index>", "0          -1.0      -1.0      -1.0", "1          -1.0      8.0       -1.0", "2          10.0      3.0       -1.0", "3          2.0       8.0       1.0", "<int64>    <float64> <float64> <float64>"], "Frame.fillna_trailing()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       nan", "2          nan       8.0       nan", "3          nan       nan       nan", "<int64>    <float64> <float64> <float64>", ">>> f.fillna_trailing(-1)", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       -1.0", "2          -1.0      8.0       -1.0", "3          -1.0      -1.0      -1.0", "<int64>    <float64> <float64> <float64>"], "Frame.head()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.head(2)", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.iloc_max()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       nan", "2          nan       8.0       nan", "3          nan       nan       nan", "<int64>    <float64> <float64> <float64>", ">>> f.iloc_max()", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>"], "Frame.iloc_min()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       nan", "2          nan       8.0       nan", "3          nan       nan       nan", "<int64>    <float64> <float64> <float64>", ">>> f.iloc_min()", "<Series>", "<Index>", "a        1", "b        1", "c        0", "<<U1>    <int64>"], "Frame.iloc_notfalsy_first()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iloc_notfalsy_first(axis=0)", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>", ">>> f.iloc_notfalsy_first(axis=1)", "<Series>", "<Index>", "p        0", "q        0", "r        1", "s        2", "<<U1>    <int64>"], "Frame.iloc_notfalsy_last()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iloc_notfalsy_last(axis=0)", "<Series>", "<Index>", "a        1", "b        2", "c        3", "<<U1>    <int64>", ">>> f.iloc_notfalsy_last(axis=1)", "<Series>", "<Index>", "p        2", "q        1", "r        2", "s        2", "<<U1>    <int64>"], "Frame.iloc_notna_first()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       nan", "2          nan       8.0       nan", "3          nan       nan       nan", "<int64>    <float64> <float64> <float64>", ">>> f.iloc_notna_first(axis=0)", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>", ">>> f.iloc_notna_first(axis=1)", "<Series>", "<Index>", "0        0", "1        0", "2        1", "3        -1", "<int64>  <int64>"], "Frame.iloc_notna_last()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       nan", "2          nan       8.0       nan", "3          nan       nan       nan", "<int64>    <float64> <float64> <float64>", ">>> f.iloc_notna_last(axis=0)", "<Series>", "<Index>", "a        1", "b        2", "c        0", "<<U1>    <int64>", ">>> f.iloc_notna_last(axis=1)", "<Series>", "<Index>", "0        2", "1        1", "2        1", "3        -1", "<int64>  <int64>"], "Frame.insert_after()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>", ">>> f1.insert_after('b', f2)", "<Frame: x>", "<Index>    a       b       c      d      <<U1>", "<Index>", "p          0       1       False  True", "q          2       3       False  True", "r          4       5       False  True", "<<U1>      <int64> <int64> <bool> <bool>"], "Frame.insert_before()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>", ">>> f1.insert_before('b', f2)", "<Frame: x>", "<Index>    a       c      d      b       <<U1>", "<Index>", "p          0       False  True   1", "q          2       False  True   3", "r          4       False  True   5", "<<U1>      <int64> <bool> <bool> <int64>"], "Frame.isfalsy()": [">>> f = sf.Frame.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          0             NaT", "3          2       123   1517-04-01", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.isfalsy()", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "0       False  False  False", "1       False  False  False", "2       True   True   True", "3       False  False  False", "<int64> <bool> <bool> <bool>"], "Frame.isin()": [">>> f = sf.Frame.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          10      8       1", "1          2       3       0", "2          0       8       0", "3          0       0       0", "<int64>    <int64> <int64> <int64>", ">>> f.isin((0, 8))", "<Frame: x>", "<Index>    a      b      c      <<U1>", "<Index>", "0          False  True   False", "1          False  False  True", "2          True   True   True", "3          True   True   True", "<int64>    <bool> <bool> <bool>"], "Frame.isna()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       nan", "2          nan       8.0       nan", "3          nan       nan       nan", "<int64>    <float64> <float64> <float64>", ">>> f.isna()", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "0       False  False  False", "1       False  False  True", "2       True   False  True", "3       True   True   True", "<int64> <bool> <bool> <bool>"], "Frame.join_inner()": [">>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<Frame: y>", "<Index>    d       e       f       <<U1>", "<Index>", "0          2       3       1", "1          7       8       0", "<int64>    <int64> <int64> <int64>", ">>> f1.join_inner(f2, left_columns='c', right_columns='f')", "<Frame>", "<Index> a       b       c       d       e       f       <<U1>", "<Index>", "0       11      0       0       7       8       0", "1       4       8       1       2       3       1", "2       10      3       0       7       8       0", "3       2       8       1       2       3       1", "<int64> <int64> <int64> <int64> <int64> <int64> <int64>"], "Frame.join_left()": [">>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<Frame: y>", "<Index>    d       e       f       <<U1>", "<Index>", "0          2       3       1", "1          7       8       0", "<int64>    <int64> <int64> <int64>", ">>> f1.join_left(f2, left_columns='c', right_columns='f')", "<Frame>", "<Index> a       b       c       d       e       f       <<U1>", "<Index>", "0       11      0       0       7       8       0", "1       4       8       1       2       3       1", "2       10      3       0       7       8       0", "3       2       8       1       2       3       1", "<int64> <int64> <int64> <int64> <int64> <int64> <int64>"], "Frame.join_outer()": [">>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<Frame: y>", "<Index>    d       e       f       <<U1>", "<Index>", "0          2       3       1", "1          7       8       0", "<int64>    <int64> <int64> <int64>", ">>> f1.join_outer(f2, left_columns='c', right_columns='f')", "<Frame>", "<Index> a       b       c       d       e       f       <<U1>", "<Index>", "0       11      0       0       7       8       0", "1       4       8       1       2       3       1", "2       10      3       0       7       8       0", "3       2       8       1       2       3       1", "<int64> <int64> <int64> <int64> <int64> <int64> <int64>"], "Frame.join_right()": [">>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<Frame: y>", "<Index>    d       e       f       <<U1>", "<Index>", "0          2       3       1", "1          7       8       0", "<int64>    <int64> <int64> <int64>", ">>> f1.join_right(f2, left_columns='c', right_columns='f')", "<Frame>", "<Index> a       b       c       d       e       f       <<U1>", "<Index>", "0       4       8       1       2       3       1", "1       2       8       1       2       3       1", "2       11      0       0       7       8       0", "3       10      3       0       7       8       0", "<int64> <int64> <int64> <int64> <int64> <int64> <int64>"], "Frame.loc_max()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       nan", "2          nan       8.0       nan", "3          nan       nan       nan", "<int64>    <float64> <float64> <float64>", ">>> f.loc_max()", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>"], "Frame.loc_min()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       nan", "2          nan       8.0       nan", "3          nan       nan       nan", "<int64>    <float64> <float64> <float64>", ">>> f.loc_min()", "<Series>", "<Index>", "a        1", "b        1", "c        0", "<<U1>    <int64>"], "Frame.loc_notfalsy_first()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.loc_notfalsy_first(axis=0)", "<Series>", "<Index>", "a        p", "b        p", "c        p", "<<U1>    <<U1>", ">>> f.loc_notfalsy_first(axis=1)", "<Series>", "<Index>", "p        a", "q        a", "r        b", "s        c", "<<U1>    <<U1>"], "Frame.loc_notfalsy_last()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.loc_notfalsy_last(axis=0)", "<Series>", "<Index>", "a        q", "b        r", "c        s", "<<U1>    <<U1>", ">>> f.loc_notfalsy_last(axis=1)", "<Series>", "<Index>", "p        c", "q        b", "r        c", "s        c", "<<U1>    <<U1>"], "Frame.loc_notna_first()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       nan", "2          nan       8.0       nan", "3          nan       nan       nan", "<int64>    <float64> <float64> <float64>", ">>> f.loc_notna_first(axis=0)", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>", ">>> f.loc_notna_first(axis=1)", "<Series>", "<Index>", "0        a", "1        a", "2        b", "3        nan", "<int64>  <object>"], "Frame.loc_notna_last()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       nan", "2          nan       8.0       nan", "3          nan       nan       nan", "<int64>    <float64> <float64> <float64>", ">>> f.loc_notna_last(axis=0)", "<Series>", "<Index>", "a        1", "b        2", "c        0", "<<U1>    <int64>", ">>> f.loc_notna_last(axis=1)", "<Series>", "<Index>", "0        c", "1        b", "2        b", "3        nan", "<int64>  <object>"], "Frame.max()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.max()", "<Series>", "<Index>", "a        4", "b        5", "<<U1>    <int64>"], "Frame.mean()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.mean()", "<Series>", "<Index>", "a        2.0", "b        3.0", "<<U1>    <float64>"], "Frame.median()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.median()", "<Series>", "<Index>", "a        2.0", "b        3.0", "<<U1>    <float64>"], "Frame.merge_inner()": [">>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<Frame: y>", "<Index>    d       e       f       <<U1>", "<Index>", "0          2       3       1", "1          7       8       0", "<int64>    <int64> <int64> <int64>", ">>> f1.merge_inner(f2, left_columns='c', right_columns='f')", "<Frame>", "<Index> c       a       b       d       e       <<U1>", "<Index>", "0       0       11      0       7       8", "1       1       4       8       2       3", "2       0       10      3       7       8", "3       1       2       8       2       3", "<int64> <int64> <int64> <int64> <int64> <int64>"], "Frame.merge_left()": [">>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<Frame: y>", "<Index>    d       e       f       <<U1>", "<Index>", "0          2       3       1", "1          7       8       0", "<int64>    <int64> <int64> <int64>", ">>> f1.merge_left(f2, left_columns='c', right_columns='f', merge_labels='x')", "<Frame>", "<Index> x       a       b       d       e       <<U1>", "<Index>", "0       0       11      0       7       8", "1       1       4       8       2       3", "2       0       10      3       7       8", "3       1       2       8       2       3", "<int64> <int64> <int64> <int64> <int64> <int64>"], "Frame.merge_outer()": [">>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<Frame: y>", "<Index>    d       e       f       <<U1>", "<Index>", "0          2       3       1", "1          7       8       0", "<int64>    <int64> <int64> <int64>", ">>> f1.merge_outer(f2, left_columns='c', right_columns='f', merge_labels='x')", "<Frame>", "<Index> x       a       b       d       e       <<U1>", "<Index>", "0       0       11      0       7       8", "1       1       4       8       2       3", "2       0       10      3       7       8", "3       1       2       8       2       3", "<int64> <int64> <int64> <int64> <int64> <int64>"], "Frame.merge_right()": [">>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<Frame: y>", "<Index>    d       e       f       <<U1>", "<Index>", "0          2       3       1", "1          7       8       0", "<int64>    <int64> <int64> <int64>", ">>> f1.merge_right(f2, left_columns='c', right_columns='f')", "<Frame>", "<Index> f       a       b       d       e       <<U1>", "<Index>", "0       1       4       8       2       3", "1       1       2       8       2       3", "2       0       11      0       7       8", "3       0       10      3       7       8", "<int64> <int64> <int64> <int64> <int64> <int64>"], "Frame.min()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.min()", "<Series>", "<Index>", "a        0", "b        1", "<<U1>    <int64>"], "Frame.notfalsy()": [">>> f = sf.Frame.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          0             NaT", "3          2       123   1517-04-01", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.notfalsy()", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "0       True   True   True", "1       True   True   True", "2       False  False  False", "3       True   True   True", "<int64> <bool> <bool> <bool>"], "Frame.notna()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          10.0      8.0       1.0", "1          2.0       3.0       nan", "2          nan       8.0       nan", "3          nan       nan       nan", "<int64>    <float64> <float64> <float64>", ">>> f.notna()", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "0       True   True   True", "1       True   True   False", "2       False  True   False", "3       False  False  False", "<int64> <bool> <bool> <bool>"], "Frame.pivot()": [">>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f1.pivot(index_fields='b', columns_fields='c')", "<Frame>", "<Index: c> 0         1         <int64>", "<Index: b>", "0          11.0      nan", "3          10.0      nan", "8          nan       6.0", "<int64>    <float64> <float64>"], "Frame.pivot_stack()": [">>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f1.pivot_stack()", "<Frame: x>", "<Index>                0       <int64>", "<IndexHierarchy>", "0                a     11", "0                b     0", "0                c     0", "1                a     4", "1                b     8", "1                c     1", "2                a     10", "2                b     3", "2                c     0", "3                a     2", "3                b     8", "3                c     1", "<int64>          <<U1> <int64>"], "Frame.pivot_unstack()": [">>> f1 = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f2 = f1.pivot_stack()", ">>> f2", "<Frame: x>", "<Index>                0       <int64>", "<IndexHierarchy>", "0                a     11", "0                b     0", "0                c     0", "1                a     4", "1                b     8", "1                c     1", "2                a     10", "2                b     3", "2                c     0", "3                a     2", "3                b     8", "3                c     1", "<int64>          <<U1> <int64>", ">>> f2.pivot_unstack()", "<Frame: x>", "<IndexHierarchy> 0       0       0       <int64>", "                 a       b       c       <<U1>", "<Index>", "0                11      0       0", "1                4       8       1", "2                10      3       0", "3                2       8       1", "<int64>          <int64> <int64> <int64>"], "Frame.prod()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.prod()", "<Series>", "<Index>", "a        0", "b        15", "<<U1>    <int64>"], "Frame.rank_dense()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.rank_dense()", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          3       0       0", "1          1       2       1", "2          2       1       0", "3          0       2       1", "<int64>    <int64> <int64> <int64>"], "Frame.rank_max()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.rank_max()", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          3       0       1", "1          1       3       3", "2          2       1       1", "3          0       3       3", "<int64>    <int64> <int64> <int64>"], "Frame.rank_mean()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.rank_mean()", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "0          3.0       0.0       0.5", "1          1.0       2.5       2.5", "2          2.0       1.0       0.5", "3          0.0       2.5       2.5", "<int64>    <float64> <float64> <float64>"], "Frame.rank_min()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.rank_min()", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          3       0       0", "1          1       2       2", "2          2       1       0", "3          0       2       2", "<int64>    <int64> <int64> <int64>"], "Frame.rank_ordinal()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.rank_ordinal()", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          3       0       0", "1          1       2       2", "2          2       1       1", "3          0       3       3", "<int64>    <int64> <int64> <int64>"], "Frame.rehierarch()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.rehierarch((1, 0))", "<Frame: x>", "<Index>                  a       b      c               <<U1>", "<IndexHierarchy>", "p                0       10      False  1517-01-01", "p                1       8       True   1517-12-31", "q                0       2       True   1517-04-01", "q                1       3       False  1517-06-30", "<<U1>            <int64> <int64> <bool> <datetime64[D]>"], "Frame.reindex()": [">>> f = sf.Frame.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.reindex(('q', 't', 's', 'r'), fill_value=sf.FillValueAuto(i=-1, U=''))", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "q          2       XYZ", "t          -1", "s          3        wX", "r          8       123", "<<U1>      <int64> <<U4>"], "Frame.relabel()": [">>> f = sf.Frame.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "p          10      False  1517-01-01", "q          8       True   1517-04-01", "<<U1>      <int64> <bool> <datetime64[D]>", ">>> f.relabel(('y', 'z'))", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "y          10      False  1517-01-01", "z          8       True   1517-04-01", "<<U1>      <int64> <bool> <datetime64[D]>", ">>> f.relabel(dict(q='x', p='y'))", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "y          10      False  1517-01-01", "x          8       True   1517-04-01", "<<U1>      <int64> <bool> <datetime64[D]>", ">>> f.relabel(lambda l: f'+{l.upper()}+')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "+P+        10      False  1517-01-01", "+Q+        8       True   1517-04-01", "<<U3>      <int64> <bool> <datetime64[D]>"], "Frame.relabel_flat()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.relabel_flat(index=True)", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "(0, 'p')   10      False  1517-01-01", "(0, 'q')   2       True   1517-04-01", "(1, 'p')   8       True   1517-12-31", "(1, 'q')   3       False  1517-06-30", "<object>   <int64> <bool> <datetime64[D]>"], "Frame.relabel_level_add()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.relabel_level_add('I')", "<Frame: x>", "<Index>                        a       b      c               <<U1>", "<IndexHierarchy>", "I                0       p     10      False  1517-01-01", "I                0       q     2       True   1517-04-01", "I                1       p     8       True   1517-12-31", "I                1       q     3       False  1517-06-30", "<<U1>            <int64> <<U1> <int64> <bool> <datetime64[D]>"], "Frame.relabel_level_drop()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iloc[:2].relabel_level_drop(1)", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "p          10      False  1517-01-01", "q          2       True   1517-04-01", "<<U1>      <int64> <bool> <datetime64[D]>"], "Frame.relabel_shift_in()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.relabel_shift_in('a')", "<Frame: x>", "<Index>                                            b      c               <<U1>", "<IndexHierarchy: ('__index0__', '...", "0                                    p     10      False  1517-01-01", "0                                    q     2       True   1517-04-01", "1                                    p     8       True   1517-12-31", "1                                    q     3       False  1517-06-30", "<int64>                              <<U1> <int64> <bool> <datetime64[D]>"], "Frame.relabel_shift_out()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.rename(index=('d', 'e')).relabel_shift_out([1, 0])", "<Frame: x>", "<Index>    e     d       a       b      c               <<U1>", "<Index>", "0          p     0       10      False  1517-01-01", "1          q     0       2       True   1517-04-01", "2          p     1       8       True   1517-12-31", "3          q     1       3       False  1517-06-30", "<int64>    <<U1> <int64> <int64> <bool> <datetime64[D]>"], "Frame.rename()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.rename('y', index='p', columns='q')", "<Frame: y>", "<Index: q>                a       b      c               <<U1>", "<IndexHierarchy: p>", "0                   p     10      False  1517-01-01", "0                   q     2       True   1517-04-01", "1                   p     8       True   1517-12-31", "1                   q     3       False  1517-06-30", "<int64>             <<U1> <int64> <bool> <datetime64[D]>"], "Frame.roll()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.roll(3)", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          2       True   1517-04-01", "1          8       True   1517-12-31", "2          3       False  1517-06-30", "3          10      False  1517-01-01", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.sample()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.sample(2, 2, seed=0)", "<Frame: x>", "<Index>    b      c               <<U1>", "<Index>", "2          True   1517-12-31", "3          False  1517-06-30", "<int64>    <bool> <datetime64[D]>"], "Frame.set_columns()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.set_columns((1, 'p'), drop=True)", "<Frame: x>", "<Index: (1, 'p')>       8       True   1517-12-31      <object>", "<IndexHierarchy>", "0                 p     10      False  1517-01-01", "0                 q     2       True   1517-04-01", "1                 q     3       False  1517-06-30", "<int64>           <<U1> <int64> <bool> <datetime64[D]>"], "Frame.set_columns_hierarchy()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.set_columns_hierarchy([(1, 'p'), (1, 'q')], drop=True)", "<Frame: x>", "<IndexHierarchy: ((1, 'p'), (1, '...       8       True   1517-12-31      <object>", "                                           3       False  1517-06-30      <object>", "<IndexHierarchy>", "0                                    p     10      False  1517-01-01", "0                                    q     2       True   1517-04-01", "<int64>                              <<U1> <int64> <bool> <datetime64[D]>"], "Frame.set_index()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.set_index('c', drop=True, index_constructor=sf.IndexDate)", "<Frame: x>", "<Index>         a       b      <<U1>", "<IndexDate: c>", "1517-01-01      10      False", "1517-04-01      2       True", "1517-12-31      8       True", "1517-06-30      3       False", "<datetime64[D]> <int64> <bool>"], "Frame.set_index_hierarchy()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.set_index_hierarchy(['b', 'c'], drop=True, index_constructors=(sf.Index, sf.IndexDate))", "<Frame: x>", "<Index>                                      a       <<U1>", "<IndexHierarchy: ('b', 'c')>", "False                        1517-01-01      10", "True                         1517-04-01      2", "True                         1517-12-31      8", "False                        1517-06-30      3", "<bool>                       <datetime64[D]> <int64>"], "Frame.shift()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.shift(3, fill_value=sf.FillValueAuto)", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          0       False  NaT", "1          0       False  NaT", "2          0       False  NaT", "3          10      False  1517-01-01", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.sort_columns()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.sort_columns(ascending=False)", "<Frame: x>", "<Index>                c               b      a       <<U1>", "<IndexHierarchy>", "0                p     1517-01-01      False  10", "0                q     1517-04-01      True   2", "1                p     1517-12-31      True   8", "1                q     1517-06-30      False  3", "<int64>          <<U1> <datetime64[D]> <bool> <int64>"], "Frame.sort_index()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.sort_index(ascending=False)", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "1                q     3       False  1517-06-30", "1                p     8       True   1517-12-31", "0                q     2       True   1517-04-01", "0                p     10      False  1517-01-01", "<int64>          <<U1> <int64> <bool> <datetime64[D]>"], "Frame.sort_values()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.sort_values('c')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "3          3       False  1517-06-30", "2          8       True   1517-12-31", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.sort_values(['c', 'b'], ascending=False)", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "1          2       True   1517-04-01", "0          10      False  1517-01-01", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.std()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.std()", "<Series>", "<Index>", "a        1.632993161855452", "b        1.632993161855452", "<<U1>    <float64>"], "Frame.sum()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.sum()", "<Series>", "<Index>", "a        6", "b        9", "<<U1>    <int64>"], "Frame.tail()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.tail(2)", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.transpose()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.transpose()", "<Frame: x>", "<Index>    p       q       r       <<U1>", "<Index>", "a          0       2       4", "b          1       3       5", "<<U1>      <int64> <int64> <int64>"], "Frame.unique()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b        c               <<U1>", "<Index>", "0          10.0      False    1517-01-01", "1          2.0       True     1517-04-01", "2          nan       None     NaT", "3          2.0       True     1517-04-01", "<int64>    <float64> <object> <datetime64[D]>", ">>> f.unique()", "[10.0 False datetime.date(1517, 1, 1) 2.0 True datetime.date(1517, 4, 1)", " nan None]"], "Frame.unique_enumerated()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b        c               <<U1>", "<Index>", "0          10.0      False    1517-01-01", "1          2.0       True     1517-04-01", "2          nan       None     NaT", "3          2.0       True     1517-04-01", "<int64>    <float64> <object> <datetime64[D]>", ">>> f.unique_enumerated(retain_order=True, func=sf.isna_element)", "(array([[ 0,  2,  4],", "       [ 1,  3,  5],", "       [-1, -1, -1],", "       [ 1,  3,  5]]), array([10.0, 2.0, False, True, datetime.date(1517, 1, 1),", "       datetime.date(1517, 4, 1)], dtype=object))"], "Frame.unset_columns()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.rename(columns='o').unset_columns()", "<Frame: x>", "<Index>    0        1        <int64>", "<Index>", "o          a        b", "p          0        1", "q          2        3", "r          4        5", "<<U1>      <object> <object>"], "Frame.unset_index()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.rename(index=(('d', 'e'))).unset_index()", "<Frame: x>", "<Index>    d       e     a       b      c               <<U1>", "<Index>", "0          0       p     10      False  1517-01-01", "1          0       q     2       True   1517-04-01", "2          1       p     8       True   1517-12-31", "3          1       q     3       False  1517-06-30", "<int64>    <int64> <<U1> <int64> <bool> <datetime64[D]>"], "Frame.var()": [">>> f = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f.var()", "<Series>", "<Index>", "a        2.6666666666666665", "b        2.6666666666666665", "<<U1>    <float64>"], "Frame.__contains__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.__contains__('a')", "True"], "Frame.__iter__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tuple(f.__iter__())", "('a', 'b', 'c')"], "Frame.__reversed__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tuple(f.__reversed__())", "('c', 'b', 'a')"], "Frame.get()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.get('a')", "<Series: a>", "<Index>", "0           10", "1           2", "2           8", "3           3", "<int64>     <int64>", ">>> f.get('z', -1)", "-1"], "Frame.items()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tuple(f.items())", "(('a', <Series: a>", "<Index>", "0           10", "1           2", "2           8", "3           3", "<int64>     <int64>), ('b', <Series: b>", "<Index>", "0           False", "1           True", "2           True", "3           False", "<int64>     <bool>), ('c', <Series: c>", "<Index>", "0           1517-01-01", "1           1517-04-01", "2           1517-12-31", "3           1517-06-30", "<int64>     <datetime64[D]>))"], "Frame.keys()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.keys()", "<Index>", "a", "b", "c", "<<U1>"], "Frame.values": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.values", "[[10 False datetime.date(1517, 1, 1)]", " [2 True datetime.date(1517, 4, 1)]", " [8 True datetime.date(1517, 12, 31)]", " [3 False datetime.date(1517, 6, 30)]]"], "Frame.interface": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.interface", "<Frame>", "<Index>                              cls_name group           doc                  <<U18>", "<Index: signature>", "__init__(data, *, index, columns,... Frame    Constructor     Initializer. Args...", "from_arrow(value, *, index_depth,... Frame    Constructor     Realize a Frame f...", "from_clipboard(*, delimiter, inde... Frame    Constructor     Create a Frame fr...", "from_concat(frames, *, axis, unio... Frame    Constructor     Concatenate multi...", "from_concat_items(items, *, axis,... Frame    Constructor     Produce a Frame w...", "from_csv(fp, *, index_depth, inde... Frame    Constructor     Specialized versi...", "from_delimited(fp, *, delimiter, ... Frame    Constructor     Create a Frame fr...", "from_dict(mapping, *, index, fill... Frame    Constructor     Create a Frame fr...", "from_dict_fields(fields, *, colum... Frame    Constructor     Frame constructor...", "from_dict_records(records, *, ind... Frame    Constructor     Frame constructor...", "from_dict_records_items(items, *,... Frame    Constructor     Frame constructor...", "from_duckdb(fp, *, label, index_d... Frame    Constructor     Load Frame from t...", "from_element(element, *, index, c... Frame    Constructor     Create a Frame fr...", "from_element_items(items, *, inde... Frame    Constructor     Create a Frame fr...", "from_elements(elements, *, index,... Frame    Constructor     Create a Frame fr...", "from_fields(fields, *, index, col... Frame    Constructor     Frame constructor...", "from_hdf5(fp, *, label, index_dep... Frame    Constructor     Load Frame from t...", "...                                  ...      ...             ...", "reduce.from_func(func, *, fill_va... Frame    Accessor Reduce For each Frame, a...", "reduce.from_func(func, *, fill_va... Frame    Accessor Reduce For each Frame, a...", "reduce.from_map_func(func, *, fil... Frame    Accessor Reduce For each Frame, r...", "reduce.from_map_func(func, *, fil... Frame    Accessor Reduce For each Frame, r...", "reduce.from_map_func(func, *, fil... Frame    Accessor Reduce For each Frame, r...", "reduce.from_map_func(func, *, fil... Frame    Accessor Reduce For each Frame, r...", "reduce.from_map_func(func, *, fil... Frame    Accessor Reduce For each Frame, r...", "reduce.from_label_map(func_map, *... Frame    Accessor Reduce For Frame, reduce...", "reduce.from_label_map(func_map, *... Frame    Accessor Reduce For Frame, reduce...", "reduce.from_label_map(func_map, *... Frame    Accessor Reduce For Frame, reduce...", "reduce.from_label_map(func_map, *... Frame    Accessor Reduce For Frame, reduce...", "reduce.from_label_map(func_map, *... Frame    Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... Frame    Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... Frame    Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... Frame    Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... Frame    Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... Frame    Accessor Reduce For Frame, reduce...", "<<U160>                              <<U5>    <<U27>          <<U83>"], "Frame.__repr__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> repr(f)", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.__str__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> str(f)", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.display()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.display()", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.display(sf.DisplayConfig(type_show=False))", "  a  b     c", "0 10 False 1517-01-01", "1 2  True  1517-04-01", "2 8  True  1517-12-31", "3 3  False 1517-06-30"], "Frame.display_tall()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.display_tall()", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.display_wide()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.display_wide()", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "Frame.assign[]()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign['a'](-1)", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          -1      8       1", "q          -1      -3      0", "r          -1      8       9", "s          -1      0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign[['a', 'c']](-1)", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          -1      8       -1", "q          -1      -3      -1", "r          -1      8       -1", "s          -1      0       -1", "<<U1>      <int64> <int64> <int64>"], "Frame.assign[].apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign['a'].apply(lambda s: s / 100)", "<Frame: x>", "<Index>    a         b       c       <<U1>", "<Index>", "p          0.1       8       1", "q          -0.02     -3      0", "r          0.0       8       9", "s          0.0       0       12", "<<U1>      <float64> <int64> <int64>"], "Frame.assign[].apply_element()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign['a'].apply_element(lambda e: e / 100 if e < 8 else e)", "<Frame: x>", "<Index>    a         b       c       <<U1>", "<Index>", "p          10.0      8       1", "q          -0.02     -3      0", "r          0.0       8       9", "s          0.0       0       12", "<<U1>      <float64> <int64> <int64>"], "Frame.assign[].apply_element_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign['a'].apply_element_items(lambda l, e: e / 100 if l == ('q', 'a') else e)", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>"], "Frame.assign.iloc[]()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.iloc[2]((-1, -2, -3))", "<Frame: x>", "<Index>    a            b            c            <<U1>", "<Index>", "p          10           8            1", "q          -2           -3           0", "r          (-1, -2, -3) (-1, -2, -3) (-1, -2, -3)", "s          0            0            12", "<<U1>      <object>     <object>     <object>", ">>> f.assign.iloc[2:](-1)", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          -1      -1      -1", "s          -1      -1      -1", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.iloc[[0, 3]](-1)", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          -1      -1      -1", "q          -2      -3      0", "r          0       8       9", "s          -1      -1      -1", "<<U1>      <int64> <int64> <int64>"], "Frame.assign.iloc[].apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.iloc[2:].apply(lambda s: s / 100)", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "p          10.0      8.0       1.0", "q          -2.0      -3.0      0.0", "r          0.0       0.08      0.09", "s          0.0       0.0       0.12", "<<U1>      <float64> <float64> <float64>"], "Frame.assign.iloc[].apply_element()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.iloc[1:].apply_element(lambda e: e / 100 if e < 8 else e)", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "p          10.0      8.0       1.0", "q          -0.02     -0.03     0.0", "r          0.0       8.0       9.0", "s          0.0       0.0       12.0", "<<U1>      <float64> <float64> <float64>"], "Frame.assign.iloc[].apply_element_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.iloc[1:].apply_element_items(lambda l, e: e / 100 if l == ('q', 'a') else e)", "<Frame: x>", "<Index>    a         b       c       <<U1>", "<Index>", "p          10.0      8       1", "q          -0.02     -3      0", "r          0.0       8       9", "s          0.0       0       12", "<<U1>      <float64> <int64> <int64>"], "Frame.assign.loc[]()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.loc['r'](-1)", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          -1      -1      -1", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.loc['r':](-1)", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          -1      -1      -1", "s          -1      -1      -1", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.loc[['p', 's']](-1)", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          -1      -1      -1", "q          -2      -3      0", "r          0       8       9", "s          -1      -1      -1", "<<U1>      <int64> <int64> <int64>"], "Frame.assign.loc[].apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.loc['r':].apply(lambda s: s / 100)", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "p          10.0      8.0       1.0", "q          -2.0      -3.0      0.0", "r          0.0       0.08      0.09", "s          0.0       0.0       0.12", "<<U1>      <float64> <float64> <float64>"], "Frame.assign.loc[].apply_element()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.loc['r':].apply_element(lambda e: e / 100 if e < 10 else e)", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "p          10.0      8.0       1.0", "q          -2.0      -3.0      0.0", "r          0.0       0.08      0.09", "s          0.0       0.0       12.0", "<<U1>      <float64> <float64> <float64>"], "Frame.assign.loc[].apply_element_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.loc['r':].apply_element_items(lambda l, e: e / 100 if l[1] == 'c' else e)", "<Frame: x>", "<Index>    a       b       c         <<U1>", "<Index>", "p          10      8       1.0", "q          -2      -3      0.0", "r          0       8       0.09", "s          0       0       0.12", "<<U1>      <int64> <int64> <float64>"], "Frame.assign.bloc[]()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.bloc[f > 5](-1)", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          -1      -1      1", "q          -2      -3      0", "r          0       -1      -1", "s          0       0       -1", "<<U1>      <int64> <int64> <int64>"], "Frame.assign.bloc[].apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.bloc[f > 5].apply(lambda s: s * .01)", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "p          0.1       0.08      1.0", "q          -2.0      -3.0      0.0", "r          0.0       0.08      0.09", "s          0.0       0.0       0.12", "<<U1>      <float64> <float64> <float64>"], "Frame.assign.bloc[].apply_element()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.bloc[f > 5].apply_element(lambda e: e * .01 if e == 8 else e)", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "p          10.0      0.08      1.0", "q          -2.0      -3.0      0.0", "r          0.0       0.08      9.0", "s          0.0       0.0       12.0", "<<U1>      <float64> <float64> <float64>"], "Frame.assign.bloc[].apply_element_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.assign.bloc[f > 5].apply_element_items(lambda e: e * .01 if l[1] == 'c' else e)", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "Frame.bloc[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.bloc[f > 5]", "<Series>", "<Index>", "('p', 'a') 10", "('p', 'b') 8", "('r', 'b') 8", "('r', 'c') 9", "('s', 'c') 12", "<object>   <int64>"], "Frame.drop[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.drop['c']", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          10      8", "q          -2      -3", "r          0       8", "s          0       0", "<<U1>      <int64> <int64>", ">>> f.drop['b':]", "<Frame: x>", "<Index>    a       <<U1>", "<Index>", "p          10", "q          -2", "r          0", "s          0", "<<U1>      <int64>", ">>> f.drop[['a', 'c']]", "<Frame: x>", "<Index>    b       <<U1>", "<Index>", "p          8", "q          -3", "r          8", "s          0", "<<U1>      <int64>"], "Frame.drop.iloc[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.drop.iloc[1]", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.drop.iloc[1:]", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "<<U1>      <int64> <int64> <int64>", ">>> f.drop.iloc[[0, 2]]", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "q          -2      -3      0", "s          0       0       12", "<<U1>      <int64> <int64> <int64>"], "Frame.drop.loc[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.drop.loc['r']", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.drop.loc['r':]", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "<<U1>      <int64> <int64> <int64>", ">>> f.drop.loc[['p', 's']]", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "q          -2      -3      0", "r          0       8       9", "<<U1>      <int64> <int64> <int64>"], "Frame.mask[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.mask['c']", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  False  True", "q       False  False  True", "r       False  False  True", "s       False  False  True", "<<U1>   <bool> <bool> <bool>", ">>> f.mask['b':]", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  True   True", "q       False  True   True", "r       False  True   True", "s       False  True   True", "<<U1>   <bool> <bool> <bool>", ">>> f.mask[['a', 'c']]", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       True   False  True", "q       True   False  True", "r       True   False  True", "s       True   False  True", "<<U1>   <bool> <bool> <bool>"], "Frame.mask.iloc[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.mask.iloc[1]", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  False  False", "q       True   True   True", "r       False  False  False", "s       False  False  False", "<<U1>   <bool> <bool> <bool>", ">>> f.mask.iloc[1:]", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  False  False", "q       True   True   True", "r       True   True   True", "s       True   True   True", "<<U1>   <bool> <bool> <bool>", ">>> f.mask.iloc[[0, 2]]", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       True   True   True", "q       False  False  False", "r       True   True   True", "s       False  False  False", "<<U1>   <bool> <bool> <bool>"], "Frame.mask.loc[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.mask.loc['r']", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  False  False", "q       False  False  False", "r       True   True   True", "s       False  False  False", "<<U1>   <bool> <bool> <bool>", ">>> f.mask.loc['r':]", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  False  False", "q       False  False  False", "r       True   True   True", "s       True   True   True", "<<U1>   <bool> <bool> <bool>", ">>> f.mask.loc[['p', 's']]", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       True   True   True", "q       False  False  False", "r       False  False  False", "s       True   True   True", "<<U1>   <bool> <bool> <bool>"], "Frame.masked_array[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.masked_array['c']", "[[10 8 --]", " [-2 -3 --]", " [0 8 --]", " [0 0 --]]", ">>> f.masked_array['b':]", "[[10 -- --]", " [-2 -- --]", " [0 -- --]", " [0 -- --]]", ">>> f.masked_array[['a', 'c']]", "[[-- 8 --]", " [-- -3 --]", " [-- 8 --]", " [-- 0 --]]"], "Frame.masked_array.iloc[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.masked_array.iloc[1]", "[[10 8 1]", " [-- -- --]", " [0 8 9]", " [0 0 12]]", ">>> f.masked_array.iloc[1:]", "[[10 8 1]", " [-- -- --]", " [-- -- --]", " [-- -- --]]", ">>> f.masked_array.iloc[[0, 2]]", "[[-- -- --]", " [-2 -3 0]", " [-- -- --]", " [0 0 12]]"], "Frame.masked_array.loc[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.masked_array.loc['r']", "[[10 8 1]", " [-2 -3 0]", " [-- -- --]", " [0 0 12]]", ">>> f.masked_array.loc['r':]", "[[10 8 1]", " [-2 -3 0]", " [-- -- --]", " [-- -- --]]", ">>> f.masked_array.loc[['p', 's']]", "[[-- -- --]", " [-2 -3 0]", " [0 8 9]", " [-- -- --]]"], "Frame.[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f['b']", "<Series: b>", "<Index>", "p           8", "q           -3", "r           8", "s           0", "<<U1>       <int64>", ">>> f['b':]", "<Frame: x>", "<Index>    b       c       <<U1>", "<Index>", "p          8       1", "q          -3      0", "r          8       9", "s          0       12", "<<U1>      <int64> <int64>", ">>> f[['a', 'c']]", "<Frame: x>", "<Index>    a       c       <<U1>", "<Index>", "p          10      1", "q          -2      0", "r          0       9", "s          0       12", "<<U1>      <int64> <int64>"], "Frame.iloc[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iloc[2]", "<Series: r>", "<Index>", "a           0", "b           8", "c           9", "<<U1>       <int64>", ">>> f.iloc[2:]", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iloc[[0, 3]]", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "s          0       0       12", "<<U1>      <int64> <int64> <int64>"], "Frame.loc[]": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.loc['r']", "<Series: r>", "<Index>", "a           0", "b           8", "c           9", "<<U1>       <int64>", ">>> f.loc['r':]", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.loc[['p', 's']]", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "s          0       0       12", "<<U1>      <int64> <int64> <int64>"], "Frame.iter_array()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_array())", "(array([10, -2,  0,  0]), array([ 8, -3,  8,  0]), array([ 1,  0,  9, 12]))"], "Frame.iter_array().apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_array().apply(lambda v: v.sum())", "<Series>", "<Index>", "a        8", "b        13", "c        22", "<<U1>    <int64>"], "Frame.iter_array().apply_iter()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_array().apply_iter(lambda v: v.sum()))", "(8, 13, 22)"], "Frame.iter_array().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_array().apply_iter_items(lambda v: v.sum()))", "(('a', 8), ('b', 13), ('c', 22))"], "Frame.iter_array().apply_pool()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_array().apply_pool(lambda v: v.sum(), use_threads=True)", "<Series>", "<Index>", "a        8", "b        13", "c        22", "<<U1>    <int64>"], "Frame.iter_array_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_array_items())", "(('a', array([10, -2,  0,  0])), ('b', array([ 8, -3,  8,  0])), ('c', array([ 1,  0,  9, 12])))"], "Frame.iter_array_items().apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_array_items().apply(lambda k, v: v.sum() if k != 'b' else -1)", "<Series>", "<Index>", "a        8", "b        -1", "c        22", "<<U1>    <int64>"], "Frame.iter_array_items().apply_iter()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_array_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))", "(8, -1, 22)"], "Frame.iter_array_items().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_array_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))", "(('a', 8), ('b', -1), ('c', 22))"], "Frame.iter_array_items().apply_pool()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_array_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)", "<Series>", "<Index>", "a        8", "b        -1", "c        22", "<<U1>    <int64>"], "Frame.iter_element()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_element())", "(10, 8, 1, -2, -3, 0, 0, 8, 9, 0, 0, 12)"], "Frame.iter_element().apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_element().apply(lambda e: e > 5)", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       True   True   False", "q       False  False  False", "r       False  True   True", "s       False  False  True", "<<U1>   <bool> <bool> <bool>"], "Frame.iter_element().apply_iter()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_element().apply_iter(lambda e: e > 10))", "(False, False, False, False, False, False, False, False, False, False, False, True)"], "Frame.iter_element().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_element().apply_iter_items(lambda e: e > 10))", "((('p', 'a'), False), (('p', 'b'), False), (('p', 'c'), False), (('q', 'a'), False), (('q', 'b'), False), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), False), (('r', 'c'), False), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), True))"], "Frame.iter_element().apply_pool()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_element().apply_pool(lambda e: e > 5, use_threads=True)", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       True   True   False", "q       False  False  False", "r       False  True   True", "s       False  False  True", "<<U1>   <bool> <bool> <bool>"], "Frame.iter_element().map_all()": [">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_element().map_all({0: 200, 1: -1, 2: 45})", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "p       -1      45      -1", "q       45      -1      200", "r       200     45      45", "s       200     200     -1", "<<U1>   <int64> <int64> <int64>"], "Frame.iter_element().map_all_iter()": [">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_all_iter({0: 200, 1: -1, 2: 45}))", "(-1, 45, -1, 45, -1, 200, 200, 45, 45, 200, 200, -1)"], "Frame.iter_element().map_all_iter_items()": [">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_all_iter_items({0: 200, 1: -1, 2: 45}))", "((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 200), (('r', 'a'), 200), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 200), (('s', 'b'), 200), (('s', 'c'), -1))"], "Frame.iter_element().map_any()": [">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_element().map_any({1: -1, 2: 45})", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "p       -1      45      -1", "q       45      -1      0", "r       0       45      45", "s       0       0       -1", "<<U1>   <int64> <int64> <int64>"], "Frame.iter_element().map_any_iter()": [">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_any_iter({1: -1, 2: 45}))", "(-1, 45, -1, 45, -1, 0, 0, 45, 45, 0, 0, -1)"], "Frame.iter_element().map_any_iter_items()": [">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_any_iter_items({1: -1, 2: 45}))", "((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), -1))"], "Frame.iter_element().map_fill()": [">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_element().map_fill({1: -1, 2: 45}, fill_value=np.nan)", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       -1.0      45.0      -1.0", "q       45.0      -1.0      nan", "r       nan       45.0      45.0", "s       nan       nan       -1.0", "<<U1>   <float64> <float64> <float64>"], "Frame.iter_element().map_fill_iter()": [">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_fill_iter({1: -1, 2: 45}, fill_value=np.nan))", "(-1, 45, -1, 45, -1, nan, nan, 45, 45, nan, nan, -1)"], "Frame.iter_element().map_fill_iter_items()": [">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_fill_iter_items({1: -1, 2: 45}, fill_value=np.nan))", "((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), nan), (('r', 'a'), nan), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), nan), (('s', 'b'), nan), (('s', 'c'), -1))"], "Frame.iter_element_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_element_items())", "((('p', 'a'), 10), (('p', 'b'), 8), (('p', 'c'), 1), (('q', 'a'), -2), (('q', 'b'), -3), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 8), (('r', 'c'), 9), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), 12))"], "Frame.iter_element_items().apply()": [">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_element_items().apply(lambda k, v: v > 1 if k != ('q', 'b') else 'x')", "<Frame>", "<Index> a      b        c      <<U1>", "<Index>", "p       False  True     False", "q       True   x        False", "r       False  True     True", "s       False  False    False", "<<U1>   <bool> <object> <bool>"], "Frame.iter_element_items().apply_iter()": [">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_element_items().apply_iter(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))", "(False, True, False, True, 'x', False, False, True, True, False, False, False)"], "Frame.iter_element_items().apply_iter_items()": [">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_element_items().apply_iter_items(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))", "((('p', 'a'), False), (('p', 'b'), True), (('p', 'c'), False), (('q', 'a'), True), (('q', 'b'), 'x'), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), True), (('r', 'c'), True), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), False))"], "Frame.iter_element_items().apply_pool()": [">>> def func(pair): return pair[1] > 0 and pair[0] == ('q', 'b')", ">>> f = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_element_items().apply_pool(func, use_threads=True)", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  False  False", "q       False  True   False", "r       False  False  False", "s       False  False  False", "<<U1>   <bool> <bool> <bool>"], "Frame.iter_element_items().map_all()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f.iter_element_items().map_all({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1})", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       200     -1", "q       45      1", "<<U1>   <int64> <int64>"], "Frame.iter_element_items().map_all_iter()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_element_items().map_all_iter({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))", "(200, -1, 45, 1)"], "Frame.iter_element_items().map_all_iter_items()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_element_items().map_all_iter_items({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))", "((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), 45), (('q', 'b'), 1))"], "Frame.iter_element_items().map_any()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f.iter_element_items().map_any({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1})", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       200     3", "q       9       1", "<<U1>   <int64> <int64>"], "Frame.iter_element_items().map_any_iter()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_element_items().map_any_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))", "(200, 3, 9, 1)"], "Frame.iter_element_items().map_any_iter_items()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_element_items().map_any_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))", "((('p', 'a'), 200), (('p', 'b'), 3), (('q', 'a'), 9), (('q', 'b'), 1))"], "Frame.iter_element_items().map_fill()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f.iter_element_items().map_fill({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1)", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       200     -1", "q       -1      1", "<<U1>   <int64> <int64>"], "Frame.iter_element_items().map_fill_iter()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_element_items().map_fill_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))", "(200, -1, -1, 1)"], "Frame.iter_element_items().map_fill_iter_items()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_element_items().map_fill_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))", "((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), -1), (('q', 'b'), 1))"], "Frame.iter_group()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c'))", "(<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       11      0       0", "2       10      3       0", "<int64> <int64> <int64> <int64>, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       8       1", "3       2       8       1", "<int64> <int64> <int64> <int64>)"], "Frame.iter_group().apply()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group('c').apply(lambda f: f['b'].sum())", "<Series>", "<Index: c>", "0          3", "1          16", "<int64>    <int64>"], "Frame.iter_group().apply_iter()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').apply_iter(lambda f: f['b'].sum()))", "(3, 16)"], "Frame.iter_group().apply_iter_items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').apply_iter_items(lambda f: f['b'].sum()))", "((0, 3), (1, 16))"], "Frame.iter_group().apply_pool()": [">>> def func(f): return f['b'].sum()", ">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group('c').apply_pool(func, use_threads=True)", "<Series>", "<Index: c>", "0          3", "1          16", "<int64>    <int64>"], "Frame.iter_group().reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).keys())", "(0, 1)"], "Frame.iter_group().reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "(0, 1)"], "Frame.iter_group().reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).items())", "((0, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "2       10      3       0", "<int64> <int64> <int64> <int64>), (1, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>))"], "Frame.iter_group().reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).values())", "(<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "2       10      3       0", "<int64> <int64> <int64> <int64>, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>)"], "Frame.iter_group().reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "2       10      3       0", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "Frame.iter_group().reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_map_func(np.min).keys())", "(0, 1)"], "Frame.iter_group().reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_map_func(np.min).__iter__())", "(0, 1)"], "Frame.iter_group().reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_map_func(np.min).items())", "((0, <Series: 0>", "<Index>", "a           10", "b           0", "c           0", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "a           2", "b           8", "c           1", "<<U1>       <int64>))"], "Frame.iter_group().reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_map_func(np.min).values())", "(<Series: 0>", "<Index>", "a           10", "b           0", "c           0", "<<U1>       <int64>, <Series: 1>", "<Index>", "a           2", "b           8", "c           1", "<<U1>       <int64>)"], "Frame.iter_group().reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group('c').reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       10      0       0", "1       2       8       1", "<int64> <int64> <int64> <int64>"], "Frame.iter_group().reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(0, 1)"], "Frame.iter_group().reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(0, 1)"], "Frame.iter_group().reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((0, <Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>))"], "Frame.iter_group().reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(<Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>)"], "Frame.iter_group().reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "<int64> <int64> <int64>"], "Frame.iter_group().reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(0, 1)"], "Frame.iter_group().reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(0, 1)"], "Frame.iter_group().reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((0, <Series: 0>", "<Index>", "b-min       0", "b-max       3", "<<U5>       <int64>), (1, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>))"], "Frame.iter_group().reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: 0>", "<Index>", "b-min       0", "b-max       3", "<<U5>       <int64>, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>)"], "Frame.iter_group().reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       3", "1       8       8", "<int64> <int64> <int64>"], "Frame.iter_group_array()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c'))", "(array([[11,  0,  0],", "       [10,  3,  0]]), array([[4, 8, 1],", "       [2, 8, 1]]))"], "Frame.iter_group_array().apply()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_array('c').apply(lambda a: np.sum(a))", "<Series>", "<Index: c>", "0          24", "1          24", "<int64>    <int64>"], "Frame.iter_group_array().apply_iter()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').apply_iter(lambda a: np.sum(a)))", "(24, 24)"], "Frame.iter_group_array().apply_iter_items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').apply_iter_items(lambda a: np.sum(a)))", "((0, 24), (1, 24))"], "Frame.iter_group_array().apply_pool()": [">>> def func(a): return np.sum(a)", ">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_array('c').apply_pool(func, use_threads=True)", "<Series>", "<Index: c>", "0          24", "1          24", "<int64>    <int64>"], "Frame.iter_group_array().reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).keys())", "(0, 1)"], "Frame.iter_group_array().reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).__iter__())", "(0, 1)"], "Frame.iter_group_array().reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).items())", "((0, array([21,  3,  0])), (1, array([ 6, 16,  2])))"], "Frame.iter_group_array().reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).values())", "(array([21,  3,  0]), array([ 6, 16,  2]))"], "Frame.iter_group_array().reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       21", "1       3", "2       0", "3       6", "4       16", "5       2", "<int64> <int64>"], "Frame.iter_group_array().reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_map_func(np.min).keys())", "(0, 1)"], "Frame.iter_group_array().reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_map_func(np.min).__iter__())", "(0, 1)"], "Frame.iter_group_array().reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_map_func(np.min).items())", "((0, array([10,  0,  0])), (1, array([2, 8, 1])))"], "Frame.iter_group_array().reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_map_func(np.min).values())", "(array([10,  0,  0]), array([2, 8, 1]))"], "Frame.iter_group_array().reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_array('c').reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       10      0       0", "1       2       8       1", "<int64> <int64> <int64> <int64>"], "Frame.iter_group_array().reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(0, 1)"], "Frame.iter_group_array().reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(0, 1)"], "Frame.iter_group_array().reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((0, array([ 0, 11])), (1, array([8, 4])))"], "Frame.iter_group_array().reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(array([ 0, 11]), array([8, 4]))"], "Frame.iter_group_array().reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "<int64> <int64> <int64>"], "Frame.iter_group_array().reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(0, 1)"], "Frame.iter_group_array().reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(0, 1)"], "Frame.iter_group_array().reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((0, array([0, 3])), (1, array([8, 8])))"], "Frame.iter_group_array().reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(array([0, 3]), array([8, 8]))"], "Frame.iter_group_array().reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       3", "1       8       8", "<int64> <int64> <int64>"], "Frame.iter_group_array_items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c'))", "((0, array([[11,  0,  0],", "       [10,  3,  0]])), (1, array([[4, 8, 1],", "       [2, 8, 1]])))"], "Frame.iter_group_array_items().apply()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').apply(lambda k, v: np.sum(v) if k == 0 else v.shape)", "<Series>", "<Index: c>", "0          24", "1          (2, 3)", "<int64>    <object>"], "Frame.iter_group_array_items().apply_iter()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').apply_iter(lambda k, v: np.sum(v) if k == 0 else v.shape))", "(24, (2, 3))"], "Frame.iter_group_array_items().apply_iter_items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').apply_iter_items(lambda k, v: np.sum(v) if k == 0 else v.shape))", "((0, 24), (1, (2, 3)))"], "Frame.iter_group_array_items().reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).keys())", "(0, 1)"], "Frame.iter_group_array_items().reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).__iter__())", "(0, 1)"], "Frame.iter_group_array_items().reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).items())", "((0, array([21,  3,  0])), (1, array([ 6, 16,  2])))"], "Frame.iter_group_array_items().reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).values())", "(array([21,  3,  0]), array([ 6, 16,  2]))"], "Frame.iter_group_array_items().reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       21", "1       3", "2       0", "3       6", "4       16", "5       2", "<int64> <int64>"], "Frame.iter_group_array_items().reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).keys())", "(0, 1)"], "Frame.iter_group_array_items().reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).__iter__())", "(0, 1)"], "Frame.iter_group_array_items().reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).items())", "((0, array([10,  0,  0])), (1, array([2, 8, 1])))"], "Frame.iter_group_array_items().reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).values())", "(array([10,  0,  0]), array([2, 8, 1]))"], "Frame.iter_group_array_items().reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       10      0       0", "1       2       8       1", "<int64> <int64> <int64> <int64>"], "Frame.iter_group_array_items().reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).keys())", "(0, 1)"], "Frame.iter_group_array_items().reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).__iter__())", "(0, 1)"], "Frame.iter_group_array_items().reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).items())", "((0, array([ 0, 11])), (1, array([8, 4])))"], "Frame.iter_group_array_items().reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).values())", "(array([ 0, 11]), array([8, 4]))"], "Frame.iter_group_array_items().reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "<int64> <int64> <int64>"], "Frame.iter_group_array_items().reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).keys())", "(0, 1)"], "Frame.iter_group_array_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).__iter__())", "(0, 1)"], "Frame.iter_group_array_items().reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).items())", "((0, array([0, 3])), (1, array([8, 8])))"], "Frame.iter_group_array_items().reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).values())", "(array([0, 3]), array([8, 8]))"], "Frame.iter_group_array_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       3", "1       8       8", "<int64> <int64> <int64>"], "Frame.iter_group_items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c'))", "((0, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       11      0       0", "2       10      3       0", "<int64> <int64> <int64> <int64>), (1, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       8       1", "3       2       8       1", "<int64> <int64> <int64> <int64>))"], "Frame.iter_group_items().apply()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_items('c').apply(lambda k, v: v['b'].sum() if k == 0 else v.shape)", "<Series>", "<Index: c>", "0          3", "1          (2, 3)", "<int64>    <object>"], "Frame.iter_group_items().apply_iter()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').apply_iter(lambda k, v: v['b'].sum() if k == 0 else v.shape))", "(3, (2, 3))"], "Frame.iter_group_items().apply_iter_items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').apply_iter_items(lambda k, v: v['b'].sum() if k == 0 else v.shape))", "((0, 3), (1, (2, 3)))"], "Frame.iter_group_items().reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).keys())", "(0, 1)"], "Frame.iter_group_items().reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).__iter__())", "(0, 1)"], "Frame.iter_group_items().reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).items())", "((0, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "2       10      3       0", "<int64> <int64> <int64> <int64>), (1, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>))"], "Frame.iter_group_items().reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).values())", "(<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "2       10      3       0", "<int64> <int64> <int64> <int64>, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>)"], "Frame.iter_group_items().reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "2       10      3       0", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "Frame.iter_group_items().reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).keys())", "(0, 1)"], "Frame.iter_group_items().reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).__iter__())", "(0, 1)"], "Frame.iter_group_items().reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).items())", "((0, <Series: 0>", "<Index>", "a           10", "b           0", "c           0", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "a           2", "b           8", "c           1", "<<U1>       <int64>))"], "Frame.iter_group_items().reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).values())", "(<Series: 0>", "<Index>", "a           10", "b           0", "c           0", "<<U1>       <int64>, <Series: 1>", "<Index>", "a           2", "b           8", "c           1", "<<U1>       <int64>)"], "Frame.iter_group_items().reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       10      0       0", "1       2       8       1", "<int64> <int64> <int64> <int64>"], "Frame.iter_group_items().reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).keys())", "(0, 1)"], "Frame.iter_group_items().reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).__iter__())", "(0, 1)"], "Frame.iter_group_items().reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).items())", "((0, <Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>))"], "Frame.iter_group_items().reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).values())", "(<Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>)"], "Frame.iter_group_items().reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "<int64> <int64> <int64>"], "Frame.iter_group_items().reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).keys())", "(0, 1)"], "Frame.iter_group_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).__iter__())", "(0, 1)"], "Frame.iter_group_items().reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).items())", "((0, <Series: 0>", "<Index>", "b-min       0", "b-max       3", "<<U5>       <int64>), (1, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>))"], "Frame.iter_group_items().reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).values())", "(<Series: 0>", "<Index>", "b-min       0", "b-max       3", "<<U5>       <int64>, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>)"], "Frame.iter_group_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       3", "1       8       8", "<int64> <int64> <int64>"], "Frame.iter_group_labels()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels(1))", "(<Frame>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "1                p     8       True   1517-12-31", "<int64>          <<U1> <int64> <bool> <datetime64[D]>, <Frame>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>)"], "Frame.iter_group_labels().apply()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iter_group_labels(1).apply(lambda f: f['b'].sum())", "<Series>", "<Index>", "p        1", "q        1", "<<U1>    <int64>"], "Frame.iter_group_labels().apply_iter()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels(1).apply_iter(lambda f: f['b'].sum()))", "(1, 1)"], "Frame.iter_group_labels().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels(1).apply_iter_items(lambda f: f['b'].sum()))", "(('p', 1), ('q', 1))"], "Frame.iter_group_labels_array()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array(1))", "(array([[10, False, datetime.date(1517, 1, 1)],", "       [8, True, datetime.date(1517, 12, 31)]], dtype=object), array([[2, True, datetime.date(1517, 4, 1)],", "       [3, False, datetime.date(1517, 6, 30)]], dtype=object))"], "Frame.iter_group_labels_array().apply()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iter_group_labels_array(1).apply(lambda a: np.sum(a[:, 0]))", "<Series>", "<Index>", "p        18", "q        5", "<<U1>    <int64>"], "Frame.iter_group_labels_array().apply_iter()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array(1).apply_iter(lambda a: np.sum(a[:, 0])))", "(18, 5)"], "Frame.iter_group_labels_array().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array(1).apply_iter_items(lambda a: np.sum(a[:, 0])))", "(('p', 18), ('q', 5))"], "Frame.iter_group_labels_array_items()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array_items(1))", "(('p', array([[10, False, datetime.date(1517, 1, 1)],", "       [8, True, datetime.date(1517, 12, 31)]], dtype=object)), ('q', array([[2, True, datetime.date(1517, 4, 1)],", "       [3, False, datetime.date(1517, 6, 30)]], dtype=object)))"], "Frame.iter_group_labels_array_items().apply()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iter_group_labels_array_items(1).apply(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1)", "<Series>", "<Index>", "p        -1", "q        5", "<<U1>    <int64>"], "Frame.iter_group_labels_array_items().apply_iter()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array_items(1).apply_iter(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))", "(-1, 5)"], "Frame.iter_group_labels_array_items().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array_items(1).apply_iter_items(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))", "(('p', -1), ('q', 5))"], "Frame.iter_group_labels_items()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_items(1))", "(('p', <Frame>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "1                p     8       True   1517-12-31", "<int64>          <<U1> <int64> <bool> <datetime64[D]>), ('q', <Frame>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>))"], "Frame.iter_group_labels_items().apply()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iter_group_labels_items(1).apply(lambda k, v: v['b'].sum() if k == 'p' else -1)", "<Series>", "<Index>", "p        1", "q        -1", "<<U1>    <int64>"], "Frame.iter_group_labels_items().apply_iter()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_items(1).apply_iter(lambda k, v: v['b'].sum() if k == 'p' else -1))", "(1, -1)"], "Frame.iter_group_labels_items().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_items(1).apply_iter_items(lambda k, v: v['b'].sum() if k == 'p' else -1))", "(('p', 1), ('q', -1))"], "Frame.iter_group_other()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 2))", "(<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       11      0       0", "2       10      3       0", "<int64> <int64> <int64> <int64>, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       8       1", "3       2       8       1", "<int64> <int64> <int64> <int64>)"], "Frame.iter_group_other().apply()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 2).apply(lambda f: f['b'].sum())", "<Series>", "<Index>", "0        3", "1        16", "<int64>  <int64>"], "Frame.iter_group_other().apply_iter()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 2).apply_iter(lambda f: f['b'].sum()))", "(3, 16)"], "Frame.iter_group_other().apply_iter_items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 2).apply_iter_items(lambda f: f['b'].sum()))", "((0, 3), (1, 16))"], "Frame.iter_group_other().reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).keys())", "(0, 1, 2)"], "Frame.iter_group_other().reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other().reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).items())", "((0, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>), (1, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "<int64> <int64> <int64> <int64>), (2, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "<int64> <int64> <int64> <int64>))"], "Frame.iter_group_other().reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).values())", "(<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "<int64> <int64> <int64> <int64>, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "<int64> <int64> <int64> <int64>)"], "Frame.iter_group_other().reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "Frame.iter_group_other().reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).keys())", "(0, 1, 2)"], "Frame.iter_group_other().reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other().reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).items())", "((0, <Series: 0>", "<Index>", "a           2", "b           0", "c           0", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "a           4", "b           8", "c           1", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "a           10", "b           3", "c           0", "<<U1>       <int64>))"], "Frame.iter_group_other().reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).values())", "(<Series: 0>", "<Index>", "a           2", "b           0", "c           0", "<<U1>       <int64>, <Series: 1>", "<Index>", "a           4", "b           8", "c           1", "<<U1>       <int64>, <Series: 2>", "<Index>", "a           10", "b           3", "c           0", "<<U1>       <int64>)"], "Frame.iter_group_other().reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       2       0       0", "1       4       8       1", "2       10      3       0", "<int64> <int64> <int64> <int64>"], "Frame.iter_group_other().reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(0, 1, 2)"], "Frame.iter_group_other().reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other().reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((0, <Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>))"], "Frame.iter_group_other().reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(<Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>)"], "Frame.iter_group_other().reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "2       3       10", "<int64> <int64> <int64>"], "Frame.iter_group_other().reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(0, 1, 2)"], "Frame.iter_group_other().reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other().reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((0, <Series: 0>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>), (1, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>), (2, <Series: 2>", "<Index>", "b-min       3", "b-max       3", "<<U5>       <int64>))"], "Frame.iter_group_other().reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: 0>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>, <Series: 2>", "<Index>", "b-min       3", "b-max       3", "<<U5>       <int64>)"], "Frame.iter_group_other().reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       8", "1       8       8", "2       3       3", "<int64> <int64> <int64>"], "Frame.iter_group_other_array()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 2))", "(array([[11,  0,  0],", "       [10,  3,  0]]), array([[4, 8, 1],", "       [2, 8, 1]]))"], "Frame.iter_group_other_array().apply()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 2).apply(lambda a: np.sum(a))", "<Series>", "<Index>", "0        24", "1        24", "<int64>  <int64>"], "Frame.iter_group_other_array().apply_iter()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 2).apply_iter(lambda a: np.sum(a)))", "(24, 24)"], "Frame.iter_group_other_array().apply_iter_items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 2).apply_iter_items(lambda a: np.sum(a)))", "((0, 24), (1, 24))"], "Frame.iter_group_other_array().reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).keys())", "(0, 1, 2)"], "Frame.iter_group_other_array().reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other_array().reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).items())", "((0, array([13,  8,  1])), (1, array([4, 8, 1])), (2, array([10,  3,  0])))"], "Frame.iter_group_other_array().reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).values())", "(array([13,  8,  1]), array([4, 8, 1]), array([10,  3,  0]))"], "Frame.iter_group_other_array().reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       13", "1       8", "2       1", "3       4", "4       8", "5       1", "6       10", "7       3", "8       0", "<int64> <int64>"], "Frame.iter_group_other_array().reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).keys())", "(0, 1, 2)"], "Frame.iter_group_other_array().reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other_array().reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).items())", "((0, array([2, 0, 0])), (1, array([4, 8, 1])), (2, array([10,  3,  0])))"], "Frame.iter_group_other_array().reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).values())", "(array([2, 0, 0]), array([4, 8, 1]), array([10,  3,  0]))"], "Frame.iter_group_other_array().reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       2       0       0", "1       4       8       1", "2       10      3       0", "<int64> <int64> <int64> <int64>"], "Frame.iter_group_other_array().reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(0, 1, 2)"], "Frame.iter_group_other_array().reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other_array().reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((0, array([ 0, 11])), (1, array([8, 4])), (2, array([ 3, 10])))"], "Frame.iter_group_other_array().reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(array([ 0, 11]), array([8, 4]), array([ 3, 10]))"], "Frame.iter_group_other_array().reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "2       3       10", "<int64> <int64> <int64>"], "Frame.iter_group_other_array().reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(0, 1, 2)"], "Frame.iter_group_other_array().reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other_array().reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((0, array([0, 8])), (1, array([8, 8])), (2, array([3, 3])))"], "Frame.iter_group_other_array().reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(array([0, 8]), array([8, 8]), array([3, 3]))"], "Frame.iter_group_other_array().reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       8", "1       8       8", "2       3       3", "<int64> <int64> <int64>"], "Frame.iter_group_other_array_items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 2))", "((0, array([[11,  0,  0],", "       [10,  3,  0]])), (1, array([[4, 8, 1],", "       [2, 8, 1]])))"], "Frame.iter_group_other_array_items().apply()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 2).apply(lambda k, v: np.sum(v) if k == 0 else v.shape)", "<Series>", "<Index>", "0        24", "1        (2, 3)", "<int64>  <object>"], "Frame.iter_group_other_array_items().apply_iter()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 2).apply_iter(lambda k, v: np.sum(v) if k == 0 else v.shape))", "(24, (2, 3))"], "Frame.iter_group_other_array_items().apply_iter_items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 2).apply_iter_items(lambda k, v: np.sum(v) if k == 0 else v.shape))", "((0, 24), (1, (2, 3)))"], "Frame.iter_group_other_array_items().reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).keys())", "(0, 1, 2)"], "Frame.iter_group_other_array_items().reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other_array_items().reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).items())", "((0, array([13,  8,  1])), (1, array([4, 8, 1])), (2, array([10,  3,  0])))"], "Frame.iter_group_other_array_items().reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).values())", "(array([13,  8,  1]), array([4, 8, 1]), array([10,  3,  0]))"], "Frame.iter_group_other_array_items().reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       13", "1       8", "2       1", "3       4", "4       8", "5       1", "6       10", "7       3", "8       0", "<int64> <int64>"], "Frame.iter_group_other_array_items().reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).keys())", "(0, 1, 2)"], "Frame.iter_group_other_array_items().reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other_array_items().reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).items())", "((0, array([2, 0, 0])), (1, array([4, 8, 1])), (2, array([10,  3,  0])))"], "Frame.iter_group_other_array_items().reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).values())", "(array([2, 0, 0]), array([4, 8, 1]), array([10,  3,  0]))"], "Frame.iter_group_other_array_items().reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       2       0       0", "1       4       8       1", "2       10      3       0", "<int64> <int64> <int64> <int64>"], "Frame.iter_group_other_array_items().reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).keys())", "(0, 1, 2)"], "Frame.iter_group_other_array_items().reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other_array_items().reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).items())", "((0, array([ 0, 11])), (1, array([8, 4])), (2, array([ 3, 10])))"], "Frame.iter_group_other_array_items().reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).values())", "(array([ 0, 11]), array([8, 4]), array([ 3, 10]))"], "Frame.iter_group_other_array_items().reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "2       3       10", "<int64> <int64> <int64>"], "Frame.iter_group_other_array_items().reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).keys())", "(0, 1, 2)"], "Frame.iter_group_other_array_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other_array_items().reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).items())", "((0, array([0, 8])), (1, array([8, 8])), (2, array([3, 3])))"], "Frame.iter_group_other_array_items().reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).values())", "(array([0, 8]), array([8, 8]), array([3, 3]))"], "Frame.iter_group_other_array_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       8", "1       8       8", "2       3       3", "<int64> <int64> <int64>"], "Frame.iter_group_other_items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 2))", "((0, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       11      0       0", "2       10      3       0", "<int64> <int64> <int64> <int64>), (1, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       8       1", "3       2       8       1", "<int64> <int64> <int64> <int64>))"], "Frame.iter_group_other_items().apply()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 2).apply(lambda k, v: v['b'].sum() if k == 0 else v.shape)", "<Series>", "<Index>", "0        3", "1        (2, 3)", "<int64>  <object>"], "Frame.iter_group_other_items().apply_iter()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 2).apply_iter(lambda k, v: v['b'].sum() if k == 0 else v.shape))", "(3, (2, 3))"], "Frame.iter_group_other_items().apply_iter_items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 2).apply_iter_items(lambda k, v: v['b'].sum() if k == 0 else v.shape))", "((0, 3), (1, (2, 3)))"], "Frame.iter_group_other_items().reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).keys())", "(0, 1, 2)"], "Frame.iter_group_other_items().reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other_items().reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).items())", "((0, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>), (1, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "<int64> <int64> <int64> <int64>), (2, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "<int64> <int64> <int64> <int64>))"], "Frame.iter_group_other_items().reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).values())", "(<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "<int64> <int64> <int64> <int64>, <Frame>", "<Index> a       b       c       <<U1>", "<Index>", "<int64> <int64> <int64> <int64>)"], "Frame.iter_group_other_items().reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "Frame.iter_group_other_items().reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).keys())", "(0, 1, 2)"], "Frame.iter_group_other_items().reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other_items().reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).items())", "((0, <Series: 0>", "<Index>", "a           2", "b           0", "c           0", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "a           4", "b           8", "c           1", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "a           10", "b           3", "c           0", "<<U1>       <int64>))"], "Frame.iter_group_other_items().reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).values())", "(<Series: 0>", "<Index>", "a           2", "b           0", "c           0", "<<U1>       <int64>, <Series: 1>", "<Index>", "a           4", "b           8", "c           1", "<<U1>       <int64>, <Series: 2>", "<Index>", "a           10", "b           3", "c           0", "<<U1>       <int64>)"], "Frame.iter_group_other_items().reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       2       0       0", "1       4       8       1", "2       10      3       0", "<int64> <int64> <int64> <int64>"], "Frame.iter_group_other_items().reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).keys())", "(0, 1, 2)"], "Frame.iter_group_other_items().reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other_items().reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).items())", "((0, <Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>))"], "Frame.iter_group_other_items().reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).values())", "(<Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>)"], "Frame.iter_group_other_items().reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "2       3       10", "<int64> <int64> <int64>"], "Frame.iter_group_other_items().reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).keys())", "(0, 1, 2)"], "Frame.iter_group_other_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).__iter__())", "(0, 1, 2)"], "Frame.iter_group_other_items().reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).items())", "((0, <Series: 0>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>), (1, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>), (2, <Series: 2>", "<Index>", "b-min       3", "b-max       3", "<<U5>       <int64>))"], "Frame.iter_group_other_items().reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).values())", "(<Series: 0>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>, <Series: 2>", "<Index>", "b-min       3", "b-max       3", "<<U5>       <int64>)"], "Frame.iter_group_other_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       8", "1       8       8", "2       3       3", "<int64> <int64> <int64>"], "Frame.iter_series()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_series())", "(<Series: a>", "<Index>", "p           10", "q           -2", "r           0", "s           0", "<<U1>       <int64>, <Series: b>", "<Index>", "p           8", "q           -3", "r           8", "s           0", "<<U1>       <int64>, <Series: c>", "<Index>", "p           1", "q           0", "r           9", "s           12", "<<U1>       <int64>)"], "Frame.iter_series().apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_series().apply(lambda v: v.sum())", "<Series>", "<Index>", "a        8", "b        13", "c        22", "<<U1>    <int64>"], "Frame.iter_series().apply_iter()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_series().apply_iter(lambda v: v.sum()))", "(8, 13, 22)"], "Frame.iter_series().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_series().apply_iter_items(lambda v: v.sum()))", "(('a', 8), ('b', 13), ('c', 22))"], "Frame.iter_series().apply_pool()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_series().apply_pool(lambda v: v.sum(), use_threads=True)", "<Series>", "<Index>", "a        8", "b        13", "c        22", "<<U1>    <int64>"], "Frame.iter_series_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_series_items())", "(('a', <Series: a>", "<Index>", "p           10", "q           -2", "r           0", "s           0", "<<U1>       <int64>), ('b', <Series: b>", "<Index>", "p           8", "q           -3", "r           8", "s           0", "<<U1>       <int64>), ('c', <Series: c>", "<Index>", "p           1", "q           0", "r           9", "s           12", "<<U1>       <int64>))"], "Frame.iter_series_items().apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_series_items().apply(lambda k, v: v.sum() if k != 'b' else -1)", "<Series>", "<Index>", "a        8", "b        -1", "c        22", "<<U1>    <int64>"], "Frame.iter_series_items().apply_iter()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_series_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))", "(8, -1, 22)"], "Frame.iter_series_items().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_series_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))", "(('a', 8), ('b', -1), ('c', 22))"], "Frame.iter_series_items().apply_pool()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_series_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)", "<Series>", "<Index>", "a        8", "b        -1", "c        22", "<<U1>    <int64>"], "Frame.iter_tuple()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_tuple())", "(Axis(p=10, q=-2, r=0, s=0), Axis(p=8, q=-3, r=8, s=0), Axis(p=1, q=0, r=9, s=12))"], "Frame.iter_tuple().apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_tuple().apply(lambda v: v.p + v.q)", "<Series>", "<Index>", "a        8", "b        5", "c        1", "<<U1>    <int64>"], "Frame.iter_tuple().apply_iter()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_tuple().apply_iter(lambda v: v.p + v.q))", "(8, 5, 1)"], "Frame.iter_tuple().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_tuple().apply_iter_items(lambda v: v.p + v.q))", "(('a', 8), ('b', 5), ('c', 1))"], "Frame.iter_tuple().map_all()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f.iter_tuple().map_all({(2, 9): -1, (3, 8): -2})", "<Series>", "<Index>", "a        -1", "b        -2", "<<U1>    <int64>"], "Frame.iter_tuple().map_all_iter()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple().map_all_iter({(2, 9): -1, (3, 8): -2}))", "(-1, -2)"], "Frame.iter_tuple().map_all_iter_items()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple().map_all_iter_items({(2, 9): -1, (3, 8): -2}))", "(('a', -1), ('b', -2))"], "Frame.iter_tuple().map_any()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple().map_any({(2, 9): -1}))", "('a', 'b')"], "Frame.iter_tuple().map_any_iter()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple().map_any_iter({(2, 9): -1}))", "(-1, Axis(p=3, q=8))"], "Frame.iter_tuple().map_any_iter_items()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple().map_any_iter_items({(2, 9): -1}))", "(('a', -1), ('b', Axis(p=3, q=8)))"], "Frame.iter_tuple().map_fill()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f.iter_tuple().map_fill({(2, 9): -1}, fill_value=np.nan)", "<Series>", "<Index>", "a        -1.0", "b        nan", "<<U1>    <float64>"], "Frame.iter_tuple().map_fill_iter()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple().map_fill_iter({(2, 9): -1}, fill_value=np.nan))", "(-1, nan)"], "Frame.iter_tuple().map_fill_iter_items()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple().map_fill_iter_items({(2, 9): -1}, fill_value=np.nan))", "(('a', -1), ('b', nan))"], "Frame.iter_tuple_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_tuple_items())", "(('a', Axis(p=10, q=-2, r=0, s=0)), ('b', Axis(p=8, q=-3, r=8, s=0)), ('c', Axis(p=1, q=0, r=9, s=12)))"], "Frame.iter_tuple_items().apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_tuple_items().apply(lambda k, v: v.p + v.q if k == 'b' else -1)", "<Series>", "<Index>", "a        -1", "b        5", "c        -1", "<<U1>    <int64>"], "Frame.iter_tuple_items().apply_iter()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> tuple(f.iter_tuple_items().apply_iter(lambda k, v: v.p + v.q if k == 'b' else -1))", "(-1, 5, -1)"], "Frame.iter_tuple_items().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> tuple(f.iter_tuple_items().apply_iter_items(lambda k, v: v.p + v.q if k == 'b' else -1))", "(('a', -1), ('b', 5), ('c', -1))"], "Frame.iter_tuple_items().map_all()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f.iter_tuple_items().map_all({('a', (2, 9)): -1, ('b', (3, 8)): -2})", "<Series>", "<Index>", "a        -1", "b        -2", "<<U1>    <int64>"], "Frame.iter_tuple_items().map_all_iter()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_all_iter({('a', (2, 9)): -1, ('b', (3, 8)): -2}))", "(-1, -2)"], "Frame.iter_tuple_items().map_all_iter_items()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_all_iter_items({('a', (2, 9)): -1, ('b', (3, 8)): -2}))", "(('a', -1), ('b', -2))"], "Frame.iter_tuple_items().map_any()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f.iter_tuple_items().map_any({('a', (2, 9)): -1})", "<Series>", "<Index>", "a        -1", "b        Axis(p=3, q=8)", "<<U1>    <object>"], "Frame.iter_tuple_items().map_any_iter()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_any_iter({('a', (2, 9)): -1}))", "(-1, Axis(p=3, q=8))"], "Frame.iter_tuple_items().map_any_iter_items()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_any_iter_items({('a', (2, 9)): -1}))", "(('a', -1), ('b', Axis(p=3, q=8)))"], "Frame.iter_tuple_items().map_fill()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f.iter_tuple_items().map_fill({('a', (2, 9)): -1}, fill_value=np.nan)", "<Series>", "<Index>", "a        -1.0", "b        nan", "<<U1>    <float64>"], "Frame.iter_tuple_items().map_fill_iter()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_fill_iter({('a', (2, 9)): -1}, fill_value=np.nan))", "(-1, nan)"], "Frame.iter_tuple_items().map_fill_iter_items()": [">>> f = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_fill_iter_items({('a', (2, 9)): -1}, fill_value=np.nan))", "(('a', -1), ('b', nan))"], "Frame.iter_window()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1))", "(<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "<<U1>      <int64> <int64> <int64>, <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "q          -2      -3      0", "r          0       8       9", "<<U1>      <int64> <int64> <int64>, <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>)"], "Frame.iter_window().apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).apply(lambda f: f.max().max())", "<Series>", "<Index>", "q        10", "r        9", "s        12", "<<U1>    <int64>"], "Frame.iter_window().apply_iter()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).apply_iter(lambda f: f.max().max()))", "(10, 9, 12)"], "Frame.iter_window().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).apply_iter_items(lambda f: f.max().max()))", "(('q', 10), ('r', 9), ('s', 12))"], "Frame.iter_window().reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).keys())", "(1, 2, 3)"], "Frame.iter_window().reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "(1, 2, 3)"], "Frame.iter_window().reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).items())", "((1, <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "1          4       8       1", "<int64>    <int64> <int64> <int64>), (2, <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "2          10      3       0", "<int64>    <int64> <int64> <int64>), (3, <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "3          2       8       1", "<int64>    <int64> <int64> <int64>))"], "Frame.iter_window().reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).values())", "(<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "1          4       8       1", "<int64>    <int64> <int64> <int64>, <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "2          10      3       0", "<int64>    <int64> <int64> <int64>, <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "3          2       8       1", "<int64>    <int64> <int64> <int64>)"], "Frame.iter_window().reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       8       1", "2       10      3       0", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "Frame.iter_window().reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_map_func(np.min).keys())", "(1, 2, 3)"], "Frame.iter_window().reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_map_func(np.min).__iter__())", "(1, 2, 3)"], "Frame.iter_window().reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_map_func(np.min).items())", "((1, <Series: 1>", "<Index>", "a           4", "b           0", "c           0", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "a           4", "b           3", "c           0", "<<U1>       <int64>), (3, <Series: 3>", "<Index>", "a           2", "b           3", "c           0", "<<U1>       <int64>))"], "Frame.iter_window().reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_map_func(np.min).values())", "(<Series: 1>", "<Index>", "a           4", "b           0", "c           0", "<<U1>       <int64>, <Series: 2>", "<Index>", "a           4", "b           3", "c           0", "<<U1>       <int64>, <Series: 3>", "<Index>", "a           2", "b           3", "c           0", "<<U1>       <int64>)"], "Frame.iter_window().reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       0       0", "2       4       3       0", "3       2       3       0", "<int64> <int64> <int64> <int64>"], "Frame.iter_window().reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(1, 2, 3)"], "Frame.iter_window().reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(1, 2, 3)"], "Frame.iter_window().reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((1, <Series: 1>", "<Index>", "b           0", "a           11", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>), (3, <Series: 3>", "<Index>", "b           3", "a           10", "<<U1>       <int64>))"], "Frame.iter_window().reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(<Series: 1>", "<Index>", "b           0", "a           11", "<<U1>       <int64>, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>, <Series: 3>", "<Index>", "b           3", "a           10", "<<U1>       <int64>)"], "Frame.iter_window().reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "1       0       11", "2       3       10", "3       3       10", "<int64> <int64> <int64>"], "Frame.iter_window().reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(1, 2, 3)"], "Frame.iter_window().reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(1, 2, 3)"], "Frame.iter_window().reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((1, <Series: 1>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>), (2, <Series: 2>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>), (3, <Series: 3>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>))"], "Frame.iter_window().reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: 1>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>, <Series: 2>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>, <Series: 3>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>)"], "Frame.iter_window().reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "1       0       8", "2       3       8", "3       3       8", "<int64> <int64> <int64>"], "Frame.iter_window_array()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1))", "(array([[10,  8,  1],", "       [-2, -3,  0]]), array([[-2, -3,  0],", "       [ 0,  8,  9]]), array([[ 0,  8,  9],", "       [ 0,  0, 12]]))"], "Frame.iter_window_array().apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).apply(lambda a: np.max(a))", "<Series>", "<Index>", "q        10", "r        9", "s        12", "<<U1>    <int64>"], "Frame.iter_window_array().apply_iter()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).apply_iter(lambda a: np.max(a)))", "(10, 9, 12)"], "Frame.iter_window_array().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).apply_iter_items(lambda a: np.max(a)))", "(('q', 10), ('r', 9), ('s', 12))"], "Frame.iter_window_array().reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).keys())", "(1, 2, 3)"], "Frame.iter_window_array().reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).__iter__())", "(1, 2, 3)"], "Frame.iter_window_array().reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).items())", "((1, array([15,  8,  1])), (2, array([14, 11,  1])), (3, array([12, 11,  1])))"], "Frame.iter_window_array().reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).values())", "(array([15,  8,  1]), array([14, 11,  1]), array([12, 11,  1]))"], "Frame.iter_window_array().reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       15", "1       8", "2       1", "3       14", "4       11", "5       1", "6       12", "7       11", "8       1", "<int64> <int64>"], "Frame.iter_window_array().reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).keys())", "(1, 2, 3)"], "Frame.iter_window_array().reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).__iter__())", "(1, 2, 3)"], "Frame.iter_window_array().reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).items())", "((1, array([4, 0, 0])), (2, array([4, 3, 0])), (3, array([2, 3, 0])))"], "Frame.iter_window_array().reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).values())", "(array([4, 0, 0]), array([4, 3, 0]), array([2, 3, 0]))"], "Frame.iter_window_array().reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       0       0", "2       4       3       0", "3       2       3       0", "<int64> <int64> <int64> <int64>"], "Frame.iter_window_array().reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(1, 2, 3)"], "Frame.iter_window_array().reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(1, 2, 3)"], "Frame.iter_window_array().reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((1, array([ 0, 11])), (2, array([ 3, 10])), (3, array([ 3, 10])))"], "Frame.iter_window_array().reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(array([ 0, 11]), array([ 3, 10]), array([ 3, 10]))"], "Frame.iter_window_array().reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "1       0       11", "2       3       10", "3       3       10", "<int64> <int64> <int64>"], "Frame.iter_window_array().reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(1, 2, 3)"], "Frame.iter_window_array().reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(1, 2, 3)"], "Frame.iter_window_array().reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((1, array([0, 8])), (2, array([3, 8])), (3, array([3, 8])))"], "Frame.iter_window_array().reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(array([0, 8]), array([3, 8]), array([3, 8]))"], "Frame.iter_window_array().reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "1       0       8", "2       3       8", "3       3       8", "<int64> <int64> <int64>"], "Frame.iter_window_array_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1))", "(('q', array([[10,  8,  1],", "       [-2, -3,  0]])), ('r', array([[-2, -3,  0],", "       [ 0,  8,  9]])), ('s', array([[ 0,  8,  9],", "       [ 0,  0, 12]])))"], "Frame.iter_window_array_items().apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).apply(lambda k, v: np.max(v) if k == 'r' else np.min(v))", "<Series>", "<Index>", "q        -3", "r        9", "s        0", "<<U1>    <int64>"], "Frame.iter_window_array_items().apply_iter()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter(lambda k, v: np.max(v) if k == 'r' else np.min(v)))", "(-3, 9, 0)"], "Frame.iter_window_array_items().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter_items(lambda k, v: np.max(v) if k == 'r' else np.min(v)))", "(('q', -3), ('r', 9), ('s', 0))"], "Frame.iter_window_array_items().reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).keys())", "(1, 2, 3)"], "Frame.iter_window_array_items().reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).__iter__())", "(1, 2, 3)"], "Frame.iter_window_array_items().reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).items())", "((1, array([15,  8,  1])), (2, array([14, 11,  1])), (3, array([12, 11,  1])))"], "Frame.iter_window_array_items().reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).values())", "(array([15,  8,  1]), array([14, 11,  1]), array([12, 11,  1]))"], "Frame.iter_window_array_items().reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       15", "1       8", "2       1", "3       14", "4       11", "5       1", "6       12", "7       11", "8       1", "<int64> <int64>"], "Frame.iter_window_array_items().reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).keys())", "(1, 2, 3)"], "Frame.iter_window_array_items().reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).__iter__())", "(1, 2, 3)"], "Frame.iter_window_array_items().reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).items())", "((1, array([4, 0, 0])), (2, array([4, 3, 0])), (3, array([2, 3, 0])))"], "Frame.iter_window_array_items().reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).values())", "(array([4, 0, 0]), array([4, 3, 0]), array([2, 3, 0]))"], "Frame.iter_window_array_items().reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       0       0", "2       4       3       0", "3       2       3       0", "<int64> <int64> <int64> <int64>"], "Frame.iter_window_array_items().reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).keys())", "(1, 2, 3)"], "Frame.iter_window_array_items().reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).__iter__())", "(1, 2, 3)"], "Frame.iter_window_array_items().reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).items())", "((1, array([ 0, 11])), (2, array([ 3, 10])), (3, array([ 3, 10])))"], "Frame.iter_window_array_items().reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).values())", "(array([ 0, 11]), array([ 3, 10]), array([ 3, 10]))"], "Frame.iter_window_array_items().reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "1       0       11", "2       3       10", "3       3       10", "<int64> <int64> <int64>"], "Frame.iter_window_array_items().reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).keys())", "(1, 2, 3)"], "Frame.iter_window_array_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).__iter__())", "(1, 2, 3)"], "Frame.iter_window_array_items().reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).items())", "((1, array([0, 8])), (2, array([3, 8])), (3, array([3, 8])))"], "Frame.iter_window_array_items().reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).values())", "(array([0, 8]), array([3, 8]), array([3, 8]))"], "Frame.iter_window_array_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "1       0       8", "2       3       8", "3       3       8", "<int64> <int64> <int64>"], "Frame.iter_window_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1))", "(('q', <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "<<U1>      <int64> <int64> <int64>), ('r', <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "q          -2      -3      0", "r          0       8       9", "<<U1>      <int64> <int64> <int64>), ('s', <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>))"], "Frame.iter_window_items().apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).apply(lambda k, v: v.max().max() if k == 'r' else v.min().min())", "<Series>", "<Index>", "q        -3", "r        9", "s        0", "<<U1>    <int64>"], "Frame.iter_window_items().apply_iter()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).apply_iter(lambda k, v: v.max().max() if k == 'r' else v.min().min()))", "(-3, 9, 0)"], "Frame.iter_window_items().apply_iter_items()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).apply_iter_items(lambda k, v: v.max().max() if k == 'r' else v.min().min()))", "(('q', -3), ('r', 9), ('s', 0))"], "Frame.iter_window_items().reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).keys())", "(1, 2, 3)"], "Frame.iter_window_items().reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).__iter__())", "(1, 2, 3)"], "Frame.iter_window_items().reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).items())", "((1, <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "1          4       8       1", "<int64>    <int64> <int64> <int64>), (2, <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "2          10      3       0", "<int64>    <int64> <int64> <int64>), (3, <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "3          2       8       1", "<int64>    <int64> <int64> <int64>))"], "Frame.iter_window_items().reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).values())", "(<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "1          4       8       1", "<int64>    <int64> <int64> <int64>, <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "2          10      3       0", "<int64>    <int64> <int64> <int64>, <Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "3          2       8       1", "<int64>    <int64> <int64> <int64>)"], "Frame.iter_window_items().reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       8       1", "2       10      3       0", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "Frame.iter_window_items().reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).keys())", "(1, 2, 3)"], "Frame.iter_window_items().reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).__iter__())", "(1, 2, 3)"], "Frame.iter_window_items().reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).items())", "((1, <Series: 1>", "<Index>", "a           4", "b           0", "c           0", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "a           4", "b           3", "c           0", "<<U1>       <int64>), (3, <Series: 3>", "<Index>", "a           2", "b           3", "c           0", "<<U1>       <int64>))"], "Frame.iter_window_items().reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).values())", "(<Series: 1>", "<Index>", "a           4", "b           0", "c           0", "<<U1>       <int64>, <Series: 2>", "<Index>", "a           4", "b           3", "c           0", "<<U1>       <int64>, <Series: 3>", "<Index>", "a           2", "b           3", "c           0", "<<U1>       <int64>)"], "Frame.iter_window_items().reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       0       0", "2       4       3       0", "3       2       3       0", "<int64> <int64> <int64> <int64>"], "Frame.iter_window_items().reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).keys())", "(1, 2, 3)"], "Frame.iter_window_items().reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).__iter__())", "(1, 2, 3)"], "Frame.iter_window_items().reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).items())", "((1, <Series: 1>", "<Index>", "b           0", "a           11", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>), (3, <Series: 3>", "<Index>", "b           3", "a           10", "<<U1>       <int64>))"], "Frame.iter_window_items().reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).values())", "(<Series: 1>", "<Index>", "b           0", "a           11", "<<U1>       <int64>, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>, <Series: 3>", "<Index>", "b           3", "a           10", "<<U1>       <int64>)"], "Frame.iter_window_items().reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "1       0       11", "2       3       10", "3       3       10", "<int64> <int64> <int64>"], "Frame.iter_window_items().reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).keys())", "(1, 2, 3)"], "Frame.iter_window_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).__iter__())", "(1, 2, 3)"], "Frame.iter_window_items().reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).items())", "((1, <Series: 1>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>), (2, <Series: 2>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>), (3, <Series: 3>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>))"], "Frame.iter_window_items().reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).values())", "(<Series: 1>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>, <Series: 2>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>, <Series: 3>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>)"], "Frame.iter_window_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "0          11      0       0", "1          4       8       1", "2          10      3       0", "3          2       8       1", "<int64>    <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "1       0       8", "2       3       8", "3       3       8", "<int64> <int64> <int64>"], "Frame.__add__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 + 8", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          18      16      9", "q          6       5       8", "r          8       16      17", "s          8       8       20", "<<U1>      <int64> <int64> <int64>", ">>> f1 + f2", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       12.0      11.0      nan", "q       7.0       5.0       nan", "r       nan       nan       nan", "s       nan       nan       nan", "<<U1>   <float64> <float64> <float64>"], "Frame.__and__()": [">>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  True", "q          True   True", "r          True   False", "<<U1>      <bool> <bool>", ">>> f & True", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  True", "q          True   True", "r          True   False", "<<U1>      <bool> <bool>", ">>> f & (True, False)", "<Frame>", "<Index> a      b      <<U1>", "<Index>", "p       False  False", "q       True   False", "r       True   False", "<<U1>   <bool> <bool>"], "Frame.__eq__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 == 8", "<Frame: x>", "<Index>    a      b      c      <<U1>", "<Index>", "p          False  True   False", "q          False  False  False", "r          False  True   False", "s          False  False  False", "<<U1>      <bool> <bool> <bool>", ">>> f1 == f2", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  False  False", "q       False  False  False", "r       False  False  False", "s       False  False  False", "<<U1>   <bool> <bool> <bool>"], "Frame.__floordiv__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 // 8", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       1       0", "q          -1      -1      0", "r          0       1       1", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> f1 // f2", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       5.0       2.0       nan", "q       -1.0      -1.0      nan", "r       nan       nan       nan", "s       nan       nan       nan", "<<U1>   <float64> <float64> <float64>"], "Frame.__ge__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 >= 8", "<Frame: x>", "<Index>    a      b      c      <<U1>", "<Index>", "p          True   True   False", "q          False  False  False", "r          False  True   True", "s          False  False  True", "<<U1>      <bool> <bool> <bool>", ">>> f1 >= f2", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       True   True   False", "q       False  False  False", "r       False  False  False", "s       False  False  False", "<<U1>   <bool> <bool> <bool>"], "Frame.__gt__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 > 8", "<Frame: x>", "<Index>    a      b      c      <<U1>", "<Index>", "p          True   False  False", "q          False  False  False", "r          False  False  True", "s          False  False  True", "<<U1>      <bool> <bool> <bool>", ">>> f1 > f2", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       True   True   False", "q       False  False  False", "r       False  False  False", "s       False  False  False", "<<U1>   <bool> <bool> <bool>"], "Frame.__le__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 <= 8", "<Frame: x>", "<Index>    a      b      c      <<U1>", "<Index>", "p          False  True   True", "q          True   True   True", "r          True   True   False", "s          True   True   False", "<<U1>      <bool> <bool> <bool>", ">>> f1 <= f2", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  False  False", "q       True   True   False", "r       False  False  False", "s       False  False  False", "<<U1>   <bool> <bool> <bool>"], "Frame.__lt__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 < 8", "<Frame: x>", "<Index>    a      b      c      <<U1>", "<Index>", "p          False  False  True", "q          True   True   True", "r          True   False  False", "s          True   True   False", "<<U1>      <bool> <bool> <bool>", ">>> f1 < f2", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  False  False", "q       True   True   False", "r       False  False  False", "s       False  False  False", "<<U1>   <bool> <bool> <bool>"], "Frame.__matmul__()": [">>> f1 = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f1 @ f2", "<Frame>", "<Index> x       y       <<U1>", "<Index>", "p       23      14", "q       6       4", "r       40      24", "s       20      12", "<<U1>   <int64> <int64>"], "Frame.__mod__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 % 8", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          2       0       1", "q          6       5       0", "r          0       0       1", "s          0       0       4", "<<U1>      <int64> <int64> <int64>", ">>> f1 % f2", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       0.0       2.0       nan", "q       7.0       5.0       nan", "r       nan       nan       nan", "s       nan       nan       nan", "<<U1>   <float64> <float64> <float64>"], "Frame.__mul__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 * 8", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          80      64      8", "q          -16     -24     0", "r          0       64      72", "s          0       0       96", "<<U1>      <int64> <int64> <int64>", ">>> f1 * f2", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       20.0      24.0      nan", "q       -18.0     -24.0     nan", "r       nan       nan       nan", "s       nan       nan       nan", "<<U1>   <float64> <float64> <float64>"], "Frame.__ne__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 != 8", "<Frame: x>", "<Index>    a      b      c      <<U1>", "<Index>", "p          True   False  True", "q          True   True   True", "r          True   False  True", "s          True   True   True", "<<U1>      <bool> <bool> <bool>", ">>> f1 != f2", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       True   True   True", "q       True   True   True", "r       True   True   True", "s       True   True   True", "<<U1>   <bool> <bool> <bool>"], "Frame.__or__()": [">>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  True", "q          True   True", "r          True   False", "<<U1>      <bool> <bool>", ">>> f | True", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          True   True", "q          True   True", "r          True   True", "<<U1>      <bool> <bool>", ">>> f | (True, False)", "<Frame>", "<Index> a      b      <<U1>", "<Index>", "p       True   True", "q       True   True", "r       True   False", "<<U1>   <bool> <bool>"], "Frame.__pow__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 ** 8", "<Frame: x>", "<Index>    a         b        c         <<U1>", "<Index>", "p          100000000 16777216 1", "q          256       6561     0", "r          0         16777216 43046721", "s          0         0        429981696", "<<U1>      <int64>   <int64>  <int64>", ">>> f1 ** f2", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       100.0     512.0     1.0", "q       -512.0    6561.0    nan", "r       nan       nan       nan", "s       nan       nan       nan", "<<U1>   <float64> <float64> <float64>"], "Frame.__radd__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> 8 + f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          18      16      9", "q          6       5       8", "r          8       16      17", "s          8       8       20", "<<U1>      <int64> <int64> <int64>"], "Frame.__rfloordiv__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> 8 // f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          0       1       8", "q          -4      -3      0", "r          0       1       0", "s          0       0       0", "<<U1>      <int64> <int64> <int64>"], "Frame.__rmatmul__()": [">>> f1 = sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          1       2       1", "q          2       1       0", "r          0       2       2", "s          0       0       1", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f1 @ f2", "<Frame>", "<Index> x       y       <<U1>", "<Index>", "p       23      14", "q       6       4", "r       40      24", "s       20      12", "<<U1>   <int64> <int64>"], "Frame.__rmul__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> 8 * f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          80      64      8", "q          -16     -24     0", "r          0       64      72", "s          0       0       96", "<<U1>      <int64> <int64> <int64>"], "Frame.__rshift__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f1 >> 1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          5       4       0", "q          -1      -2      0", "r          0       4       4", "s          0       0       6", "<<U1>      <int64> <int64> <int64>"], "Frame.__rsub__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> 8 - f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          -2      0       7", "q          10      11      8", "r          8       0       -1", "s          8       8       -4", "<<U1>      <int64> <int64> <int64>"], "Frame.__rtruediv__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> 8 / f1", "<Frame: x>", "<Index>    a         b                   c                  <<U1>", "<Index>", "p          0.8       1.0                 8.0", "q          -4.0      -2.6666666666666665 inf", "r          inf       1.0                 0.8888888888888888", "s          inf       inf                 0.6666666666666666", "<<U1>      <float64> <float64>           <float64>"], "Frame.__sub__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 - 8", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          2       0       -7", "q          -10     -11     -8", "r          -8      0       1", "s          -8      -8      4", "<<U1>      <int64> <int64> <int64>", ">>> f1 - f2", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       8.0       5.0       nan", "q       -11.0     -11.0     nan", "r       nan       nan       nan", "s       nan       nan       nan", "<<U1>   <float64> <float64> <float64>"], "Frame.__truediv__()": [">>> f1 = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> f1 / 8", "<Frame: x>", "<Index>    a         b         c         <<U1>", "<Index>", "p          1.25      1.0       0.125", "q          -0.25     -0.375    0.0", "r          0.0       1.0       1.125", "s          0.0       0.0       1.5", "<<U1>      <float64> <float64> <float64>", ">>> f1 / f2", "<Frame>", "<Index> a                   b                  c         <<U1>", "<Index>", "p       5.0                 2.6666666666666665 nan", "q       -0.2222222222222222 -0.375             nan", "r       nan                 nan                nan", "s       nan                 nan                nan", "<<U1>   <float64>           <float64>          <float64>"], "Frame.__xor__()": [">>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  True", "q          True   True", "r          True   False", "<<U1>      <bool> <bool>", ">>> f ^ True", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          True   False", "q          False  False", "r          False  True", "<<U1>      <bool> <bool>", ">>> f ^ (True, False)", "<Frame>", "<Index> a      b      <<U1>", "<Index>", "p       True   True", "q       False  True", "r       False  False", "<<U1>   <bool> <bool>"], "Frame.__abs__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> abs(f)", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          2       3       0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>"], "Frame.__invert__()": [">>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  True", "q          True   True", "r          True   False", "<<U1>      <bool> <bool>", ">>> ~f", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          True   False", "q          False  False", "r          False  True", "<<U1>      <bool> <bool>"], "Frame.__neg__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> -f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          -10     -8      -1", "q          2       3       0", "r          0       -8      -9", "s          0       0       -12", "<<U1>      <int64> <int64> <int64>"], "Frame.__pos__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> +f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>"], "Frame.abs()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.abs()", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          2       3       0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>"], "Frame.via_dt.__call__()": [">>> f = sf.Frame.from_fields((('1620-04-01', '', '1620-06-30'), ('1976-04-01', '1954-12-31', '')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1620-04-01      1976-04-01", "q       NaT             1954-12-31", "r       1620-06-30      NaT", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt(fill_value=-1).year", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       1620    1976", "q       -1      1954", "r       1620    -1", "<<U1>   <int64> <int64>"], "Frame.via_dt.year": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.year", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       1517    2022", "q       1517    2021", "r       1517    2022", "<<U1>   <int64> <int64>"], "Frame.via_dt.year_month": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.year_month", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       1517-04 2022-04", "q       1517-12 2021-12", "r       1517-06 2022-06", "<<U1>   <<U7>   <<U7>"], "Frame.via_dt.year_quarter": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.year_quarter", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       1517-Q2 2022-Q2", "q       1517-Q4 2021-Q4", "r       1517-Q2 2022-Q2", "<<U1>   <<U7>   <<U7>"], "Frame.via_dt.month": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.month", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       4       4", "q       12      12", "r       6       6", "<<U1>   <int64> <int64>"], "Frame.via_dt.day": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.day", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       1       1", "q       31      31", "r       30      30", "<<U1>   <int64> <int64>"], "Frame.via_dt.hour": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.hour", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       0       0", "q       0       0", "r       0       0", "<<U1>   <int64> <int64>"], "Frame.via_dt.minute": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.minute", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       0       0", "q       0       0", "r       0       0", "<<U1>   <int64> <int64>"], "Frame.via_dt.second": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.second", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       0       0", "q       0       0", "r       0       0", "<<U1>   <int64> <int64>"], "Frame.via_dt.weekday()": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.weekday()", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       6       4", "q       0       4", "r       5       3", "<<U1>   <int64> <int64>"], "Frame.via_dt.quarter()": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.quarter()", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "p       2       2", "q       4       4", "r       2       2", "<<U1>   <int64> <int64>"], "Frame.via_dt.is_month_end()": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_month_end()", "<Frame>", "<Index> a      b      <<U1>", "<Index>", "p       False  False", "q       True   True", "r       True   True", "<<U1>   <bool> <bool>"], "Frame.via_dt.is_month_start()": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_month_start()", "<Frame>", "<Index> a      b      <<U1>", "<Index>", "p       True   True", "q       False  False", "r       False  False", "<<U1>   <bool> <bool>"], "Frame.via_dt.is_year_end()": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_year_end()", "<Frame>", "<Index> a      b      <<U1>", "<Index>", "p       False  False", "q       True   True", "r       False  False", "<<U1>   <bool> <bool>"], "Frame.via_dt.is_year_start()": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_year_start()", "<Frame>", "<Index> a      b      <<U1>", "<Index>", "p       False  False", "q       False  False", "r       False  False", "<<U1>   <bool> <bool>"], "Frame.via_dt.is_quarter_end()": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_quarter_end()", "<Frame>", "<Index> a      b      <<U1>", "<Index>", "p       False  False", "q       True   True", "r       True   True", "<<U1>   <bool> <bool>"], "Frame.via_dt.is_quarter_start()": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_quarter_start()", "<Frame>", "<Index> a      b      <<U1>", "<Index>", "p       True   True", "q       False  False", "r       False  False", "<<U1>   <bool> <bool>"], "Frame.via_dt.timetuple()": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.timetuple()", "<Frame>", "<Index> a                    b                    <<U1>", "<Index>", "p       time.struct_time(... time.struct_time(...", "q       time.struct_time(... time.struct_time(...", "r       time.struct_time(... time.struct_time(...", "<<U1>   <object>             <object>"], "Frame.via_dt.isoformat()": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.isoformat()", "<Frame>", "<Index> a          b          <<U1>", "<Index>", "p       1517-04-01 2022-04-01", "q       1517-12-31 2021-12-31", "r       1517-06-30 2022-06-30", "<<U1>   <<U10>     <<U10>"], "Frame.via_dt.fromisoformat()": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'))", ">>> f", "<Frame>", "<Index> a          b          <<U1>", "<Index>", "p       1517-04-01 2022-04-01", "q       1517-12-31 2021-12-31", "r       1517-06-30 2022-06-30", "<<U1>   <<U10>     <<U10>", ">>> f.via_dt.fromisoformat()", "<Frame>", "<Index> a          b          <<U1>", "<Index>", "p       1517-04-01 2022-04-01", "q       1517-12-31 2021-12-31", "r       1517-06-30 2022-06-30", "<<U1>   <object>   <object>"], "Frame.via_dt.strftime()": [">>> f = sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<Frame>", "<Index> a               b               <<U1>", "<Index>", "p       1517-04-01      2022-04-01", "q       1517-12-31      2021-12-31", "r       1517-06-30      2022-06-30", "<<U1>   <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.strftime(\"%A | %B\")", "<Frame>", "<Index> a                 b                 <<U1>", "<Index>", "p       Sunday | April    Friday | April", "q       Monday | December Friday | December", "r       Saturday | June   Thursday | June", "<<U1>   <<U17>            <<U17>"], "Frame.via_dt.strptime()": [">>> f = sf.Frame.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))", ">>> f", "<Frame>", "<Index> a          b          <<U1>", "<Index>", "p       4/1/1517   4/1/2022", "q       12/31/1517 12/31/2021", "r       6/30/1517  6/30/2022", "<<U1>   <<U10>     <<U10>", ">>> f.via_dt.strptime(\"%m/%d/%Y\")", "<Frame>", "<Index> a                   b                   <<U1>", "<Index>", "p       1517-04-01 00:00:00 2022-04-01 00:00:00", "q       1517-12-31 00:00:00 2021-12-31 00:00:00", "r       1517-06-30 00:00:00 2022-06-30 00:00:00", "<<U1>   <object>            <object>"], "Frame.via_dt.strpdate()": [">>> f = sf.Frame.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))", ">>> f", "<Frame>", "<Index> a          b          <<U1>", "<Index>", "p       4/1/1517   4/1/2022", "q       12/31/1517 12/31/2021", "r       6/30/1517  6/30/2022", "<<U1>   <<U10>     <<U10>", ">>> f.via_dt.strpdate(\"%m/%d/%Y\")", "<Frame>", "<Index> a          b          <<U1>", "<Index>", "p       1517-04-01 2022-04-01", "q       1517-12-31 2021-12-31", "r       1517-06-30 2022-06-30", "<<U1>   <object>   <object>"], "Frame.via_str.__getitem__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str[-1]", "<Frame: x>", "<Index>    a     b     <<U1>", "<Index>", "p          0", "q          2     Z", "r          8     3", "s          3", "<<U1>      <<U1> <<U1>"], "Frame.via_str.capitalize()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.capitalize()", "<Frame: x>", "<Index>    a      b     <<U1>", "<Index>", "p          10     Qrs", "q          2      Xyz", "r          8      123", "s          3       wx", "<<U1>      <<U21> <<U4>"], "Frame.via_str.center()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.center(8)", "<Frame: x>", "<Index>    a        b        <<U1>", "<Index>", "p             10      qrs", "q             2       XYZ", "r             8       123", "s             3        wX", "<<U1>      <<U8>    <<U8>"], "Frame.via_str.contains()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.contains('X')", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  False", "q          False  True", "r          False  False", "s          False  True", "<<U1>      <bool> <bool>"], "Frame.via_str.count()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.count('X')", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       0", "q          0       1", "r          0       0", "s          0       1", "<<U1>      <int64> <int64>"], "Frame.via_str.decode()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x').astype(bytes)", ">>> f", "<Frame: x>", "<Index>    a      b       <<U1>", "<Index>", "p          b'10'  b'qrs '", "q          b'2'   b'XYZ'", "r          b'8'   b'123'", "s          b'3'   b' wX '", "<<U1>      <|S21> <|S4>", ">>> f.via_str.decode()", "<Frame: x>", "<Index>    a     b     <<U1>", "<Index>", "p          10    qrs", "q          2     XYZ", "r          8     123", "s          3      wX", "<<U1>      <<U2> <<U4>"], "Frame.via_str.encode()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.encode()", "<Frame: x>", "<Index>    a     b       <<U1>", "<Index>", "p          b'10' b'qrs '", "q          b'2'  b'XYZ'", "r          b'8'  b'123'", "s          b'3'  b' wX '", "<<U1>      <|S2> <|S4>"], "Frame.via_str.endswith()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.endswith(' ')", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  True", "q          False  False", "r          False  False", "s          False  True", "<<U1>      <bool> <bool>"], "Frame.via_str.find()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.find('X')", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          -1      -1", "q          -1      0", "r          -1      -1", "s          -1      2", "<<U1>      <int64> <int64>"], "Frame.via_str.format()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.format('{:-^10}')", "<Frame: x>", "<Index>    a          b          <<U1>", "<Index>", "p          ----10---- ---qrs ---", "q          ----2----- ---XYZ----", "r          ----8----- ---123----", "s          ----3----- --- wX ---", "<<U1>      <<U10>     <<U10>"], "Frame.via_str.index()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.index('X')", "ValueError('substring not found')"], "Frame.via_str.isalnum()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.isalnum()", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          True   False", "q          True   True", "r          True   True", "s          True   False", "<<U1>      <bool> <bool>"], "Frame.via_str.isalpha()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.isalpha()", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  False", "q          False  True", "r          False  False", "s          False  False", "<<U1>      <bool> <bool>"], "Frame.via_str.isdecimal()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.isdecimal()", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          True   False", "q          True   False", "r          True   True", "s          True   False", "<<U1>      <bool> <bool>"], "Frame.via_str.isdigit()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.isdigit()", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          True   False", "q          True   False", "r          True   True", "s          True   False", "<<U1>      <bool> <bool>"], "Frame.via_str.islower()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.islower()", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  True", "q          False  False", "r          False  False", "s          False  False", "<<U1>      <bool> <bool>"], "Frame.via_str.isnumeric()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.isnumeric()", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          True   False", "q          True   False", "r          True   True", "s          True   False", "<<U1>      <bool> <bool>"], "Frame.via_str.isspace()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.isspace()", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  False", "q          False  False", "r          False  False", "s          False  False", "<<U1>      <bool> <bool>"], "Frame.via_str.istitle()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.istitle()", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  False", "q          False  False", "r          False  False", "s          False  False", "<<U1>      <bool> <bool>"], "Frame.via_str.isupper()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.isupper()", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  False", "q          False  True", "r          False  False", "s          False  False", "<<U1>      <bool> <bool>"], "Frame.via_str.ljust()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.ljust(8)", "<Frame: x>", "<Index>    a        b        <<U1>", "<Index>", "p          10       qrs", "q          2        XYZ", "r          8        123", "s          3         wX", "<<U1>      <<U8>    <<U8>"], "Frame.via_str.len()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.len()", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       4", "q          1       3", "r          1       3", "s          1       4", "<<U1>      <int64> <int64>"], "Frame.via_str.lower()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.lower()", "<Frame: x>", "<Index>    a      b     <<U1>", "<Index>", "p          10     qrs", "q          2      xyz", "r          8      123", "s          3       wx", "<<U1>      <<U21> <<U4>"], "Frame.via_str.lstrip()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.lstrip()", "<Frame: x>", "<Index>    a      b     <<U1>", "<Index>", "p          10     qrs", "q          2      XYZ", "r          8      123", "s          3      wX", "<<U1>      <<U21> <<U4>"], "Frame.via_str.partition()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.partition('X')", "<Frame: x>", "<Index>    a              b                <<U1>", "<Index>", "p          ('10', '', '') ('qrs ', '', '')", "q          ('2', '', '')  ('', 'X', 'YZ')", "r          ('8', '', '')  ('123', '', '')", "s          ('3', '', '')  (' w', 'X', ' ')", "<<U1>      <object>       <object>"], "Frame.via_str.replace()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.replace('X', '*')", "<Frame: x>", "<Index>    a     b     <<U1>", "<Index>", "p          10    qrs", "q          2     *YZ", "r          8     123", "s          3      w*", "<<U1>      <<U2> <<U4>"], "Frame.via_str.rfind()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.rfind('X')", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          -1      -1", "q          -1      0", "r          -1      -1", "s          -1      2", "<<U1>      <int64> <int64>"], "Frame.via_str.rindex()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.rindex('X')", "ValueError('substring not found')"], "Frame.via_str.rjust()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.rjust(8)", "<Frame: x>", "<Index>    a        b        <<U1>", "<Index>", "p                10     qrs", "q                 2      XYZ", "r                 8      123", "s                 3      wX", "<<U1>      <<U8>    <<U8>"], "Frame.via_str.rpartition()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.rpartition('X')", "<Frame: x>", "<Index>    a              b                <<U1>", "<Index>", "p          ('', '', '10') ('', '', 'qrs ')", "q          ('', '', '2')  ('', 'X', 'YZ')", "r          ('', '', '8')  ('', '', '123')", "s          ('', '', '3')  (' w', 'X', ' ')", "<<U1>      <object>       <object>"], "Frame.via_str.rsplit()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.rsplit('X')", "<Frame: x>", "<Index>    a        b           <<U1>", "<Index>", "p          ('10',)  ('qrs ',)", "q          ('2',)   ('', 'YZ')", "r          ('8',)   ('123',)", "s          ('3',)   (' w', ' ')", "<<U1>      <object> <object>"], "Frame.via_str.rstrip()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.rstrip()", "<Frame: x>", "<Index>    a      b     <<U1>", "<Index>", "p          10     qrs", "q          2      XYZ", "r          8      123", "s          3       wX", "<<U1>      <<U21> <<U4>"], "Frame.via_str.split()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.split('X')", "<Frame: x>", "<Index>    a        b           <<U1>", "<Index>", "p          ('10',)  ('qrs ',)", "q          ('2',)   ('', 'YZ')", "r          ('8',)   ('123',)", "s          ('3',)   (' w', ' ')", "<<U1>      <object> <object>"], "Frame.via_str.startswith()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.startswith('X')", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  False", "q          False  True", "r          False  False", "s          False  False", "<<U1>      <bool> <bool>"], "Frame.via_str.strip()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.strip()", "<Frame: x>", "<Index>    a      b     <<U1>", "<Index>", "p          10     qrs", "q          2      XYZ", "r          8      123", "s          3      wX", "<<U1>      <<U21> <<U4>"], "Frame.via_str.swapcase()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.swapcase()", "<Frame: x>", "<Index>    a      b     <<U1>", "<Index>", "p          10     QRS", "q          2      xyz", "r          8      123", "s          3       Wx", "<<U1>      <<U21> <<U4>"], "Frame.via_str.title()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.title()", "<Frame: x>", "<Index>    a      b     <<U1>", "<Index>", "p          10     Qrs", "q          2      Xyz", "r          8      123", "s          3       Wx", "<<U1>      <<U21> <<U4>"], "Frame.via_str.upper()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.upper()", "<Frame: x>", "<Index>    a      b     <<U1>", "<Index>", "p          10     QRS", "q          2      XYZ", "r          8      123", "s          3       WX", "<<U1>      <<U21> <<U4>"], "Frame.via_str.zfill()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>", ">>> f.via_str.zfill(8)", "<Frame: x>", "<Index>    a        b        <<U1>", "<Index>", "p          00000010 0000qrs", "q          00000002 00000XYZ", "r          00000008 00000123", "s          00000003 0000 wX", "<<U1>      <<U8>    <<U8>"], "Frame.via_T.via_fill_value()": [">>> "], "Frame.via_T.__add__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T + s", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       10.0      8.0       1.0", "q       -4.0      -5.0      -2.0", "r       0.5       8.5       9.5", "s       1.0       1.0       13.0", "<<U1>   <float64> <float64> <float64>"], "Frame.via_T.__sub__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T - s", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       10.0      8.0       1.0", "q       0.0       -1.0      2.0", "r       -0.5      7.5       8.5", "s       -1.0      -1.0      11.0", "<<U1>   <float64> <float64> <float64>"], "Frame.via_T.__mul__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T * s", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       0.0       0.0       0.0", "q       4.0       6.0       -0.0", "r       0.0       4.0       4.5", "s       0.0       0.0       12.0", "<<U1>   <float64> <float64> <float64>"], "Frame.via_T.__truediv__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T / s", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       inf       inf       inf", "q       1.0       1.5       -0.0", "r       0.0       16.0      18.0", "s       0.0       0.0       12.0", "<<U1>   <float64> <float64> <float64>"], "Frame.via_T.__floordiv__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T // s", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       inf       inf       inf", "q       1.0       1.0       -0.0", "r       0.0       16.0      18.0", "s       0.0       0.0       12.0", "<<U1>   <float64> <float64> <float64>"], "Frame.via_T.__mod__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T % s", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       nan       nan       nan", "q       -0.0      -1.0      -0.0", "r       0.0       0.0       0.0", "s       0.0       0.0       0.0", "<<U1>   <float64> <float64> <float64>"], "Frame.via_T.__pow__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T ** s", "<Frame>", "<Index> a         b                  c         <<U1>", "<Index>", "p       1.0       1.0                1.0", "q       0.25      0.1111111111111111 inf", "r       0.0       2.8284271247461903 3.0", "s       0.0       0.0                12.0", "<<U1>   <float64> <float64>          <float64>"], "Frame.via_T.__lshift__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0", "q        -2", "r        3", "s        1", "<<U1>    <int64>", ">>> f.via_T << s", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "p       10      8       1", "q       0       0       0", "r       0       64      72", "s       0       0       24", "<<U1>   <int64> <int64> <int64>"], "Frame.via_T.__rshift__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0", "q        -2", "r        3", "s        1", "<<U1>    <int64>", ">>> f.via_T >> s", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "p       10      8       1", "q       -1      -1      0", "r       0       1       1", "s       0       0       6", "<<U1>   <int64> <int64> <int64>"], "Frame.via_T.__and__()": [">>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  True", "q          True   True", "r          True   False", "<<U1>      <bool> <bool>", ">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> f.via_T & s", "<Frame>", "<Index> a      b      <<U1>", "<Index>", "p       False  False", "q       True   True", "r       True   False", "<<U1>   <bool> <bool>"], "Frame.via_T.__xor__()": [">>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  True", "q          True   True", "r          True   False", "<<U1>      <bool> <bool>", ">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> f.via_T ^ s", "<Frame>", "<Index> a      b      <<U1>", "<Index>", "p       False  True", "q       False  False", "r       False  True", "<<U1>   <bool> <bool>"], "Frame.via_T.__or__()": [">>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<Frame: x>", "<Index>    a      b      <<U1>", "<Index>", "p          False  True", "q          True   True", "r          True   False", "<<U1>      <bool> <bool>", ">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> f.via_T | s", "<Frame>", "<Index> a      b      <<U1>", "<Index>", "p       False  True", "q       True   True", "r       True   True", "<<U1>   <bool> <bool>"], "Frame.via_T.__lt__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T < s", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  False  False", "q       False  True   False", "r       True   False  False", "s       True   True   False", "<<U1>   <bool> <bool> <bool>"], "Frame.via_T.__le__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T <= s", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  False  False", "q       True   True   False", "r       True   False  False", "s       True   True   False", "<<U1>   <bool> <bool> <bool>"], "Frame.via_T.__eq__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T == s", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       False  False  False", "q       True   False  False", "r       False  False  False", "s       False  False  False", "<<U1>   <bool> <bool> <bool>"], "Frame.via_T.__ne__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T != s", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       True   True   True", "q       False  True   True", "r       True   True   True", "s       True   True   True", "<<U1>   <bool> <bool> <bool>"], "Frame.via_T.__gt__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T > s", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       True   True   True", "q       False  False  True", "r       False  True   True", "s       False  False  True", "<<U1>   <bool> <bool> <bool>"], "Frame.via_T.__ge__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T >= s", "<Frame>", "<Index> a      b      c      <<U1>", "<Index>", "p       True   True   True", "q       True   False  True", "r       False  True   True", "s       False  False  True", "<<U1>   <bool> <bool> <bool>"], "Frame.via_T.__radd__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T + s", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       10.0      8.0       1.0", "q       -4.0      -5.0      -2.0", "r       0.5       8.5       9.5", "s       1.0       1.0       13.0", "<<U1>   <float64> <float64> <float64>"], "Frame.via_T.__rsub__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T - s", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       10.0      8.0       1.0", "q       0.0       -1.0      2.0", "r       -0.5      7.5       8.5", "s       -1.0      -1.0      11.0", "<<U1>   <float64> <float64> <float64>"], "Frame.via_T.__rmul__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T * s", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       0.0       0.0       0.0", "q       4.0       6.0       -0.0", "r       0.0       4.0       4.5", "s       0.0       0.0       12.0", "<<U1>   <float64> <float64> <float64>"], "Frame.via_T.__rtruediv__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T / s", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       inf       inf       inf", "q       1.0       1.5       -0.0", "r       0.0       16.0      18.0", "s       0.0       0.0       12.0", "<<U1>   <float64> <float64> <float64>"], "Frame.via_T.__rfloordiv__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T // s", "<Frame>", "<Index> a         b         c         <<U1>", "<Index>", "p       inf       inf       inf", "q       1.0       1.0       -0.0", "r       0.0       16.0      18.0", "s       0.0       0.0       12.0", "<<U1>   <float64> <float64> <float64>"], "Frame.via_fill_value().loc": [">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f.via_fill_value(-1).loc[['a', 'b', 'd']]", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "d          -1      -1", "<<U1>      <int64> <int64>"], "Frame.via_fill_value().__getitem__()": [">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f.via_fill_value(-1)[['z', 'x']]", "<Frame: y>", "<Index>    z       x       <<U1>", "<Index>", "a          -1      3", "b          -1      0", "c          -1      20", "<<U1>      <int64> <int64>"], "Frame.via_fill_value().via_T": [">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> s = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> f.via_fill_value(-1).via_T * s", "<Frame>", "<Index> x       y       <<U1>", "<Index>", "a       -3      -2", "b       0       0", "c       160     96", "d       -19     -19", "<<U1>   <int64> <int64>"], "Frame.via_fill_value().__add__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) + f2", "<Frame>", "<Index> x       y       <<U1>", "<Index>", "a       3       2", "b       2       3", "c       24      26", "<<U1>   <int64> <int64>"], "Frame.via_fill_value().__sub__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) - f2", "<Frame>", "<Index> x       y       <<U1>", "<Index>", "a       3       2", "b       -2      -3", "c       16      -2", "<<U1>   <int64> <int64>"], "Frame.via_fill_value().__mul__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) * f2", "<Frame>", "<Index> x       y       <<U1>", "<Index>", "a       0       0", "b       0       0", "c       80      168", "<<U1>   <int64> <int64>"], "Frame.via_fill_value().__truediv__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) / f2", "<Frame>", "<Index> x         y                  <<U1>", "<Index>", "a       inf       inf", "b       0.0       0.0", "c       5.0       0.8571428571428571", "<<U1>   <float64> <float64>"], "Frame.via_fill_value().__floordiv__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) // f2", "<Frame>", "<Index> x       y       <<U1>", "<Index>", "a       0       0", "b       0       0", "c       5       0", "<<U1>   <int64> <int64>"], "Frame.via_fill_value().__mod__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) % f2", "<Frame>", "<Index> x       y       <<U1>", "<Index>", "a       0       0", "b       0       0", "c       0       12", "<<U1>   <int64> <int64>"], "Frame.via_fill_value().__pow__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) ** f2", "<Frame>", "<Index> x       y                <<U1>", "<Index>", "a       1       1", "b       0       0", "c       160000  1283918464548864", "<<U1>   <int64> <int64>"], "Frame.via_fill_value().__lshift__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          0       2", "c          1       1", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) << f2", "<Frame>", "<Index> x       y       <<U1>", "<Index>", "a       3       2", "b       0       0", "c       40      24", "<<U1>   <int64> <int64>"], "Frame.via_fill_value().__rshift__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          0       2", "c          1       1", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) >> f2", "<Frame>", "<Index> x       y       <<U1>", "<Index>", "a       3       2", "b       0       0", "c       10      6", "<<U1>   <int64> <int64>"], "Frame.via_fill_value().__and__()": [">>> f1 = sf.Frame.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x      y      <<U1>", "<Index>", "a          False  True", "b          True   False", "c          True   True", "<<U1>      <bool> <bool>", ">>> f2 = sf.Frame.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x      y      <<U1>", "<Index>", "b          False  True", "c          True   True", "<<U1>      <bool> <bool>", ">>> f1.via_fill_value(False) & f2", "<Frame>", "<Index> x      y      <<U1>", "<Index>", "a       False  False", "b       False  False", "c       True   True", "<<U1>   <bool> <bool>"], "Frame.via_fill_value().__xor__()": [">>> f1 = sf.Frame.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x      y      <<U1>", "<Index>", "a          False  True", "b          True   False", "c          True   True", "<<U1>      <bool> <bool>", ">>> f2 = sf.Frame.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x      y      <<U1>", "<Index>", "b          False  True", "c          True   True", "<<U1>      <bool> <bool>", ">>> f1.via_fill_value(False) ^ f2", "<Frame>", "<Index> x      y      <<U1>", "<Index>", "a       False  True", "b       True   True", "c       False  False", "<<U1>   <bool> <bool>"], "Frame.via_fill_value().__or__()": [">>> f1 = sf.Frame.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x      y      <<U1>", "<Index>", "a          False  True", "b          True   False", "c          True   True", "<<U1>      <bool> <bool>", ">>> f2 = sf.Frame.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x      y      <<U1>", "<Index>", "b          False  True", "c          True   True", "<<U1>      <bool> <bool>", ">>> f1.via_fill_value(False) | f2", "<Frame>", "<Index> x      y      <<U1>", "<Index>", "a       False  True", "b       True   True", "c       True   True", "<<U1>   <bool> <bool>"], "Frame.via_fill_value().__lt__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) < f2", "<Frame>", "<Index> x      y      <<U1>", "<Index>", "a       False  False", "b       True   True", "c       False  True", "<<U1>   <bool> <bool>"], "Frame.via_fill_value().__le__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) <= f2", "<Frame>", "<Index> x      y      <<U1>", "<Index>", "a       False  False", "b       True   True", "c       False  True", "<<U1>   <bool> <bool>"], "Frame.via_fill_value().__eq__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) == f2", "<Frame>", "<Index> x      y      <<U1>", "<Index>", "a       False  False", "b       False  False", "c       False  False", "<<U1>   <bool> <bool>"], "Frame.via_fill_value().__ne__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) != f2", "<Frame>", "<Index> x      y      <<U1>", "<Index>", "a       True   True", "b       True   True", "c       True   True", "<<U1>   <bool> <bool>"], "Frame.via_fill_value().__gt__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) > f2", "<Frame>", "<Index> x      y      <<U1>", "<Index>", "a       True   True", "b       False  False", "c       True   False", "<<U1>   <bool> <bool>"], "Frame.via_fill_value().__ge__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f1.via_fill_value(0) >= f2", "<Frame>", "<Index> x      y      <<U1>", "<Index>", "a       True   True", "b       False  False", "c       True   False", "<<U1>   <bool> <bool>"], "Frame.via_fill_value().__radd__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f2 + f1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "Frame.via_fill_value().__rsub__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f2 - f1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "Frame.via_fill_value().__rmul__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f2 * f1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "Frame.via_fill_value().__rtruediv__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f2 / f1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "Frame.via_fill_value().__rfloordiv__()": [">>> f1 = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "a          3       2", "b          0       0", "c          20      12", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<Frame: y>", "<Index>    x       y       <<U1>", "<Index>", "b          2       3", "c          4       14", "<<U1>      <int64> <int64>", ">>> f2 // f1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "Frame.via_re().search()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').search()", "<Frame: x>", "<Index>    a      b      c      <<U1>", "<Index>", "0          True   False  True", "1          True   True   True", "2          False  True   True", "3          True   True   True", "<int64>    <bool> <bool> <bool>"], "Frame.via_re().match()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').match()", "<Frame: x>", "<Index>    a      b      c      <<U1>", "<Index>", "0          True   False  True", "1          True   True   True", "2          False  True   True", "3          True   False  True", "<int64>    <bool> <bool> <bool>"], "Frame.via_re().fullmatch()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_re('123').fullmatch()", "<Frame: x>", "<Index>    a      b      c      <<U1>", "<Index>", "0          False  False  False", "1          False  False  False", "2          False  True   False", "3          False  False  False", "<int64>    <bool> <bool> <bool>"], "Frame.via_re().split()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').split()", "<Frame: x>", "<Index>    a         b                c                    <<U1>", "<Index>", "0          ('', '0') ('qrs ',)        ('', '5', '7-0', ...", "1          ('', '')  ('', 'YZ')       ('', '5', '7-04-0...", "2          ('8',)    ('', '', '', '') ('', '5', '7-', '...", "3          ('', '')  (' w', ' ')      ('', '5', '7-06-'...", "<int64>    <object>  <object>         <object>"], "Frame.via_re().findall()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').findall()", "<Frame: x>", "<Index>    a        b               c                    <<U1>", "<Index>", "0          ('1',)   ()              ('1', '1', '1', '1')", "1          ('2',)   ('X',)          ('1', '1', '1')", "2          ()       ('1', '2', '3') ('1', '1', '1', '...", "3          ('3',)   ('X',)          ('1', '1', '3')", "<int64>    <object> <object>        <object>"], "Frame.via_re().sub()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').sub('==')", "<Frame: x>", "<Index>    a     b      c                <<U1>", "<Index>", "0          ==0   qrs    ==5==7-0==-0==", "1          ==    ==YZ   ==5==7-04-0==", "2          8     ====== ==5==7-====-====", "3          ==     w==   ==5==7-06-==0", "<int64>    <<U3> <<U6>  <<U16>"], "Frame.via_re().subn()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').subn('==', 1)", "<Frame: x>", "<Index>    a          b            c                  <<U1>", "<Index>", "0          ('==0', 1) ('qrs ', 0)  ('==517-01-01', 1)", "1          ('==', 1)  ('==YZ', 1)  ('==517-04-01', 1)", "2          ('8', 0)   ('==23', 1)  ('==517-12-31', 1)", "3          ('==', 1)  (' w== ', 1) ('==517-06-30', 1)", "<int64>    <object>   <object>     <object>"], "Frame.via_hashlib().to_bytes()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).to_bytes()", "b'FrameIndex\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00Indexa\\x00\\x00\\x00b\\x00\\x00\\x00c\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x00\\xb1y\\xfd\\xff\\xff\\xff\\xff\\xff\\x0bz\\xfd\\xff\\xff\\xff\\xff\\xff\\x1d{\\xfd\\xff\\xff\\xff\\xff\\xffez\\xfd\\xff\\xff\\xff\\xff\\xff'"], "Frame.via_hashlib().md5()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).md5().hexdigest()", "cca634cbca34e9aec8db311431206ad5"], "Frame.via_hashlib().sha256()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).sha256().hexdigest()", "b7bc6cd33fcf55d60f6d798096d04c93606c55f13092b07327ec32c1a2ef7f2a"], "Frame.via_hashlib().sha512()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).sha512().hexdigest()", "d343495b7bcbcf8d356dd13e86e31f0a63d8a1a45c9412412d38d9155e468333d83980e5c596a4fc786bd4fe13404fc14b60e22906d734ac41d98c2f31a1e133"], "Frame.via_hashlib().sha3_256()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).sha3_256().hexdigest()", "9ee0e0b9cea2ca7deaf5676fc48dd1fa90eb6be68a12eddd1243a966d4c4f6b0"], "Frame.via_hashlib().sha3_512()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).sha3_512().hexdigest()", "4d60b6f8ade312b33fb1496fbc256307f350199964f1d814a12d5b045a013d2a4c00eee5cca0048415ff30d4297041ac1ea995fc077208a5395af7c97cf7fc08"], "Frame.via_hashlib().shake_128()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).shake_128().hexdigest(8)", "6608a4ac806ab763"], "Frame.via_hashlib().shake_256()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).shake_256().hexdigest(8)", "b0396e56b04a9cef"], "Frame.via_hashlib().blake2b()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).blake2b().hexdigest()", "d10691176ecadbacabd4e6f9ed00329488af05b81f9c9e800cf08ccc447f341d5c96c9d731383dbc742c30d21ae3ab0790d8b73c7009c3ccfe3d5dccd353adfe"], "Frame.via_hashlib().blake2s()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b     c               <<U1>", "<Index>", "0          10      qrs   1517-01-01", "1          2       XYZ   1517-04-01", "2          8       123   1517-12-31", "3          3        wX   1517-06-30", "<int64>    <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).blake2s().hexdigest()", "088df67e772a9f1d161dd66a9c3e30e260b89b4b664dd45a41ee0ca663a76e32"], "Frame.via_values.apply()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> f.via_values.apply(np.sin)", "<Frame: x>", "<Index>    a                   b                   c                   <<U1>", "<Index>", "p          -0.5440211108893698 0.9893582466233818  0.8414709848078965", "q          -0.9092974268256817 -0.1411200080598672 0.0", "r          0.0                 0.9893582466233818  0.4121184852417566", "s          0.0                 0.0                 -0.5365729180004349", "<<U1>      <float64>           <float64>           <float64>"], "Frame.via_values.__array_ufunc__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> np.sin(f.via_values)", "<Frame: x>", "<Index>    a                   b                   c                   <<U1>", "<Index>", "p          -0.5440211108893698 0.9893582466233818  0.8414709848078965", "q          -0.9092974268256817 -0.1411200080598672 0.0", "r          0.0                 0.9893582466233818  0.4121184852417566", "s          0.0                 0.0                 -0.5365729180004349", "<<U1>      <float64>           <float64>           <float64>"], "Frame.via_values.__call__()": [">>> f = sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b       c       <<U1>", "<Index>", "p          10      8       1", "q          -2      -3      0", "r          0       8       9", "s          0       0       12", "<<U1>      <int64> <int64> <int64>", ">>> np.sin(f.via_values(unify_blocks=True))", "<Frame: x>", "<Index>    a                   b                   c                   <<U1>", "<Index>", "p          -0.5440211108893698 0.9893582466233818  0.8414709848078965", "q          -0.9092974268256817 -0.1411200080598672 0.0", "r          0.0                 0.9893582466233818  0.4121184852417566", "s          0.0                 0.0                 -0.5365729180004349", "<<U1>      <float64>           <float64>           <float64>"], "Frame.via_type_clinic.to_hint()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.via_type_clinic.to_hint()", "static_frame.core.frame.Frame[static_frame.core.index_hierarchy.IndexHierarchy[static_frame.core.index.Index[numpy.int64], static_frame.core.index.Index[numpy.str_]], static_frame.core.index.Index[numpy.str_], numpy.int64, numpy.bool_, numpy.datetime64]"], "Frame.via_type_clinic.check()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.via_type_clinic.check(sf.Frame[sf.IndexHierarchy[sf.Index[np.int64], sf.Index[np.str_]], sf.Index[np.int64], np.int64, np.bool_, np.str_])", "ClinicError('\\nIn Frame[IndexHierarchy[Index[int64], Index[str_]], Index[int64], int64, bool_, str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid\\nIn Frame[IndexHierarchy[Index[int64], Index[str_]], Index[int64], int64, bool_, str_]\\n\u2514\u2500\u2500 Index[int64]\\n    \u2514\u2500\u2500 Expected int64, provided str_ invalid')"], "Frame.via_type_clinic.__call__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> cr = f.via_type_clinic(sf.Frame[sf.IndexHierarchy[sf.Index[np.int64], sf.Index[np.str_]], sf.Index[np.int64], np.int64, np.bool_, np.str_])", ">>> cr", "<ClinicResult: 2 errors>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Frame[IndexHierarchy[Index[int64], Index[str_]], Index[int64], int64, bool_, str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid", "In Frame[IndexHierarchy[Index[int64], Index[str_]], Index[int64], int64, bool_, str_]", "\u2514\u2500\u2500 Index[int64]", "    \u2514\u2500\u2500 Expected int64, provided str_ invalid"], "Frame.via_type_clinic.__repr__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.via_type_clinic", "Frame[IndexHierarchy[Index[int64], Index[str_]], Index[str_], int64, bool_, datetime64]"], "Frame.reduce.from_func().keys()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_func(lambda f: f.iloc[1:]).keys())", "('x',)"], "Frame.reduce.from_func().__iter__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "('x',)"], "Frame.reduce.from_func().items()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_func(lambda f: f.iloc[1:]).items())", "(('x', <Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>),)"], "Frame.reduce.from_func().values()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_func(lambda f: f.iloc[1:]).values())", "(<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>,)"], "Frame.reduce.from_func().to_frame()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>"], "Frame.reduce.from_map_func().keys()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_map_func(np.min).keys())", "('x',)"], "Frame.reduce.from_map_func().__iter__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_map_func(np.min).__iter__())", "('x',)"], "Frame.reduce.from_map_func().items()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_map_func(np.min).items())", "(('x', <Series: x>", "<Index>", "a           2", "b           False", "c           1517-01-01", "<<U1>       <object>),)"], "Frame.reduce.from_map_func().values()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_map_func(np.min).values())", "(<Series: x>", "<Index>", "a           2", "b           False", "c           1517-01-01", "<<U1>       <object>,)"], "Frame.reduce.from_map_func().to_frame()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "x       2       False  1517-01-01", "<<U1>   <int64> <bool> <datetime64[D]>"], "Frame.reduce.from_label_map().keys()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "('x',)"], "Frame.reduce.from_label_map().__iter__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "('x',)"], "Frame.reduce.from_label_map().items()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "(('x', <Series: x>", "<Index>", "b           False", "a           10", "<<U1>       <object>),)"], "Frame.reduce.from_label_map().values()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(<Series: x>", "<Index>", "b           False", "a           10", "<<U1>       <object>,)"], "Frame.reduce.from_label_map().to_frame()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b      a       <<U1>", "<Index>", "x       False  10", "<<U1>   <bool> <int64>"], "Frame.reduce.from_label_pair_map().keys()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "('x',)"], "Frame.reduce.from_label_pair_map().__iter__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "('x',)"], "Frame.reduce.from_label_pair_map().items()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "(('x', <Series: x>", "<Index>", "b-min       False", "b-max       True", "<<U5>       <bool>),)"], "Frame.reduce.from_label_pair_map().values()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: x>", "<Index>", "b-min       False", "b-max       True", "<<U5>       <bool>,)"], "Frame.reduce.from_label_pair_map().to_frame()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min  b-max  <<U5>", "<Index>", "x       False  True", "<<U1>   <bool> <bool>"], "FrameHE.__init__()": [">>> sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>"], "FrameHE.from_arrow()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> aw = f1.to_arrow()", ">>> aw", "pyarrow.Table", "__index0__: string", "a: int64", "b: int64", "----", "__index0__: [[\"p\",\"q\",\"r\"]]", "a: [[0,2,4]]", "b: [[1,3,5]]", ">>> sf.FrameHE.from_arrow(aw, index_depth=1)", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         0       1", "q         2       3", "r         4       5", "<object>  <int64> <int64>"], "FrameHE.from_clipboard()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_clipboard()", "TclError('no display name and no $DISPLAY environment variable')", ">>> sf.FrameHE.from_clipboard(index_depth=1)", "TclError('no display name and no $DISPLAY environment variable')"], "FrameHE.from_concat()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> sf.FrameHE.from_concat((f1, f2), axis=1)", "<FrameHE>", "<Index>   a       b       c      d      <<U1>", "<Index>", "p         0       1       False  True", "q         2       3       False  True", "r         4       5       False  True", "<<U1>     <int64> <int64> <bool> <bool>", ">>> sf.FrameHE.from_concat((f1, f2.relabel(columns=('a', 'b'))), axis=0, index=sf.IndexAutoFactory)", "<FrameHE>", "<Index>   a        b        <<U1>", "<Index>", "0         0        1", "1         2        3", "2         4        5", "3         False    True", "4         False    True", "5         False    True", "<int64>   <object> <object>"], "FrameHE.from_concat_items()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> sf.FrameHE.from_concat_items(((f1.name, f1), (f2.name, f2)), axis=1)", "<FrameHE>", "<IndexHierarchy> x       x       y      y      <<U1>", "                 a       b       c      d      <<U1>", "<Index>", "p                0       1       False  True", "q                2       3       False  True", "r                4       5       False  True", "<<U1>            <int64> <int64> <bool> <bool>", ">>> sf.FrameHE.from_concat_items(((f1.name, f1), (f2.name, f2.relabel(columns=('a', 'b')))), axis=0)", "<FrameHE>", "<Index>                a        b        <<U1>", "<IndexHierarchy>", "x                p     0        1", "x                q     2        3", "x                r     4        5", "y                p     False    True", "y                q     False    True", "y                r     False    True", "<<U1>            <<U1> <object> <object>"], "FrameHE.from_csv()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_csv('/tmp/f.csv')", ">>> from pathlib import Path", ">>> Path('/tmp/f.csv').read_text()", "__index0__,a,b", "p,0,1", "q,2,3", "r,4,5", "", ">>> sf.FrameHE.from_csv('/tmp/f.csv', index_depth=1)", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         0       1", "q         2       3", "r         4       5", "<<U1>     <int64> <int64>"], "FrameHE.from_delimited()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_delimited('/tmp/f.psv', delimiter='|')", ">>> from pathlib import Path", ">>> Path('/tmp/f.psv').read_text()", "__index0__|a|b", "p|0|1", "q|2|3", "r|4|5", "", ">>> sf.FrameHE.from_delimited('/tmp/f.psv', delimiter='|', index_depth=1)", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         0       1", "q         2       3", "r         4       5", "<<U1>     <int64> <int64>"], "FrameHE.from_dict()": [">>> sf.FrameHE.from_dict(mapping=dict(a=(10, 2, 8, 3), b=('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), dtypes=dict(b=np.datetime64), name='x')", "<FrameHE: x>", "<Index>      a       b               <<U1>", "<Index>", "0            10      1517-01-01", "1            2       1517-04-01", "2            8       1517-12-31", "3            3       1517-06-30", "<int64>      <int64> <datetime64[D]>"], "FrameHE.from_dict_fields()": [">>> sf.FrameHE.from_dict_fields(records=(dict(a=False, b=False, c=True), dict(a='1517-04-01', b='1517-01-01', c='1517-04-01')), columns=('p', 'q'), dtypes=dict(q=np.datetime64), name='x')", "TypeError(\"Frame.from_dict_fields() got an unexpected keyword argument 'records'\")"], "FrameHE.from_dict_records()": [">>> sf.FrameHE.from_dict_records(records=(dict(a=10, b=False, c='1517-01-01'), dict(a=8, b=True, c='1517-04-01')), index=('p', 'q'), dtypes=dict(c=np.datetime64), name='x')", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "p            10      False  1517-01-01", "q            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>"], "FrameHE.from_dict_records_items()": [">>> sf.FrameHE.from_dict_records_items(items=(('p', dict(a=10, b=False, c='1517-01-01')), ('q', dict(a=8, b=True, c='1517-04-01'))), dtypes=dict(c=np.datetime64), name='x')", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "p            10      False  1517-01-01", "q            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>"], "FrameHE.from_duckdb()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f1.to_duckdb('/tmp/f.db')", ">>> sf.FrameHE.from_duckdb('/tmp/f.db', label=f1.name, index_depth=1)", "<FrameHE: x>", "<Index>      a       b        <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<object>     <int64> <object>"], "FrameHE.from_element()": [">>> sf.FrameHE.from_element(0, index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       0", "q            0       0", "r            0       0", "<<U1>        <int64> <int64>"], "FrameHE.from_element_items()": [">>> sf.FrameHE.from_element_items(((('a', 0), -1), (('b', 0), 10), (('a', 1), 3), (('b', 'a'), 1)), columns=(0, 1), index=('a', 'b'), name='x', axis=1)", "ErrorInitTypeBlocks('Array block has unaligned row count: found 1, expected 2')"], "FrameHE.from_elements()": [">>> sf.FrameHE.from_elements((10, 2, 8, 3), index=('p', 'q', 'r', 's'), columns=['a'], name='x')", "<FrameHE: x>", "<Index>      a       <<U1>", "<Index>", "p            10", "q            2", "r            8", "s            3", "<<U1>        <int64>"], "FrameHE.from_fields()": [">>> sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameHE.from_hdf5()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f1.to_hdf5('/tmp/f.hdf5')", ">>> f1.from_hdf5('/tmp/f.hdf5', label='x', index_depth=1)", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>"], "FrameHE.from_items()": [">>> sf.FrameHE.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>"], "FrameHE.from_json_columns()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_columns(indent=4)", ">>> msg", "{", "    \"a\": {", "        \"0\": 10,", "        \"1\": 2,", "        \"2\": 8,", "        \"3\": 3", "    },", "    \"b\": {", "        \"0\": false,", "        \"1\": true,", "        \"2\": true,", "        \"3\": false", "    },", "    \"c\": {", "        \"0\": \"1517-01-01\",", "        \"1\": \"1517-04-01\",", "        \"2\": \"1517-12-31\",", "        \"3\": \"1517-06-30\"", "    }", "}", ">>> sf.Frame.from_json_columns(msg, dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c          <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<<U1>   <int64> <bool> <<U10>"], "FrameHE.from_json_index()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_index(indent=4)", ">>> msg", "{", "    \"0\": {", "        \"a\": 10,", "        \"b\": false,", "        \"c\": \"1517-01-01\"", "    },", "    \"1\": {", "        \"a\": 2,", "        \"b\": true,", "        \"c\": \"1517-04-01\"", "    },", "    \"2\": {", "        \"a\": 8,", "        \"b\": true,", "        \"c\": \"1517-12-31\"", "    },", "    \"3\": {", "        \"a\": 3,", "        \"b\": false,", "        \"c\": \"1517-06-30\"", "    }", "}", ">>> sf.Frame.from_json_index(msg, dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<<U1>   <int64> <bool> <datetime64[D]>"], "FrameHE.from_json_records()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_records(indent=4)", ">>> msg", "[", "    {", "        \"a\": 10,", "        \"b\": false,", "        \"c\": \"1517-01-01\"", "    },", "    {", "        \"a\": 2,", "        \"b\": true,", "        \"c\": \"1517-04-01\"", "    },", "    {", "        \"a\": 8,", "        \"b\": true,", "        \"c\": \"1517-12-31\"", "    },", "    {", "        \"a\": 3,", "        \"b\": false,", "        \"c\": \"1517-06-30\"", "    }", "]", ">>> sf.Frame.from_json_records(msg, dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<int64> <int64> <bool> <datetime64[D]>"], "FrameHE.from_json_split()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_split(indent=4)", ">>> msg", "{", "    \"columns\": [", "        \"a\",", "        \"b\",", "        \"c\"", "    ],", "    \"index\": [", "        0,", "        1,", "        2,", "        3", "    ],", "    \"data\": [", "        [", "            10,", "            false,", "            \"1517-01-01\"", "        ],", "        [", "            2,", "            true,", "            \"1517-04-01\"", "        ],", "        [", "            8,", "            true,", "            \"1517-12-31\"", "        ],", "        [", "            3,", "            false,", "            \"1517-06-30\"", "        ]", "    ]", "}", ">>> sf.Frame.from_json_split(msg, dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<int64> <int64> <bool> <datetime64[D]>"], "FrameHE.from_json_typed()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_typed(indent=4)", ">>> msg", "{", "    \"columns\": [", "        \"a\",", "        \"b\",", "        \"c\"", "    ],", "    \"index\": [", "        [", "            0,", "            \"p\"", "        ],", "        [", "            0,", "            \"q\"", "        ],", "        [", "            1,", "            \"p\"", "        ],", "        [", "            1,", "            \"q\"", "        ]", "    ],", "    \"data\": [", "        [", "            10,", "            2,", "            8,", "            3", "        ],", "        [", "            false,", "            true,", "            true,", "            false", "        ],", "        [", "            \"1517-01-01\",", "            \"1517-04-01\",", "            \"1517-12-31\",", "            \"1517-06-30\"", "        ]", "    ],", "    \"__meta__\": {", "        \"__names__\": [", "            \"x\",", "            null,", "            null", "        ],", "        \"__dtypes__\": [", "            \"=i8\",", "            \"|b1\",", "            \"=M8[D]\"", "        ],", "        \"__dtypes_index__\": [", "            \"=i8\",", "            \"=U1\"", "        ],", "        \"__dtypes_columns__\": [", "            \"=U1\"", "        ],", "        \"__types__\": [", "            \"IndexHierarchy\",", "            \"Index\"", "        ],", "        \"__types_index__\": [", "            \"Index\",", "            \"Index\"", "        ],", "        \"__depths__\": [", "            3,", "            2,", "            1", "        ]", "    }", "}", ">>> sf.Frame.from_json_typed(msg)", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>"], "FrameHE.from_json_values()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_values(indent=4)", ">>> msg", "[", "    [", "        10,", "        false,", "        \"1517-01-01\"", "    ],", "    [", "        2,", "        true,", "        \"1517-04-01\"", "    ],", "    [", "        8,", "        true,", "        \"1517-12-31\"", "    ],", "    [", "        3,", "        false,", "        \"1517-06-30\"", "    ]", "]", ">>> sf.Frame.from_json_values(msg, columns=tuple('abc'), dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<int64> <int64> <bool> <datetime64[D]>"], "FrameHE.from_msgpack()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> mb = f1.to_msgpack()", ">>> mb", "b'\\x85\\xc4\\x02sf\\xa7FrameHE\\xc4\\x04name\\xa1x\\xc4\\x06blocks\\xc4\\xcd\\x82\\xc4\\x02sf\\xaaTypeBlocks\\xc4\\x06blocks\\xc4\\xb3\\x92\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<i8\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4 \\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U4\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4@q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x00\\xc4\\x05index\\xc4S\\x83\\xc4\\x02sf\\xa5Index\\xc4\\x04name\\xc0\\xc4\\x04data\\xc49\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U1\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4\\x10p\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00\\xc4\\x07columns\\xc4K\\x83\\xc4\\x02sf\\xa5Index\\xc4\\x04name\\xc0\\xc4\\x04data\\xc41\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U1\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x02\\xc4\\x04data\\xc4\\x08a\\x00\\x00\\x00b\\x00\\x00\\x00'", ">>> sf.FrameHE.from_msgpack(mb)", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>"], "FrameHE.from_npy()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_npy('/tmp/f.npy')", ">>> sf.FrameHE.from_npy('/tmp/f.npy')", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> import shutil", ">>> shutil.rmtree('/tmp/f.npy')"], "FrameHE.from_npy_mmap()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_npy('/tmp/f.npy')", ">>> f2, closer = sf.FrameHE.from_npy_mmap('/tmp/f.npy')", ">>> f2", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> closer() # close mmaps after usage", ">>> import shutil", ">>> shutil.rmtree('/tmp/f.npy')"], "FrameHE.from_npz()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_npz('/tmp/f.npz')", ">>> sf.FrameHE.from_npz('/tmp/f.npz')", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameHE.from_overlay()": [">>> f1 = sf.FrameHE.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a         b        <<U1>", "<Index>", "p            10.0      qrs", "q            2.0       XYZ", "r            nan       None", "s            3.0       None", "<<U1>        <float64> <object>", ">>> f2 = sf.FrameHE.from_items((('a', (8, 3)), ('b', ('123', ' wX '))), index=('r', 's'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      a       b     <<U1>", "<Index>", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> sf.FrameHE.from_overlay((f1, f2))", "<FrameHE>", "<Index>   a         b        <<U1>", "<Index>", "p         10.0      qrs", "q         2.0       XYZ", "r         8.0       123", "s         3.0        wX", "<<U1>     <float64> <object>"], "FrameHE.from_pandas()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> df = f1.to_pandas()", ">>> df", "    a     b", "p  10  qrs ", "q   2   XYZ", "r   8   123", "s   3   wX ", ">>> sf.FrameHE.from_pandas(df, dtypes=dict(b=str))", "<FrameHE: x>", "<Index>      a       b     <object>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<object>     <int64> <<U4>"], "FrameHE.from_parquet()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f1.to_parquet('/tmp/f.parquet')", ">>> sf.FrameHE.from_parquet('/tmp/f.parquet', index_depth=1)", "<FrameHE>", "<Index>   a       b        <<U1>", "<Index>", "p         10      qrs", "q         2       XYZ", "r         8       123", "s         3        wX", "<object>  <int64> <object>"], "FrameHE.from_pickle()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_pickle('/tmp/f.pickle')", ">>> sf.FrameHE.from_pickle('/tmp/f.pickle')", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameHE.from_records()": [">>> sf.FrameHE.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "p            10      False  1517-01-01", "q            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>"], "FrameHE.from_records_items()": [">>> sf.FrameHE.from_records_items((('p', (10, False, '1517-01-01')), ('q', (8, True,'1517-04-01'))), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "p            10      False  1517-01-01", "q            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>"], "FrameHE.from_series()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'), name='x')", ">>> s", "<Series: x>", "<Index>", "a           10", "b           2", "c           8", "<<U1>       <int64>", ">>> sf.FrameHE.from_series(s)", "<FrameHE>", "<Index>   x       <<U1>", "<Index>", "a         10", "b         2", "c         8", "<<U1>     <int64>"], "FrameHE.from_sql()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_sqlite('/tmp/f.db')", ">>> import sqlite3", ">>> conn = sqlite3.connect('/tmp/f.db')", ">>> sf.FrameHE.from_sql(\"select * from x limit 2\", connection=conn, index_depth=1)", "<FrameHE>", "<Index>   a       b       c          <<U1>", "<Index>", "0         10      0       1517-01-01", "1         2       1       1517-04-01", "<int64>   <int64> <int64> <<U10>"], "FrameHE.from_sqlite()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_sqlite('/tmp/f.db')", ">>> sf.FrameHE.from_sqlite('/tmp/f.db', label=f1.name, index_depth=1)", "<FrameHE: x>", "<Index>      a       b      c          <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <<U10>"], "FrameHE.from_structured_array()": [">>> sa = np.array([(False, 8), (True, 19)], dtype=[('a', bool), ('b', int)])", ">>> sa", "[(False,  8) ( True, 19)]", ">>> sf.FrameHE.from_structured_array(sa)", "<FrameHE>", "<Index>   a      b       <<U1>", "<Index>", "0         False  8", "1         True   19", "<int64>   <bool> <int64>"], "FrameHE.from_tsv()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_tsv('/tmp/f.tsv')", ">>> from pathlib import Path", ">>> Path('/tmp/f.tsv').read_text()", "__index0__\ta\tb", "p\t0\t1", "q\t2\t3", "r\t4\t5", "", ">>> sf.FrameHE.from_tsv('/tmp/f.tsv', index_depth=1)", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         0       1", "q         2       3", "r         4       5", "<<U1>     <int64> <int64>"], "FrameHE.from_xlsx()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_xlsx('/tmp/f.xlsx')", ">>> sf.FrameHE.from_xlsx('/tmp/f.xlsx', index_depth=1)", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         0       1", "q         2       3", "r         4       5", "<<U1>     <int64> <int64>"], "FrameHE.to_arrow()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_arrow()", "pyarrow.Table", "__index0__: string", "a: int64", "b: string", "----", "__index0__: [[\"p\",\"q\",\"r\",\"s\"]]", "a: [[10,2,8,3]]", "b: [[\"qrs \",\"XYZ\",\"123\",\" wX \"]]"], "FrameHE.to_clipboard()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1.to_clipboard()", "TclError('no display name and no $DISPLAY environment variable')"], "FrameHE.to_csv()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_csv('/tmp/f.csv')", ">>> from pathlib import Path", ">>> Path('/tmp/f.csv').read_text()", "__index0__,a,b", "p,0,1", "q,2,3", "r,4,5", ""], "FrameHE.to_delimited()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_delimited('/tmp/f.psv', delimiter='|')", ">>> from pathlib import Path", ">>> Path('/tmp/f.psv').read_text()", "__index0__|a|b", "p|0|1", "q|2|3", "r|4|5", ""], "FrameHE.to_duckdb()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f1.to_duckdb('/tmp/f.db')", ">>> import duckdb", ">>> conn = duckdb.connect('/tmp/f.db')", ">>> sf.Frame.from_sql(\"select * from x limit 2\", connection=conn, index_depth=1)", "TypeError(\"'duckdb.duckdb.DuckDBPyConnection' object is not iterable\")"], "FrameHE.to_frame()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_frame()", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>"], "FrameHE.to_frame_go()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_frame_go()", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>"], "FrameHE.to_frame_he()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_frame_he()", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>"], "FrameHE.to_hdf5()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_hdf5('/tmp/f.h5')"], "FrameHE.to_json_columns()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.to_json_columns(indent=4)", "{", "    \"a\": {", "        \"0\": 10,", "        \"1\": 2,", "        \"2\": 8,", "        \"3\": 3", "    },", "    \"b\": {", "        \"0\": false,", "        \"1\": true,", "        \"2\": true,", "        \"3\": false", "    },", "    \"c\": {", "        \"0\": \"1517-01-01\",", "        \"1\": \"1517-04-01\",", "        \"2\": \"1517-12-31\",", "        \"3\": \"1517-06-30\"", "    }", "}"], "FrameHE.to_json_index()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.to_json_index(indent=4)", "{", "    \"0\": {", "        \"a\": 10,", "        \"b\": false,", "        \"c\": \"1517-01-01\"", "    },", "    \"1\": {", "        \"a\": 2,", "        \"b\": true,", "        \"c\": \"1517-04-01\"", "    },", "    \"2\": {", "        \"a\": 8,", "        \"b\": true,", "        \"c\": \"1517-12-31\"", "    },", "    \"3\": {", "        \"a\": 3,", "        \"b\": false,", "        \"c\": \"1517-06-30\"", "    }", "}"], "FrameHE.to_json_records()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.to_json_records(indent=4)", "[", "    {", "        \"a\": 10,", "        \"b\": false,", "        \"c\": \"1517-01-01\"", "    },", "    {", "        \"a\": 2,", "        \"b\": true,", "        \"c\": \"1517-04-01\"", "    },", "    {", "        \"a\": 8,", "        \"b\": true,", "        \"c\": \"1517-12-31\"", "    },", "    {", "        \"a\": 3,", "        \"b\": false,", "        \"c\": \"1517-06-30\"", "    }", "]"], "FrameHE.to_json_split()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.to_json_split(indent=4)", "{", "    \"columns\": [", "        \"a\",", "        \"b\",", "        \"c\"", "    ],", "    \"index\": [", "        0,", "        1,", "        2,", "        3", "    ],", "    \"data\": [", "        [", "            10,", "            false,", "            \"1517-01-01\"", "        ],", "        [", "            2,", "            true,", "            \"1517-04-01\"", "        ],", "        [", "            8,", "            true,", "            \"1517-12-31\"", "        ],", "        [", "            3,", "            false,", "            \"1517-06-30\"", "        ]", "    ]", "}"], "FrameHE.to_json_typed()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.to_json_typed(indent=4)", "{", "    \"columns\": [", "        \"a\",", "        \"b\",", "        \"c\"", "    ],", "    \"index\": null,", "    \"data\": [", "        [", "            10,", "            2,", "            8,", "            3", "        ],", "        [", "            false,", "            true,", "            true,", "            false", "        ],", "        [", "            \"1517-01-01\",", "            \"1517-04-01\",", "            \"1517-12-31\",", "            \"1517-06-30\"", "        ]", "    ],", "    \"__meta__\": {", "        \"__names__\": [", "            \"x\",", "            null,", "            null", "        ],", "        \"__dtypes__\": [", "            \"=i8\",", "            \"|b1\",", "            \"=M8[D]\"", "        ],", "        \"__dtypes_index__\": [", "            \"=i8\"", "        ],", "        \"__dtypes_columns__\": [", "            \"=U1\"", "        ],", "        \"__types__\": [", "            \"Index\",", "            \"Index\"", "        ],", "        \"__depths__\": [", "            3,", "            1,", "            1", "        ]", "    }", "}"], "FrameHE.to_json_values()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.to_json_values(indent=4)", "[", "    [", "        10,", "        false,", "        \"1517-01-01\"", "    ],", "    [", "        2,", "        true,", "        \"1517-04-01\"", "    ],", "    [", "        8,", "        true,", "        \"1517-12-31\"", "    ],", "    [", "        3,", "        false,", "        \"1517-06-30\"", "    ]", "]"], "FrameHE.to_latex()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_latex()", "\\begin{table}[ht]", "\\centering", "\\begin{tabular}{c c c}", "\\hline\\hline", "   & a   & b    \\\\", "\\hline", "p  & 10  & qrs  \\\\", "q  & 2   & XYZ  \\\\", "r  & 8   & 123  \\\\", "s  & 3   &  wX  \\\\", "\\hline\\end{tabular}", "\\end{table}"], "FrameHE.to_markdown()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_markdown()", "|  |a  |b   |", "|--|---|----|", "|p |10 |qrs |", "|q |2  |XYZ |", "|r |8  |123 |", "|s |3  | wX |"], "FrameHE.to_msgpack()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_msgpack()", "b'\\x85\\xc4\\x02sf\\xa7FrameHE\\xc4\\x04name\\xa1x\\xc4\\x06blocks\\xc4\\xcd\\x82\\xc4\\x02sf\\xaaTypeBlocks\\xc4\\x06blocks\\xc4\\xb3\\x92\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<i8\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4 \\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U4\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4@q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x00\\xc4\\x05index\\xc4S\\x83\\xc4\\x02sf\\xa5Index\\xc4\\x04name\\xc0\\xc4\\x04data\\xc49\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U1\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4\\x10p\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00\\xc4\\x07columns\\xc4K\\x83\\xc4\\x02sf\\xa5Index\\xc4\\x04name\\xc0\\xc4\\x04data\\xc41\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U1\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x02\\xc4\\x04data\\xc4\\x08a\\x00\\x00\\x00b\\x00\\x00\\x00'"], "FrameHE.to_npy()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_npy('/tmp/f.npy')", ">>> sf.Frame.from_npy('/tmp/f.npy')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> import shutil", ">>> shutil.rmtree('/tmp/f.npy')"], "FrameHE.to_npz()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_npz('/tmp/f.npz')", ">>> sf.Frame.from_npz('/tmp/f.npz')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "FrameHE.to_pairs()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_pairs()", "(('a', (('p', 10), ('q', 2), ('r', 8), ('s', 3))), ('b', (('p', 'qrs '), ('q', 'XYZ'), ('r', '123'), ('s', ' wX '))))"], "FrameHE.to_pandas()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_pandas()", "    a     b", "p  10  qrs ", "q   2   XYZ", "r   8   123", "s   3   wX "], "FrameHE.to_parquet()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_parquet('/tmp/f.parquet')"], "FrameHE.to_pickle()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_pickle('/tmp/f.pickle')", ">>> sf.Frame.from_pickle('/tmp/f.pickle')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "FrameHE.to_rst()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_rst()", "+--+---+----+", "|  |a  |b   |", "+==+===+====+", "|p |10 |qrs |", "+--+---+----+", "|q |2  |XYZ |", "+--+---+----+", "|r |8  |123 |", "+--+---+----+", "|s |3  | wX |", "+--+---+----+"], "FrameHE.to_series()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_series()", "<Series: x>", "<Index>", "('p', 'a')  10", "('p', 'b')  qrs", "('q', 'a')  2", "('q', 'b')  XYZ", "('r', 'a')  8", "('r', 'b')  123", "('s', 'a')  3", "('s', 'b')   wX", "<object>    <object>"], "FrameHE.to_sql()": [">>> import sqlite3", ">>> conn = sqlite3.connect(':memory')", ">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1.to_sql(conn, include_index=False)", ">>> sf.Frame.from_sql(\"select * from x\", connection=conn)", "<Frame>", "<Index> a       b       c          <<U1>", "<Index>", "0       10      0       1517-01-01", "1       2       1       1517-04-01", "2       8       1       1517-12-31", "3       3       0       1517-06-30", "<int64> <int64> <int64> <<U10>"], "FrameHE.to_sqlite()": [">>> f1 = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_sqlite('/tmp/f.db')", ">>> import sqlite3", ">>> conn = sqlite3.connect('/tmp/f.db')", ">>> sf.Frame.from_sql(\"select * from x limit 2\", connection=conn, index_depth=1)", "<Frame>", "<Index> a       b       c          <<U1>", "<Index>", "0       10      0       1517-01-01", "1       2       1       1517-04-01", "<int64> <int64> <int64> <<U10>"], "FrameHE.to_tsv()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_tsv('/tmp/f.tsv')", ">>> from pathlib import Path", ">>> Path('/tmp/f.tsv').read_text()", "__index0__\ta\tb", "p\t0\t1", "q\t2\t3", "r\t4\t5", ""], "FrameHE.to_xarray()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_xarray()", "<xarray.Dataset>", "Dimensions:     (__index0__: 4)", "Coordinates:", "  * __index0__  (__index0__) <U1 'p' 'q' 'r' 's'", "Data variables:", "    a           (__index0__) int64 10 2 8 3", "    b           (__index0__) <U4 'qrs ' 'XYZ' '123' ' wX '"], "FrameHE.to_xlsx()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_xlsx('/tmp/f.xlsx')"], "FrameHE.STATIC": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.STATIC", "True"], "FrameHE.T": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.T", "<FrameHE: x>", "<Index>      0          1          2          3          <int64>", "<Index>", "a            10         2          8          3", "b            False      True       True       False", "c            1517-01-01 1517-04-01 1517-12-31 1517-06-30", "<<U1>        <object>   <object>   <object>   <object>"], "FrameHE.columns": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.columns", "<Index>", "a", "b", "c", "<<U1>"], "FrameHE.dtypes": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.dtypes", "<Series: x>", "<Index>", "a           int64", "b           bool", "c           datetime64[D]", "<<U1>       <object>"], "FrameHE.index": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.index", "<Index>", "0", "1", "2", "3", "<int64>"], "FrameHE.memory": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.memory", "        L    Lu    LM   LMu   LMD  LMDu  R    Ru    RM   RMu   RMD  RMDu", "Name    50   B     50   B     50   B     50   B     50   B     50   B", "Index   236  B     252  B     124  B     8.34 KB    284  B     156  B", "Columns 800  B     832  B     576  B     8.89 KB    856  B     600  B", "Blocks  748  B     796  B     412  B     748  B     796  B     412  B", "Total   1.83 KB    1.92 KB    1.17 KB    9.94 KB    1.97 KB    1.22 KB"], "FrameHE.name": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.name", "x"], "FrameHE.nbytes": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.nbytes", "68"], "FrameHE.ndim": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.ndim", "2"], "FrameHE.shape": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.shape", "(4, 3)"], "FrameHE.size": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.size", "12"], "FrameHE.__array__()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.__array__()", "[[0 1]", " [2 3]", " [4 5]]"], "FrameHE.__array_ufunc__()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> np.array((1, 0)) * f", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         0       0", "q         2       0", "r         4       0", "<<U1>     <int64> <int64>"], "FrameHE.__bool__()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> bool(f)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "FrameHE.__dataframe__()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> dfi = f.__dataframe__()", ">>> tuple(dfi.get_columns())", "(<DFIColumn: shape=(3,) dtype=<i8>, <DFIColumn: shape=(3,) dtype=<i8>)"], "FrameHE.__deepcopy__()": [">>> import copy", ">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> copy.deepcopy(f)", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>"], "FrameHE.__len__()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> len(f)", "3"], "FrameHE.__round__()": [">>> f = sf.FrameHE((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')", ">>> f", "<FrameHE: y>", "<Index>      a                  b                  <<U1>", "<Index>", "p            0.0                1.3333333333333333", "q            2.6666666666666665 4.0", "r            5.333333333333333  6.666666666666667", "<<U1>        <float64>          <float64>", ">>> round(f, 1)", "<FrameHE: y>", "<Index>      a         b         <<U1>", "<Index>", "p            0.0       1.3", "q            2.7       4.0", "r            5.3       6.7", "<<U1>        <float64> <float64>"], "FrameHE.all()": [">>> f = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f", "<FrameHE: y>", "<Index>      c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> f.all()", "<Series>", "<Index>", "c        False", "d        True", "<<U1>    <bool>"], "FrameHE.any()": [">>> f = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f", "<FrameHE: y>", "<Index>      c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> f.any()", "<Series>", "<Index>", "c        False", "d        True", "<<U1>    <bool>"], "FrameHE.astype[]()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.astype['c'](object)", "<FrameHE: x>", "<Index>      a       b      c          <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <object>"], "FrameHE.astype()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.astype(float)", "<FrameHE: x>", "<Index>      a         b         <<U1>", "<Index>", "p            0.0       1.0", "q            2.0       3.0", "r            4.0       5.0", "<<U1>        <float64> <float64>"], "FrameHE.clip()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.clip(lower=2, upper=4)", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       2", "q            2       3", "r            4       4", "<<U1>        <int64> <int64>"], "FrameHE.consolidate[]": [">>> f1 = sf.FrameHE.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1), (False, True, True, False), (True, True, False, True)), columns=('a', 'b', 'c', 'd', 'e'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       d      e      <<U1>", "<Index>", "0            0       20      0       False  True", "1            0       18      0       True   True", "2            10      -3      0       True   False", "3            2       18      1       False  True", "<int64>      <int64> <int64> <int64> <bool> <bool>", ">>> f1.consolidate.status", "<Frame>", "<Index> loc   iloc    dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       a     0       int64    (4,)     1       True    True         True", "1       b     1       int64    (4,)     1       True    True         True", "2       c     2       int64    (4,)     1       True    True         True", "3       d     3       bool     (4,)     1       True    True         True", "4       e     4       bool     (4,)     1       True    True         True", "<int64> <<U1> <int64> <object> <object> <int64> <bool>  <bool>       <bool>", ">>> f2 = f1.consolidate['a':'c']", ">>> f2.consolidate.status", "<Frame>", "<Index> loc                  iloc              dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       slice('a', 'c', N... slice(0, 3, None) int64    (4, 3)   2       True    False        True", "1       d                    3                 bool     (4,)     1       True    True         True", "2       e                    4                 bool     (4,)     1       True    True         True", "<int64> <object>             <object>          <object> <object> <int64> <bool>  <bool>       <bool>"], "FrameHE.consolidate()": [">>> f1 = sf.FrameHE.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1), (False, True, True, False), (True, True, False, True)), columns=('a', 'b', 'c', 'd', 'e'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       d      e      <<U1>", "<Index>", "0            0       20      0       False  True", "1            0       18      0       True   True", "2            10      -3      0       True   False", "3            2       18      1       False  True", "<int64>      <int64> <int64> <int64> <bool> <bool>", ">>> f1.consolidate.status", "<Frame>", "<Index> loc   iloc    dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       a     0       int64    (4,)     1       True    True         True", "1       b     1       int64    (4,)     1       True    True         True", "2       c     2       int64    (4,)     1       True    True         True", "3       d     3       bool     (4,)     1       True    True         True", "4       e     4       bool     (4,)     1       True    True         True", "<int64> <<U1> <int64> <object> <object> <int64> <bool>  <bool>       <bool>", ">>> f2 = f1.consolidate()", ">>> f2.consolidate.status", "<Frame>", "<Index> loc                  iloc                 dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       slice('a', 'c', N... slice(0, 3, None)    int64    (4, 3)   2       True    False        True", "1       slice('d', 'e', N... slice(3, None, None) bool     (4, 2)   2       True    False        True", "<int64> <object>             <object>             <object> <object> <int64> <bool>  <bool>       <bool>"], "FrameHE.consolidate.status": [">>> f1 = sf.FrameHE.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1), (False, True, True, False), (True, True, False, True)), columns=('a', 'b', 'c', 'd', 'e'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       d      e      <<U1>", "<Index>", "0            0       20      0       False  True", "1            0       18      0       True   True", "2            10      -3      0       True   False", "3            2       18      1       False  True", "<int64>      <int64> <int64> <int64> <bool> <bool>", ">>> f1.consolidate.status", "<Frame>", "<Index> loc   iloc    dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       a     0       int64    (4,)     1       True    True         True", "1       b     1       int64    (4,)     1       True    True         True", "2       c     2       int64    (4,)     1       True    True         True", "3       d     3       bool     (4,)     1       True    True         True", "4       e     4       bool     (4,)     1       True    True         True", "<int64> <<U1> <int64> <object> <object> <int64> <bool>  <bool>       <bool>", ">>> f2 = f1.consolidate()", ">>> f2.consolidate.status", "<Frame>", "<Index> loc                  iloc                 dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       slice('a', 'c', N... slice(0, 3, None)    int64    (4, 3)   2       True    False        True", "1       slice('d', 'e', N... slice(3, None, None) bool     (4, 2)   2       True    False        True", "<int64> <object>             <object>             <object> <object> <int64> <bool>  <bool>       <bool>"], "FrameHE.corr()": [">>> f1 = sf.FrameHE((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       d       <<U1>", "<Index>", "p            0       2       4       6", "q            8       10      12      14", "r            0       1       4       9", "s            16      25      36      49", "<<U1>        <int64> <int64> <int64> <int64>", ">>> f1.corr()", "<FrameHE: x>", "<Index>      a                  b                  c                  d                  <<U1>", "<Index>", "a            1.0                0.9888513796308233 0.965581028730576  0.9340437381585037", "b            0.9888513796308233 0.9999999999999999 0.9923448088115435 0.972134396307783", "c            0.9655810287305759 0.9923448088115435 0.9999999999999999 0.9934089501944108", "d            0.9340437381585037 0.9721343963077829 0.9934089501944108 1.0", "<<U1>        <float64>          <float64>          <float64>          <float64>"], "FrameHE.count()": [">>> f = sf.FrameHE.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b        <<U1>", "<Index>", "p            10.0      qrs", "q            2.0       XYZ", "r            nan       None", "s            3.0       None", "<<U1>        <float64> <object>", ">>> f.count(skipna=True)", "<Series>", "<Index>", "a        3", "b        2", "<<U1>    <int64>", ">>> f.count(unique=True)", "<Series>", "<Index>", "a        3", "b        2", "<<U1>    <int64>"], "FrameHE.cov()": [">>> f1 = sf.FrameHE((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       d       <<U1>", "<Index>", "p            0       2       4       6", "q            8       10      12      14", "r            0       1       4       9", "s            16      25      36      49", "<<U1>        <int64> <int64> <int64> <int64>", ">>> f1.cov()", "<FrameHE: x>", "<Index>      a                  b                  c                  d                  <<U1>", "<Index>", "a            58.666666666666664 84.0               112.0              142.66666666666666", "b            84.0               123.0              166.66666666666666 215.0", "c            112.0              166.66666666666666 229.33333333333331 300.0", "d            142.66666666666666 215.0              300.0              397.66666666666663", "<<U1>        <float64>          <float64>          <float64>          <float64>"], "FrameHE.cumprod()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.cumprod()", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         0       1", "q         0       3", "r         0       15", "<<U1>     <int64> <int64>"], "FrameHE.cumsum()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.cumsum()", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         0       1", "q         2       4", "r         6       9", "<<U1>     <int64> <int64>"], "FrameHE.drop_duplicated()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "1            2.0       True     1517-04-01", "2            nan       None     NaT", "3            2.0       True     1517-04-01", "<int64>      <float64> <object> <datetime64[D]>", ">>> f.drop_duplicated()", "<FrameHE: x>", "<Index>      a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "2            nan       None     NaT", "<int64>      <float64> <object> <datetime64[D]>"], "FrameHE.dropfalsy()": [">>> f = sf.FrameHE.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            0             NaT", "3            2       123   1517-04-01", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.dropfalsy()", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "3            2       123   1517-04-01", "<int64>      <int64> <<U4> <datetime64[D]>"], "FrameHE.dropna()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "1            2.0       True     1517-04-01", "2            nan       None     NaT", "3            2.0       True     1517-04-01", "<int64>      <float64> <object> <datetime64[D]>", ">>> f.dropna()", "<FrameHE: x>", "<Index>      a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "1            2.0       True     1517-04-01", "3            2.0       True     1517-04-01", "<int64>      <float64> <object> <datetime64[D]>"], "FrameHE.duplicated()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "1            2.0       True     1517-04-01", "2            nan       None     NaT", "3            2.0       True     1517-04-01", "<int64>      <float64> <object> <datetime64[D]>", ">>> f.duplicated()", "<Series>", "<Index>", "0        False", "1        True", "2        False", "3        True", "<int64>  <bool>"], "FrameHE.equals()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      a                  b                  <<U1>", "<Index>", "p            0.0                1.3333333333333333", "q            2.6666666666666665 4.0", "r            5.333333333333333  6.666666666666667", "<<U1>        <float64>          <float64>", ">>> f1.equals(f2)", "False"], "FrameHE.fillfalsy()": [">>> f = sf.FrameHE.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            0             NaT", "3            2       123   1517-04-01", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.fillfalsy(dict(a=1, b='abc', c=np.datetime64('2022-01-10')))", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            1       abc   2022-01-10", "3            2       123   1517-04-01", "<int64>      <int64> <<U4> <datetime64[D]>"], "FrameHE.fillfalsy_backward()": [">>> f = sf.FrameHE.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            0       20      0", "1            0       18      0", "2            10      -3      0", "3            2       18      1", "<int64>      <int64> <int64> <int64>", ">>> f.fillfalsy_backward()", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            10      20      1", "1            10      18      1", "2            10      -3      1", "3            2       18      1", "<int64>      <int64> <int64> <int64>"], "FrameHE.fillfalsy_forward()": [">>> f = sf.FrameHE.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            10      8       1", "1            2       3       0", "2            0       8       0", "3            0       0       0", "<int64>      <int64> <int64> <int64>", ">>> f.fillfalsy_forward()", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            10      8       1", "1            2       3       1", "2            2       8       1", "3            2       8       1", "<int64>      <int64> <int64> <int64>"], "FrameHE.fillfalsy_leading()": [">>> f = sf.FrameHE.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            0       20      0", "1            0       18      0", "2            10      -3      0", "3            2       18      1", "<int64>      <int64> <int64> <int64>", ">>> f.fillfalsy_leading(-1)", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            -1      20      -1", "1            -1      18      -1", "2            10      -3      -1", "3            2       18      1", "<int64>      <int64> <int64> <int64>"], "FrameHE.fillfalsy_trailing()": [">>> f = sf.FrameHE.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            10      8       1", "1            2       3       0", "2            0       8       0", "3            0       0       0", "<int64>      <int64> <int64> <int64>", ">>> f.fillfalsy_trailing(-1)", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            10      8       1", "1            2       3       -1", "2            -1      8       -1", "3            -1      -1      -1", "<int64>      <int64> <int64> <int64>"], "FrameHE.fillna()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b     c               <<U1>", "<Index>", "0            10.0      qrs   1517-01-01", "1            2.0       XYZ   1517-04-01", "2            nan             NaT", "3            2.0       123   1517-04-01", "<int64>      <float64> <<U4> <datetime64[D]>", ">>> f.fillna(-1)", "<FrameHE: x>", "<Index>      a         b     c          <<U1>", "<Index>", "0            10.0      qrs   1517-01-01", "1            2.0       XYZ   1517-04-01", "2            -1.0            -1", "3            2.0       123   1517-04-01", "<int64>      <float64> <<U4> <object>"], "FrameHE.fillna_backward()": [">>> f = sf.FrameHE.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y')", ">>> f", "<FrameHE: y>", "<Index>      a         b         c         <<U1>", "<Index>", "0            nan       nan       nan", "1            nan       8.0       nan", "2            10.0      3.0       nan", "3            2.0       8.0       1.0", "<int64>      <float64> <float64> <float64>", ">>> f.fillna_backward()", "<FrameHE: y>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            10.0      8.0       1.0", "2            10.0      3.0       1.0", "3            2.0       8.0       1.0", "<int64>      <float64> <float64> <float64>"], "FrameHE.fillna_forward()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.fillna_forward()", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       1.0", "2            2.0       8.0       1.0", "3            2.0       8.0       1.0", "<int64>      <float64> <float64> <float64>"], "FrameHE.fillna_leading()": [">>> f = sf.FrameHE.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y')", ">>> f", "<FrameHE: y>", "<Index>      a         b         c         <<U1>", "<Index>", "0            nan       nan       nan", "1            nan       8.0       nan", "2            10.0      3.0       nan", "3            2.0       8.0       1.0", "<int64>      <float64> <float64> <float64>", ">>> f.fillna_leading(-1)", "<FrameHE: y>", "<Index>      a         b         c         <<U1>", "<Index>", "0            -1.0      -1.0      -1.0", "1            -1.0      8.0       -1.0", "2            10.0      3.0       -1.0", "3            2.0       8.0       1.0", "<int64>      <float64> <float64> <float64>"], "FrameHE.fillna_trailing()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.fillna_trailing(-1)", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       -1.0", "2            -1.0      8.0       -1.0", "3            -1.0      -1.0      -1.0", "<int64>      <float64> <float64> <float64>"], "FrameHE.head()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.head(2)", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameHE.iloc_max()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.iloc_max()", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>"], "FrameHE.iloc_min()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.iloc_min()", "<Series>", "<Index>", "a        1", "b        1", "c        0", "<<U1>    <int64>"], "FrameHE.iloc_notfalsy_first()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iloc_notfalsy_first(axis=0)", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>", ">>> f.iloc_notfalsy_first(axis=1)", "<Series>", "<Index>", "p        0", "q        0", "r        1", "s        2", "<<U1>    <int64>"], "FrameHE.iloc_notfalsy_last()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iloc_notfalsy_last(axis=0)", "<Series>", "<Index>", "a        1", "b        2", "c        3", "<<U1>    <int64>", ">>> f.iloc_notfalsy_last(axis=1)", "<Series>", "<Index>", "p        2", "q        1", "r        2", "s        2", "<<U1>    <int64>"], "FrameHE.iloc_notna_first()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.iloc_notna_first(axis=0)", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>", ">>> f.iloc_notna_first(axis=1)", "<Series>", "<Index>", "0        0", "1        0", "2        1", "3        -1", "<int64>  <int64>"], "FrameHE.iloc_notna_last()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.iloc_notna_last(axis=0)", "<Series>", "<Index>", "a        1", "b        2", "c        0", "<<U1>    <int64>", ">>> f.iloc_notna_last(axis=1)", "<Series>", "<Index>", "0        2", "1        1", "2        1", "3        -1", "<int64>  <int64>"], "FrameHE.insert_after()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> f1.insert_after('b', f2)", "<FrameHE: x>", "<Index>      a       b       c      d      <<U1>", "<Index>", "p            0       1       False  True", "q            2       3       False  True", "r            4       5       False  True", "<<U1>        <int64> <int64> <bool> <bool>"], "FrameHE.insert_before()": [">>> f1 = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> f1.insert_before('b', f2)", "<FrameHE: x>", "<Index>      a       c      d      b       <<U1>", "<Index>", "p            0       False  True   1", "q            2       False  True   3", "r            4       False  True   5", "<<U1>        <int64> <bool> <bool> <int64>"], "FrameHE.isfalsy()": [">>> f = sf.FrameHE.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            0             NaT", "3            2       123   1517-04-01", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.isfalsy()", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "0         False  False  False", "1         False  False  False", "2         True   True   True", "3         False  False  False", "<int64>   <bool> <bool> <bool>"], "FrameHE.isin()": [">>> f = sf.FrameHE.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            10      8       1", "1            2       3       0", "2            0       8       0", "3            0       0       0", "<int64>      <int64> <int64> <int64>", ">>> f.isin((0, 8))", "<FrameHE: x>", "<Index>      a      b      c      <<U1>", "<Index>", "0            False  True   False", "1            False  False  True", "2            True   True   True", "3            True   True   True", "<int64>      <bool> <bool> <bool>"], "FrameHE.isna()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.isna()", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "0         False  False  False", "1         False  False  True", "2         True   False  True", "3         True   True   True", "<int64>   <bool> <bool> <bool>"], "FrameHE.join_inner()": [">>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.join_inner(f2, left_columns='c', right_columns='f')", "<FrameHE>", "<Index>   a       b       c       d       e       f       <<U1>", "<Index>", "0         11      0       0       7       8       0", "1         4       8       1       2       3       1", "2         10      3       0       7       8       0", "3         2       8       1       2       3       1", "<int64>   <int64> <int64> <int64> <int64> <int64> <int64>"], "FrameHE.join_left()": [">>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.join_left(f2, left_columns='c', right_columns='f')", "<FrameHE>", "<Index>   a       b       c       d       e       f       <<U1>", "<Index>", "0         11      0       0       7       8       0", "1         4       8       1       2       3       1", "2         10      3       0       7       8       0", "3         2       8       1       2       3       1", "<int64>   <int64> <int64> <int64> <int64> <int64> <int64>"], "FrameHE.join_outer()": [">>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.join_outer(f2, left_columns='c', right_columns='f')", "<FrameHE>", "<Index>   a       b       c       d       e       f       <<U1>", "<Index>", "0         11      0       0       7       8       0", "1         4       8       1       2       3       1", "2         10      3       0       7       8       0", "3         2       8       1       2       3       1", "<int64>   <int64> <int64> <int64> <int64> <int64> <int64>"], "FrameHE.join_right()": [">>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.join_right(f2, left_columns='c', right_columns='f')", "<FrameHE>", "<Index>   a       b       c       d       e       f       <<U1>", "<Index>", "0         4       8       1       2       3       1", "1         2       8       1       2       3       1", "2         11      0       0       7       8       0", "3         10      3       0       7       8       0", "<int64>   <int64> <int64> <int64> <int64> <int64> <int64>"], "FrameHE.loc_max()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.loc_max()", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>"], "FrameHE.loc_min()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.loc_min()", "<Series>", "<Index>", "a        1", "b        1", "c        0", "<<U1>    <int64>"], "FrameHE.loc_notfalsy_first()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.loc_notfalsy_first(axis=0)", "<Series>", "<Index>", "a        p", "b        p", "c        p", "<<U1>    <<U1>", ">>> f.loc_notfalsy_first(axis=1)", "<Series>", "<Index>", "p        a", "q        a", "r        b", "s        c", "<<U1>    <<U1>"], "FrameHE.loc_notfalsy_last()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.loc_notfalsy_last(axis=0)", "<Series>", "<Index>", "a        q", "b        r", "c        s", "<<U1>    <<U1>", ">>> f.loc_notfalsy_last(axis=1)", "<Series>", "<Index>", "p        c", "q        b", "r        c", "s        c", "<<U1>    <<U1>"], "FrameHE.loc_notna_first()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.loc_notna_first(axis=0)", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>", ">>> f.loc_notna_first(axis=1)", "<Series>", "<Index>", "0        a", "1        a", "2        b", "3        nan", "<int64>  <object>"], "FrameHE.loc_notna_last()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.loc_notna_last(axis=0)", "<Series>", "<Index>", "a        1", "b        2", "c        0", "<<U1>    <int64>", ">>> f.loc_notna_last(axis=1)", "<Series>", "<Index>", "0        c", "1        b", "2        b", "3        nan", "<int64>  <object>"], "FrameHE.max()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.max()", "<Series>", "<Index>", "a        4", "b        5", "<<U1>    <int64>"], "FrameHE.mean()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.mean()", "<Series>", "<Index>", "a        2.0", "b        3.0", "<<U1>    <float64>"], "FrameHE.median()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.median()", "<Series>", "<Index>", "a        2.0", "b        3.0", "<<U1>    <float64>"], "FrameHE.merge_inner()": [">>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.merge_inner(f2, left_columns='c', right_columns='f')", "<FrameHE>", "<Index>   c       a       b       d       e       <<U1>", "<Index>", "0         0       11      0       7       8", "1         1       4       8       2       3", "2         0       10      3       7       8", "3         1       2       8       2       3", "<int64>   <int64> <int64> <int64> <int64> <int64>"], "FrameHE.merge_left()": [">>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.merge_left(f2, left_columns='c', right_columns='f', merge_labels='x')", "<FrameHE>", "<Index>   x       a       b       d       e       <<U1>", "<Index>", "0         0       11      0       7       8", "1         1       4       8       2       3", "2         0       10      3       7       8", "3         1       2       8       2       3", "<int64>   <int64> <int64> <int64> <int64> <int64>"], "FrameHE.merge_outer()": [">>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.merge_outer(f2, left_columns='c', right_columns='f', merge_labels='x')", "<FrameHE>", "<Index>   x       a       b       d       e       <<U1>", "<Index>", "0         0       11      0       7       8", "1         1       4       8       2       3", "2         0       10      3       7       8", "3         1       2       8       2       3", "<int64>   <int64> <int64> <int64> <int64> <int64>"], "FrameHE.merge_right()": [">>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.merge_right(f2, left_columns='c', right_columns='f')", "<FrameHE>", "<Index>   f       a       b       d       e       <<U1>", "<Index>", "0         1       4       8       2       3", "1         1       2       8       2       3", "2         0       11      0       7       8", "3         0       10      3       7       8", "<int64>   <int64> <int64> <int64> <int64> <int64>"], "FrameHE.min()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.min()", "<Series>", "<Index>", "a        0", "b        1", "<<U1>    <int64>"], "FrameHE.notfalsy()": [">>> f = sf.FrameHE.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            0             NaT", "3            2       123   1517-04-01", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.notfalsy()", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "0         True   True   True", "1         True   True   True", "2         False  False  False", "3         True   True   True", "<int64>   <bool> <bool> <bool>"], "FrameHE.notna()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.notna()", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "0         True   True   True", "1         True   True   False", "2         False  True   False", "3         False  False  False", "<int64>   <bool> <bool> <bool>"], "FrameHE.pivot()": [">>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f1.pivot(index_fields='b', columns_fields='c')", "<FrameHE>", "<Index: c> 0         1         <int64>", "<Index: b>", "0          11.0      nan", "3          10.0      nan", "8          nan       6.0", "<int64>    <float64> <float64>"], "FrameHE.pivot_stack()": [">>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f1.pivot_stack()", "<FrameHE: x>", "<Index>                0       <int64>", "<IndexHierarchy>", "0                a     11", "0                b     0", "0                c     0", "1                a     4", "1                b     8", "1                c     1", "2                a     10", "2                b     3", "2                c     0", "3                a     2", "3                b     8", "3                c     1", "<int64>          <<U1> <int64>"], "FrameHE.pivot_unstack()": [">>> f1 = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = f1.pivot_stack()", ">>> f2", "<FrameHE: x>", "<Index>                0       <int64>", "<IndexHierarchy>", "0                a     11", "0                b     0", "0                c     0", "1                a     4", "1                b     8", "1                c     1", "2                a     10", "2                b     3", "2                c     0", "3                a     2", "3                b     8", "3                c     1", "<int64>          <<U1> <int64>", ">>> f2.pivot_unstack()", "<FrameHE: x>", "<IndexHierarchy> 0       0       0       <int64>", "                 a       b       c       <<U1>", "<Index>", "0                11      0       0", "1                4       8       1", "2                10      3       0", "3                2       8       1", "<int64>          <int64> <int64> <int64>"], "FrameHE.prod()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.prod()", "<Series>", "<Index>", "a        0", "b        15", "<<U1>    <int64>"], "FrameHE.rank_dense()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.rank_dense()", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            3       0       0", "1            1       2       1", "2            2       1       0", "3            0       2       1", "<int64>      <int64> <int64> <int64>"], "FrameHE.rank_max()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.rank_max()", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            3       0       1", "1            1       3       3", "2            2       1       1", "3            0       3       3", "<int64>      <int64> <int64> <int64>"], "FrameHE.rank_mean()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.rank_mean()", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "0            3.0       0.0       0.5", "1            1.0       2.5       2.5", "2            2.0       1.0       0.5", "3            0.0       2.5       2.5", "<int64>      <float64> <float64> <float64>"], "FrameHE.rank_min()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.rank_min()", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            3       0       0", "1            1       2       2", "2            2       1       0", "3            0       2       2", "<int64>      <int64> <int64> <int64>"], "FrameHE.rank_ordinal()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.rank_ordinal()", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            3       0       0", "1            1       2       2", "2            2       1       1", "3            0       3       3", "<int64>      <int64> <int64> <int64>"], "FrameHE.rehierarch()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.rehierarch((1, 0))", "<FrameHE: x>", "<Index>                  a       b      c               <<U1>", "<IndexHierarchy>", "p                0       10      False  1517-01-01", "p                1       8       True   1517-12-31", "q                0       2       True   1517-04-01", "q                1       3       False  1517-06-30", "<<U1>            <int64> <int64> <bool> <datetime64[D]>"], "FrameHE.reindex()": [">>> f = sf.FrameHE.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.reindex(('q', 't', 's', 'r'), fill_value=sf.FillValueAuto(i=-1, U=''))", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "q            2       XYZ", "t            -1", "s            3        wX", "r            8       123", "<<U1>        <int64> <<U4>"], "FrameHE.relabel()": [">>> f = sf.FrameHE.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "p            10      False  1517-01-01", "q            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>", ">>> f.relabel(('y', 'z'))", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "y            10      False  1517-01-01", "z            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>", ">>> f.relabel(dict(q='x', p='y'))", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "y            10      False  1517-01-01", "x            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>", ">>> f.relabel(lambda l: f'+{l.upper()}+')", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "+P+          10      False  1517-01-01", "+Q+          8       True   1517-04-01", "<<U3>        <int64> <bool> <datetime64[D]>"], "FrameHE.relabel_flat()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.relabel_flat(index=True)", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "(0, 'p')     10      False  1517-01-01", "(0, 'q')     2       True   1517-04-01", "(1, 'p')     8       True   1517-12-31", "(1, 'q')     3       False  1517-06-30", "<object>     <int64> <bool> <datetime64[D]>"], "FrameHE.relabel_level_add()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.relabel_level_add('I')", "<FrameHE: x>", "<Index>                        a       b      c               <<U1>", "<IndexHierarchy>", "I                0       p     10      False  1517-01-01", "I                0       q     2       True   1517-04-01", "I                1       p     8       True   1517-12-31", "I                1       q     3       False  1517-06-30", "<<U1>            <int64> <<U1> <int64> <bool> <datetime64[D]>"], "FrameHE.relabel_level_drop()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iloc[:2].relabel_level_drop(1)", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "p            10      False  1517-01-01", "q            2       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>"], "FrameHE.relabel_shift_in()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.relabel_shift_in('a')", "<FrameHE: x>", "<Index>                                            b      c               <<U1>", "<IndexHierarchy: ('__index0__', '...", "0                                    p     10      False  1517-01-01", "0                                    q     2       True   1517-04-01", "1                                    p     8       True   1517-12-31", "1                                    q     3       False  1517-06-30", "<int64>                              <<U1> <int64> <bool> <datetime64[D]>"], "FrameHE.relabel_shift_out()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.rename(index=('d', 'e')).relabel_shift_out([1, 0])", "<FrameHE: x>", "<Index>      e     d       a       b      c               <<U1>", "<Index>", "0            p     0       10      False  1517-01-01", "1            q     0       2       True   1517-04-01", "2            p     1       8       True   1517-12-31", "3            q     1       3       False  1517-06-30", "<int64>      <<U1> <int64> <int64> <bool> <datetime64[D]>"], "FrameHE.rename()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.rename('y', index='p', columns='q')", "<FrameHE: y>", "<Index: q>                a       b      c               <<U1>", "<IndexHierarchy: p>", "0                   p     10      False  1517-01-01", "0                   q     2       True   1517-04-01", "1                   p     8       True   1517-12-31", "1                   q     3       False  1517-06-30", "<int64>             <<U1> <int64> <bool> <datetime64[D]>"], "FrameHE.roll()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.roll(3)", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            2       True   1517-04-01", "1            8       True   1517-12-31", "2            3       False  1517-06-30", "3            10      False  1517-01-01", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameHE.sample()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.sample(2, 2, seed=0)", "<FrameHE: x>", "<Index>      b      c               <<U1>", "<Index>", "2            True   1517-12-31", "3            False  1517-06-30", "<int64>      <bool> <datetime64[D]>"], "FrameHE.set_columns()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.set_columns((1, 'p'), drop=True)", "<FrameHE: x>", "<Index: (1, 'p')>       8       True   1517-12-31      <object>", "<IndexHierarchy>", "0                 p     10      False  1517-01-01", "0                 q     2       True   1517-04-01", "1                 q     3       False  1517-06-30", "<int64>           <<U1> <int64> <bool> <datetime64[D]>"], "FrameHE.set_columns_hierarchy()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.set_columns_hierarchy([(1, 'p'), (1, 'q')], drop=True)", "<FrameHE: x>", "<IndexHierarchy: ((1, 'p'), (1, '...       8       True   1517-12-31      <object>", "                                           3       False  1517-06-30      <object>", "<IndexHierarchy>", "0                                    p     10      False  1517-01-01", "0                                    q     2       True   1517-04-01", "<int64>                              <<U1> <int64> <bool> <datetime64[D]>"], "FrameHE.set_index()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.set_index('c', drop=True, index_constructor=sf.IndexDate)", "<FrameHE: x>", "<Index>         a       b      <<U1>", "<IndexDate: c>", "1517-01-01      10      False", "1517-04-01      2       True", "1517-12-31      8       True", "1517-06-30      3       False", "<datetime64[D]> <int64> <bool>"], "FrameHE.set_index_hierarchy()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.set_index_hierarchy(['b', 'c'], drop=True, index_constructors=(sf.Index, sf.IndexDate))", "<FrameHE: x>", "<Index>                                      a       <<U1>", "<IndexHierarchy: ('b', 'c')>", "False                        1517-01-01      10", "True                         1517-04-01      2", "True                         1517-12-31      8", "False                        1517-06-30      3", "<bool>                       <datetime64[D]> <int64>"], "FrameHE.shift()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.shift(3, fill_value=sf.FillValueAuto)", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            0       False  NaT", "1            0       False  NaT", "2            0       False  NaT", "3            10      False  1517-01-01", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameHE.sort_columns()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.sort_columns(ascending=False)", "<FrameHE: x>", "<Index>                c               b      a       <<U1>", "<IndexHierarchy>", "0                p     1517-01-01      False  10", "0                q     1517-04-01      True   2", "1                p     1517-12-31      True   8", "1                q     1517-06-30      False  3", "<int64>          <<U1> <datetime64[D]> <bool> <int64>"], "FrameHE.sort_index()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.sort_index(ascending=False)", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "1                q     3       False  1517-06-30", "1                p     8       True   1517-12-31", "0                q     2       True   1517-04-01", "0                p     10      False  1517-01-01", "<int64>          <<U1> <int64> <bool> <datetime64[D]>"], "FrameHE.sort_values()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.sort_values('c')", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "3            3       False  1517-06-30", "2            8       True   1517-12-31", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.sort_values(['c', 'b'], ascending=False)", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "1            2       True   1517-04-01", "0            10      False  1517-01-01", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameHE.std()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.std()", "<Series>", "<Index>", "a        1.632993161855452", "b        1.632993161855452", "<<U1>    <float64>"], "FrameHE.sum()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.sum()", "<Series>", "<Index>", "a        6", "b        9", "<<U1>    <int64>"], "FrameHE.tail()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.tail(2)", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameHE.transpose()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.transpose()", "<FrameHE: x>", "<Index>      p       q       r       <<U1>", "<Index>", "a            0       2       4", "b            1       3       5", "<<U1>        <int64> <int64> <int64>"], "FrameHE.unique()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "1            2.0       True     1517-04-01", "2            nan       None     NaT", "3            2.0       True     1517-04-01", "<int64>      <float64> <object> <datetime64[D]>", ">>> f.unique()", "[10.0 False datetime.date(1517, 1, 1) 2.0 True datetime.date(1517, 4, 1)", " nan None]"], "FrameHE.unique_enumerated()": [">>> f = sf.FrameHE.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "1            2.0       True     1517-04-01", "2            nan       None     NaT", "3            2.0       True     1517-04-01", "<int64>      <float64> <object> <datetime64[D]>", ">>> f.unique_enumerated(retain_order=True, func=sf.isna_element)", "(array([[ 0,  2,  4],", "       [ 1,  3,  5],", "       [-1, -1, -1],", "       [ 1,  3,  5]]), array([10.0, 2.0, False, True, datetime.date(1517, 1, 1),", "       datetime.date(1517, 4, 1)], dtype=object))"], "FrameHE.unset_columns()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.rename(columns='o').unset_columns()", "<FrameHE: x>", "<Index>      0        1        <int64>", "<Index>", "o            a        b", "p            0        1", "q            2        3", "r            4        5", "<<U1>        <object> <object>"], "FrameHE.unset_index()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.rename(index=(('d', 'e'))).unset_index()", "<FrameHE: x>", "<Index>      d       e     a       b      c               <<U1>", "<Index>", "0            0       p     10      False  1517-01-01", "1            0       q     2       True   1517-04-01", "2            1       p     8       True   1517-12-31", "3            1       q     3       False  1517-06-30", "<int64>      <int64> <<U1> <int64> <bool> <datetime64[D]>"], "FrameHE.var()": [">>> f = sf.FrameHE(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.var()", "<Series>", "<Index>", "a        2.6666666666666665", "b        2.6666666666666665", "<<U1>    <float64>"], "FrameHE.__contains__()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.__contains__('a')", "True"], "FrameHE.__iter__()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> tuple(f.__iter__())", "('a', 'b', 'c')"], "FrameHE.__reversed__()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> tuple(f.__reversed__())", "('c', 'b', 'a')"], "FrameHE.get()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.get('a')", "<Series: a>", "<Index>", "0           10", "1           2", "2           8", "3           3", "<int64>     <int64>", ">>> f.get('z', -1)", "-1"], "FrameHE.items()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> tuple(f.items())", "(('a', <Series: a>", "<Index>", "0           10", "1           2", "2           8", "3           3", "<int64>     <int64>), ('b', <Series: b>", "<Index>", "0           False", "1           True", "2           True", "3           False", "<int64>     <bool>), ('c', <Series: c>", "<Index>", "0           1517-01-01", "1           1517-04-01", "2           1517-12-31", "3           1517-06-30", "<int64>     <datetime64[D]>))"], "FrameHE.keys()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.keys()", "<Index>", "a", "b", "c", "<<U1>"], "FrameHE.values": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.values", "[[10 False datetime.date(1517, 1, 1)]", " [2 True datetime.date(1517, 4, 1)]", " [8 True datetime.date(1517, 12, 31)]", " [3 False datetime.date(1517, 6, 30)]]"], "FrameHE.interface": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.interface", "<Frame>", "<Index>                              cls_name group           doc                  <<U18>", "<Index: signature>", "__init__(data, *, index, columns,... FrameHE  Constructor     Initializer. Args...", "from_arrow(value, *, index_depth,... FrameHE  Constructor     Realize a Frame f...", "from_clipboard(*, delimiter, inde... FrameHE  Constructor     Create a Frame fr...", "from_concat(frames, *, axis, unio... FrameHE  Constructor     Concatenate multi...", "from_concat_items(items, *, axis,... FrameHE  Constructor     Produce a Frame w...", "from_csv(fp, *, index_depth, inde... FrameHE  Constructor     Specialized versi...", "from_delimited(fp, *, delimiter, ... FrameHE  Constructor     Create a Frame fr...", "from_dict(mapping, *, index, fill... FrameHE  Constructor     Create a Frame fr...", "from_dict_fields(fields, *, colum... FrameHE  Constructor     Frame constructor...", "from_dict_records(records, *, ind... FrameHE  Constructor     Frame constructor...", "from_dict_records_items(items, *,... FrameHE  Constructor     Frame constructor...", "from_duckdb(fp, *, label, index_d... FrameHE  Constructor     Load Frame from t...", "from_element(element, *, index, c... FrameHE  Constructor     Create a Frame fr...", "from_element_items(items, *, inde... FrameHE  Constructor     Create a Frame fr...", "from_elements(elements, *, index,... FrameHE  Constructor     Create a Frame fr...", "from_fields(fields, *, index, col... FrameHE  Constructor     Frame constructor...", "from_hdf5(fp, *, label, index_dep... FrameHE  Constructor     Load Frame from t...", "...                                  ...      ...             ...", "reduce.from_func(func, *, fill_va... FrameHE  Accessor Reduce For each Frame, a...", "reduce.from_func(func, *, fill_va... FrameHE  Accessor Reduce For each Frame, a...", "reduce.from_map_func(func, *, fil... FrameHE  Accessor Reduce For each Frame, r...", "reduce.from_map_func(func, *, fil... FrameHE  Accessor Reduce For each Frame, r...", "reduce.from_map_func(func, *, fil... FrameHE  Accessor Reduce For each Frame, r...", "reduce.from_map_func(func, *, fil... FrameHE  Accessor Reduce For each Frame, r...", "reduce.from_map_func(func, *, fil... FrameHE  Accessor Reduce For each Frame, r...", "reduce.from_label_map(func_map, *... FrameHE  Accessor Reduce For Frame, reduce...", "reduce.from_label_map(func_map, *... FrameHE  Accessor Reduce For Frame, reduce...", "reduce.from_label_map(func_map, *... FrameHE  Accessor Reduce For Frame, reduce...", "reduce.from_label_map(func_map, *... FrameHE  Accessor Reduce For Frame, reduce...", "reduce.from_label_map(func_map, *... FrameHE  Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... FrameHE  Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... FrameHE  Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... FrameHE  Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... FrameHE  Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... FrameHE  Accessor Reduce For Frame, reduce...", "<<U160>                              <<U7>    <<U27>          <<U83>"], "FrameHE.__repr__()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> repr(f)", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameHE.__str__()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> str(f)", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameHE.display()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.display()", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.display(sf.DisplayConfig(type_show=False))", "  a  b     c", "0 10 False 1517-01-01", "1 2  True  1517-04-01", "2 8  True  1517-12-31", "3 3  False 1517-06-30"], "FrameHE.display_tall()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.display_tall()", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameHE.display_wide()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.display_wide()", "<FrameHE: x>", "<Index>      a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameHE.assign[]()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign['a'](-1)", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            -1      8       1", "q            -1      -3      0", "r            -1      8       9", "s            -1      0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign[['a', 'c']](-1)", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            -1      8       -1", "q            -1      -3      -1", "r            -1      8       -1", "s            -1      0       -1", "<<U1>        <int64> <int64> <int64>"], "FrameHE.assign[].apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign['a'].apply(lambda s: s / 100)", "<FrameHE: x>", "<Index>      a         b       c       <<U1>", "<Index>", "p            0.1       8       1", "q            -0.02     -3      0", "r            0.0       8       9", "s            0.0       0       12", "<<U1>        <float64> <int64> <int64>"], "FrameHE.assign[].apply_element()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign['a'].apply_element(lambda e: e / 100 if e < 8 else e)", "<FrameHE: x>", "<Index>      a         b       c       <<U1>", "<Index>", "p            10.0      8       1", "q            -0.02     -3      0", "r            0.0       8       9", "s            0.0       0       12", "<<U1>        <float64> <int64> <int64>"], "FrameHE.assign[].apply_element_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign['a'].apply_element_items(lambda l, e: e / 100 if l == ('q', 'a') else e)", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameHE.assign.iloc[]()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.iloc[2]((-1, -2, -3))", "<FrameHE: x>", "<Index>      a            b            c            <<U1>", "<Index>", "p            10           8            1", "q            -2           -3           0", "r            (-1, -2, -3) (-1, -2, -3) (-1, -2, -3)", "s            0            0            12", "<<U1>        <object>     <object>     <object>", ">>> f.assign.iloc[2:](-1)", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            -1      -1      -1", "s            -1      -1      -1", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.iloc[[0, 3]](-1)", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            -1      -1      -1", "q            -2      -3      0", "r            0       8       9", "s            -1      -1      -1", "<<U1>        <int64> <int64> <int64>"], "FrameHE.assign.iloc[].apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.iloc[2:].apply(lambda s: s / 100)", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "p            10.0      8.0       1.0", "q            -2.0      -3.0      0.0", "r            0.0       0.08      0.09", "s            0.0       0.0       0.12", "<<U1>        <float64> <float64> <float64>"], "FrameHE.assign.iloc[].apply_element()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.iloc[1:].apply_element(lambda e: e / 100 if e < 8 else e)", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "p            10.0      8.0       1.0", "q            -0.02     -0.03     0.0", "r            0.0       8.0       9.0", "s            0.0       0.0       12.0", "<<U1>        <float64> <float64> <float64>"], "FrameHE.assign.iloc[].apply_element_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.iloc[1:].apply_element_items(lambda l, e: e / 100 if l == ('q', 'a') else e)", "<FrameHE: x>", "<Index>      a         b       c       <<U1>", "<Index>", "p            10.0      8       1", "q            -0.02     -3      0", "r            0.0       8       9", "s            0.0       0       12", "<<U1>        <float64> <int64> <int64>"], "FrameHE.assign.loc[]()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.loc['r'](-1)", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            -1      -1      -1", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.loc['r':](-1)", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            -1      -1      -1", "s            -1      -1      -1", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.loc[['p', 's']](-1)", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            -1      -1      -1", "q            -2      -3      0", "r            0       8       9", "s            -1      -1      -1", "<<U1>        <int64> <int64> <int64>"], "FrameHE.assign.loc[].apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.loc['r':].apply(lambda s: s / 100)", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "p            10.0      8.0       1.0", "q            -2.0      -3.0      0.0", "r            0.0       0.08      0.09", "s            0.0       0.0       0.12", "<<U1>        <float64> <float64> <float64>"], "FrameHE.assign.loc[].apply_element()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.loc['r':].apply_element(lambda e: e / 100 if e < 10 else e)", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "p            10.0      8.0       1.0", "q            -2.0      -3.0      0.0", "r            0.0       0.08      0.09", "s            0.0       0.0       12.0", "<<U1>        <float64> <float64> <float64>"], "FrameHE.assign.loc[].apply_element_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.loc['r':].apply_element_items(lambda l, e: e / 100 if l[1] == 'c' else e)", "<FrameHE: x>", "<Index>      a       b       c         <<U1>", "<Index>", "p            10      8       1.0", "q            -2      -3      0.0", "r            0       8       0.09", "s            0       0       0.12", "<<U1>        <int64> <int64> <float64>"], "FrameHE.assign.bloc[]()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.bloc[f > 5](-1)", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            -1      -1      1", "q            -2      -3      0", "r            0       -1      -1", "s            0       0       -1", "<<U1>        <int64> <int64> <int64>"], "FrameHE.assign.bloc[].apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.bloc[f > 5].apply(lambda s: s * .01)", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "p            0.1       0.08      1.0", "q            -2.0      -3.0      0.0", "r            0.0       0.08      0.09", "s            0.0       0.0       0.12", "<<U1>        <float64> <float64> <float64>"], "FrameHE.assign.bloc[].apply_element()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.bloc[f > 5].apply_element(lambda e: e * .01 if e == 8 else e)", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "p            10.0      0.08      1.0", "q            -2.0      -3.0      0.0", "r            0.0       0.08      9.0", "s            0.0       0.0       12.0", "<<U1>        <float64> <float64> <float64>"], "FrameHE.assign.bloc[].apply_element_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.bloc[f > 5].apply_element_items(lambda e: e * .01 if l[1] == 'c' else e)", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "FrameHE.bloc[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.bloc[f > 5]", "<Series>", "<Index>", "('p', 'a') 10", "('p', 'b') 8", "('r', 'b') 8", "('r', 'c') 9", "('s', 'c') 12", "<object>   <int64>"], "FrameHE.drop[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.drop['c']", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            10      8", "q            -2      -3", "r            0       8", "s            0       0", "<<U1>        <int64> <int64>", ">>> f.drop['b':]", "<FrameHE: x>", "<Index>      a       <<U1>", "<Index>", "p            10", "q            -2", "r            0", "s            0", "<<U1>        <int64>", ">>> f.drop[['a', 'c']]", "<FrameHE: x>", "<Index>      b       <<U1>", "<Index>", "p            8", "q            -3", "r            8", "s            0", "<<U1>        <int64>"], "FrameHE.drop.iloc[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.drop.iloc[1]", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.drop.iloc[1:]", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "<<U1>        <int64> <int64> <int64>", ">>> f.drop.iloc[[0, 2]]", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "q            -2      -3      0", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameHE.drop.loc[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.drop.loc['r']", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.drop.loc['r':]", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "<<U1>        <int64> <int64> <int64>", ">>> f.drop.loc[['p', 's']]", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "q            -2      -3      0", "r            0       8       9", "<<U1>        <int64> <int64> <int64>"], "FrameHE.mask[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.mask['c']", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         False  False  True", "q         False  False  True", "r         False  False  True", "s         False  False  True", "<<U1>     <bool> <bool> <bool>", ">>> f.mask['b':]", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         False  True   True", "q         False  True   True", "r         False  True   True", "s         False  True   True", "<<U1>     <bool> <bool> <bool>", ">>> f.mask[['a', 'c']]", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         True   False  True", "q         True   False  True", "r         True   False  True", "s         True   False  True", "<<U1>     <bool> <bool> <bool>"], "FrameHE.mask.iloc[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.mask.iloc[1]", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         True   True   True", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>", ">>> f.mask.iloc[1:]", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         True   True   True", "r         True   True   True", "s         True   True   True", "<<U1>     <bool> <bool> <bool>", ">>> f.mask.iloc[[0, 2]]", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         True   True   True", "q         False  False  False", "r         True   True   True", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameHE.mask.loc[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.mask.loc['r']", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         False  False  False", "r         True   True   True", "s         False  False  False", "<<U1>     <bool> <bool> <bool>", ">>> f.mask.loc['r':]", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         False  False  False", "r         True   True   True", "s         True   True   True", "<<U1>     <bool> <bool> <bool>", ">>> f.mask.loc[['p', 's']]", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         True   True   True", "q         False  False  False", "r         False  False  False", "s         True   True   True", "<<U1>     <bool> <bool> <bool>"], "FrameHE.masked_array[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.masked_array['c']", "[[10 8 --]", " [-2 -3 --]", " [0 8 --]", " [0 0 --]]", ">>> f.masked_array['b':]", "[[10 -- --]", " [-2 -- --]", " [0 -- --]", " [0 -- --]]", ">>> f.masked_array[['a', 'c']]", "[[-- 8 --]", " [-- -3 --]", " [-- 8 --]", " [-- 0 --]]"], "FrameHE.masked_array.iloc[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.masked_array.iloc[1]", "[[10 8 1]", " [-- -- --]", " [0 8 9]", " [0 0 12]]", ">>> f.masked_array.iloc[1:]", "[[10 8 1]", " [-- -- --]", " [-- -- --]", " [-- -- --]]", ">>> f.masked_array.iloc[[0, 2]]", "[[-- -- --]", " [-2 -3 0]", " [-- -- --]", " [0 0 12]]"], "FrameHE.masked_array.loc[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.masked_array.loc['r']", "[[10 8 1]", " [-2 -3 0]", " [-- -- --]", " [0 0 12]]", ">>> f.masked_array.loc['r':]", "[[10 8 1]", " [-2 -3 0]", " [-- -- --]", " [-- -- --]]", ">>> f.masked_array.loc[['p', 's']]", "[[-- -- --]", " [-2 -3 0]", " [0 8 9]", " [-- -- --]]"], "FrameHE.[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f['b']", "<Series: b>", "<Index>", "p           8", "q           -3", "r           8", "s           0", "<<U1>       <int64>", ">>> f['b':]", "<FrameHE: x>", "<Index>      b       c       <<U1>", "<Index>", "p            8       1", "q            -3      0", "r            8       9", "s            0       12", "<<U1>        <int64> <int64>", ">>> f[['a', 'c']]", "<FrameHE: x>", "<Index>      a       c       <<U1>", "<Index>", "p            10      1", "q            -2      0", "r            0       9", "s            0       12", "<<U1>        <int64> <int64>"], "FrameHE.iloc[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iloc[2]", "<Series: r>", "<Index>", "a           0", "b           8", "c           9", "<<U1>       <int64>", ">>> f.iloc[2:]", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iloc[[0, 3]]", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameHE.loc[]": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.loc['r']", "<Series: r>", "<Index>", "a           0", "b           8", "c           9", "<<U1>       <int64>", ">>> f.loc['r':]", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.loc[['p', 's']]", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameHE.iter_array()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_array())", "(array([10, -2,  0,  0]), array([ 8, -3,  8,  0]), array([ 1,  0,  9, 12]))"], "FrameHE.iter_array().apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_array().apply(lambda v: v.sum())", "<Series>", "<Index>", "a        8", "b        13", "c        22", "<<U1>    <int64>"], "FrameHE.iter_array().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_array().apply_iter(lambda v: v.sum()))", "(8, 13, 22)"], "FrameHE.iter_array().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_array().apply_iter_items(lambda v: v.sum()))", "(('a', 8), ('b', 13), ('c', 22))"], "FrameHE.iter_array().apply_pool()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_array().apply_pool(lambda v: v.sum(), use_threads=True)", "<Series>", "<Index>", "a        8", "b        13", "c        22", "<<U1>    <int64>"], "FrameHE.iter_array_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_array_items())", "(('a', array([10, -2,  0,  0])), ('b', array([ 8, -3,  8,  0])), ('c', array([ 1,  0,  9, 12])))"], "FrameHE.iter_array_items().apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_array_items().apply(lambda k, v: v.sum() if k != 'b' else -1)", "<Series>", "<Index>", "a        8", "b        -1", "c        22", "<<U1>    <int64>"], "FrameHE.iter_array_items().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_array_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))", "(8, -1, 22)"], "FrameHE.iter_array_items().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_array_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))", "(('a', 8), ('b', -1), ('c', 22))"], "FrameHE.iter_array_items().apply_pool()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_array_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)", "<Series>", "<Index>", "a        8", "b        -1", "c        22", "<<U1>    <int64>"], "FrameHE.iter_element()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element())", "(10, 8, 1, -2, -3, 0, 0, 8, 9, 0, 0, 12)"], "FrameHE.iter_element().apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element().apply(lambda e: e > 5)", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         True   True   False", "q         False  False  False", "r         False  True   True", "s         False  False  True", "<<U1>     <bool> <bool> <bool>"], "FrameHE.iter_element().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().apply_iter(lambda e: e > 10))", "(False, False, False, False, False, False, False, False, False, False, False, True)"], "FrameHE.iter_element().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().apply_iter_items(lambda e: e > 10))", "((('p', 'a'), False), (('p', 'b'), False), (('p', 'c'), False), (('q', 'a'), False), (('q', 'b'), False), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), False), (('r', 'c'), False), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), True))"], "FrameHE.iter_element().apply_pool()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element().apply_pool(lambda e: e > 5, use_threads=True)", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         True   True   False", "q         False  False  False", "r         False  True   True", "s         False  False  True", "<<U1>     <bool> <bool> <bool>"], "FrameHE.iter_element().map_all()": [">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element().map_all({0: 200, 1: -1, 2: 45})", "<FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "p         -1      45      -1", "q         45      -1      200", "r         200     45      45", "s         200     200     -1", "<<U1>     <int64> <int64> <int64>"], "FrameHE.iter_element().map_all_iter()": [">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_all_iter({0: 200, 1: -1, 2: 45}))", "(-1, 45, -1, 45, -1, 200, 200, 45, 45, 200, 200, -1)"], "FrameHE.iter_element().map_all_iter_items()": [">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_all_iter_items({0: 200, 1: -1, 2: 45}))", "((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 200), (('r', 'a'), 200), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 200), (('s', 'b'), 200), (('s', 'c'), -1))"], "FrameHE.iter_element().map_any()": [">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element().map_any({1: -1, 2: 45})", "<FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "p         -1      45      -1", "q         45      -1      0", "r         0       45      45", "s         0       0       -1", "<<U1>     <int64> <int64> <int64>"], "FrameHE.iter_element().map_any_iter()": [">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_any_iter({1: -1, 2: 45}))", "(-1, 45, -1, 45, -1, 0, 0, 45, 45, 0, 0, -1)"], "FrameHE.iter_element().map_any_iter_items()": [">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_any_iter_items({1: -1, 2: 45}))", "((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), -1))"], "FrameHE.iter_element().map_fill()": [">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element().map_fill({1: -1, 2: 45}, fill_value=np.nan)", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         -1.0      45.0      -1.0", "q         45.0      -1.0      nan", "r         nan       45.0      45.0", "s         nan       nan       -1.0", "<<U1>     <float64> <float64> <float64>"], "FrameHE.iter_element().map_fill_iter()": [">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_fill_iter({1: -1, 2: 45}, fill_value=np.nan))", "(-1, 45, -1, 45, -1, nan, nan, 45, 45, nan, nan, -1)"], "FrameHE.iter_element().map_fill_iter_items()": [">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_fill_iter_items({1: -1, 2: 45}, fill_value=np.nan))", "((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), nan), (('r', 'a'), nan), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), nan), (('s', 'b'), nan), (('s', 'c'), -1))"], "FrameHE.iter_element_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element_items())", "((('p', 'a'), 10), (('p', 'b'), 8), (('p', 'c'), 1), (('q', 'a'), -2), (('q', 'b'), -3), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 8), (('r', 'c'), 9), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), 12))"], "FrameHE.iter_element_items().apply()": [">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element_items().apply(lambda k, v: v > 1 if k != ('q', 'b') else 'x')", "<FrameHE>", "<Index>   a      b        c      <<U1>", "<Index>", "p         False  True     False", "q         True   x        False", "r         False  True     True", "s         False  False    False", "<<U1>     <bool> <object> <bool>"], "FrameHE.iter_element_items().apply_iter()": [">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element_items().apply_iter(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))", "(False, True, False, True, 'x', False, False, True, True, False, False, False)"], "FrameHE.iter_element_items().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element_items().apply_iter_items(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))", "((('p', 'a'), False), (('p', 'b'), True), (('p', 'c'), False), (('q', 'a'), True), (('q', 'b'), 'x'), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), True), (('r', 'c'), True), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), False))"], "FrameHE.iter_element_items().apply_pool()": [">>> def func(pair): return pair[1] > 0 and pair[0] == ('q', 'b')", ">>> f = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element_items().apply_pool(func, use_threads=True)", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         False  True   False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameHE.iter_element_items().map_all()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_element_items().map_all({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1})", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         200     -1", "q         45      1", "<<U1>     <int64> <int64>"], "FrameHE.iter_element_items().map_all_iter()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_element_items().map_all_iter({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))", "(200, -1, 45, 1)"], "FrameHE.iter_element_items().map_all_iter_items()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_element_items().map_all_iter_items({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))", "((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), 45), (('q', 'b'), 1))"], "FrameHE.iter_element_items().map_any()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_element_items().map_any({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1})", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         200     3", "q         9       1", "<<U1>     <int64> <int64>"], "FrameHE.iter_element_items().map_any_iter()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_element_items().map_any_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))", "(200, 3, 9, 1)"], "FrameHE.iter_element_items().map_any_iter_items()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_element_items().map_any_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))", "((('p', 'a'), 200), (('p', 'b'), 3), (('q', 'a'), 9), (('q', 'b'), 1))"], "FrameHE.iter_element_items().map_fill()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_element_items().map_fill({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1)", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         200     -1", "q         -1      1", "<<U1>     <int64> <int64>"], "FrameHE.iter_element_items().map_fill_iter()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_element_items().map_fill_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))", "(200, -1, -1, 1)"], "FrameHE.iter_element_items().map_fill_iter_items()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_element_items().map_fill_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))", "((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), -1), (('q', 'b'), 1))"], "FrameHE.iter_group()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c'))", "(<FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "0         11      0       0", "2         10      3       0", "<int64>   <int64> <int64> <int64>, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "1         4       8       1", "3         2       8       1", "<int64>   <int64> <int64> <int64>)"], "FrameHE.iter_group().apply()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group('c').apply(lambda f: f['b'].sum())", "<Series>", "<Index: c>", "0          3", "1          16", "<int64>    <int64>"], "FrameHE.iter_group().apply_iter()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').apply_iter(lambda f: f['b'].sum()))", "(3, 16)"], "FrameHE.iter_group().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').apply_iter_items(lambda f: f['b'].sum()))", "((0, 3), (1, 16))"], "FrameHE.iter_group().apply_pool()": [">>> def func(f): return f['b'].sum()", ">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group('c').apply_pool(func, use_threads=True)", "<Series>", "<Index: c>", "0          3", "1          16", "<int64>    <int64>"], "FrameHE.iter_group().reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).keys())", "(0, 1)"], "FrameHE.iter_group().reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "(0, 1)"], "FrameHE.iter_group().reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).items())", "((0, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "2         10      3       0", "<int64>   <int64> <int64> <int64>), (1, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>))"], "FrameHE.iter_group().reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).values())", "(<FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "2         10      3       0", "<int64>   <int64> <int64> <int64>, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>)"], "FrameHE.iter_group().reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "2       10      3       0", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_group().reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_map_func(np.min).keys())", "(0, 1)"], "FrameHE.iter_group().reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_map_func(np.min).__iter__())", "(0, 1)"], "FrameHE.iter_group().reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_map_func(np.min).items())", "((0, <Series: 0>", "<Index>", "a           10", "b           0", "c           0", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "a           2", "b           8", "c           1", "<<U1>       <int64>))"], "FrameHE.iter_group().reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_map_func(np.min).values())", "(<Series: 0>", "<Index>", "a           10", "b           0", "c           0", "<<U1>       <int64>, <Series: 1>", "<Index>", "a           2", "b           8", "c           1", "<<U1>       <int64>)"], "FrameHE.iter_group().reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group('c').reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       10      0       0", "1       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_group().reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(0, 1)"], "FrameHE.iter_group().reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(0, 1)"], "FrameHE.iter_group().reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((0, <Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>))"], "FrameHE.iter_group().reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(<Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>)"], "FrameHE.iter_group().reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "<int64> <int64> <int64>"], "FrameHE.iter_group().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(0, 1)"], "FrameHE.iter_group().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(0, 1)"], "FrameHE.iter_group().reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((0, <Series: 0>", "<Index>", "b-min       0", "b-max       3", "<<U5>       <int64>), (1, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>))"], "FrameHE.iter_group().reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: 0>", "<Index>", "b-min       0", "b-max       3", "<<U5>       <int64>, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>)"], "FrameHE.iter_group().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       3", "1       8       8", "<int64> <int64> <int64>"], "FrameHE.iter_group_array()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c'))", "(array([[11,  0,  0],", "       [10,  3,  0]]), array([[4, 8, 1],", "       [2, 8, 1]]))"], "FrameHE.iter_group_array().apply()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array('c').apply(lambda a: np.sum(a))", "<Series>", "<Index: c>", "0          24", "1          24", "<int64>    <int64>"], "FrameHE.iter_group_array().apply_iter()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').apply_iter(lambda a: np.sum(a)))", "(24, 24)"], "FrameHE.iter_group_array().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').apply_iter_items(lambda a: np.sum(a)))", "((0, 24), (1, 24))"], "FrameHE.iter_group_array().apply_pool()": [">>> def func(a): return np.sum(a)", ">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array('c').apply_pool(func, use_threads=True)", "<Series>", "<Index: c>", "0          24", "1          24", "<int64>    <int64>"], "FrameHE.iter_group_array().reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).keys())", "(0, 1)"], "FrameHE.iter_group_array().reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).__iter__())", "(0, 1)"], "FrameHE.iter_group_array().reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).items())", "((0, array([21,  3,  0])), (1, array([ 6, 16,  2])))"], "FrameHE.iter_group_array().reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).values())", "(array([21,  3,  0]), array([ 6, 16,  2]))"], "FrameHE.iter_group_array().reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       21", "1       3", "2       0", "3       6", "4       16", "5       2", "<int64> <int64>"], "FrameHE.iter_group_array().reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_map_func(np.min).keys())", "(0, 1)"], "FrameHE.iter_group_array().reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_map_func(np.min).__iter__())", "(0, 1)"], "FrameHE.iter_group_array().reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_map_func(np.min).items())", "((0, array([10,  0,  0])), (1, array([2, 8, 1])))"], "FrameHE.iter_group_array().reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_map_func(np.min).values())", "(array([10,  0,  0]), array([2, 8, 1]))"], "FrameHE.iter_group_array().reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array('c').reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       10      0       0", "1       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_group_array().reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(0, 1)"], "FrameHE.iter_group_array().reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(0, 1)"], "FrameHE.iter_group_array().reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((0, array([ 0, 11])), (1, array([8, 4])))"], "FrameHE.iter_group_array().reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(array([ 0, 11]), array([8, 4]))"], "FrameHE.iter_group_array().reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "<int64> <int64> <int64>"], "FrameHE.iter_group_array().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(0, 1)"], "FrameHE.iter_group_array().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(0, 1)"], "FrameHE.iter_group_array().reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((0, array([0, 3])), (1, array([8, 8])))"], "FrameHE.iter_group_array().reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(array([0, 3]), array([8, 8]))"], "FrameHE.iter_group_array().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       3", "1       8       8", "<int64> <int64> <int64>"], "FrameHE.iter_group_array_items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c'))", "((0, array([[11,  0,  0],", "       [10,  3,  0]])), (1, array([[4, 8, 1],", "       [2, 8, 1]])))"], "FrameHE.iter_group_array_items().apply()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').apply(lambda k, v: np.sum(v) if k == 0 else v.shape)", "<Series>", "<Index: c>", "0          24", "1          (2, 3)", "<int64>    <object>"], "FrameHE.iter_group_array_items().apply_iter()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').apply_iter(lambda k, v: np.sum(v) if k == 0 else v.shape))", "(24, (2, 3))"], "FrameHE.iter_group_array_items().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').apply_iter_items(lambda k, v: np.sum(v) if k == 0 else v.shape))", "((0, 24), (1, (2, 3)))"], "FrameHE.iter_group_array_items().reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).keys())", "(0, 1)"], "FrameHE.iter_group_array_items().reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).__iter__())", "(0, 1)"], "FrameHE.iter_group_array_items().reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).items())", "((0, array([21,  3,  0])), (1, array([ 6, 16,  2])))"], "FrameHE.iter_group_array_items().reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).values())", "(array([21,  3,  0]), array([ 6, 16,  2]))"], "FrameHE.iter_group_array_items().reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       21", "1       3", "2       0", "3       6", "4       16", "5       2", "<int64> <int64>"], "FrameHE.iter_group_array_items().reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).keys())", "(0, 1)"], "FrameHE.iter_group_array_items().reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).__iter__())", "(0, 1)"], "FrameHE.iter_group_array_items().reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).items())", "((0, array([10,  0,  0])), (1, array([2, 8, 1])))"], "FrameHE.iter_group_array_items().reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).values())", "(array([10,  0,  0]), array([2, 8, 1]))"], "FrameHE.iter_group_array_items().reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       10      0       0", "1       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_group_array_items().reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).keys())", "(0, 1)"], "FrameHE.iter_group_array_items().reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).__iter__())", "(0, 1)"], "FrameHE.iter_group_array_items().reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).items())", "((0, array([ 0, 11])), (1, array([8, 4])))"], "FrameHE.iter_group_array_items().reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).values())", "(array([ 0, 11]), array([8, 4]))"], "FrameHE.iter_group_array_items().reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "<int64> <int64> <int64>"], "FrameHE.iter_group_array_items().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).keys())", "(0, 1)"], "FrameHE.iter_group_array_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).__iter__())", "(0, 1)"], "FrameHE.iter_group_array_items().reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).items())", "((0, array([0, 3])), (1, array([8, 8])))"], "FrameHE.iter_group_array_items().reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).values())", "(array([0, 3]), array([8, 8]))"], "FrameHE.iter_group_array_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       3", "1       8       8", "<int64> <int64> <int64>"], "FrameHE.iter_group_items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c'))", "((0, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "0         11      0       0", "2         10      3       0", "<int64>   <int64> <int64> <int64>), (1, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "1         4       8       1", "3         2       8       1", "<int64>   <int64> <int64> <int64>))"], "FrameHE.iter_group_items().apply()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_items('c').apply(lambda k, v: v['b'].sum() if k == 0 else v.shape)", "<Series>", "<Index: c>", "0          3", "1          (2, 3)", "<int64>    <object>"], "FrameHE.iter_group_items().apply_iter()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').apply_iter(lambda k, v: v['b'].sum() if k == 0 else v.shape))", "(3, (2, 3))"], "FrameHE.iter_group_items().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').apply_iter_items(lambda k, v: v['b'].sum() if k == 0 else v.shape))", "((0, 3), (1, (2, 3)))"], "FrameHE.iter_group_items().reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).keys())", "(0, 1)"], "FrameHE.iter_group_items().reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).__iter__())", "(0, 1)"], "FrameHE.iter_group_items().reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).items())", "((0, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "2         10      3       0", "<int64>   <int64> <int64> <int64>), (1, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>))"], "FrameHE.iter_group_items().reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).values())", "(<FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "2         10      3       0", "<int64>   <int64> <int64> <int64>, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>)"], "FrameHE.iter_group_items().reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "2       10      3       0", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_group_items().reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).keys())", "(0, 1)"], "FrameHE.iter_group_items().reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).__iter__())", "(0, 1)"], "FrameHE.iter_group_items().reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).items())", "((0, <Series: 0>", "<Index>", "a           10", "b           0", "c           0", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "a           2", "b           8", "c           1", "<<U1>       <int64>))"], "FrameHE.iter_group_items().reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).values())", "(<Series: 0>", "<Index>", "a           10", "b           0", "c           0", "<<U1>       <int64>, <Series: 1>", "<Index>", "a           2", "b           8", "c           1", "<<U1>       <int64>)"], "FrameHE.iter_group_items().reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       10      0       0", "1       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_group_items().reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).keys())", "(0, 1)"], "FrameHE.iter_group_items().reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).__iter__())", "(0, 1)"], "FrameHE.iter_group_items().reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).items())", "((0, <Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>))"], "FrameHE.iter_group_items().reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).values())", "(<Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>)"], "FrameHE.iter_group_items().reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "<int64> <int64> <int64>"], "FrameHE.iter_group_items().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).keys())", "(0, 1)"], "FrameHE.iter_group_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).__iter__())", "(0, 1)"], "FrameHE.iter_group_items().reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).items())", "((0, <Series: 0>", "<Index>", "b-min       0", "b-max       3", "<<U5>       <int64>), (1, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>))"], "FrameHE.iter_group_items().reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).values())", "(<Series: 0>", "<Index>", "b-min       0", "b-max       3", "<<U5>       <int64>, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>)"], "FrameHE.iter_group_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       3", "1       8       8", "<int64> <int64> <int64>"], "FrameHE.iter_group_labels()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels(1))", "(<FrameHE>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "1                p     8       True   1517-12-31", "<int64>          <<U1> <int64> <bool> <datetime64[D]>, <FrameHE>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>)"], "FrameHE.iter_group_labels().apply()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iter_group_labels(1).apply(lambda f: f['b'].sum())", "<Series>", "<Index>", "p        1", "q        1", "<<U1>    <int64>"], "FrameHE.iter_group_labels().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels(1).apply_iter(lambda f: f['b'].sum()))", "(1, 1)"], "FrameHE.iter_group_labels().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels(1).apply_iter_items(lambda f: f['b'].sum()))", "(('p', 1), ('q', 1))"], "FrameHE.iter_group_labels_array()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array(1))", "(array([[10, False, datetime.date(1517, 1, 1)],", "       [8, True, datetime.date(1517, 12, 31)]], dtype=object), array([[2, True, datetime.date(1517, 4, 1)],", "       [3, False, datetime.date(1517, 6, 30)]], dtype=object))"], "FrameHE.iter_group_labels_array().apply()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iter_group_labels_array(1).apply(lambda a: np.sum(a[:, 0]))", "<Series>", "<Index>", "p        18", "q        5", "<<U1>    <int64>"], "FrameHE.iter_group_labels_array().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array(1).apply_iter(lambda a: np.sum(a[:, 0])))", "(18, 5)"], "FrameHE.iter_group_labels_array().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array(1).apply_iter_items(lambda a: np.sum(a[:, 0])))", "(('p', 18), ('q', 5))"], "FrameHE.iter_group_labels_array_items()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array_items(1))", "(('p', array([[10, False, datetime.date(1517, 1, 1)],", "       [8, True, datetime.date(1517, 12, 31)]], dtype=object)), ('q', array([[2, True, datetime.date(1517, 4, 1)],", "       [3, False, datetime.date(1517, 6, 30)]], dtype=object)))"], "FrameHE.iter_group_labels_array_items().apply()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iter_group_labels_array_items(1).apply(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1)", "<Series>", "<Index>", "p        -1", "q        5", "<<U1>    <int64>"], "FrameHE.iter_group_labels_array_items().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array_items(1).apply_iter(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))", "(-1, 5)"], "FrameHE.iter_group_labels_array_items().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array_items(1).apply_iter_items(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))", "(('p', -1), ('q', 5))"], "FrameHE.iter_group_labels_items()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_items(1))", "(('p', <FrameHE>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "1                p     8       True   1517-12-31", "<int64>          <<U1> <int64> <bool> <datetime64[D]>), ('q', <FrameHE>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>))"], "FrameHE.iter_group_labels_items().apply()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iter_group_labels_items(1).apply(lambda k, v: v['b'].sum() if k == 'p' else -1)", "<Series>", "<Index>", "p        1", "q        -1", "<<U1>    <int64>"], "FrameHE.iter_group_labels_items().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_items(1).apply_iter(lambda k, v: v['b'].sum() if k == 'p' else -1))", "(1, -1)"], "FrameHE.iter_group_labels_items().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_items(1).apply_iter_items(lambda k, v: v['b'].sum() if k == 'p' else -1))", "(('p', 1), ('q', -1))"], "FrameHE.iter_group_other()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 2))", "(<FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "0         11      0       0", "2         10      3       0", "<int64>   <int64> <int64> <int64>, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "1         4       8       1", "3         2       8       1", "<int64>   <int64> <int64> <int64>)"], "FrameHE.iter_group_other().apply()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 2).apply(lambda f: f['b'].sum())", "<Series>", "<Index>", "0        3", "1        16", "<int64>  <int64>"], "FrameHE.iter_group_other().apply_iter()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 2).apply_iter(lambda f: f['b'].sum()))", "(3, 16)"], "FrameHE.iter_group_other().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 2).apply_iter_items(lambda f: f['b'].sum()))", "((0, 3), (1, 16))"], "FrameHE.iter_group_other().reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other().reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other().reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).items())", "((0, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>), (1, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>), (2, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>))"], "FrameHE.iter_group_other().reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).values())", "(<FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>)"], "FrameHE.iter_group_other().reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_group_other().reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other().reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other().reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).items())", "((0, <Series: 0>", "<Index>", "a           2", "b           0", "c           0", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "a           4", "b           8", "c           1", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "a           10", "b           3", "c           0", "<<U1>       <int64>))"], "FrameHE.iter_group_other().reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).values())", "(<Series: 0>", "<Index>", "a           2", "b           0", "c           0", "<<U1>       <int64>, <Series: 1>", "<Index>", "a           4", "b           8", "c           1", "<<U1>       <int64>, <Series: 2>", "<Index>", "a           10", "b           3", "c           0", "<<U1>       <int64>)"], "FrameHE.iter_group_other().reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       2       0       0", "1       4       8       1", "2       10      3       0", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_group_other().reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other().reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other().reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((0, <Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>))"], "FrameHE.iter_group_other().reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(<Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>)"], "FrameHE.iter_group_other().reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "2       3       10", "<int64> <int64> <int64>"], "FrameHE.iter_group_other().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other().reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((0, <Series: 0>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>), (1, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>), (2, <Series: 2>", "<Index>", "b-min       3", "b-max       3", "<<U5>       <int64>))"], "FrameHE.iter_group_other().reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: 0>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>, <Series: 2>", "<Index>", "b-min       3", "b-max       3", "<<U5>       <int64>)"], "FrameHE.iter_group_other().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       8", "1       8       8", "2       3       3", "<int64> <int64> <int64>"], "FrameHE.iter_group_other_array()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 2))", "(array([[11,  0,  0],", "       [10,  3,  0]]), array([[4, 8, 1],", "       [2, 8, 1]]))"], "FrameHE.iter_group_other_array().apply()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 2).apply(lambda a: np.sum(a))", "<Series>", "<Index>", "0        24", "1        24", "<int64>  <int64>"], "FrameHE.iter_group_other_array().apply_iter()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 2).apply_iter(lambda a: np.sum(a)))", "(24, 24)"], "FrameHE.iter_group_other_array().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 2).apply_iter_items(lambda a: np.sum(a)))", "((0, 24), (1, 24))"], "FrameHE.iter_group_other_array().reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other_array().reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other_array().reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).items())", "((0, array([13,  8,  1])), (1, array([4, 8, 1])), (2, array([10,  3,  0])))"], "FrameHE.iter_group_other_array().reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).values())", "(array([13,  8,  1]), array([4, 8, 1]), array([10,  3,  0]))"], "FrameHE.iter_group_other_array().reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       13", "1       8", "2       1", "3       4", "4       8", "5       1", "6       10", "7       3", "8       0", "<int64> <int64>"], "FrameHE.iter_group_other_array().reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other_array().reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other_array().reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).items())", "((0, array([2, 0, 0])), (1, array([4, 8, 1])), (2, array([10,  3,  0])))"], "FrameHE.iter_group_other_array().reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).values())", "(array([2, 0, 0]), array([4, 8, 1]), array([10,  3,  0]))"], "FrameHE.iter_group_other_array().reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       2       0       0", "1       4       8       1", "2       10      3       0", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_group_other_array().reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other_array().reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other_array().reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((0, array([ 0, 11])), (1, array([8, 4])), (2, array([ 3, 10])))"], "FrameHE.iter_group_other_array().reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(array([ 0, 11]), array([8, 4]), array([ 3, 10]))"], "FrameHE.iter_group_other_array().reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "2       3       10", "<int64> <int64> <int64>"], "FrameHE.iter_group_other_array().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other_array().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other_array().reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((0, array([0, 8])), (1, array([8, 8])), (2, array([3, 3])))"], "FrameHE.iter_group_other_array().reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(array([0, 8]), array([8, 8]), array([3, 3]))"], "FrameHE.iter_group_other_array().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       8", "1       8       8", "2       3       3", "<int64> <int64> <int64>"], "FrameHE.iter_group_other_array_items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 2))", "((0, array([[11,  0,  0],", "       [10,  3,  0]])), (1, array([[4, 8, 1],", "       [2, 8, 1]])))"], "FrameHE.iter_group_other_array_items().apply()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 2).apply(lambda k, v: np.sum(v) if k == 0 else v.shape)", "<Series>", "<Index>", "0        24", "1        (2, 3)", "<int64>  <object>"], "FrameHE.iter_group_other_array_items().apply_iter()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 2).apply_iter(lambda k, v: np.sum(v) if k == 0 else v.shape))", "(24, (2, 3))"], "FrameHE.iter_group_other_array_items().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 2).apply_iter_items(lambda k, v: np.sum(v) if k == 0 else v.shape))", "((0, 24), (1, (2, 3)))"], "FrameHE.iter_group_other_array_items().reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other_array_items().reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other_array_items().reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).items())", "((0, array([13,  8,  1])), (1, array([4, 8, 1])), (2, array([10,  3,  0])))"], "FrameHE.iter_group_other_array_items().reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).values())", "(array([13,  8,  1]), array([4, 8, 1]), array([10,  3,  0]))"], "FrameHE.iter_group_other_array_items().reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       13", "1       8", "2       1", "3       4", "4       8", "5       1", "6       10", "7       3", "8       0", "<int64> <int64>"], "FrameHE.iter_group_other_array_items().reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other_array_items().reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other_array_items().reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).items())", "((0, array([2, 0, 0])), (1, array([4, 8, 1])), (2, array([10,  3,  0])))"], "FrameHE.iter_group_other_array_items().reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).values())", "(array([2, 0, 0]), array([4, 8, 1]), array([10,  3,  0]))"], "FrameHE.iter_group_other_array_items().reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       2       0       0", "1       4       8       1", "2       10      3       0", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_group_other_array_items().reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other_array_items().reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other_array_items().reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).items())", "((0, array([ 0, 11])), (1, array([8, 4])), (2, array([ 3, 10])))"], "FrameHE.iter_group_other_array_items().reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).values())", "(array([ 0, 11]), array([8, 4]), array([ 3, 10]))"], "FrameHE.iter_group_other_array_items().reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "2       3       10", "<int64> <int64> <int64>"], "FrameHE.iter_group_other_array_items().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other_array_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other_array_items().reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).items())", "((0, array([0, 8])), (1, array([8, 8])), (2, array([3, 3])))"], "FrameHE.iter_group_other_array_items().reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).values())", "(array([0, 8]), array([8, 8]), array([3, 3]))"], "FrameHE.iter_group_other_array_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       8", "1       8       8", "2       3       3", "<int64> <int64> <int64>"], "FrameHE.iter_group_other_items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 2))", "((0, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "0         11      0       0", "2         10      3       0", "<int64>   <int64> <int64> <int64>), (1, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "1         4       8       1", "3         2       8       1", "<int64>   <int64> <int64> <int64>))"], "FrameHE.iter_group_other_items().apply()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 2).apply(lambda k, v: v['b'].sum() if k == 0 else v.shape)", "<Series>", "<Index>", "0        3", "1        (2, 3)", "<int64>  <object>"], "FrameHE.iter_group_other_items().apply_iter()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 2).apply_iter(lambda k, v: v['b'].sum() if k == 0 else v.shape))", "(3, (2, 3))"], "FrameHE.iter_group_other_items().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 2).apply_iter_items(lambda k, v: v['b'].sum() if k == 0 else v.shape))", "((0, 3), (1, (2, 3)))"], "FrameHE.iter_group_other_items().reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other_items().reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other_items().reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).items())", "((0, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>), (1, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>), (2, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>))"], "FrameHE.iter_group_other_items().reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).values())", "(<FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>, <FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>)"], "FrameHE.iter_group_other_items().reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_group_other_items().reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other_items().reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other_items().reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).items())", "((0, <Series: 0>", "<Index>", "a           2", "b           0", "c           0", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "a           4", "b           8", "c           1", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "a           10", "b           3", "c           0", "<<U1>       <int64>))"], "FrameHE.iter_group_other_items().reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).values())", "(<Series: 0>", "<Index>", "a           2", "b           0", "c           0", "<<U1>       <int64>, <Series: 1>", "<Index>", "a           4", "b           8", "c           1", "<<U1>       <int64>, <Series: 2>", "<Index>", "a           10", "b           3", "c           0", "<<U1>       <int64>)"], "FrameHE.iter_group_other_items().reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "0       2       0       0", "1       4       8       1", "2       10      3       0", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_group_other_items().reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other_items().reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other_items().reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).items())", "((0, <Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>), (1, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>))"], "FrameHE.iter_group_other_items().reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).values())", "(<Series: 0>", "<Index>", "b           0", "a           11", "<<U1>       <int64>, <Series: 1>", "<Index>", "b           8", "a           4", "<<U1>       <int64>, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>)"], "FrameHE.iter_group_other_items().reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "0       0       11", "1       8       4", "2       3       10", "<int64> <int64> <int64>"], "FrameHE.iter_group_other_items().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).keys())", "(0, 1, 2)"], "FrameHE.iter_group_other_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).__iter__())", "(0, 1, 2)"], "FrameHE.iter_group_other_items().reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).items())", "((0, <Series: 0>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>), (1, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>), (2, <Series: 2>", "<Index>", "b-min       3", "b-max       3", "<<U5>       <int64>))"], "FrameHE.iter_group_other_items().reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).values())", "(<Series: 0>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>, <Series: 2>", "<Index>", "b-min       3", "b-max       3", "<<U5>       <int64>)"], "FrameHE.iter_group_other_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       8", "1       8       8", "2       3       3", "<int64> <int64> <int64>"], "FrameHE.iter_series()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_series())", "(<Series: a>", "<Index>", "p           10", "q           -2", "r           0", "s           0", "<<U1>       <int64>, <Series: b>", "<Index>", "p           8", "q           -3", "r           8", "s           0", "<<U1>       <int64>, <Series: c>", "<Index>", "p           1", "q           0", "r           9", "s           12", "<<U1>       <int64>)"], "FrameHE.iter_series().apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_series().apply(lambda v: v.sum())", "<Series>", "<Index>", "a        8", "b        13", "c        22", "<<U1>    <int64>"], "FrameHE.iter_series().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_series().apply_iter(lambda v: v.sum()))", "(8, 13, 22)"], "FrameHE.iter_series().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_series().apply_iter_items(lambda v: v.sum()))", "(('a', 8), ('b', 13), ('c', 22))"], "FrameHE.iter_series().apply_pool()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_series().apply_pool(lambda v: v.sum(), use_threads=True)", "<Series>", "<Index>", "a        8", "b        13", "c        22", "<<U1>    <int64>"], "FrameHE.iter_series_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_series_items())", "(('a', <Series: a>", "<Index>", "p           10", "q           -2", "r           0", "s           0", "<<U1>       <int64>), ('b', <Series: b>", "<Index>", "p           8", "q           -3", "r           8", "s           0", "<<U1>       <int64>), ('c', <Series: c>", "<Index>", "p           1", "q           0", "r           9", "s           12", "<<U1>       <int64>))"], "FrameHE.iter_series_items().apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_series_items().apply(lambda k, v: v.sum() if k != 'b' else -1)", "<Series>", "<Index>", "a        8", "b        -1", "c        22", "<<U1>    <int64>"], "FrameHE.iter_series_items().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_series_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))", "(8, -1, 22)"], "FrameHE.iter_series_items().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_series_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))", "(('a', 8), ('b', -1), ('c', 22))"], "FrameHE.iter_series_items().apply_pool()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_series_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)", "<Series>", "<Index>", "a        8", "b        -1", "c        22", "<<U1>    <int64>"], "FrameHE.iter_tuple()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_tuple())", "(Axis(p=10, q=-2, r=0, s=0), Axis(p=8, q=-3, r=8, s=0), Axis(p=1, q=0, r=9, s=12))"], "FrameHE.iter_tuple().apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_tuple().apply(lambda v: v.p + v.q)", "<Series>", "<Index>", "a        8", "b        5", "c        1", "<<U1>    <int64>"], "FrameHE.iter_tuple().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_tuple().apply_iter(lambda v: v.p + v.q))", "(8, 5, 1)"], "FrameHE.iter_tuple().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_tuple().apply_iter_items(lambda v: v.p + v.q))", "(('a', 8), ('b', 5), ('c', 1))"], "FrameHE.iter_tuple().map_all()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_tuple().map_all({(2, 9): -1, (3, 8): -2})", "<Series>", "<Index>", "a        -1", "b        -2", "<<U1>    <int64>"], "FrameHE.iter_tuple().map_all_iter()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_all_iter({(2, 9): -1, (3, 8): -2}))", "(-1, -2)"], "FrameHE.iter_tuple().map_all_iter_items()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_all_iter_items({(2, 9): -1, (3, 8): -2}))", "(('a', -1), ('b', -2))"], "FrameHE.iter_tuple().map_any()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_any({(2, 9): -1}))", "('a', 'b')"], "FrameHE.iter_tuple().map_any_iter()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_any_iter({(2, 9): -1}))", "(-1, Axis(p=3, q=8))"], "FrameHE.iter_tuple().map_any_iter_items()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_any_iter_items({(2, 9): -1}))", "(('a', -1), ('b', Axis(p=3, q=8)))"], "FrameHE.iter_tuple().map_fill()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_tuple().map_fill({(2, 9): -1}, fill_value=np.nan)", "<Series>", "<Index>", "a        -1.0", "b        nan", "<<U1>    <float64>"], "FrameHE.iter_tuple().map_fill_iter()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_fill_iter({(2, 9): -1}, fill_value=np.nan))", "(-1, nan)"], "FrameHE.iter_tuple().map_fill_iter_items()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_fill_iter_items({(2, 9): -1}, fill_value=np.nan))", "(('a', -1), ('b', nan))"], "FrameHE.iter_tuple_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_tuple_items())", "(('a', Axis(p=10, q=-2, r=0, s=0)), ('b', Axis(p=8, q=-3, r=8, s=0)), ('c', Axis(p=1, q=0, r=9, s=12)))"], "FrameHE.iter_tuple_items().apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_tuple_items().apply(lambda k, v: v.p + v.q if k == 'b' else -1)", "<Series>", "<Index>", "a        -1", "b        5", "c        -1", "<<U1>    <int64>"], "FrameHE.iter_tuple_items().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> tuple(f.iter_tuple_items().apply_iter(lambda k, v: v.p + v.q if k == 'b' else -1))", "(-1, 5, -1)"], "FrameHE.iter_tuple_items().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> tuple(f.iter_tuple_items().apply_iter_items(lambda k, v: v.p + v.q if k == 'b' else -1))", "(('a', -1), ('b', 5), ('c', -1))"], "FrameHE.iter_tuple_items().map_all()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_tuple_items().map_all({('a', (2, 9)): -1, ('b', (3, 8)): -2})", "<Series>", "<Index>", "a        -1", "b        -2", "<<U1>    <int64>"], "FrameHE.iter_tuple_items().map_all_iter()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_all_iter({('a', (2, 9)): -1, ('b', (3, 8)): -2}))", "(-1, -2)"], "FrameHE.iter_tuple_items().map_all_iter_items()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_all_iter_items({('a', (2, 9)): -1, ('b', (3, 8)): -2}))", "(('a', -1), ('b', -2))"], "FrameHE.iter_tuple_items().map_any()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_tuple_items().map_any({('a', (2, 9)): -1})", "<Series>", "<Index>", "a        -1", "b        Axis(p=3, q=8)", "<<U1>    <object>"], "FrameHE.iter_tuple_items().map_any_iter()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_any_iter({('a', (2, 9)): -1}))", "(-1, Axis(p=3, q=8))"], "FrameHE.iter_tuple_items().map_any_iter_items()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_any_iter_items({('a', (2, 9)): -1}))", "(('a', -1), ('b', Axis(p=3, q=8)))"], "FrameHE.iter_tuple_items().map_fill()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_tuple_items().map_fill({('a', (2, 9)): -1}, fill_value=np.nan)", "<Series>", "<Index>", "a        -1.0", "b        nan", "<<U1>    <float64>"], "FrameHE.iter_tuple_items().map_fill_iter()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_fill_iter({('a', (2, 9)): -1}, fill_value=np.nan))", "(-1, nan)"], "FrameHE.iter_tuple_items().map_fill_iter_items()": [">>> f = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_fill_iter_items({('a', (2, 9)): -1}, fill_value=np.nan))", "(('a', -1), ('b', nan))"], "FrameHE.iter_window()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1))", "(<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "<<U1>        <int64> <int64> <int64>, <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "q            -2      -3      0", "r            0       8       9", "<<U1>        <int64> <int64> <int64>, <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>)"], "FrameHE.iter_window().apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).apply(lambda f: f.max().max())", "<Series>", "<Index>", "q        10", "r        9", "s        12", "<<U1>    <int64>"], "FrameHE.iter_window().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).apply_iter(lambda f: f.max().max()))", "(10, 9, 12)"], "FrameHE.iter_window().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).apply_iter_items(lambda f: f.max().max()))", "(('q', 10), ('r', 9), ('s', 12))"], "FrameHE.iter_window().reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).keys())", "(1, 2, 3)"], "FrameHE.iter_window().reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window().reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).items())", "((1, <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "1            4       8       1", "<int64>      <int64> <int64> <int64>), (2, <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "2            10      3       0", "<int64>      <int64> <int64> <int64>), (3, <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "3            2       8       1", "<int64>      <int64> <int64> <int64>))"], "FrameHE.iter_window().reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).values())", "(<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "1            4       8       1", "<int64>      <int64> <int64> <int64>, <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "2            10      3       0", "<int64>      <int64> <int64> <int64>, <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "3            2       8       1", "<int64>      <int64> <int64> <int64>)"], "FrameHE.iter_window().reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       8       1", "2       10      3       0", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_window().reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_map_func(np.min).keys())", "(1, 2, 3)"], "FrameHE.iter_window().reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_map_func(np.min).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window().reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_map_func(np.min).items())", "((1, <Series: 1>", "<Index>", "a           4", "b           0", "c           0", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "a           4", "b           3", "c           0", "<<U1>       <int64>), (3, <Series: 3>", "<Index>", "a           2", "b           3", "c           0", "<<U1>       <int64>))"], "FrameHE.iter_window().reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_map_func(np.min).values())", "(<Series: 1>", "<Index>", "a           4", "b           0", "c           0", "<<U1>       <int64>, <Series: 2>", "<Index>", "a           4", "b           3", "c           0", "<<U1>       <int64>, <Series: 3>", "<Index>", "a           2", "b           3", "c           0", "<<U1>       <int64>)"], "FrameHE.iter_window().reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       0       0", "2       4       3       0", "3       2       3       0", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_window().reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(1, 2, 3)"], "FrameHE.iter_window().reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window().reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((1, <Series: 1>", "<Index>", "b           0", "a           11", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>), (3, <Series: 3>", "<Index>", "b           3", "a           10", "<<U1>       <int64>))"], "FrameHE.iter_window().reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(<Series: 1>", "<Index>", "b           0", "a           11", "<<U1>       <int64>, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>, <Series: 3>", "<Index>", "b           3", "a           10", "<<U1>       <int64>)"], "FrameHE.iter_window().reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "1       0       11", "2       3       10", "3       3       10", "<int64> <int64> <int64>"], "FrameHE.iter_window().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(1, 2, 3)"], "FrameHE.iter_window().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window().reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((1, <Series: 1>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>), (2, <Series: 2>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>), (3, <Series: 3>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>))"], "FrameHE.iter_window().reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: 1>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>, <Series: 2>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>, <Series: 3>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>)"], "FrameHE.iter_window().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "1       0       8", "2       3       8", "3       3       8", "<int64> <int64> <int64>"], "FrameHE.iter_window_array()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1))", "(array([[10,  8,  1],", "       [-2, -3,  0]]), array([[-2, -3,  0],", "       [ 0,  8,  9]]), array([[ 0,  8,  9],", "       [ 0,  0, 12]]))"], "FrameHE.iter_window_array().apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).apply(lambda a: np.max(a))", "<Series>", "<Index>", "q        10", "r        9", "s        12", "<<U1>    <int64>"], "FrameHE.iter_window_array().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).apply_iter(lambda a: np.max(a)))", "(10, 9, 12)"], "FrameHE.iter_window_array().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).apply_iter_items(lambda a: np.max(a)))", "(('q', 10), ('r', 9), ('s', 12))"], "FrameHE.iter_window_array().reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).keys())", "(1, 2, 3)"], "FrameHE.iter_window_array().reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window_array().reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).items())", "((1, array([15,  8,  1])), (2, array([14, 11,  1])), (3, array([12, 11,  1])))"], "FrameHE.iter_window_array().reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).values())", "(array([15,  8,  1]), array([14, 11,  1]), array([12, 11,  1]))"], "FrameHE.iter_window_array().reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       15", "1       8", "2       1", "3       14", "4       11", "5       1", "6       12", "7       11", "8       1", "<int64> <int64>"], "FrameHE.iter_window_array().reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).keys())", "(1, 2, 3)"], "FrameHE.iter_window_array().reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window_array().reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).items())", "((1, array([4, 0, 0])), (2, array([4, 3, 0])), (3, array([2, 3, 0])))"], "FrameHE.iter_window_array().reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).values())", "(array([4, 0, 0]), array([4, 3, 0]), array([2, 3, 0]))"], "FrameHE.iter_window_array().reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       0       0", "2       4       3       0", "3       2       3       0", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_window_array().reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(1, 2, 3)"], "FrameHE.iter_window_array().reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window_array().reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((1, array([ 0, 11])), (2, array([ 3, 10])), (3, array([ 3, 10])))"], "FrameHE.iter_window_array().reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(array([ 0, 11]), array([ 3, 10]), array([ 3, 10]))"], "FrameHE.iter_window_array().reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "1       0       11", "2       3       10", "3       3       10", "<int64> <int64> <int64>"], "FrameHE.iter_window_array().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(1, 2, 3)"], "FrameHE.iter_window_array().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window_array().reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((1, array([0, 8])), (2, array([3, 8])), (3, array([3, 8])))"], "FrameHE.iter_window_array().reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(array([0, 8]), array([3, 8]), array([3, 8]))"], "FrameHE.iter_window_array().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "1       0       8", "2       3       8", "3       3       8", "<int64> <int64> <int64>"], "FrameHE.iter_window_array_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1))", "(('q', array([[10,  8,  1],", "       [-2, -3,  0]])), ('r', array([[-2, -3,  0],", "       [ 0,  8,  9]])), ('s', array([[ 0,  8,  9],", "       [ 0,  0, 12]])))"], "FrameHE.iter_window_array_items().apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).apply(lambda k, v: np.max(v) if k == 'r' else np.min(v))", "<Series>", "<Index>", "q        -3", "r        9", "s        0", "<<U1>    <int64>"], "FrameHE.iter_window_array_items().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter(lambda k, v: np.max(v) if k == 'r' else np.min(v)))", "(-3, 9, 0)"], "FrameHE.iter_window_array_items().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter_items(lambda k, v: np.max(v) if k == 'r' else np.min(v)))", "(('q', -3), ('r', 9), ('s', 0))"], "FrameHE.iter_window_array_items().reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).keys())", "(1, 2, 3)"], "FrameHE.iter_window_array_items().reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window_array_items().reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).items())", "((1, array([15,  8,  1])), (2, array([14, 11,  1])), (3, array([12, 11,  1])))"], "FrameHE.iter_window_array_items().reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).values())", "(array([15,  8,  1]), array([14, 11,  1]), array([12, 11,  1]))"], "FrameHE.iter_window_array_items().reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       15", "1       8", "2       1", "3       14", "4       11", "5       1", "6       12", "7       11", "8       1", "<int64> <int64>"], "FrameHE.iter_window_array_items().reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).keys())", "(1, 2, 3)"], "FrameHE.iter_window_array_items().reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window_array_items().reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).items())", "((1, array([4, 0, 0])), (2, array([4, 3, 0])), (3, array([2, 3, 0])))"], "FrameHE.iter_window_array_items().reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).values())", "(array([4, 0, 0]), array([4, 3, 0]), array([2, 3, 0]))"], "FrameHE.iter_window_array_items().reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       0       0", "2       4       3       0", "3       2       3       0", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_window_array_items().reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).keys())", "(1, 2, 3)"], "FrameHE.iter_window_array_items().reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window_array_items().reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).items())", "((1, array([ 0, 11])), (2, array([ 3, 10])), (3, array([ 3, 10])))"], "FrameHE.iter_window_array_items().reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).values())", "(array([ 0, 11]), array([ 3, 10]), array([ 3, 10]))"], "FrameHE.iter_window_array_items().reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "1       0       11", "2       3       10", "3       3       10", "<int64> <int64> <int64>"], "FrameHE.iter_window_array_items().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).keys())", "(1, 2, 3)"], "FrameHE.iter_window_array_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window_array_items().reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).items())", "((1, array([0, 8])), (2, array([3, 8])), (3, array([3, 8])))"], "FrameHE.iter_window_array_items().reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).values())", "(array([0, 8]), array([3, 8]), array([3, 8]))"], "FrameHE.iter_window_array_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "1       0       8", "2       3       8", "3       3       8", "<int64> <int64> <int64>"], "FrameHE.iter_window_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1))", "(('q', <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "<<U1>        <int64> <int64> <int64>), ('r', <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "q            -2      -3      0", "r            0       8       9", "<<U1>        <int64> <int64> <int64>), ('s', <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>))"], "FrameHE.iter_window_items().apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).apply(lambda k, v: v.max().max() if k == 'r' else v.min().min())", "<Series>", "<Index>", "q        -3", "r        9", "s        0", "<<U1>    <int64>"], "FrameHE.iter_window_items().apply_iter()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).apply_iter(lambda k, v: v.max().max() if k == 'r' else v.min().min()))", "(-3, 9, 0)"], "FrameHE.iter_window_items().apply_iter_items()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).apply_iter_items(lambda k, v: v.max().max() if k == 'r' else v.min().min()))", "(('q', -3), ('r', 9), ('s', 0))"], "FrameHE.iter_window_items().reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).keys())", "(1, 2, 3)"], "FrameHE.iter_window_items().reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window_items().reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).items())", "((1, <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "1            4       8       1", "<int64>      <int64> <int64> <int64>), (2, <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "2            10      3       0", "<int64>      <int64> <int64> <int64>), (3, <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "3            2       8       1", "<int64>      <int64> <int64> <int64>))"], "FrameHE.iter_window_items().reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).values())", "(<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "1            4       8       1", "<int64>      <int64> <int64> <int64>, <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "2            10      3       0", "<int64>      <int64> <int64> <int64>, <FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "3            2       8       1", "<int64>      <int64> <int64> <int64>)"], "FrameHE.iter_window_items().reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       8       1", "2       10      3       0", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_window_items().reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).keys())", "(1, 2, 3)"], "FrameHE.iter_window_items().reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window_items().reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).items())", "((1, <Series: 1>", "<Index>", "a           4", "b           0", "c           0", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "a           4", "b           3", "c           0", "<<U1>       <int64>), (3, <Series: 3>", "<Index>", "a           2", "b           3", "c           0", "<<U1>       <int64>))"], "FrameHE.iter_window_items().reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).values())", "(<Series: 1>", "<Index>", "a           4", "b           0", "c           0", "<<U1>       <int64>, <Series: 2>", "<Index>", "a           4", "b           3", "c           0", "<<U1>       <int64>, <Series: 3>", "<Index>", "a           2", "b           3", "c           0", "<<U1>       <int64>)"], "FrameHE.iter_window_items().reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       0       0", "2       4       3       0", "3       2       3       0", "<int64> <int64> <int64> <int64>"], "FrameHE.iter_window_items().reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).keys())", "(1, 2, 3)"], "FrameHE.iter_window_items().reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window_items().reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).items())", "((1, <Series: 1>", "<Index>", "b           0", "a           11", "<<U1>       <int64>), (2, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>), (3, <Series: 3>", "<Index>", "b           3", "a           10", "<<U1>       <int64>))"], "FrameHE.iter_window_items().reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).values())", "(<Series: 1>", "<Index>", "b           0", "a           11", "<<U1>       <int64>, <Series: 2>", "<Index>", "b           3", "a           10", "<<U1>       <int64>, <Series: 3>", "<Index>", "b           3", "a           10", "<<U1>       <int64>)"], "FrameHE.iter_window_items().reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b       a       <<U1>", "<Index>", "1       0       11", "2       3       10", "3       3       10", "<int64> <int64> <int64>"], "FrameHE.iter_window_items().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).keys())", "(1, 2, 3)"], "FrameHE.iter_window_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).__iter__())", "(1, 2, 3)"], "FrameHE.iter_window_items().reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).items())", "((1, <Series: 1>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>), (2, <Series: 2>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>), (3, <Series: 3>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>))"], "FrameHE.iter_window_items().reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).values())", "(<Series: 1>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>, <Series: 2>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>, <Series: 3>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>)"], "FrameHE.iter_window_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "1       0       8", "2       3       8", "3       3       8", "<int64> <int64> <int64>"], "FrameHE.__add__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 + 8", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            18      16      9", "q            6       5       8", "r            8       16      17", "s            8       8       20", "<<U1>        <int64> <int64> <int64>", ">>> f1 + f2", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         12.0      11.0      nan", "q         7.0       5.0       nan", "r         nan       nan       nan", "s         nan       nan       nan", "<<U1>     <float64> <float64> <float64>"], "FrameHE.__and__()": [">>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> f & True", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> f & (True, False)", "<FrameHE>", "<Index>   a      b      <<U1>", "<Index>", "p         False  False", "q         True   False", "r         True   False", "<<U1>     <bool> <bool>"], "FrameHE.__eq__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 == 8", "False", ">>> f1 == f2", "False"], "FrameHE.__floordiv__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 // 8", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       1       0", "q            -1      -1      0", "r            0       1       1", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f1 // f2", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         5.0       2.0       nan", "q         -1.0      -1.0      nan", "r         nan       nan       nan", "s         nan       nan       nan", "<<U1>     <float64> <float64> <float64>"], "FrameHE.__ge__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 >= 8", "<FrameHE: x>", "<Index>      a      b      c      <<U1>", "<Index>", "p            True   True   False", "q            False  False  False", "r            False  True   True", "s            False  False  True", "<<U1>        <bool> <bool> <bool>", ">>> f1 >= f2", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         True   True   False", "q         False  False  False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameHE.__gt__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 > 8", "<FrameHE: x>", "<Index>      a      b      c      <<U1>", "<Index>", "p            True   False  False", "q            False  False  False", "r            False  False  True", "s            False  False  True", "<<U1>        <bool> <bool> <bool>", ">>> f1 > f2", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         True   True   False", "q         False  False  False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameHE.__le__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 <= 8", "<FrameHE: x>", "<Index>      a      b      c      <<U1>", "<Index>", "p            False  True   True", "q            True   True   True", "r            True   True   False", "s            True   True   False", "<<U1>        <bool> <bool> <bool>", ">>> f1 <= f2", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         True   True   False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameHE.__lt__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 < 8", "<FrameHE: x>", "<Index>      a      b      c      <<U1>", "<Index>", "p            False  False  True", "q            True   True   True", "r            True   False  False", "s            True   True   False", "<<U1>        <bool> <bool> <bool>", ">>> f1 < f2", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         True   True   False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameHE.__matmul__()": [">>> f1 = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f1 @ f2", "<FrameHE>", "<Index>   x       y       <<U1>", "<Index>", "p         23      14", "q         6       4", "r         40      24", "s         20      12", "<<U1>     <int64> <int64>"], "FrameHE.__mod__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 % 8", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            2       0       1", "q            6       5       0", "r            0       0       1", "s            0       0       4", "<<U1>        <int64> <int64> <int64>", ">>> f1 % f2", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         0.0       2.0       nan", "q         7.0       5.0       nan", "r         nan       nan       nan", "s         nan       nan       nan", "<<U1>     <float64> <float64> <float64>"], "FrameHE.__mul__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 * 8", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            80      64      8", "q            -16     -24     0", "r            0       64      72", "s            0       0       96", "<<U1>        <int64> <int64> <int64>", ">>> f1 * f2", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         20.0      24.0      nan", "q         -18.0     -24.0     nan", "r         nan       nan       nan", "s         nan       nan       nan", "<<U1>     <float64> <float64> <float64>"], "FrameHE.__ne__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 != 8", "True", ">>> f1 != f2", "True"], "FrameHE.__or__()": [">>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> f | True", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            True   True", "q            True   True", "r            True   True", "<<U1>        <bool> <bool>", ">>> f | (True, False)", "<FrameHE>", "<Index>   a      b      <<U1>", "<Index>", "p         True   True", "q         True   True", "r         True   False", "<<U1>     <bool> <bool>"], "FrameHE.__pow__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 ** 8", "<FrameHE: x>", "<Index>      a         b        c         <<U1>", "<Index>", "p            100000000 16777216 1", "q            256       6561     0", "r            0         16777216 43046721", "s            0         0        429981696", "<<U1>        <int64>   <int64>  <int64>", ">>> f1 ** f2", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         100.0     512.0     1.0", "q         -512.0    6561.0    nan", "r         nan       nan       nan", "s         nan       nan       nan", "<<U1>     <float64> <float64> <float64>"], "FrameHE.__radd__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> 8 + f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            18      16      9", "q            6       5       8", "r            8       16      17", "s            8       8       20", "<<U1>        <int64> <int64> <int64>"], "FrameHE.__rfloordiv__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> 8 // f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            0       1       8", "q            -4      -3      0", "r            0       1       0", "s            0       0       0", "<<U1>        <int64> <int64> <int64>"], "FrameHE.__rmatmul__()": [">>> f1 = sf.FrameHE.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f1 @ f2", "<FrameHE>", "<Index>   x       y       <<U1>", "<Index>", "p         23      14", "q         6       4", "r         40      24", "s         20      12", "<<U1>     <int64> <int64>"], "FrameHE.__rmul__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> 8 * f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            80      64      8", "q            -16     -24     0", "r            0       64      72", "s            0       0       96", "<<U1>        <int64> <int64> <int64>"], "FrameHE.__rshift__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f1 >> 1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            5       4       0", "q            -1      -2      0", "r            0       4       4", "s            0       0       6", "<<U1>        <int64> <int64> <int64>"], "FrameHE.__rsub__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> 8 - f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            -2      0       7", "q            10      11      8", "r            8       0       -1", "s            8       8       -4", "<<U1>        <int64> <int64> <int64>"], "FrameHE.__rtruediv__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> 8 / f1", "<FrameHE: x>", "<Index>      a         b                   c                  <<U1>", "<Index>", "p            0.8       1.0                 8.0", "q            -4.0      -2.6666666666666665 inf", "r            inf       1.0                 0.8888888888888888", "s            inf       inf                 0.6666666666666666", "<<U1>        <float64> <float64>           <float64>"], "FrameHE.__sub__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 - 8", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            2       0       -7", "q            -10     -11     -8", "r            -8      0       1", "s            -8      -8      4", "<<U1>        <int64> <int64> <int64>", ">>> f1 - f2", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         8.0       5.0       nan", "q         -11.0     -11.0     nan", "r         nan       nan       nan", "s         nan       nan       nan", "<<U1>     <float64> <float64> <float64>"], "FrameHE.__truediv__()": [">>> f1 = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 / 8", "<FrameHE: x>", "<Index>      a         b         c         <<U1>", "<Index>", "p            1.25      1.0       0.125", "q            -0.25     -0.375    0.0", "r            0.0       1.0       1.125", "s            0.0       0.0       1.5", "<<U1>        <float64> <float64> <float64>", ">>> f1 / f2", "<FrameHE>", "<Index>   a                   b                  c         <<U1>", "<Index>", "p         5.0                 2.6666666666666665 nan", "q         -0.2222222222222222 -0.375             nan", "r         nan                 nan                nan", "s         nan                 nan                nan", "<<U1>     <float64>           <float64>          <float64>"], "FrameHE.__xor__()": [">>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> f ^ True", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            True   False", "q            False  False", "r            False  True", "<<U1>        <bool> <bool>", ">>> f ^ (True, False)", "<FrameHE>", "<Index>   a      b      <<U1>", "<Index>", "p         True   True", "q         False  True", "r         False  False", "<<U1>     <bool> <bool>"], "FrameHE.__abs__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> abs(f)", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            2       3       0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameHE.__invert__()": [">>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> ~f", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            True   False", "q            False  False", "r            False  True", "<<U1>        <bool> <bool>"], "FrameHE.__neg__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> -f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            -10     -8      -1", "q            2       3       0", "r            0       -8      -9", "s            0       0       -12", "<<U1>        <int64> <int64> <int64>"], "FrameHE.__pos__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> +f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameHE.abs()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.abs()", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            2       3       0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameHE.via_dt.__call__()": [">>> f = sf.FrameHE.from_fields((('1620-04-01', '', '1620-06-30'), ('1976-04-01', '1954-12-31', '')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1620-04-01      1976-04-01", "q         NaT             1954-12-31", "r         1620-06-30      NaT", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt(fill_value=-1).year", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         1620    1976", "q         -1      1954", "r         1620    -1", "<<U1>     <int64> <int64>"], "FrameHE.via_dt.year": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.year", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         1517    2022", "q         1517    2021", "r         1517    2022", "<<U1>     <int64> <int64>"], "FrameHE.via_dt.year_month": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.year_month", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         1517-04 2022-04", "q         1517-12 2021-12", "r         1517-06 2022-06", "<<U1>     <<U7>   <<U7>"], "FrameHE.via_dt.year_quarter": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.year_quarter", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         1517-Q2 2022-Q2", "q         1517-Q4 2021-Q4", "r         1517-Q2 2022-Q2", "<<U1>     <<U7>   <<U7>"], "FrameHE.via_dt.month": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.month", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         4       4", "q         12      12", "r         6       6", "<<U1>     <int64> <int64>"], "FrameHE.via_dt.day": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.day", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         1       1", "q         31      31", "r         30      30", "<<U1>     <int64> <int64>"], "FrameHE.via_dt.hour": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.hour", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         0       0", "q         0       0", "r         0       0", "<<U1>     <int64> <int64>"], "FrameHE.via_dt.minute": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.minute", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         0       0", "q         0       0", "r         0       0", "<<U1>     <int64> <int64>"], "FrameHE.via_dt.second": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.second", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         0       0", "q         0       0", "r         0       0", "<<U1>     <int64> <int64>"], "FrameHE.via_dt.weekday()": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.weekday()", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         6       4", "q         0       4", "r         5       3", "<<U1>     <int64> <int64>"], "FrameHE.via_dt.quarter()": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.quarter()", "<FrameHE>", "<Index>   a       b       <<U1>", "<Index>", "p         2       2", "q         4       4", "r         2       2", "<<U1>     <int64> <int64>"], "FrameHE.via_dt.is_month_end()": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_month_end()", "<FrameHE>", "<Index>   a      b      <<U1>", "<Index>", "p         False  False", "q         True   True", "r         True   True", "<<U1>     <bool> <bool>"], "FrameHE.via_dt.is_month_start()": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_month_start()", "<FrameHE>", "<Index>   a      b      <<U1>", "<Index>", "p         True   True", "q         False  False", "r         False  False", "<<U1>     <bool> <bool>"], "FrameHE.via_dt.is_year_end()": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_year_end()", "<FrameHE>", "<Index>   a      b      <<U1>", "<Index>", "p         False  False", "q         True   True", "r         False  False", "<<U1>     <bool> <bool>"], "FrameHE.via_dt.is_year_start()": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_year_start()", "<FrameHE>", "<Index>   a      b      <<U1>", "<Index>", "p         False  False", "q         False  False", "r         False  False", "<<U1>     <bool> <bool>"], "FrameHE.via_dt.is_quarter_end()": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_quarter_end()", "<FrameHE>", "<Index>   a      b      <<U1>", "<Index>", "p         False  False", "q         True   True", "r         True   True", "<<U1>     <bool> <bool>"], "FrameHE.via_dt.is_quarter_start()": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_quarter_start()", "<FrameHE>", "<Index>   a      b      <<U1>", "<Index>", "p         True   True", "q         False  False", "r         False  False", "<<U1>     <bool> <bool>"], "FrameHE.via_dt.timetuple()": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.timetuple()", "<FrameHE>", "<Index>   a                    b                    <<U1>", "<Index>", "p         time.struct_time(... time.struct_time(...", "q         time.struct_time(... time.struct_time(...", "r         time.struct_time(... time.struct_time(...", "<<U1>     <object>             <object>"], "FrameHE.via_dt.isoformat()": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.isoformat()", "<FrameHE>", "<Index>   a          b          <<U1>", "<Index>", "p         1517-04-01 2022-04-01", "q         1517-12-31 2021-12-31", "r         1517-06-30 2022-06-30", "<<U1>     <<U10>     <<U10>"], "FrameHE.via_dt.fromisoformat()": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'))", ">>> f", "<FrameHE>", "<Index>   a          b          <<U1>", "<Index>", "p         1517-04-01 2022-04-01", "q         1517-12-31 2021-12-31", "r         1517-06-30 2022-06-30", "<<U1>     <<U10>     <<U10>", ">>> f.via_dt.fromisoformat()", "<FrameHE>", "<Index>   a          b          <<U1>", "<Index>", "p         1517-04-01 2022-04-01", "q         1517-12-31 2021-12-31", "r         1517-06-30 2022-06-30", "<<U1>     <object>   <object>"], "FrameHE.via_dt.strftime()": [">>> f = sf.FrameHE.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameHE>", "<Index>   a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.strftime(\"%A | %B\")", "<FrameHE>", "<Index>   a                 b                 <<U1>", "<Index>", "p         Sunday | April    Friday | April", "q         Monday | December Friday | December", "r         Saturday | June   Thursday | June", "<<U1>     <<U17>            <<U17>"], "FrameHE.via_dt.strptime()": [">>> f = sf.FrameHE.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))", ">>> f", "<FrameHE>", "<Index>   a          b          <<U1>", "<Index>", "p         4/1/1517   4/1/2022", "q         12/31/1517 12/31/2021", "r         6/30/1517  6/30/2022", "<<U1>     <<U10>     <<U10>", ">>> f.via_dt.strptime(\"%m/%d/%Y\")", "<FrameHE>", "<Index>   a                   b                   <<U1>", "<Index>", "p         1517-04-01 00:00:00 2022-04-01 00:00:00", "q         1517-12-31 00:00:00 2021-12-31 00:00:00", "r         1517-06-30 00:00:00 2022-06-30 00:00:00", "<<U1>     <object>            <object>"], "FrameHE.via_dt.strpdate()": [">>> f = sf.FrameHE.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))", ">>> f", "<FrameHE>", "<Index>   a          b          <<U1>", "<Index>", "p         4/1/1517   4/1/2022", "q         12/31/1517 12/31/2021", "r         6/30/1517  6/30/2022", "<<U1>     <<U10>     <<U10>", ">>> f.via_dt.strpdate(\"%m/%d/%Y\")", "<FrameHE>", "<Index>   a          b          <<U1>", "<Index>", "p         1517-04-01 2022-04-01", "q         1517-12-31 2021-12-31", "r         1517-06-30 2022-06-30", "<<U1>     <object>   <object>"], "FrameHE.via_str.__getitem__()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str[-1]", "<FrameHE: x>", "<Index>      a     b     <<U1>", "<Index>", "p            0", "q            2     Z", "r            8     3", "s            3", "<<U1>        <<U1> <<U1>"], "FrameHE.via_str.capitalize()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.capitalize()", "<FrameHE: x>", "<Index>      a      b     <<U1>", "<Index>", "p            10     Qrs", "q            2      Xyz", "r            8      123", "s            3       wx", "<<U1>        <<U21> <<U4>"], "FrameHE.via_str.center()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.center(8)", "<FrameHE: x>", "<Index>      a        b        <<U1>", "<Index>", "p               10      qrs", "q               2       XYZ", "r               8       123", "s               3        wX", "<<U1>        <<U8>    <<U8>"], "FrameHE.via_str.contains()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.contains('X')", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  False", "q            False  True", "r            False  False", "s            False  True", "<<U1>        <bool> <bool>"], "FrameHE.via_str.count()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.count('X')", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            0       0", "q            0       1", "r            0       0", "s            0       1", "<<U1>        <int64> <int64>"], "FrameHE.via_str.decode()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x').astype(bytes)", ">>> f", "<FrameHE: x>", "<Index>      a      b       <<U1>", "<Index>", "p            b'10'  b'qrs '", "q            b'2'   b'XYZ'", "r            b'8'   b'123'", "s            b'3'   b' wX '", "<<U1>        <|S21> <|S4>", ">>> f.via_str.decode()", "<FrameHE: x>", "<Index>      a     b     <<U1>", "<Index>", "p            10    qrs", "q            2     XYZ", "r            8     123", "s            3      wX", "<<U1>        <<U2> <<U4>"], "FrameHE.via_str.encode()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.encode()", "<FrameHE: x>", "<Index>      a     b       <<U1>", "<Index>", "p            b'10' b'qrs '", "q            b'2'  b'XYZ'", "r            b'8'  b'123'", "s            b'3'  b' wX '", "<<U1>        <|S2> <|S4>"], "FrameHE.via_str.endswith()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.endswith(' ')", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  True", "q            False  False", "r            False  False", "s            False  True", "<<U1>        <bool> <bool>"], "FrameHE.via_str.find()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.find('X')", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            -1      -1", "q            -1      0", "r            -1      -1", "s            -1      2", "<<U1>        <int64> <int64>"], "FrameHE.via_str.format()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.format('{:-^10}')", "<FrameHE: x>", "<Index>      a          b          <<U1>", "<Index>", "p            ----10---- ---qrs ---", "q            ----2----- ---XYZ----", "r            ----8----- ---123----", "s            ----3----- --- wX ---", "<<U1>        <<U10>     <<U10>"], "FrameHE.via_str.index()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.index('X')", "ValueError('substring not found')"], "FrameHE.via_str.isalnum()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isalnum()", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            True   False", "q            True   True", "r            True   True", "s            True   False", "<<U1>        <bool> <bool>"], "FrameHE.via_str.isalpha()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isalpha()", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  False", "q            False  True", "r            False  False", "s            False  False", "<<U1>        <bool> <bool>"], "FrameHE.via_str.isdecimal()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isdecimal()", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            True   False", "q            True   False", "r            True   True", "s            True   False", "<<U1>        <bool> <bool>"], "FrameHE.via_str.isdigit()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isdigit()", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            True   False", "q            True   False", "r            True   True", "s            True   False", "<<U1>        <bool> <bool>"], "FrameHE.via_str.islower()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.islower()", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  True", "q            False  False", "r            False  False", "s            False  False", "<<U1>        <bool> <bool>"], "FrameHE.via_str.isnumeric()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isnumeric()", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            True   False", "q            True   False", "r            True   True", "s            True   False", "<<U1>        <bool> <bool>"], "FrameHE.via_str.isspace()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isspace()", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  False", "q            False  False", "r            False  False", "s            False  False", "<<U1>        <bool> <bool>"], "FrameHE.via_str.istitle()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.istitle()", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  False", "q            False  False", "r            False  False", "s            False  False", "<<U1>        <bool> <bool>"], "FrameHE.via_str.isupper()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isupper()", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  False", "q            False  True", "r            False  False", "s            False  False", "<<U1>        <bool> <bool>"], "FrameHE.via_str.ljust()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.ljust(8)", "<FrameHE: x>", "<Index>      a        b        <<U1>", "<Index>", "p            10       qrs", "q            2        XYZ", "r            8        123", "s            3         wX", "<<U1>        <<U8>    <<U8>"], "FrameHE.via_str.len()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.len()", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            2       4", "q            1       3", "r            1       3", "s            1       4", "<<U1>        <int64> <int64>"], "FrameHE.via_str.lower()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.lower()", "<FrameHE: x>", "<Index>      a      b     <<U1>", "<Index>", "p            10     qrs", "q            2      xyz", "r            8      123", "s            3       wx", "<<U1>        <<U21> <<U4>"], "FrameHE.via_str.lstrip()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.lstrip()", "<FrameHE: x>", "<Index>      a      b     <<U1>", "<Index>", "p            10     qrs", "q            2      XYZ", "r            8      123", "s            3      wX", "<<U1>        <<U21> <<U4>"], "FrameHE.via_str.partition()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.partition('X')", "<FrameHE: x>", "<Index>      a              b                <<U1>", "<Index>", "p            ('10', '', '') ('qrs ', '', '')", "q            ('2', '', '')  ('', 'X', 'YZ')", "r            ('8', '', '')  ('123', '', '')", "s            ('3', '', '')  (' w', 'X', ' ')", "<<U1>        <object>       <object>"], "FrameHE.via_str.replace()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.replace('X', '*')", "<FrameHE: x>", "<Index>      a     b     <<U1>", "<Index>", "p            10    qrs", "q            2     *YZ", "r            8     123", "s            3      w*", "<<U1>        <<U2> <<U4>"], "FrameHE.via_str.rfind()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.rfind('X')", "<FrameHE: x>", "<Index>      a       b       <<U1>", "<Index>", "p            -1      -1", "q            -1      0", "r            -1      -1", "s            -1      2", "<<U1>        <int64> <int64>"], "FrameHE.via_str.rindex()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.rindex('X')", "ValueError('substring not found')"], "FrameHE.via_str.rjust()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.rjust(8)", "<FrameHE: x>", "<Index>      a        b        <<U1>", "<Index>", "p                  10     qrs", "q                   2      XYZ", "r                   8      123", "s                   3      wX", "<<U1>        <<U8>    <<U8>"], "FrameHE.via_str.rpartition()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.rpartition('X')", "<FrameHE: x>", "<Index>      a              b                <<U1>", "<Index>", "p            ('', '', '10') ('', '', 'qrs ')", "q            ('', '', '2')  ('', 'X', 'YZ')", "r            ('', '', '8')  ('', '', '123')", "s            ('', '', '3')  (' w', 'X', ' ')", "<<U1>        <object>       <object>"], "FrameHE.via_str.rsplit()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.rsplit('X')", "<FrameHE: x>", "<Index>      a        b           <<U1>", "<Index>", "p            ('10',)  ('qrs ',)", "q            ('2',)   ('', 'YZ')", "r            ('8',)   ('123',)", "s            ('3',)   (' w', ' ')", "<<U1>        <object> <object>"], "FrameHE.via_str.rstrip()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.rstrip()", "<FrameHE: x>", "<Index>      a      b     <<U1>", "<Index>", "p            10     qrs", "q            2      XYZ", "r            8      123", "s            3       wX", "<<U1>        <<U21> <<U4>"], "FrameHE.via_str.split()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.split('X')", "<FrameHE: x>", "<Index>      a        b           <<U1>", "<Index>", "p            ('10',)  ('qrs ',)", "q            ('2',)   ('', 'YZ')", "r            ('8',)   ('123',)", "s            ('3',)   (' w', ' ')", "<<U1>        <object> <object>"], "FrameHE.via_str.startswith()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.startswith('X')", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  False", "q            False  True", "r            False  False", "s            False  False", "<<U1>        <bool> <bool>"], "FrameHE.via_str.strip()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.strip()", "<FrameHE: x>", "<Index>      a      b     <<U1>", "<Index>", "p            10     qrs", "q            2      XYZ", "r            8      123", "s            3      wX", "<<U1>        <<U21> <<U4>"], "FrameHE.via_str.swapcase()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.swapcase()", "<FrameHE: x>", "<Index>      a      b     <<U1>", "<Index>", "p            10     QRS", "q            2      xyz", "r            8      123", "s            3       Wx", "<<U1>        <<U21> <<U4>"], "FrameHE.via_str.title()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.title()", "<FrameHE: x>", "<Index>      a      b     <<U1>", "<Index>", "p            10     Qrs", "q            2      Xyz", "r            8      123", "s            3       Wx", "<<U1>        <<U21> <<U4>"], "FrameHE.via_str.upper()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.upper()", "<FrameHE: x>", "<Index>      a      b     <<U1>", "<Index>", "p            10     QRS", "q            2      XYZ", "r            8      123", "s            3       WX", "<<U1>        <<U21> <<U4>"], "FrameHE.via_str.zfill()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.zfill(8)", "<FrameHE: x>", "<Index>      a        b        <<U1>", "<Index>", "p            00000010 0000qrs", "q            00000002 00000XYZ", "r            00000008 00000123", "s            00000003 0000 wX", "<<U1>        <<U8>    <<U8>"], "FrameHE.via_T.via_fill_value()": [">>> "], "FrameHE.via_T.__add__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T + s", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         10.0      8.0       1.0", "q         -4.0      -5.0      -2.0", "r         0.5       8.5       9.5", "s         1.0       1.0       13.0", "<<U1>     <float64> <float64> <float64>"], "FrameHE.via_T.__sub__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T - s", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         10.0      8.0       1.0", "q         0.0       -1.0      2.0", "r         -0.5      7.5       8.5", "s         -1.0      -1.0      11.0", "<<U1>     <float64> <float64> <float64>"], "FrameHE.via_T.__mul__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T * s", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         0.0       0.0       0.0", "q         4.0       6.0       -0.0", "r         0.0       4.0       4.5", "s         0.0       0.0       12.0", "<<U1>     <float64> <float64> <float64>"], "FrameHE.via_T.__truediv__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T / s", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         inf       inf       inf", "q         1.0       1.5       -0.0", "r         0.0       16.0      18.0", "s         0.0       0.0       12.0", "<<U1>     <float64> <float64> <float64>"], "FrameHE.via_T.__floordiv__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T // s", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         inf       inf       inf", "q         1.0       1.0       -0.0", "r         0.0       16.0      18.0", "s         0.0       0.0       12.0", "<<U1>     <float64> <float64> <float64>"], "FrameHE.via_T.__mod__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T % s", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         nan       nan       nan", "q         -0.0      -1.0      -0.0", "r         0.0       0.0       0.0", "s         0.0       0.0       0.0", "<<U1>     <float64> <float64> <float64>"], "FrameHE.via_T.__pow__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T ** s", "<FrameHE>", "<Index>   a         b                  c         <<U1>", "<Index>", "p         1.0       1.0                1.0", "q         0.25      0.1111111111111111 inf", "r         0.0       2.8284271247461903 3.0", "s         0.0       0.0                12.0", "<<U1>     <float64> <float64>          <float64>"], "FrameHE.via_T.__lshift__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0", "q        -2", "r        3", "s        1", "<<U1>    <int64>", ">>> f.via_T << s", "<FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "p         10      8       1", "q         0       0       0", "r         0       64      72", "s         0       0       24", "<<U1>     <int64> <int64> <int64>"], "FrameHE.via_T.__rshift__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0", "q        -2", "r        3", "s        1", "<<U1>    <int64>", ">>> f.via_T >> s", "<FrameHE>", "<Index>   a       b       c       <<U1>", "<Index>", "p         10      8       1", "q         -1      -1      0", "r         0       1       1", "s         0       0       6", "<<U1>     <int64> <int64> <int64>"], "FrameHE.via_T.__and__()": [">>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> f.via_T & s", "<FrameHE>", "<Index>   a      b      <<U1>", "<Index>", "p         False  False", "q         True   True", "r         True   False", "<<U1>     <bool> <bool>"], "FrameHE.via_T.__xor__()": [">>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> f.via_T ^ s", "<FrameHE>", "<Index>   a      b      <<U1>", "<Index>", "p         False  True", "q         False  False", "r         False  True", "<<U1>     <bool> <bool>"], "FrameHE.via_T.__or__()": [">>> f = sf.FrameHE.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> f.via_T | s", "<FrameHE>", "<Index>   a      b      <<U1>", "<Index>", "p         False  True", "q         True   True", "r         True   True", "<<U1>     <bool> <bool>"], "FrameHE.via_T.__lt__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T < s", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         False  True   False", "r         True   False  False", "s         True   True   False", "<<U1>     <bool> <bool> <bool>"], "FrameHE.via_T.__le__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T <= s", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         True   True   False", "r         True   False  False", "s         True   True   False", "<<U1>     <bool> <bool> <bool>"], "FrameHE.via_T.__eq__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T == s", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         True   False  False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameHE.via_T.__ne__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T != s", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         True   True   True", "q         False  True   True", "r         True   True   True", "s         True   True   True", "<<U1>     <bool> <bool> <bool>"], "FrameHE.via_T.__gt__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T > s", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         True   True   True", "q         False  False  True", "r         False  True   True", "s         False  False  True", "<<U1>     <bool> <bool> <bool>"], "FrameHE.via_T.__ge__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T >= s", "<FrameHE>", "<Index>   a      b      c      <<U1>", "<Index>", "p         True   True   True", "q         True   False  True", "r         False  True   True", "s         False  False  True", "<<U1>     <bool> <bool> <bool>"], "FrameHE.via_T.__radd__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T + s", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         10.0      8.0       1.0", "q         -4.0      -5.0      -2.0", "r         0.5       8.5       9.5", "s         1.0       1.0       13.0", "<<U1>     <float64> <float64> <float64>"], "FrameHE.via_T.__rsub__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T - s", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         10.0      8.0       1.0", "q         0.0       -1.0      2.0", "r         -0.5      7.5       8.5", "s         -1.0      -1.0      11.0", "<<U1>     <float64> <float64> <float64>"], "FrameHE.via_T.__rmul__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T * s", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         0.0       0.0       0.0", "q         4.0       6.0       -0.0", "r         0.0       4.0       4.5", "s         0.0       0.0       12.0", "<<U1>     <float64> <float64> <float64>"], "FrameHE.via_T.__rtruediv__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T / s", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         inf       inf       inf", "q         1.0       1.5       -0.0", "r         0.0       16.0      18.0", "s         0.0       0.0       12.0", "<<U1>     <float64> <float64> <float64>"], "FrameHE.via_T.__rfloordiv__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T // s", "<FrameHE>", "<Index>   a         b         c         <<U1>", "<Index>", "p         inf       inf       inf", "q         1.0       1.0       -0.0", "r         0.0       16.0      18.0", "s         0.0       0.0       12.0", "<<U1>     <float64> <float64> <float64>"], "FrameHE.via_fill_value().loc": [">>> f = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f.via_fill_value(-1).loc[['a', 'b', 'd']]", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "d            -1      -1", "<<U1>        <int64> <int64>"], "FrameHE.via_fill_value().__getitem__()": [">>> f = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f.via_fill_value(-1)[['z', 'x']]", "<FrameHE: y>", "<Index>      z       x       <<U1>", "<Index>", "a            -1      3", "b            -1      0", "c            -1      20", "<<U1>        <int64> <int64>"], "FrameHE.via_fill_value().via_T": [">>> f = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> s = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> f.via_fill_value(-1).via_T * s", "<FrameHE>", "<Index>   x       y       <<U1>", "<Index>", "a         -3      -2", "b         0       0", "c         160     96", "d         -19     -19", "<<U1>     <int64> <int64>"], "FrameHE.via_fill_value().__add__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) + f2", "<FrameHE>", "<Index>   x       y       <<U1>", "<Index>", "a         3       2", "b         2       3", "c         24      26", "<<U1>     <int64> <int64>"], "FrameHE.via_fill_value().__sub__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) - f2", "<FrameHE>", "<Index>   x       y       <<U1>", "<Index>", "a         3       2", "b         -2      -3", "c         16      -2", "<<U1>     <int64> <int64>"], "FrameHE.via_fill_value().__mul__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) * f2", "<FrameHE>", "<Index>   x       y       <<U1>", "<Index>", "a         0       0", "b         0       0", "c         80      168", "<<U1>     <int64> <int64>"], "FrameHE.via_fill_value().__truediv__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) / f2", "<FrameHE>", "<Index>   x         y                  <<U1>", "<Index>", "a         inf       inf", "b         0.0       0.0", "c         5.0       0.8571428571428571", "<<U1>     <float64> <float64>"], "FrameHE.via_fill_value().__floordiv__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) // f2", "<FrameHE>", "<Index>   x       y       <<U1>", "<Index>", "a         0       0", "b         0       0", "c         5       0", "<<U1>     <int64> <int64>"], "FrameHE.via_fill_value().__mod__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) % f2", "<FrameHE>", "<Index>   x       y       <<U1>", "<Index>", "a         0       0", "b         0       0", "c         0       12", "<<U1>     <int64> <int64>"], "FrameHE.via_fill_value().__pow__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) ** f2", "<FrameHE>", "<Index>   x       y                <<U1>", "<Index>", "a         1       1", "b         0       0", "c         160000  1283918464548864", "<<U1>     <int64> <int64>"], "FrameHE.via_fill_value().__lshift__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            0       2", "c            1       1", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) << f2", "<FrameHE>", "<Index>   x       y       <<U1>", "<Index>", "a         3       2", "b         0       0", "c         40      24", "<<U1>     <int64> <int64>"], "FrameHE.via_fill_value().__rshift__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            0       2", "c            1       1", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) >> f2", "<FrameHE>", "<Index>   x       y       <<U1>", "<Index>", "a         3       2", "b         0       0", "c         10      6", "<<U1>     <int64> <int64>"], "FrameHE.via_fill_value().__and__()": [">>> f1 = sf.FrameHE.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x      y      <<U1>", "<Index>", "a            False  True", "b            True   False", "c            True   True", "<<U1>        <bool> <bool>", ">>> f2 = sf.FrameHE.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x      y      <<U1>", "<Index>", "b            False  True", "c            True   True", "<<U1>        <bool> <bool>", ">>> f1.via_fill_value(False) & f2", "<FrameHE>", "<Index>   x      y      <<U1>", "<Index>", "a         False  False", "b         False  False", "c         True   True", "<<U1>     <bool> <bool>"], "FrameHE.via_fill_value().__xor__()": [">>> f1 = sf.FrameHE.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x      y      <<U1>", "<Index>", "a            False  True", "b            True   False", "c            True   True", "<<U1>        <bool> <bool>", ">>> f2 = sf.FrameHE.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x      y      <<U1>", "<Index>", "b            False  True", "c            True   True", "<<U1>        <bool> <bool>", ">>> f1.via_fill_value(False) ^ f2", "<FrameHE>", "<Index>   x      y      <<U1>", "<Index>", "a         False  True", "b         True   True", "c         False  False", "<<U1>     <bool> <bool>"], "FrameHE.via_fill_value().__or__()": [">>> f1 = sf.FrameHE.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x      y      <<U1>", "<Index>", "a            False  True", "b            True   False", "c            True   True", "<<U1>        <bool> <bool>", ">>> f2 = sf.FrameHE.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x      y      <<U1>", "<Index>", "b            False  True", "c            True   True", "<<U1>        <bool> <bool>", ">>> f1.via_fill_value(False) | f2", "<FrameHE>", "<Index>   x      y      <<U1>", "<Index>", "a         False  True", "b         True   True", "c         True   True", "<<U1>     <bool> <bool>"], "FrameHE.via_fill_value().__lt__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) < f2", "<FrameHE>", "<Index>   x      y      <<U1>", "<Index>", "a         False  False", "b         True   True", "c         False  True", "<<U1>     <bool> <bool>"], "FrameHE.via_fill_value().__le__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) <= f2", "<FrameHE>", "<Index>   x      y      <<U1>", "<Index>", "a         False  False", "b         True   True", "c         False  True", "<<U1>     <bool> <bool>"], "FrameHE.via_fill_value().__eq__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) == f2", "<FrameHE>", "<Index>   x      y      <<U1>", "<Index>", "a         False  False", "b         False  False", "c         False  False", "<<U1>     <bool> <bool>"], "FrameHE.via_fill_value().__ne__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) != f2", "<FrameHE>", "<Index>   x      y      <<U1>", "<Index>", "a         True   True", "b         True   True", "c         True   True", "<<U1>     <bool> <bool>"], "FrameHE.via_fill_value().__gt__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) > f2", "<FrameHE>", "<Index>   x      y      <<U1>", "<Index>", "a         True   True", "b         False  False", "c         True   False", "<<U1>     <bool> <bool>"], "FrameHE.via_fill_value().__ge__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) >= f2", "<FrameHE>", "<Index>   x      y      <<U1>", "<Index>", "a         True   True", "b         False  False", "c         True   False", "<<U1>     <bool> <bool>"], "FrameHE.via_fill_value().__radd__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f2 + f1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "FrameHE.via_fill_value().__rsub__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f2 - f1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "FrameHE.via_fill_value().__rmul__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f2 * f1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "FrameHE.via_fill_value().__rtruediv__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f2 / f1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "FrameHE.via_fill_value().__rfloordiv__()": [">>> f1 = sf.FrameHE.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameHE.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameHE: y>", "<Index>      x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f2 // f1.via_fill_value(0)", "RuntimeError('via_fill_value interfaces can only be used on the left-hand side of binary expressions.')"], "FrameHE.via_re().search()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').search()", "<FrameHE: x>", "<Index>      a      b      c      <<U1>", "<Index>", "0            True   False  True", "1            True   True   True", "2            False  True   True", "3            True   True   True", "<int64>      <bool> <bool> <bool>"], "FrameHE.via_re().match()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').match()", "<FrameHE: x>", "<Index>      a      b      c      <<U1>", "<Index>", "0            True   False  True", "1            True   True   True", "2            False  True   True", "3            True   False  True", "<int64>      <bool> <bool> <bool>"], "FrameHE.via_re().fullmatch()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('123').fullmatch()", "<FrameHE: x>", "<Index>      a      b      c      <<U1>", "<Index>", "0            False  False  False", "1            False  False  False", "2            False  True   False", "3            False  False  False", "<int64>      <bool> <bool> <bool>"], "FrameHE.via_re().split()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').split()", "<FrameHE: x>", "<Index>      a         b                c                    <<U1>", "<Index>", "0            ('', '0') ('qrs ',)        ('', '5', '7-0', ...", "1            ('', '')  ('', 'YZ')       ('', '5', '7-04-0...", "2            ('8',)    ('', '', '', '') ('', '5', '7-', '...", "3            ('', '')  (' w', ' ')      ('', '5', '7-06-'...", "<int64>      <object>  <object>         <object>"], "FrameHE.via_re().findall()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').findall()", "<FrameHE: x>", "<Index>      a        b               c                    <<U1>", "<Index>", "0            ('1',)   ()              ('1', '1', '1', '1')", "1            ('2',)   ('X',)          ('1', '1', '1')", "2            ()       ('1', '2', '3') ('1', '1', '1', '...", "3            ('3',)   ('X',)          ('1', '1', '3')", "<int64>      <object> <object>        <object>"], "FrameHE.via_re().sub()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').sub('==')", "<FrameHE: x>", "<Index>      a     b      c                <<U1>", "<Index>", "0            ==0   qrs    ==5==7-0==-0==", "1            ==    ==YZ   ==5==7-04-0==", "2            8     ====== ==5==7-====-====", "3            ==     w==   ==5==7-06-==0", "<int64>      <<U3> <<U6>  <<U16>"], "FrameHE.via_re().subn()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').subn('==', 1)", "<FrameHE: x>", "<Index>      a          b            c                  <<U1>", "<Index>", "0            ('==0', 1) ('qrs ', 0)  ('==517-01-01', 1)", "1            ('==', 1)  ('==YZ', 1)  ('==517-04-01', 1)", "2            ('8', 0)   ('==23', 1)  ('==517-12-31', 1)", "3            ('==', 1)  (' w== ', 1) ('==517-06-30', 1)", "<int64>      <object>   <object>     <object>"], "FrameHE.via_hashlib().to_bytes()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).to_bytes()", "b'FrameHEIndex\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00Indexa\\x00\\x00\\x00b\\x00\\x00\\x00c\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x00\\xb1y\\xfd\\xff\\xff\\xff\\xff\\xff\\x0bz\\xfd\\xff\\xff\\xff\\xff\\xff\\x1d{\\xfd\\xff\\xff\\xff\\xff\\xffez\\xfd\\xff\\xff\\xff\\xff\\xff'"], "FrameHE.via_hashlib().md5()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).md5().hexdigest()", "2821094d51147f883359ce491981fd1e"], "FrameHE.via_hashlib().sha256()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).sha256().hexdigest()", "e8c7099efa7eba6cfa2ddae3081a14e3633e284dd9e2d0d0698b1f94ce19ed01"], "FrameHE.via_hashlib().sha512()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).sha512().hexdigest()", "c0d9acaa7a9639d6af3d992fab889af6f93b2e0abd726abee9f21f5e060a8f20a85b1bd54a4f43e64f19db00298ff7e7c7e7b797419d8973a24560b4673cae38"], "FrameHE.via_hashlib().sha3_256()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).sha3_256().hexdigest()", "d18d423673d4c08ac9d6e552e2b8f53f34d8848a0600540f4b14ee7a44bfe250"], "FrameHE.via_hashlib().sha3_512()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).sha3_512().hexdigest()", "9e8d3db95716332df6bb62659f1b168c4e3f30969329f1d4883f313dcf5936c40dc8a6f5a17b9149c3f9aa1e611f07546026617c24974db15570842eb679e60f"], "FrameHE.via_hashlib().shake_128()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).shake_128().hexdigest(8)", "875f2ad2ca8d6b43"], "FrameHE.via_hashlib().shake_256()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).shake_256().hexdigest(8)", "61d87c3ab95fbd6d"], "FrameHE.via_hashlib().blake2b()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).blake2b().hexdigest()", "09bd94749ebf389054dda42d9a7345c55315a743e41ee6b59bd57ee1013af39a79409d50bc744d6307dfa1db848654687363eb190c9c993bd8d21c6d969b6fb2"], "FrameHE.via_hashlib().blake2s()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).blake2s().hexdigest()", "784046437a7833e35996b0202b6c755e69b6e30ee8fe0738f8d196820c6e0ae9"], "FrameHE.via_values.apply()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.via_values.apply(np.sin)", "<FrameHE: x>", "<Index>      a                   b                   c                   <<U1>", "<Index>", "p            -0.5440211108893698 0.9893582466233818  0.8414709848078965", "q            -0.9092974268256817 -0.1411200080598672 0.0", "r            0.0                 0.9893582466233818  0.4121184852417566", "s            0.0                 0.0                 -0.5365729180004349", "<<U1>        <float64>           <float64>           <float64>"], "FrameHE.via_values.__array_ufunc__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> np.sin(f.via_values)", "<FrameHE: x>", "<Index>      a                   b                   c                   <<U1>", "<Index>", "p            -0.5440211108893698 0.9893582466233818  0.8414709848078965", "q            -0.9092974268256817 -0.1411200080598672 0.0", "r            0.0                 0.9893582466233818  0.4121184852417566", "s            0.0                 0.0                 -0.5365729180004349", "<<U1>        <float64>           <float64>           <float64>"], "FrameHE.via_values.__call__()": [">>> f = sf.FrameHE.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameHE: x>", "<Index>      a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> np.sin(f.via_values(unify_blocks=True))", "<FrameHE: x>", "<Index>      a                   b                   c                   <<U1>", "<Index>", "p            -0.5440211108893698 0.9893582466233818  0.8414709848078965", "q            -0.9092974268256817 -0.1411200080598672 0.0", "r            0.0                 0.9893582466233818  0.4121184852417566", "s            0.0                 0.0                 -0.5365729180004349", "<<U1>        <float64>           <float64>           <float64>"], "FrameHE.via_type_clinic.to_hint()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.via_type_clinic.to_hint()", "static_frame.core.frame.FrameHE[static_frame.core.index_hierarchy.IndexHierarchy[static_frame.core.index.Index[numpy.int64], static_frame.core.index.Index[numpy.str_]], static_frame.core.index.Index[numpy.str_], numpy.int64, numpy.bool_, numpy.datetime64]"], "FrameHE.via_type_clinic.check()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.via_type_clinic.check(sf.Frame[sf.IndexHierarchy[sf.Index[np.int64], sf.Index[np.str_]], sf.Index[np.int64], np.int64, np.bool_, np.str_])", "ClinicError('\\nIn Frame[IndexHierarchy[Index[int64], Index[str_]], Index[int64], int64, bool_, str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid\\nIn Frame[IndexHierarchy[Index[int64], Index[str_]], Index[int64], int64, bool_, str_]\\n\u2514\u2500\u2500 Index[int64]\\n    \u2514\u2500\u2500 Expected int64, provided str_ invalid')"], "FrameHE.via_type_clinic.__call__()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> cr = f.via_type_clinic(sf.Frame[sf.IndexHierarchy[sf.Index[np.int64], sf.Index[np.str_]], sf.Index[np.int64], np.int64, np.bool_, np.str_])", ">>> cr", "<ClinicResult: 2 errors>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Frame[IndexHierarchy[Index[int64], Index[str_]], Index[int64], int64, bool_, str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid", "In Frame[IndexHierarchy[Index[int64], Index[str_]], Index[int64], int64, bool_, str_]", "\u2514\u2500\u2500 Index[int64]", "    \u2514\u2500\u2500 Expected int64, provided str_ invalid"], "FrameHE.via_type_clinic.__repr__()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.via_type_clinic", "FrameHE[IndexHierarchy[Index[int64], Index[str_]], Index[str_], int64, bool_, datetime64]"], "FrameHE.reduce.from_func().keys()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_func(lambda f: f.iloc[1:]).keys())", "('x',)"], "FrameHE.reduce.from_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "('x',)"], "FrameHE.reduce.from_func().items()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_func(lambda f: f.iloc[1:]).items())", "(('x', <FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>),)"], "FrameHE.reduce.from_func().values()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_func(lambda f: f.iloc[1:]).values())", "(<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>,)"], "FrameHE.reduce.from_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>"], "FrameHE.reduce.from_map_func().keys()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_map_func(np.min).keys())", "('x',)"], "FrameHE.reduce.from_map_func().__iter__()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_map_func(np.min).__iter__())", "('x',)"], "FrameHE.reduce.from_map_func().items()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_map_func(np.min).items())", "(('x', <Series: x>", "<Index>", "a           2", "b           False", "c           1517-01-01", "<<U1>       <object>),)"], "FrameHE.reduce.from_map_func().values()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_map_func(np.min).values())", "(<Series: x>", "<Index>", "a           2", "b           False", "c           1517-01-01", "<<U1>       <object>,)"], "FrameHE.reduce.from_map_func().to_frame()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "x       2       False  1517-01-01", "<<U1>   <int64> <bool> <datetime64[D]>"], "FrameHE.reduce.from_label_map().keys()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "('x',)"], "FrameHE.reduce.from_label_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "('x',)"], "FrameHE.reduce.from_label_map().items()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "(('x', <Series: x>", "<Index>", "b           False", "a           10", "<<U1>       <object>),)"], "FrameHE.reduce.from_label_map().values()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(<Series: x>", "<Index>", "b           False", "a           10", "<<U1>       <object>,)"], "FrameHE.reduce.from_label_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b      a       <<U1>", "<Index>", "x       False  10", "<<U1>   <bool> <int64>"], "FrameHE.reduce.from_label_pair_map().keys()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "('x',)"], "FrameHE.reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "('x',)"], "FrameHE.reduce.from_label_pair_map().items()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "(('x', <Series: x>", "<Index>", "b-min       False", "b-max       True", "<<U5>       <bool>),)"], "FrameHE.reduce.from_label_pair_map().values()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: x>", "<Index>", "b-min       False", "b-max       True", "<<U5>       <bool>,)"], "FrameHE.reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameHE.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameHE: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min  b-max  <<U5>", "<Index>", "x       False  True", "<<U1>   <bool> <bool>"], "FrameGO.__init__()": [">>> sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>"], "FrameGO.from_arrow()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> aw = f1.to_arrow()", ">>> aw", "pyarrow.Table", "__index0__: string", "a: int64", "b: int64", "----", "__index0__: [[\"p\",\"q\",\"r\"]]", "a: [[0,2,4]]", "b: [[1,3,5]]", ">>> sf.FrameGO.from_arrow(aw, index_depth=1)", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         0       1", "q         2       3", "r         4       5", "<object>  <int64> <int64>"], "FrameGO.from_clipboard()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_clipboard()", "TclError('no display name and no $DISPLAY environment variable')", ">>> sf.FrameGO.from_clipboard(index_depth=1)", "TclError('no display name and no $DISPLAY environment variable')"], "FrameGO.from_concat()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> sf.FrameGO.from_concat((f1, f2), axis=1)", "<FrameGO>", "<IndexGO> a       b       c      d      <<U1>", "<Index>", "p         0       1       False  True", "q         2       3       False  True", "r         4       5       False  True", "<<U1>     <int64> <int64> <bool> <bool>", ">>> sf.FrameGO.from_concat((f1, f2.relabel(columns=('a', 'b'))), axis=0, index=sf.IndexAutoFactory)", "<FrameGO>", "<IndexGO> a        b        <<U1>", "<Index>", "0         0        1", "1         2        3", "2         4        5", "3         False    True", "4         False    True", "5         False    True", "<int64>   <object> <object>"], "FrameGO.from_concat_items()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> sf.FrameGO.from_concat_items(((f1.name, f1), (f2.name, f2)), axis=1)", "<FrameGO>", "<IndexHierarchyGO> x       x       y      y      <<U1>", "                   a       b       c      d      <<U1>", "<Index>", "p                  0       1       False  True", "q                  2       3       False  True", "r                  4       5       False  True", "<<U1>              <int64> <int64> <bool> <bool>", ">>> sf.FrameGO.from_concat_items(((f1.name, f1), (f2.name, f2.relabel(columns=('a', 'b')))), axis=0)", "<FrameGO>", "<IndexGO>              a        b        <<U1>", "<IndexHierarchy>", "x                p     0        1", "x                q     2        3", "x                r     4        5", "y                p     False    True", "y                q     False    True", "y                r     False    True", "<<U1>            <<U1> <object> <object>"], "FrameGO.from_csv()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_csv('/tmp/f.csv')", ">>> from pathlib import Path", ">>> Path('/tmp/f.csv').read_text()", "__index0__,a,b", "p,0,1", "q,2,3", "r,4,5", "", ">>> sf.FrameGO.from_csv('/tmp/f.csv', index_depth=1)", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         0       1", "q         2       3", "r         4       5", "<<U1>     <int64> <int64>"], "FrameGO.from_delimited()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_delimited('/tmp/f.psv', delimiter='|')", ">>> from pathlib import Path", ">>> Path('/tmp/f.psv').read_text()", "__index0__|a|b", "p|0|1", "q|2|3", "r|4|5", "", ">>> sf.FrameGO.from_delimited('/tmp/f.psv', delimiter='|', index_depth=1)", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         0       1", "q         2       3", "r         4       5", "<<U1>     <int64> <int64>"], "FrameGO.from_dict()": [">>> sf.FrameGO.from_dict(mapping=dict(a=(10, 2, 8, 3), b=('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), dtypes=dict(b=np.datetime64), name='x')", "<FrameGO: x>", "<IndexGO>    a       b               <<U1>", "<Index>", "0            10      1517-01-01", "1            2       1517-04-01", "2            8       1517-12-31", "3            3       1517-06-30", "<int64>      <int64> <datetime64[D]>"], "FrameGO.from_dict_fields()": [">>> sf.FrameGO.from_dict_fields(records=(dict(a=False, b=False, c=True), dict(a='1517-04-01', b='1517-01-01', c='1517-04-01')), columns=('p', 'q'), dtypes=dict(q=np.datetime64), name='x')", "TypeError(\"Frame.from_dict_fields() got an unexpected keyword argument 'records'\")"], "FrameGO.from_dict_records()": [">>> sf.FrameGO.from_dict_records(records=(dict(a=10, b=False, c='1517-01-01'), dict(a=8, b=True, c='1517-04-01')), index=('p', 'q'), dtypes=dict(c=np.datetime64), name='x')", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "p            10      False  1517-01-01", "q            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>"], "FrameGO.from_dict_records_items()": [">>> sf.FrameGO.from_dict_records_items(items=(('p', dict(a=10, b=False, c='1517-01-01')), ('q', dict(a=8, b=True, c='1517-04-01'))), dtypes=dict(c=np.datetime64), name='x')", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "p            10      False  1517-01-01", "q            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>"], "FrameGO.from_duckdb()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f1.to_duckdb('/tmp/f.db')", ">>> sf.FrameGO.from_duckdb('/tmp/f.db', label=f1.name, index_depth=1)", "<FrameGO: x>", "<IndexGO>    a       b        <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<object>     <int64> <object>"], "FrameGO.from_element()": [">>> sf.FrameGO.from_element(0, index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       0", "q            0       0", "r            0       0", "<<U1>        <int64> <int64>"], "FrameGO.from_element_items()": [">>> sf.FrameGO.from_element_items(((('a', 0), -1), (('b', 0), 10), (('a', 1), 3), (('b', 'a'), 1)), columns=(0, 1), index=('a', 'b'), name='x', axis=1)", "ErrorInitTypeBlocks('Array block has unaligned row count: found 1, expected 2')"], "FrameGO.from_elements()": [">>> sf.FrameGO.from_elements((10, 2, 8, 3), index=('p', 'q', 'r', 's'), columns=['a'], name='x')", "<FrameGO: x>", "<IndexGO>    a       <<U1>", "<Index>", "p            10", "q            2", "r            8", "s            3", "<<U1>        <int64>"], "FrameGO.from_fields()": [">>> sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameGO.from_hdf5()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f1.to_hdf5('/tmp/f.hdf5')", ">>> f1.from_hdf5('/tmp/f.hdf5', label='x', index_depth=1)", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>"], "FrameGO.from_items()": [">>> sf.FrameGO.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>"], "FrameGO.from_json_columns()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_columns(indent=4)", ">>> msg", "{", "    \"a\": {", "        \"0\": 10,", "        \"1\": 2,", "        \"2\": 8,", "        \"3\": 3", "    },", "    \"b\": {", "        \"0\": false,", "        \"1\": true,", "        \"2\": true,", "        \"3\": false", "    },", "    \"c\": {", "        \"0\": \"1517-01-01\",", "        \"1\": \"1517-04-01\",", "        \"2\": \"1517-12-31\",", "        \"3\": \"1517-06-30\"", "    }", "}", ">>> sf.Frame.from_json_columns(msg, dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c          <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<<U1>   <int64> <bool> <<U10>"], "FrameGO.from_json_index()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_index(indent=4)", ">>> msg", "{", "    \"0\": {", "        \"a\": 10,", "        \"b\": false,", "        \"c\": \"1517-01-01\"", "    },", "    \"1\": {", "        \"a\": 2,", "        \"b\": true,", "        \"c\": \"1517-04-01\"", "    },", "    \"2\": {", "        \"a\": 8,", "        \"b\": true,", "        \"c\": \"1517-12-31\"", "    },", "    \"3\": {", "        \"a\": 3,", "        \"b\": false,", "        \"c\": \"1517-06-30\"", "    }", "}", ">>> sf.Frame.from_json_index(msg, dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<<U1>   <int64> <bool> <datetime64[D]>"], "FrameGO.from_json_records()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_records(indent=4)", ">>> msg", "[", "    {", "        \"a\": 10,", "        \"b\": false,", "        \"c\": \"1517-01-01\"", "    },", "    {", "        \"a\": 2,", "        \"b\": true,", "        \"c\": \"1517-04-01\"", "    },", "    {", "        \"a\": 8,", "        \"b\": true,", "        \"c\": \"1517-12-31\"", "    },", "    {", "        \"a\": 3,", "        \"b\": false,", "        \"c\": \"1517-06-30\"", "    }", "]", ">>> sf.Frame.from_json_records(msg, dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<int64> <int64> <bool> <datetime64[D]>"], "FrameGO.from_json_split()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_split(indent=4)", ">>> msg", "{", "    \"columns\": [", "        \"a\",", "        \"b\",", "        \"c\"", "    ],", "    \"index\": [", "        0,", "        1,", "        2,", "        3", "    ],", "    \"data\": [", "        [", "            10,", "            false,", "            \"1517-01-01\"", "        ],", "        [", "            2,", "            true,", "            \"1517-04-01\"", "        ],", "        [", "            8,", "            true,", "            \"1517-12-31\"", "        ],", "        [", "            3,", "            false,", "            \"1517-06-30\"", "        ]", "    ]", "}", ">>> sf.Frame.from_json_split(msg, dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<int64> <int64> <bool> <datetime64[D]>"], "FrameGO.from_json_typed()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_typed(indent=4)", ">>> msg", "{", "    \"columns\": [", "        \"a\",", "        \"b\",", "        \"c\"", "    ],", "    \"index\": [", "        [", "            0,", "            \"p\"", "        ],", "        [", "            0,", "            \"q\"", "        ],", "        [", "            1,", "            \"p\"", "        ],", "        [", "            1,", "            \"q\"", "        ]", "    ],", "    \"data\": [", "        [", "            10,", "            2,", "            8,", "            3", "        ],", "        [", "            false,", "            true,", "            true,", "            false", "        ],", "        [", "            \"1517-01-01\",", "            \"1517-04-01\",", "            \"1517-12-31\",", "            \"1517-06-30\"", "        ]", "    ],", "    \"__meta__\": {", "        \"__names__\": [", "            \"x\",", "            null,", "            null", "        ],", "        \"__dtypes__\": [", "            \"=i8\",", "            \"|b1\",", "            \"=M8[D]\"", "        ],", "        \"__dtypes_index__\": [", "            \"=i8\",", "            \"=U1\"", "        ],", "        \"__dtypes_columns__\": [", "            \"=U1\"", "        ],", "        \"__types__\": [", "            \"IndexHierarchy\",", "            \"IndexGO\"", "        ],", "        \"__types_index__\": [", "            \"Index\",", "            \"Index\"", "        ],", "        \"__depths__\": [", "            3,", "            2,", "            1", "        ]", "    }", "}", ">>> sf.Frame.from_json_typed(msg)", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>"], "FrameGO.from_json_values()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> msg = f.to_json_values(indent=4)", ">>> msg", "[", "    [", "        10,", "        false,", "        \"1517-01-01\"", "    ],", "    [", "        2,", "        true,", "        \"1517-04-01\"", "    ],", "    [", "        8,", "        true,", "        \"1517-12-31\"", "    ],", "    [", "        3,", "        false,", "        \"1517-06-30\"", "    ]", "]", ">>> sf.Frame.from_json_values(msg, columns=tuple('abc'), dtypes=dict(c=np.datetime64))", "<Frame>", "<Index> a       b      c               <<U1>", "<Index>", "0       10      False  1517-01-01", "1       2       True   1517-04-01", "2       8       True   1517-12-31", "3       3       False  1517-06-30", "<int64> <int64> <bool> <datetime64[D]>"], "FrameGO.from_msgpack()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> mb = f1.to_msgpack()", ">>> mb", "b'\\x85\\xc4\\x02sf\\xa7FrameGO\\xc4\\x04name\\xa1x\\xc4\\x06blocks\\xc4\\xcd\\x82\\xc4\\x02sf\\xaaTypeBlocks\\xc4\\x06blocks\\xc4\\xb3\\x92\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<i8\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4 \\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U4\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4@q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x00\\xc4\\x05index\\xc4S\\x83\\xc4\\x02sf\\xa5Index\\xc4\\x04name\\xc0\\xc4\\x04data\\xc49\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U1\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4\\x10p\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00\\xc4\\x07columns\\xc4M\\x83\\xc4\\x02sf\\xa7IndexGO\\xc4\\x04name\\xc0\\xc4\\x04data\\xc41\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U1\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x02\\xc4\\x04data\\xc4\\x08a\\x00\\x00\\x00b\\x00\\x00\\x00'", ">>> sf.FrameGO.from_msgpack(mb)", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>"], "FrameGO.from_npy()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_npy('/tmp/f.npy')", ">>> sf.FrameGO.from_npy('/tmp/f.npy')", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> import shutil", ">>> shutil.rmtree('/tmp/f.npy')"], "FrameGO.from_npy_mmap()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_npy('/tmp/f.npy')", ">>> f2, closer = sf.FrameGO.from_npy_mmap('/tmp/f.npy')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> closer() # close mmaps after usage", ">>> import shutil", ">>> shutil.rmtree('/tmp/f.npy')"], "FrameGO.from_npz()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_npz('/tmp/f.npz')", ">>> sf.FrameGO.from_npz('/tmp/f.npz')", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameGO.from_overlay()": [">>> f1 = sf.FrameGO.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a         b        <<U1>", "<Index>", "p            10.0      qrs", "q            2.0       XYZ", "r            nan       None", "s            3.0       None", "<<U1>        <float64> <object>", ">>> f2 = sf.FrameGO.from_items((('a', (8, 3)), ('b', ('123', ' wX '))), index=('r', 's'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    a       b     <<U1>", "<Index>", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> sf.FrameGO.from_overlay((f1, f2))", "<FrameGO>", "<IndexGO> a         b        <<U1>", "<Index>", "p         10.0      qrs", "q         2.0       XYZ", "r         8.0       123", "s         3.0        wX", "<<U1>     <float64> <object>"], "FrameGO.from_pandas()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> df = f1.to_pandas()", ">>> df", "    a     b", "p  10  qrs ", "q   2   XYZ", "r   8   123", "s   3   wX ", ">>> sf.FrameGO.from_pandas(df, dtypes=dict(b=str))", "<FrameGO: x>", "<IndexGO>    a       b     <object>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<object>     <int64> <<U4>"], "FrameGO.from_parquet()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f1.to_parquet('/tmp/f.parquet')", ">>> sf.FrameGO.from_parquet('/tmp/f.parquet', index_depth=1)", "<FrameGO>", "<IndexGO> a       b        <<U1>", "<Index>", "p         10      qrs", "q         2       XYZ", "r         8       123", "s         3        wX", "<object>  <int64> <object>"], "FrameGO.from_pickle()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_pickle('/tmp/f.pickle')", ">>> sf.FrameGO.from_pickle('/tmp/f.pickle')", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameGO.from_records()": [">>> sf.FrameGO.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "p            10      False  1517-01-01", "q            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>"], "FrameGO.from_records_items()": [">>> sf.FrameGO.from_records_items((('p', (10, False, '1517-01-01')), ('q', (8, True,'1517-04-01'))), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "p            10      False  1517-01-01", "q            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>"], "FrameGO.from_series()": [">>> s = sf.Series((10, 2, 8), index=('a', 'b', 'c'), name='x')", ">>> s", "<Series: x>", "<Index>", "a           10", "b           2", "c           8", "<<U1>       <int64>", ">>> sf.FrameGO.from_series(s)", "<FrameGO>", "<IndexGO> x       <<U1>", "<Index>", "a         10", "b         2", "c         8", "<<U1>     <int64>"], "FrameGO.from_sql()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_sqlite('/tmp/f.db')", ">>> import sqlite3", ">>> conn = sqlite3.connect('/tmp/f.db')", ">>> sf.FrameGO.from_sql(\"select * from x limit 2\", connection=conn, index_depth=1)", "<FrameGO>", "<IndexGO> a       b       c          <<U1>", "<Index>", "0         10      0       1517-01-01", "1         2       1       1517-04-01", "<int64>   <int64> <int64> <<U10>"], "FrameGO.from_sqlite()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_sqlite('/tmp/f.db')", ">>> sf.FrameGO.from_sqlite('/tmp/f.db', label=f1.name, index_depth=1)", "<FrameGO: x>", "<IndexGO>    a       b      c          <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <<U10>"], "FrameGO.from_structured_array()": [">>> sa = np.array([(False, 8), (True, 19)], dtype=[('a', bool), ('b', int)])", ">>> sa", "[(False,  8) ( True, 19)]", ">>> sf.FrameGO.from_structured_array(sa)", "<FrameGO>", "<IndexGO> a      b       <<U1>", "<Index>", "0         False  8", "1         True   19", "<int64>   <bool> <int64>"], "FrameGO.from_tsv()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_tsv('/tmp/f.tsv')", ">>> from pathlib import Path", ">>> Path('/tmp/f.tsv').read_text()", "__index0__\ta\tb", "p\t0\t1", "q\t2\t3", "r\t4\t5", "", ">>> sf.FrameGO.from_tsv('/tmp/f.tsv', index_depth=1)", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         0       1", "q         2       3", "r         4       5", "<<U1>     <int64> <int64>"], "FrameGO.from_xlsx()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_xlsx('/tmp/f.xlsx')", ">>> sf.FrameGO.from_xlsx('/tmp/f.xlsx', index_depth=1)", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         0       1", "q         2       3", "r         4       5", "<<U1>     <int64> <int64>"], "FrameGO.to_arrow()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_arrow()", "pyarrow.Table", "__index0__: string", "a: int64", "b: string", "----", "__index0__: [[\"p\",\"q\",\"r\",\"s\"]]", "a: [[10,2,8,3]]", "b: [[\"qrs \",\"XYZ\",\"123\",\" wX \"]]"], "FrameGO.to_clipboard()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1.to_clipboard()", "TclError('no display name and no $DISPLAY environment variable')"], "FrameGO.to_csv()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_csv('/tmp/f.csv')", ">>> from pathlib import Path", ">>> Path('/tmp/f.csv').read_text()", "__index0__,a,b", "p,0,1", "q,2,3", "r,4,5", ""], "FrameGO.to_delimited()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_delimited('/tmp/f.psv', delimiter='|')", ">>> from pathlib import Path", ">>> Path('/tmp/f.psv').read_text()", "__index0__|a|b", "p|0|1", "q|2|3", "r|4|5", ""], "FrameGO.to_duckdb()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f1.to_duckdb('/tmp/f.db')", ">>> import duckdb", ">>> conn = duckdb.connect('/tmp/f.db')", ">>> sf.Frame.from_sql(\"select * from x limit 2\", connection=conn, index_depth=1)", "TypeError(\"'duckdb.duckdb.DuckDBPyConnection' object is not iterable\")"], "FrameGO.to_frame()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_frame()", "<Frame: x>", "<Index>    a       b     <<U1>", "<Index>", "p          10      qrs", "q          2       XYZ", "r          8       123", "s          3        wX", "<<U1>      <int64> <<U4>"], "FrameGO.to_frame_go()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_frame_go()", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>"], "FrameGO.to_frame_he()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_frame_he()", "<FrameHE: x>", "<Index>      a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>"], "FrameGO.to_hdf5()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_hdf5('/tmp/f.h5')"], "FrameGO.to_json_columns()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.to_json_columns(indent=4)", "{", "    \"a\": {", "        \"0\": 10,", "        \"1\": 2,", "        \"2\": 8,", "        \"3\": 3", "    },", "    \"b\": {", "        \"0\": false,", "        \"1\": true,", "        \"2\": true,", "        \"3\": false", "    },", "    \"c\": {", "        \"0\": \"1517-01-01\",", "        \"1\": \"1517-04-01\",", "        \"2\": \"1517-12-31\",", "        \"3\": \"1517-06-30\"", "    }", "}"], "FrameGO.to_json_index()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.to_json_index(indent=4)", "{", "    \"0\": {", "        \"a\": 10,", "        \"b\": false,", "        \"c\": \"1517-01-01\"", "    },", "    \"1\": {", "        \"a\": 2,", "        \"b\": true,", "        \"c\": \"1517-04-01\"", "    },", "    \"2\": {", "        \"a\": 8,", "        \"b\": true,", "        \"c\": \"1517-12-31\"", "    },", "    \"3\": {", "        \"a\": 3,", "        \"b\": false,", "        \"c\": \"1517-06-30\"", "    }", "}"], "FrameGO.to_json_records()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.to_json_records(indent=4)", "[", "    {", "        \"a\": 10,", "        \"b\": false,", "        \"c\": \"1517-01-01\"", "    },", "    {", "        \"a\": 2,", "        \"b\": true,", "        \"c\": \"1517-04-01\"", "    },", "    {", "        \"a\": 8,", "        \"b\": true,", "        \"c\": \"1517-12-31\"", "    },", "    {", "        \"a\": 3,", "        \"b\": false,", "        \"c\": \"1517-06-30\"", "    }", "]"], "FrameGO.to_json_split()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.to_json_split(indent=4)", "{", "    \"columns\": [", "        \"a\",", "        \"b\",", "        \"c\"", "    ],", "    \"index\": [", "        0,", "        1,", "        2,", "        3", "    ],", "    \"data\": [", "        [", "            10,", "            false,", "            \"1517-01-01\"", "        ],", "        [", "            2,", "            true,", "            \"1517-04-01\"", "        ],", "        [", "            8,", "            true,", "            \"1517-12-31\"", "        ],", "        [", "            3,", "            false,", "            \"1517-06-30\"", "        ]", "    ]", "}"], "FrameGO.to_json_typed()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.to_json_typed(indent=4)", "{", "    \"columns\": [", "        \"a\",", "        \"b\",", "        \"c\"", "    ],", "    \"index\": null,", "    \"data\": [", "        [", "            10,", "            2,", "            8,", "            3", "        ],", "        [", "            false,", "            true,", "            true,", "            false", "        ],", "        [", "            \"1517-01-01\",", "            \"1517-04-01\",", "            \"1517-12-31\",", "            \"1517-06-30\"", "        ]", "    ],", "    \"__meta__\": {", "        \"__names__\": [", "            \"x\",", "            null,", "            null", "        ],", "        \"__dtypes__\": [", "            \"=i8\",", "            \"|b1\",", "            \"=M8[D]\"", "        ],", "        \"__dtypes_index__\": [", "            \"=i8\"", "        ],", "        \"__dtypes_columns__\": [", "            \"=U1\"", "        ],", "        \"__types__\": [", "            \"Index\",", "            \"IndexGO\"", "        ],", "        \"__depths__\": [", "            3,", "            1,", "            1", "        ]", "    }", "}"], "FrameGO.to_json_values()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.to_json_values(indent=4)", "[", "    [", "        10,", "        false,", "        \"1517-01-01\"", "    ],", "    [", "        2,", "        true,", "        \"1517-04-01\"", "    ],", "    [", "        8,", "        true,", "        \"1517-12-31\"", "    ],", "    [", "        3,", "        false,", "        \"1517-06-30\"", "    ]", "]"], "FrameGO.to_latex()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_latex()", "\\begin{table}[ht]", "\\centering", "\\begin{tabular}{c c c}", "\\hline\\hline", "   & a   & b    \\\\", "\\hline", "p  & 10  & qrs  \\\\", "q  & 2   & XYZ  \\\\", "r  & 8   & 123  \\\\", "s  & 3   &  wX  \\\\", "\\hline\\end{tabular}", "\\end{table}"], "FrameGO.to_markdown()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_markdown()", "|  |a  |b   |", "|--|---|----|", "|p |10 |qrs |", "|q |2  |XYZ |", "|r |8  |123 |", "|s |3  | wX |"], "FrameGO.to_msgpack()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_msgpack()", "b'\\x85\\xc4\\x02sf\\xa7FrameGO\\xc4\\x04name\\xa1x\\xc4\\x06blocks\\xc4\\xcd\\x82\\xc4\\x02sf\\xaaTypeBlocks\\xc4\\x06blocks\\xc4\\xb3\\x92\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<i8\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4 \\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U4\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4@q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x00\\xc4\\x05index\\xc4S\\x83\\xc4\\x02sf\\xa5Index\\xc4\\x04name\\xc0\\xc4\\x04data\\xc49\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U1\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x04\\xc4\\x04data\\xc4\\x10p\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00\\xc4\\x07columns\\xc4M\\x83\\xc4\\x02sf\\xa7IndexGO\\xc4\\x04name\\xc0\\xc4\\x04data\\xc41\\x85\\xc4\\x02nd\\xc3\\xc4\\x04type\\xa3<U1\\xc4\\x04kind\\xc4\\x00\\xc4\\x05shape\\x91\\x02\\xc4\\x04data\\xc4\\x08a\\x00\\x00\\x00b\\x00\\x00\\x00'"], "FrameGO.to_npy()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_npy('/tmp/f.npy')", ">>> sf.Frame.from_npy('/tmp/f.npy')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> import shutil", ">>> shutil.rmtree('/tmp/f.npy')"], "FrameGO.to_npz()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_npz('/tmp/f.npz')", ">>> sf.Frame.from_npz('/tmp/f.npz')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "FrameGO.to_pairs()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_pairs()", "(('a', (('p', 10), ('q', 2), ('r', 8), ('s', 3))), ('b', (('p', 'qrs '), ('q', 'XYZ'), ('r', '123'), ('s', ' wX '))))"], "FrameGO.to_pandas()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_pandas()", "    a     b", "p  10  qrs ", "q   2   XYZ", "r   8   123", "s   3   wX "], "FrameGO.to_parquet()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_parquet('/tmp/f.parquet')"], "FrameGO.to_pickle()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_pickle('/tmp/f.pickle')", ">>> sf.Frame.from_pickle('/tmp/f.pickle')", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>"], "FrameGO.to_rst()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_rst()", "+--+---+----+", "|  |a  |b   |", "+==+===+====+", "|p |10 |qrs |", "+--+---+----+", "|q |2  |XYZ |", "+--+---+----+", "|r |8  |123 |", "+--+---+----+", "|s |3  | wX |", "+--+---+----+"], "FrameGO.to_series()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_series()", "<Series: x>", "<Index>", "('p', 'a')  10", "('p', 'b')  qrs", "('q', 'a')  2", "('q', 'b')  XYZ", "('r', 'a')  8", "('r', 'b')  123", "('s', 'a')  3", "('s', 'b')   wX", "<object>    <object>"], "FrameGO.to_sql()": [">>> import sqlite3", ">>> conn = sqlite3.connect(':memory')", ">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1.to_sql(conn, include_index=False)", ">>> sf.Frame.from_sql(\"select * from x\", connection=conn)", "<Frame>", "<Index> a       b       c          <<U1>", "<Index>", "0       10      0       1517-01-01", "1       2       1       1517-04-01", "2       8       1       1517-12-31", "3       3       0       1517-06-30", "<int64> <int64> <int64> <<U10>"], "FrameGO.to_sqlite()": [">>> f1 = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f1.to_sqlite('/tmp/f.db')", ">>> import sqlite3", ">>> conn = sqlite3.connect('/tmp/f.db')", ">>> sf.Frame.from_sql(\"select * from x limit 2\", connection=conn, index_depth=1)", "<Frame>", "<Index> a       b       c          <<U1>", "<Index>", "0       10      0       1517-01-01", "1       2       1       1517-04-01", "<int64> <int64> <int64> <<U10>"], "FrameGO.to_tsv()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_tsv('/tmp/f.tsv')", ">>> from pathlib import Path", ">>> Path('/tmp/f.tsv').read_text()", "__index0__\ta\tb", "p\t0\t1", "q\t2\t3", "r\t4\t5", ""], "FrameGO.to_xarray()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.to_xarray()", "<xarray.Dataset>", "Dimensions:     (__index0__: 4)", "Coordinates:", "  * __index0__  (__index0__) <U1 'p' 'q' 'r' 's'", "Data variables:", "    a           (__index0__) int64 10 2 8 3", "    b           (__index0__) <U4 'qrs ' 'XYZ' '123' ' wX '"], "FrameGO.to_xlsx()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.to_xlsx('/tmp/f.xlsx')"], "FrameGO.STATIC": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.STATIC", "False"], "FrameGO.T": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.T", "<FrameGO: x>", "<IndexGO>    0          1          2          3          <int64>", "<Index>", "a            10         2          8          3", "b            False      True       True       False", "c            1517-01-01 1517-04-01 1517-12-31 1517-06-30", "<<U1>        <object>   <object>   <object>   <object>"], "FrameGO.columns": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.columns", "<IndexGO>", "a", "b", "c", "<<U1>"], "FrameGO.dtypes": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.dtypes", "<Series: x>", "<Index>", "a           int64", "b           bool", "c           datetime64[D]", "<<U1>       <object>"], "FrameGO.index": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.index", "<Index>", "0", "1", "2", "3", "<int64>"], "FrameGO.memory": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.memory", "        L    Lu    LM   LMu   LMD  LMDu  R    Ru    RM   RMu   RMD  RMDu", "Name    50   B     50   B     50   B     50   B     50   B     50   B", "Index   236  B     252  B     124  B     8.34 KB    284  B     156  B", "Columns 1.15 KB    1.18 KB    954  B     9.26 KB    1.21 KB    978  B", "Blocks  748  B     796  B     412  B     748  B     796  B     412  B", "Total   2.19 KB    2.28 KB    1.53 KB    10.3 KB    2.34 KB    1.59 KB"], "FrameGO.name": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.name", "x"], "FrameGO.nbytes": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.nbytes", "68"], "FrameGO.ndim": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.ndim", "2"], "FrameGO.shape": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.shape", "(4, 3)"], "FrameGO.size": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.size", "12"], "FrameGO.__array__()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.__array__()", "[[0 1]", " [2 3]", " [4 5]]"], "FrameGO.__array_ufunc__()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> np.array((1, 0)) * f", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         0       0", "q         2       0", "r         4       0", "<<U1>     <int64> <int64>"], "FrameGO.__bool__()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> bool(f)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "FrameGO.__dataframe__()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> dfi = f.__dataframe__()", ">>> tuple(dfi.get_columns())", "(<DFIColumn: shape=(3,) dtype=<i8>, <DFIColumn: shape=(3,) dtype=<i8>)"], "FrameGO.__deepcopy__()": [">>> import copy", ">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> copy.deepcopy(f)", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>"], "FrameGO.__len__()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> len(f)", "3"], "FrameGO.__round__()": [">>> f = sf.FrameGO((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')", ">>> f", "<FrameGO: y>", "<IndexGO>    a                  b                  <<U1>", "<Index>", "p            0.0                1.3333333333333333", "q            2.6666666666666665 4.0", "r            5.333333333333333  6.666666666666667", "<<U1>        <float64>          <float64>", ">>> round(f, 1)", "<FrameGO: y>", "<IndexGO>    a         b         <<U1>", "<Index>", "p            0.0       1.3", "q            2.7       4.0", "r            5.3       6.7", "<<U1>        <float64> <float64>"], "FrameGO.all()": [">>> f = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f", "<FrameGO: y>", "<IndexGO>    c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> f.all()", "<Series>", "<Index>", "c        False", "d        True", "<<U1>    <bool>"], "FrameGO.any()": [">>> f = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f", "<FrameGO: y>", "<IndexGO>    c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> f.any()", "<Series>", "<Index>", "c        False", "d        True", "<<U1>    <bool>"], "FrameGO.astype[]()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.astype['c'](object)", "<FrameGO: x>", "<IndexGO>    a       b      c          <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <object>"], "FrameGO.astype()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.astype(float)", "<FrameGO: x>", "<IndexGO>    a         b         <<U1>", "<Index>", "p            0.0       1.0", "q            2.0       3.0", "r            4.0       5.0", "<<U1>        <float64> <float64>"], "FrameGO.clip()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.clip(lower=2, upper=4)", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       2", "q            2       3", "r            4       4", "<<U1>        <int64> <int64>"], "FrameGO.consolidate[]": [">>> f1 = sf.FrameGO.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1), (False, True, True, False), (True, True, False, True)), columns=('a', 'b', 'c', 'd', 'e'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       d      e      <<U1>", "<Index>", "0            0       20      0       False  True", "1            0       18      0       True   True", "2            10      -3      0       True   False", "3            2       18      1       False  True", "<int64>      <int64> <int64> <int64> <bool> <bool>", ">>> f1.consolidate.status", "<Frame>", "<Index> loc   iloc    dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       a     0       int64    (4,)     1       True    True         True", "1       b     1       int64    (4,)     1       True    True         True", "2       c     2       int64    (4,)     1       True    True         True", "3       d     3       bool     (4,)     1       True    True         True", "4       e     4       bool     (4,)     1       True    True         True", "<int64> <<U1> <int64> <object> <object> <int64> <bool>  <bool>       <bool>", ">>> f2 = f1.consolidate['a':'c']", ">>> f2.consolidate.status", "<Frame>", "<Index> loc                  iloc              dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       slice('a', 'c', N... slice(0, 3, None) int64    (4, 3)   2       True    False        True", "1       d                    3                 bool     (4,)     1       True    True         True", "2       e                    4                 bool     (4,)     1       True    True         True", "<int64> <object>             <object>          <object> <object> <int64> <bool>  <bool>       <bool>"], "FrameGO.consolidate()": [">>> f1 = sf.FrameGO.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1), (False, True, True, False), (True, True, False, True)), columns=('a', 'b', 'c', 'd', 'e'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       d      e      <<U1>", "<Index>", "0            0       20      0       False  True", "1            0       18      0       True   True", "2            10      -3      0       True   False", "3            2       18      1       False  True", "<int64>      <int64> <int64> <int64> <bool> <bool>", ">>> f1.consolidate.status", "<Frame>", "<Index> loc   iloc    dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       a     0       int64    (4,)     1       True    True         True", "1       b     1       int64    (4,)     1       True    True         True", "2       c     2       int64    (4,)     1       True    True         True", "3       d     3       bool     (4,)     1       True    True         True", "4       e     4       bool     (4,)     1       True    True         True", "<int64> <<U1> <int64> <object> <object> <int64> <bool>  <bool>       <bool>", ">>> f2 = f1.consolidate()", ">>> f2.consolidate.status", "<Frame>", "<Index> loc                  iloc                 dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       slice('a', 'c', N... slice(0, 3, None)    int64    (4, 3)   2       True    False        True", "1       slice('d', 'e', N... slice(3, None, None) bool     (4, 2)   2       True    False        True", "<int64> <object>             <object>             <object> <object> <int64> <bool>  <bool>       <bool>"], "FrameGO.consolidate.status": [">>> f1 = sf.FrameGO.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1), (False, True, True, False), (True, True, False, True)), columns=('a', 'b', 'c', 'd', 'e'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       d      e      <<U1>", "<Index>", "0            0       20      0       False  True", "1            0       18      0       True   True", "2            10      -3      0       True   False", "3            2       18      1       False  True", "<int64>      <int64> <int64> <int64> <bool> <bool>", ">>> f1.consolidate.status", "<Frame>", "<Index> loc   iloc    dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       a     0       int64    (4,)     1       True    True         True", "1       b     1       int64    (4,)     1       True    True         True", "2       c     2       int64    (4,)     1       True    True         True", "3       d     3       bool     (4,)     1       True    True         True", "4       e     4       bool     (4,)     1       True    True         True", "<int64> <<U1> <int64> <object> <object> <int64> <bool>  <bool>       <bool>", ">>> f2 = f1.consolidate()", ">>> f2.consolidate.status", "<Frame>", "<Index> loc                  iloc                 dtype    shape    ndim    owndata f_contiguous c_contiguous <<U12>", "<Index>", "0       slice('a', 'c', N... slice(0, 3, None)    int64    (4, 3)   2       True    False        True", "1       slice('d', 'e', N... slice(3, None, None) bool     (4, 2)   2       True    False        True", "<int64> <object>             <object>             <object> <object> <int64> <bool>  <bool>       <bool>"], "FrameGO.corr()": [">>> f1 = sf.FrameGO((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       d       <<U1>", "<Index>", "p            0       2       4       6", "q            8       10      12      14", "r            0       1       4       9", "s            16      25      36      49", "<<U1>        <int64> <int64> <int64> <int64>", ">>> f1.corr()", "<FrameGO: x>", "<IndexGO>    a                  b                  c                  d                  <<U1>", "<Index>", "a            1.0                0.9888513796308233 0.965581028730576  0.9340437381585037", "b            0.9888513796308233 0.9999999999999999 0.9923448088115435 0.972134396307783", "c            0.9655810287305759 0.9923448088115435 0.9999999999999999 0.9934089501944108", "d            0.9340437381585037 0.9721343963077829 0.9934089501944108 1.0", "<<U1>        <float64>          <float64>          <float64>          <float64>"], "FrameGO.count()": [">>> f = sf.FrameGO.from_items((('a', (10, 2, np.nan, 3)), ('b', ('qrs ', 'XYZ', None, None))), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b        <<U1>", "<Index>", "p            10.0      qrs", "q            2.0       XYZ", "r            nan       None", "s            3.0       None", "<<U1>        <float64> <object>", ">>> f.count(skipna=True)", "<Series>", "<Index>", "a        3", "b        2", "<<U1>    <int64>", ">>> f.count(unique=True)", "<Series>", "<Index>", "a        3", "b        2", "<<U1>    <int64>"], "FrameGO.cov()": [">>> f1 = sf.FrameGO((np.concatenate((np.arange(8) * 2, np.arange(8) ** 2)).reshape(4,4)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c', 'd'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       d       <<U1>", "<Index>", "p            0       2       4       6", "q            8       10      12      14", "r            0       1       4       9", "s            16      25      36      49", "<<U1>        <int64> <int64> <int64> <int64>", ">>> f1.cov()", "<FrameGO: x>", "<IndexGO>    a                  b                  c                  d                  <<U1>", "<Index>", "a            58.666666666666664 84.0               112.0              142.66666666666666", "b            84.0               123.0              166.66666666666666 215.0", "c            112.0              166.66666666666666 229.33333333333331 300.0", "d            142.66666666666666 215.0              300.0              397.66666666666663", "<<U1>        <float64>          <float64>          <float64>          <float64>"], "FrameGO.cumprod()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.cumprod()", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         0       1", "q         0       3", "r         0       15", "<<U1>     <int64> <int64>"], "FrameGO.cumsum()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.cumsum()", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         0       1", "q         2       4", "r         6       9", "<<U1>     <int64> <int64>"], "FrameGO.drop_duplicated()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "1            2.0       True     1517-04-01", "2            nan       None     NaT", "3            2.0       True     1517-04-01", "<int64>      <float64> <object> <datetime64[D]>", ">>> f.drop_duplicated()", "<FrameGO: x>", "<IndexGO>    a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "2            nan       None     NaT", "<int64>      <float64> <object> <datetime64[D]>"], "FrameGO.dropfalsy()": [">>> f = sf.FrameGO.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            0             NaT", "3            2       123   1517-04-01", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.dropfalsy()", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "3            2       123   1517-04-01", "<int64>      <int64> <<U4> <datetime64[D]>"], "FrameGO.dropna()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "1            2.0       True     1517-04-01", "2            nan       None     NaT", "3            2.0       True     1517-04-01", "<int64>      <float64> <object> <datetime64[D]>", ">>> f.dropna()", "<FrameGO: x>", "<IndexGO>    a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "1            2.0       True     1517-04-01", "3            2.0       True     1517-04-01", "<int64>      <float64> <object> <datetime64[D]>"], "FrameGO.duplicated()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "1            2.0       True     1517-04-01", "2            nan       None     NaT", "3            2.0       True     1517-04-01", "<int64>      <float64> <object> <datetime64[D]>", ">>> f.duplicated()", "<Series>", "<Index>", "0        False", "1        True", "2        False", "3        True", "<int64>  <bool>"], "FrameGO.equals()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) * 4/3), index=('p', 'q', 'r'), columns=('a', 'b'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    a                  b                  <<U1>", "<Index>", "p            0.0                1.3333333333333333", "q            2.6666666666666665 4.0", "r            5.333333333333333  6.666666666666667", "<<U1>        <float64>          <float64>", ">>> f1.equals(f2)", "False"], "FrameGO.extend()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> f1.extend(f2)", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c      d      <<U1>", "<Index>", "p            0       1       False  True", "q            2       3       False  True", "r            4       5       False  True", "<<U1>        <int64> <int64> <bool> <bool>"], "FrameGO.extend_items()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f1.extend_items((('d', (1, 2, 3)), ('e', (4, 5, 6))))", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       d       e       <<U1>", "<Index>", "p            0       1       1       4", "q            2       3       2       5", "r            4       5       3       6", "<<U1>        <int64> <int64> <int64> <int64>"], "FrameGO.fillfalsy()": [">>> f = sf.FrameGO.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            0             NaT", "3            2       123   1517-04-01", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.fillfalsy(dict(a=1, b='abc', c=np.datetime64('2022-01-10')))", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            1       abc   2022-01-10", "3            2       123   1517-04-01", "<int64>      <int64> <<U4> <datetime64[D]>"], "FrameGO.fillfalsy_backward()": [">>> f = sf.FrameGO.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            0       20      0", "1            0       18      0", "2            10      -3      0", "3            2       18      1", "<int64>      <int64> <int64> <int64>", ">>> f.fillfalsy_backward()", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            10      20      1", "1            10      18      1", "2            10      -3      1", "3            2       18      1", "<int64>      <int64> <int64> <int64>"], "FrameGO.fillfalsy_forward()": [">>> f = sf.FrameGO.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            10      8       1", "1            2       3       0", "2            0       8       0", "3            0       0       0", "<int64>      <int64> <int64> <int64>", ">>> f.fillfalsy_forward()", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            10      8       1", "1            2       3       1", "2            2       8       1", "3            2       8       1", "<int64>      <int64> <int64> <int64>"], "FrameGO.fillfalsy_leading()": [">>> f = sf.FrameGO.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            0       20      0", "1            0       18      0", "2            10      -3      0", "3            2       18      1", "<int64>      <int64> <int64> <int64>", ">>> f.fillfalsy_leading(-1)", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            -1      20      -1", "1            -1      18      -1", "2            10      -3      -1", "3            2       18      1", "<int64>      <int64> <int64> <int64>"], "FrameGO.fillfalsy_trailing()": [">>> f = sf.FrameGO.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            10      8       1", "1            2       3       0", "2            0       8       0", "3            0       0       0", "<int64>      <int64> <int64> <int64>", ">>> f.fillfalsy_trailing(-1)", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            10      8       1", "1            2       3       -1", "2            -1      8       -1", "3            -1      -1      -1", "<int64>      <int64> <int64> <int64>"], "FrameGO.fillna()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b     c               <<U1>", "<Index>", "0            10.0      qrs   1517-01-01", "1            2.0       XYZ   1517-04-01", "2            nan             NaT", "3            2.0       123   1517-04-01", "<int64>      <float64> <<U4> <datetime64[D]>", ">>> f.fillna(-1)", "<FrameGO: x>", "<IndexGO>    a         b     c          <<U1>", "<Index>", "0            10.0      qrs   1517-01-01", "1            2.0       XYZ   1517-04-01", "2            -1.0            -1", "3            2.0       123   1517-04-01", "<int64>      <float64> <<U4> <object>"], "FrameGO.fillna_backward()": [">>> f = sf.FrameGO.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y')", ">>> f", "<FrameGO: y>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            nan       nan       nan", "1            nan       8.0       nan", "2            10.0      3.0       nan", "3            2.0       8.0       1.0", "<int64>      <float64> <float64> <float64>", ">>> f.fillna_backward()", "<FrameGO: y>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            10.0      8.0       1.0", "2            10.0      3.0       1.0", "3            2.0       8.0       1.0", "<int64>      <float64> <float64> <float64>"], "FrameGO.fillna_forward()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.fillna_forward()", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       1.0", "2            2.0       8.0       1.0", "3            2.0       8.0       1.0", "<int64>      <float64> <float64> <float64>"], "FrameGO.fillna_leading()": [">>> f = sf.FrameGO.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y')", ">>> f", "<FrameGO: y>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            nan       nan       nan", "1            nan       8.0       nan", "2            10.0      3.0       nan", "3            2.0       8.0       1.0", "<int64>      <float64> <float64> <float64>", ">>> f.fillna_leading(-1)", "<FrameGO: y>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            -1.0      -1.0      -1.0", "1            -1.0      8.0       -1.0", "2            10.0      3.0       -1.0", "3            2.0       8.0       1.0", "<int64>      <float64> <float64> <float64>"], "FrameGO.fillna_trailing()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.fillna_trailing(-1)", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       -1.0", "2            -1.0      8.0       -1.0", "3            -1.0      -1.0      -1.0", "<int64>      <float64> <float64> <float64>"], "FrameGO.head()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.head(2)", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameGO.iloc_max()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.iloc_max()", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>"], "FrameGO.iloc_min()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.iloc_min()", "<Series>", "<Index>", "a        1", "b        1", "c        0", "<<U1>    <int64>"], "FrameGO.iloc_notfalsy_first()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iloc_notfalsy_first(axis=0)", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>", ">>> f.iloc_notfalsy_first(axis=1)", "<Series>", "<Index>", "p        0", "q        0", "r        1", "s        2", "<<U1>    <int64>"], "FrameGO.iloc_notfalsy_last()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iloc_notfalsy_last(axis=0)", "<Series>", "<Index>", "a        1", "b        2", "c        3", "<<U1>    <int64>", ">>> f.iloc_notfalsy_last(axis=1)", "<Series>", "<Index>", "p        2", "q        1", "r        2", "s        2", "<<U1>    <int64>"], "FrameGO.iloc_notna_first()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.iloc_notna_first(axis=0)", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>", ">>> f.iloc_notna_first(axis=1)", "<Series>", "<Index>", "0        0", "1        0", "2        1", "3        -1", "<int64>  <int64>"], "FrameGO.iloc_notna_last()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.iloc_notna_last(axis=0)", "<Series>", "<Index>", "a        1", "b        2", "c        0", "<<U1>    <int64>", ">>> f.iloc_notna_last(axis=1)", "<Series>", "<Index>", "0        2", "1        1", "2        1", "3        -1", "<int64>  <int64>"], "FrameGO.insert_after()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> f1.insert_after('b', f2)", "<FrameGO: x>", "<IndexGO>    a       b       c      d      <<U1>", "<Index>", "p            0       1       False  True", "q            2       3       False  True", "r            4       5       False  True", "<<U1>        <int64> <int64> <bool> <bool>"], "FrameGO.insert_before()": [">>> f1 = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    c      d      <<U1>", "<Index>", "p            False  True", "q            False  True", "r            False  True", "<<U1>        <bool> <bool>", ">>> f1.insert_before('b', f2)", "<FrameGO: x>", "<IndexGO>    a       c      d      b       <<U1>", "<Index>", "p            0       False  True   1", "q            2       False  True   3", "r            4       False  True   5", "<<U1>        <int64> <bool> <bool> <int64>"], "FrameGO.isfalsy()": [">>> f = sf.FrameGO.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            0             NaT", "3            2       123   1517-04-01", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.isfalsy()", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "0         False  False  False", "1         False  False  False", "2         True   True   True", "3         False  False  False", "<int64>   <bool> <bool> <bool>"], "FrameGO.isin()": [">>> f = sf.FrameGO.from_fields(((10, 2, 0, 0), (8, 3, 8, 0), (1, 0, 0, 0)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            10      8       1", "1            2       3       0", "2            0       8       0", "3            0       0       0", "<int64>      <int64> <int64> <int64>", ">>> f.isin((0, 8))", "<FrameGO: x>", "<IndexGO>    a      b      c      <<U1>", "<Index>", "0            False  True   False", "1            False  False  True", "2            True   True   True", "3            True   True   True", "<int64>      <bool> <bool> <bool>"], "FrameGO.isna()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.isna()", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "0         False  False  False", "1         False  False  True", "2         True   False  True", "3         True   True   True", "<int64>   <bool> <bool> <bool>"], "FrameGO.join_inner()": [">>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.join_inner(f2, left_columns='c', right_columns='f')", "<FrameGO>", "<IndexGO> a       b       c       d       e       f       <<U1>", "<Index>", "0         11      0       0       7       8       0", "1         4       8       1       2       3       1", "2         10      3       0       7       8       0", "3         2       8       1       2       3       1", "<int64>   <int64> <int64> <int64> <int64> <int64> <int64>"], "FrameGO.join_left()": [">>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.join_left(f2, left_columns='c', right_columns='f')", "<FrameGO>", "<IndexGO> a       b       c       d       e       f       <<U1>", "<Index>", "0         11      0       0       7       8       0", "1         4       8       1       2       3       1", "2         10      3       0       7       8       0", "3         2       8       1       2       3       1", "<int64>   <int64> <int64> <int64> <int64> <int64> <int64>"], "FrameGO.join_outer()": [">>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.join_outer(f2, left_columns='c', right_columns='f')", "<FrameGO>", "<IndexGO> a       b       c       d       e       f       <<U1>", "<Index>", "0         11      0       0       7       8       0", "1         4       8       1       2       3       1", "2         10      3       0       7       8       0", "3         2       8       1       2       3       1", "<int64>   <int64> <int64> <int64> <int64> <int64> <int64>"], "FrameGO.join_right()": [">>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.join_right(f2, left_columns='c', right_columns='f')", "<FrameGO>", "<IndexGO> a       b       c       d       e       f       <<U1>", "<Index>", "0         4       8       1       2       3       1", "1         2       8       1       2       3       1", "2         11      0       0       7       8       0", "3         10      3       0       7       8       0", "<int64>   <int64> <int64> <int64> <int64> <int64> <int64>"], "FrameGO.loc_max()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.loc_max()", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>"], "FrameGO.loc_min()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.loc_min()", "<Series>", "<Index>", "a        1", "b        1", "c        0", "<<U1>    <int64>"], "FrameGO.loc_notfalsy_first()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.loc_notfalsy_first(axis=0)", "<Series>", "<Index>", "a        p", "b        p", "c        p", "<<U1>    <<U1>", ">>> f.loc_notfalsy_first(axis=1)", "<Series>", "<Index>", "p        a", "q        a", "r        b", "s        c", "<<U1>    <<U1>"], "FrameGO.loc_notfalsy_last()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.loc_notfalsy_last(axis=0)", "<Series>", "<Index>", "a        q", "b        r", "c        s", "<<U1>    <<U1>", ">>> f.loc_notfalsy_last(axis=1)", "<Series>", "<Index>", "p        c", "q        b", "r        c", "s        c", "<<U1>    <<U1>"], "FrameGO.loc_notna_first()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.loc_notna_first(axis=0)", "<Series>", "<Index>", "a        0", "b        0", "c        0", "<<U1>    <int64>", ">>> f.loc_notna_first(axis=1)", "<Series>", "<Index>", "0        a", "1        a", "2        b", "3        nan", "<int64>  <object>"], "FrameGO.loc_notna_last()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.loc_notna_last(axis=0)", "<Series>", "<Index>", "a        1", "b        2", "c        0", "<<U1>    <int64>", ">>> f.loc_notna_last(axis=1)", "<Series>", "<Index>", "0        c", "1        b", "2        b", "3        nan", "<int64>  <object>"], "FrameGO.max()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.max()", "<Series>", "<Index>", "a        4", "b        5", "<<U1>    <int64>"], "FrameGO.mean()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.mean()", "<Series>", "<Index>", "a        2.0", "b        3.0", "<<U1>    <float64>"], "FrameGO.median()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.median()", "<Series>", "<Index>", "a        2.0", "b        3.0", "<<U1>    <float64>"], "FrameGO.merge_inner()": [">>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.merge_inner(f2, left_columns='c', right_columns='f')", "<FrameGO>", "<IndexGO> c       a       b       d       e       <<U1>", "<Index>", "0         0       11      0       7       8", "1         1       4       8       2       3", "2         0       10      3       7       8", "3         1       2       8       2       3", "<int64>   <int64> <int64> <int64> <int64> <int64>"], "FrameGO.merge_left()": [">>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.merge_left(f2, left_columns='c', right_columns='f', merge_labels='x')", "<FrameGO>", "<IndexGO> x       a       b       d       e       <<U1>", "<Index>", "0         0       11      0       7       8", "1         1       4       8       2       3", "2         0       10      3       7       8", "3         1       2       8       2       3", "<int64>   <int64> <int64> <int64> <int64> <int64>"], "FrameGO.merge_outer()": [">>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.merge_outer(f2, left_columns='c', right_columns='f', merge_labels='x')", "<FrameGO>", "<IndexGO> x       a       b       d       e       <<U1>", "<Index>", "0         0       11      0       7       8", "1         1       4       8       2       3", "2         0       10      3       7       8", "3         1       2       8       2       3", "<int64>   <int64> <int64> <int64> <int64> <int64>"], "FrameGO.merge_right()": [">>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 7), (3, 8), (1, 0)), columns=('d', 'e', 'f'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    d       e       f       <<U1>", "<Index>", "0            2       3       1", "1            7       8       0", "<int64>      <int64> <int64> <int64>", ">>> f1.merge_right(f2, left_columns='c', right_columns='f')", "<FrameGO>", "<IndexGO> f       a       b       d       e       <<U1>", "<Index>", "0         1       4       8       2       3", "1         1       2       8       2       3", "2         0       11      0       7       8", "3         0       10      3       7       8", "<int64>   <int64> <int64> <int64> <int64> <int64>"], "FrameGO.min()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.min()", "<Series>", "<Index>", "a        0", "b        1", "<<U1>    <int64>"], "FrameGO.notfalsy()": [">>> f = sf.FrameGO.from_fields(((10, 2, 0, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            0             NaT", "3            2       123   1517-04-01", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.notfalsy()", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "0         True   True   True", "1         True   True   True", "2         False  False  False", "3         True   True   True", "<int64>   <bool> <bool> <bool>"], "FrameGO.notna()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            10.0      8.0       1.0", "1            2.0       3.0       nan", "2            nan       8.0       nan", "3            nan       nan       nan", "<int64>      <float64> <float64> <float64>", ">>> f.notna()", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "0         True   True   True", "1         True   True   False", "2         False  True   False", "3         False  False  False", "<int64>   <bool> <bool> <bool>"], "FrameGO.pivot()": [">>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f1.pivot(index_fields='b', columns_fields='c')", "<FrameGO>", "<IndexGO: c> 0         1         <int64>", "<Index: b>", "0            11.0      nan", "3            10.0      nan", "8            nan       6.0", "<int64>      <float64> <float64>"], "FrameGO.pivot_stack()": [">>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f1.pivot_stack()", "<FrameGO: x>", "<IndexGO>              0       <int64>", "<IndexHierarchy>", "0                a     11", "0                b     0", "0                c     0", "1                a     4", "1                b     8", "1                c     1", "2                a     10", "2                b     3", "2                c     0", "3                a     2", "3                b     8", "3                c     1", "<int64>          <<U1> <int64>"], "FrameGO.pivot_unstack()": [">>> f1 = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f2 = f1.pivot_stack()", ">>> f2", "<FrameGO: x>", "<IndexGO>              0       <int64>", "<IndexHierarchy>", "0                a     11", "0                b     0", "0                c     0", "1                a     4", "1                b     8", "1                c     1", "2                a     10", "2                b     3", "2                c     0", "3                a     2", "3                b     8", "3                c     1", "<int64>          <<U1> <int64>", ">>> f2.pivot_unstack()", "<FrameGO: x>", "<IndexHierarchyGO> 0       0       0       <int64>", "                   a       b       c       <<U1>", "<Index>", "0                  11      0       0", "1                  4       8       1", "2                  10      3       0", "3                  2       8       1", "<int64>            <int64> <int64> <int64>"], "FrameGO.prod()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.prod()", "<Series>", "<Index>", "a        0", "b        15", "<<U1>    <int64>"], "FrameGO.rank_dense()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.rank_dense()", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            3       0       0", "1            1       2       1", "2            2       1       0", "3            0       2       1", "<int64>      <int64> <int64> <int64>"], "FrameGO.rank_max()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.rank_max()", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            3       0       1", "1            1       3       3", "2            2       1       1", "3            0       3       3", "<int64>      <int64> <int64> <int64>"], "FrameGO.rank_mean()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.rank_mean()", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "0            3.0       0.0       0.5", "1            1.0       2.5       2.5", "2            2.0       1.0       0.5", "3            0.0       2.5       2.5", "<int64>      <float64> <float64> <float64>"], "FrameGO.rank_min()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.rank_min()", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            3       0       0", "1            1       2       2", "2            2       1       0", "3            0       2       2", "<int64>      <int64> <int64> <int64>"], "FrameGO.rank_ordinal()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.rank_ordinal()", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            3       0       0", "1            1       2       2", "2            2       1       1", "3            0       3       3", "<int64>      <int64> <int64> <int64>"], "FrameGO.rehierarch()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.rehierarch((1, 0))", "<FrameGO: x>", "<IndexGO>                a       b      c               <<U1>", "<IndexHierarchy>", "p                0       10      False  1517-01-01", "p                1       8       True   1517-12-31", "q                0       2       True   1517-04-01", "q                1       3       False  1517-06-30", "<<U1>            <int64> <int64> <bool> <datetime64[D]>"], "FrameGO.reindex()": [">>> f = sf.FrameGO.from_items((('a', (10, 2, 8, 3)), ('b', ('qrs ', 'XYZ', '123', ' wX '))), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.reindex(('q', 't', 's', 'r'), fill_value=sf.FillValueAuto(i=-1, U=''))", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "q            2       XYZ", "t            -1", "s            3        wX", "r            8       123", "<<U1>        <int64> <<U4>"], "FrameGO.relabel()": [">>> f = sf.FrameGO.from_records(((10, False, '1517-01-01'), (8, True,'1517-04-01')), index=('p', 'q'), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "p            10      False  1517-01-01", "q            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>", ">>> f.relabel(('y', 'z'))", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "y            10      False  1517-01-01", "z            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>", ">>> f.relabel(dict(q='x', p='y'))", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "y            10      False  1517-01-01", "x            8       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>", ">>> f.relabel(lambda l: f'+{l.upper()}+')", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "+P+          10      False  1517-01-01", "+Q+          8       True   1517-04-01", "<<U3>        <int64> <bool> <datetime64[D]>"], "FrameGO.relabel_flat()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.relabel_flat(index=True)", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "(0, 'p')     10      False  1517-01-01", "(0, 'q')     2       True   1517-04-01", "(1, 'p')     8       True   1517-12-31", "(1, 'q')     3       False  1517-06-30", "<object>     <int64> <bool> <datetime64[D]>"], "FrameGO.relabel_level_add()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.relabel_level_add('I')", "<FrameGO: x>", "<IndexGO>                      a       b      c               <<U1>", "<IndexHierarchy>", "I                0       p     10      False  1517-01-01", "I                0       q     2       True   1517-04-01", "I                1       p     8       True   1517-12-31", "I                1       q     3       False  1517-06-30", "<<U1>            <int64> <<U1> <int64> <bool> <datetime64[D]>"], "FrameGO.relabel_level_drop()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iloc[:2].relabel_level_drop(1)", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "p            10      False  1517-01-01", "q            2       True   1517-04-01", "<<U1>        <int64> <bool> <datetime64[D]>"], "FrameGO.relabel_shift_in()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.relabel_shift_in('a')", "<FrameGO: x>", "<IndexGO>                                          b      c               <<U1>", "<IndexHierarchy: ('__index0__', '...", "0                                    p     10      False  1517-01-01", "0                                    q     2       True   1517-04-01", "1                                    p     8       True   1517-12-31", "1                                    q     3       False  1517-06-30", "<int64>                              <<U1> <int64> <bool> <datetime64[D]>"], "FrameGO.relabel_shift_out()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.rename(index=('d', 'e')).relabel_shift_out([1, 0])", "<FrameGO: x>", "<IndexGO>    e     d       a       b      c               <<U1>", "<Index>", "0            p     0       10      False  1517-01-01", "1            q     0       2       True   1517-04-01", "2            p     1       8       True   1517-12-31", "3            q     1       3       False  1517-06-30", "<int64>      <<U1> <int64> <int64> <bool> <datetime64[D]>"], "FrameGO.rename()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.rename('y', index='p', columns='q')", "<FrameGO: y>", "<IndexGO: q>              a       b      c               <<U1>", "<IndexHierarchy: p>", "0                   p     10      False  1517-01-01", "0                   q     2       True   1517-04-01", "1                   p     8       True   1517-12-31", "1                   q     3       False  1517-06-30", "<int64>             <<U1> <int64> <bool> <datetime64[D]>"], "FrameGO.roll()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.roll(3)", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            2       True   1517-04-01", "1            8       True   1517-12-31", "2            3       False  1517-06-30", "3            10      False  1517-01-01", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameGO.sample()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.sample(2, 2, seed=0)", "<FrameGO: x>", "<IndexGO>    b      c               <<U1>", "<Index>", "2            True   1517-12-31", "3            False  1517-06-30", "<int64>      <bool> <datetime64[D]>"], "FrameGO.set_columns()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.set_columns((1, 'p'), drop=True)", "<FrameGO: x>", "<IndexGO: (1, 'p')>       8       True   1517-12-31      <object>", "<IndexHierarchy>", "0                   p     10      False  1517-01-01", "0                   q     2       True   1517-04-01", "1                   q     3       False  1517-06-30", "<int64>             <<U1> <int64> <bool> <datetime64[D]>"], "FrameGO.set_columns_hierarchy()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.set_columns_hierarchy([(1, 'p'), (1, 'q')], drop=True)", "<FrameGO: x>", "<IndexHierarchyGO: ((1, 'p'), (1,...       8       True   1517-12-31      <object>", "                                           3       False  1517-06-30      <object>", "<IndexHierarchy>", "0                                    p     10      False  1517-01-01", "0                                    q     2       True   1517-04-01", "<int64>                              <<U1> <int64> <bool> <datetime64[D]>"], "FrameGO.set_index()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.set_index('c', drop=True, index_constructor=sf.IndexDate)", "<FrameGO: x>", "<IndexGO>       a       b      <<U1>", "<IndexDate: c>", "1517-01-01      10      False", "1517-04-01      2       True", "1517-12-31      8       True", "1517-06-30      3       False", "<datetime64[D]> <int64> <bool>"], "FrameGO.set_index_hierarchy()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.set_index_hierarchy(['b', 'c'], drop=True, index_constructors=(sf.Index, sf.IndexDate))", "<FrameGO: x>", "<IndexGO>                                    a       <<U1>", "<IndexHierarchy: ('b', 'c')>", "False                        1517-01-01      10", "True                         1517-04-01      2", "True                         1517-12-31      8", "False                        1517-06-30      3", "<bool>                       <datetime64[D]> <int64>"], "FrameGO.shift()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.shift(3, fill_value=sf.FillValueAuto)", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            0       False  NaT", "1            0       False  NaT", "2            0       False  NaT", "3            10      False  1517-01-01", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameGO.sort_columns()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.sort_columns(ascending=False)", "<FrameGO: x>", "<IndexGO>              c               b      a       <<U1>", "<IndexHierarchy>", "0                p     1517-01-01      False  10", "0                q     1517-04-01      True   2", "1                p     1517-12-31      True   8", "1                q     1517-06-30      False  3", "<int64>          <<U1> <datetime64[D]> <bool> <int64>"], "FrameGO.sort_index()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.sort_index(ascending=False)", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "1                q     3       False  1517-06-30", "1                p     8       True   1517-12-31", "0                q     2       True   1517-04-01", "0                p     10      False  1517-01-01", "<int64>          <<U1> <int64> <bool> <datetime64[D]>"], "FrameGO.sort_values()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.sort_values('c')", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "3            3       False  1517-06-30", "2            8       True   1517-12-31", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.sort_values(['c', 'b'], ascending=False)", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "1            2       True   1517-04-01", "0            10      False  1517-01-01", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameGO.std()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.std()", "<Series>", "<Index>", "a        1.632993161855452", "b        1.632993161855452", "<<U1>    <float64>"], "FrameGO.sum()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.sum()", "<Series>", "<Index>", "a        6", "b        9", "<<U1>    <int64>"], "FrameGO.tail()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.tail(2)", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameGO.transpose()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.transpose()", "<FrameGO: x>", "<IndexGO>    p       q       r       <<U1>", "<Index>", "a            0       2       4", "b            1       3       5", "<<U1>        <int64> <int64> <int64>"], "FrameGO.unique()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "1            2.0       True     1517-04-01", "2            nan       None     NaT", "3            2.0       True     1517-04-01", "<int64>      <float64> <object> <datetime64[D]>", ">>> f.unique()", "[10.0 False datetime.date(1517, 1, 1) 2.0 True datetime.date(1517, 4, 1)", " nan None]"], "FrameGO.unique_enumerated()": [">>> f = sf.FrameGO.from_fields(((10, 2, np.nan, 2), (False, True, None, True), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a         b        c               <<U1>", "<Index>", "0            10.0      False    1517-01-01", "1            2.0       True     1517-04-01", "2            nan       None     NaT", "3            2.0       True     1517-04-01", "<int64>      <float64> <object> <datetime64[D]>", ">>> f.unique_enumerated(retain_order=True, func=sf.isna_element)", "(array([[ 0,  2,  4],", "       [ 1,  3,  5],", "       [-1, -1, -1],", "       [ 1,  3,  5]]), array([10.0, 2.0, False, True, datetime.date(1517, 1, 1),", "       datetime.date(1517, 4, 1)], dtype=object))"], "FrameGO.unset_columns()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.rename(columns='o').unset_columns()", "<FrameGO: x>", "<IndexGO>    0        1        <int64>", "<Index>", "o            a        b", "p            0        1", "q            2        3", "r            4        5", "<<U1>        <object> <object>"], "FrameGO.unset_index()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.rename(index=(('d', 'e'))).unset_index()", "<FrameGO: x>", "<IndexGO>    d       e     a       b      c               <<U1>", "<Index>", "0            0       p     10      False  1517-01-01", "1            0       q     2       True   1517-04-01", "2            1       p     8       True   1517-12-31", "3            1       q     3       False  1517-06-30", "<int64>      <int64> <<U1> <int64> <bool> <datetime64[D]>"], "FrameGO.var()": [">>> f = sf.FrameGO(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       1", "q            2       3", "r            4       5", "<<U1>        <int64> <int64>", ">>> f.var()", "<Series>", "<Index>", "a        2.6666666666666665", "b        2.6666666666666665", "<<U1>    <float64>"], "FrameGO.__contains__()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.__contains__('a')", "True"], "FrameGO.__iter__()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> tuple(f.__iter__())", "('a', 'b', 'c')"], "FrameGO.__reversed__()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> tuple(f.__reversed__())", "('c', 'b', 'a')"], "FrameGO.get()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.get('a')", "<Series: a>", "<Index>", "0           10", "1           2", "2           8", "3           3", "<int64>     <int64>", ">>> f.get('z', -1)", "-1"], "FrameGO.items()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> tuple(f.items())", "(('a', <Series: a>", "<Index>", "0           10", "1           2", "2           8", "3           3", "<int64>     <int64>), ('b', <Series: b>", "<Index>", "0           False", "1           True", "2           True", "3           False", "<int64>     <bool>), ('c', <Series: c>", "<Index>", "0           1517-01-01", "1           1517-04-01", "2           1517-12-31", "3           1517-06-30", "<int64>     <datetime64[D]>))"], "FrameGO.keys()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.keys()", "<IndexGO>", "a", "b", "c", "<<U1>"], "FrameGO.values": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.values", "[[10 False datetime.date(1517, 1, 1)]", " [2 True datetime.date(1517, 4, 1)]", " [8 True datetime.date(1517, 12, 31)]", " [3 False datetime.date(1517, 6, 30)]]"], "FrameGO.interface": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.interface", "<Frame>", "<Index>                              cls_name group           doc                  <<U18>", "<Index: signature>", "__init__(data, *, index, columns,... FrameGO  Constructor     Initializer. Args...", "from_arrow(value, *, index_depth,... FrameGO  Constructor     Realize a Frame f...", "from_clipboard(*, delimiter, inde... FrameGO  Constructor     Create a Frame fr...", "from_concat(frames, *, axis, unio... FrameGO  Constructor     Concatenate multi...", "from_concat_items(items, *, axis,... FrameGO  Constructor     Produce a Frame w...", "from_csv(fp, *, index_depth, inde... FrameGO  Constructor     Specialized versi...", "from_delimited(fp, *, delimiter, ... FrameGO  Constructor     Create a Frame fr...", "from_dict(mapping, *, index, fill... FrameGO  Constructor     Create a Frame fr...", "from_dict_fields(fields, *, colum... FrameGO  Constructor     Frame constructor...", "from_dict_records(records, *, ind... FrameGO  Constructor     Frame constructor...", "from_dict_records_items(items, *,... FrameGO  Constructor     Frame constructor...", "from_duckdb(fp, *, label, index_d... FrameGO  Constructor     Load Frame from t...", "from_element(element, *, index, c... FrameGO  Constructor     Create a Frame fr...", "from_element_items(items, *, inde... FrameGO  Constructor     Create a Frame fr...", "from_elements(elements, *, index,... FrameGO  Constructor     Create a Frame fr...", "from_fields(fields, *, index, col... FrameGO  Constructor     Frame constructor...", "from_hdf5(fp, *, label, index_dep... FrameGO  Constructor     Load Frame from t...", "...                                  ...      ...             ...", "reduce.from_func(func, *, fill_va... FrameGO  Accessor Reduce For each Frame, a...", "reduce.from_func(func, *, fill_va... FrameGO  Accessor Reduce For each Frame, a...", "reduce.from_map_func(func, *, fil... FrameGO  Accessor Reduce For each Frame, r...", "reduce.from_map_func(func, *, fil... FrameGO  Accessor Reduce For each Frame, r...", "reduce.from_map_func(func, *, fil... FrameGO  Accessor Reduce For each Frame, r...", "reduce.from_map_func(func, *, fil... FrameGO  Accessor Reduce For each Frame, r...", "reduce.from_map_func(func, *, fil... FrameGO  Accessor Reduce For each Frame, r...", "reduce.from_label_map(func_map, *... FrameGO  Accessor Reduce For Frame, reduce...", "reduce.from_label_map(func_map, *... FrameGO  Accessor Reduce For Frame, reduce...", "reduce.from_label_map(func_map, *... FrameGO  Accessor Reduce For Frame, reduce...", "reduce.from_label_map(func_map, *... FrameGO  Accessor Reduce For Frame, reduce...", "reduce.from_label_map(func_map, *... FrameGO  Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... FrameGO  Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... FrameGO  Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... FrameGO  Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... FrameGO  Accessor Reduce For Frame, reduce...", "reduce.from_label_pair_map(func_m... FrameGO  Accessor Reduce For Frame, reduce...", "<<U160>                              <<U7>    <<U27>          <<U83>"], "FrameGO.__repr__()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> repr(f)", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameGO.__str__()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> str(f)", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameGO.display()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.display()", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>", ">>> f.display(sf.DisplayConfig(type_show=False))", "  a  b     c", "0 10 False 1517-01-01", "1 2  True  1517-04-01", "2 8  True  1517-12-31", "3 3  False 1517-06-30"], "FrameGO.display_tall()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.display_tall()", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameGO.display_wide()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f.display_wide()", "<FrameGO: x>", "<IndexGO>    a       b      c               <<U1>", "<Index>", "0            10      False  1517-01-01", "1            2       True   1517-04-01", "2            8       True   1517-12-31", "3            3       False  1517-06-30", "<int64>      <int64> <bool> <datetime64[D]>"], "FrameGO.assign[]()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign['a'](-1)", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            -1      8       1", "q            -1      -3      0", "r            -1      8       9", "s            -1      0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign[['a', 'c']](-1)", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            -1      8       -1", "q            -1      -3      -1", "r            -1      8       -1", "s            -1      0       -1", "<<U1>        <int64> <int64> <int64>"], "FrameGO.assign[].apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign['a'].apply(lambda s: s / 100)", "<FrameGO: x>", "<IndexGO>    a         b       c       <<U1>", "<Index>", "p            0.1       8       1", "q            -0.02     -3      0", "r            0.0       8       9", "s            0.0       0       12", "<<U1>        <float64> <int64> <int64>"], "FrameGO.assign[].apply_element()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign['a'].apply_element(lambda e: e / 100 if e < 8 else e)", "<FrameGO: x>", "<IndexGO>    a         b       c       <<U1>", "<Index>", "p            10.0      8       1", "q            -0.02     -3      0", "r            0.0       8       9", "s            0.0       0       12", "<<U1>        <float64> <int64> <int64>"], "FrameGO.assign[].apply_element_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign['a'].apply_element_items(lambda l, e: e / 100 if l == ('q', 'a') else e)", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameGO.assign.iloc[]()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.iloc[2]((-1, -2, -3))", "<FrameGO: x>", "<IndexGO>    a            b            c            <<U1>", "<Index>", "p            10           8            1", "q            -2           -3           0", "r            (-1, -2, -3) (-1, -2, -3) (-1, -2, -3)", "s            0            0            12", "<<U1>        <object>     <object>     <object>", ">>> f.assign.iloc[2:](-1)", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            -1      -1      -1", "s            -1      -1      -1", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.iloc[[0, 3]](-1)", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            -1      -1      -1", "q            -2      -3      0", "r            0       8       9", "s            -1      -1      -1", "<<U1>        <int64> <int64> <int64>"], "FrameGO.assign.iloc[].apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.iloc[2:].apply(lambda s: s / 100)", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "p            10.0      8.0       1.0", "q            -2.0      -3.0      0.0", "r            0.0       0.08      0.09", "s            0.0       0.0       0.12", "<<U1>        <float64> <float64> <float64>"], "FrameGO.assign.iloc[].apply_element()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.iloc[1:].apply_element(lambda e: e / 100 if e < 8 else e)", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "p            10.0      8.0       1.0", "q            -0.02     -0.03     0.0", "r            0.0       8.0       9.0", "s            0.0       0.0       12.0", "<<U1>        <float64> <float64> <float64>"], "FrameGO.assign.iloc[].apply_element_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.iloc[1:].apply_element_items(lambda l, e: e / 100 if l == ('q', 'a') else e)", "<FrameGO: x>", "<IndexGO>    a         b       c       <<U1>", "<Index>", "p            10.0      8       1", "q            -0.02     -3      0", "r            0.0       8       9", "s            0.0       0       12", "<<U1>        <float64> <int64> <int64>"], "FrameGO.assign.loc[]()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.loc['r'](-1)", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            -1      -1      -1", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.loc['r':](-1)", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            -1      -1      -1", "s            -1      -1      -1", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.loc[['p', 's']](-1)", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            -1      -1      -1", "q            -2      -3      0", "r            0       8       9", "s            -1      -1      -1", "<<U1>        <int64> <int64> <int64>"], "FrameGO.assign.loc[].apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.loc['r':].apply(lambda s: s / 100)", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "p            10.0      8.0       1.0", "q            -2.0      -3.0      0.0", "r            0.0       0.08      0.09", "s            0.0       0.0       0.12", "<<U1>        <float64> <float64> <float64>"], "FrameGO.assign.loc[].apply_element()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.loc['r':].apply_element(lambda e: e / 100 if e < 10 else e)", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "p            10.0      8.0       1.0", "q            -2.0      -3.0      0.0", "r            0.0       0.08      0.09", "s            0.0       0.0       12.0", "<<U1>        <float64> <float64> <float64>"], "FrameGO.assign.loc[].apply_element_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.loc['r':].apply_element_items(lambda l, e: e / 100 if l[1] == 'c' else e)", "<FrameGO: x>", "<IndexGO>    a       b       c         <<U1>", "<Index>", "p            10      8       1.0", "q            -2      -3      0.0", "r            0       8       0.09", "s            0       0       0.12", "<<U1>        <int64> <int64> <float64>"], "FrameGO.assign.bloc[]()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.bloc[f > 5](-1)", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            -1      -1      1", "q            -2      -3      0", "r            0       -1      -1", "s            0       0       -1", "<<U1>        <int64> <int64> <int64>"], "FrameGO.assign.bloc[].apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.bloc[f > 5].apply(lambda s: s * .01)", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "p            0.1       0.08      1.0", "q            -2.0      -3.0      0.0", "r            0.0       0.08      0.09", "s            0.0       0.0       0.12", "<<U1>        <float64> <float64> <float64>"], "FrameGO.assign.bloc[].apply_element()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.bloc[f > 5].apply_element(lambda e: e * .01 if e == 8 else e)", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "p            10.0      0.08      1.0", "q            -2.0      -3.0      0.0", "r            0.0       0.08      9.0", "s            0.0       0.0       12.0", "<<U1>        <float64> <float64> <float64>"], "FrameGO.assign.bloc[].apply_element_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.assign.bloc[f > 5].apply_element_items(lambda e: e * .01 if l[1] == 'c' else e)", "TypeError('<lambda>() takes 1 positional argument but 2 were given')"], "FrameGO.bloc[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.bloc[f > 5]", "<Series>", "<Index>", "('p', 'a') 10", "('p', 'b') 8", "('r', 'b') 8", "('r', 'c') 9", "('s', 'c') 12", "<object>   <int64>"], "FrameGO.drop[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.drop['c']", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            10      8", "q            -2      -3", "r            0       8", "s            0       0", "<<U1>        <int64> <int64>", ">>> f.drop['b':]", "<FrameGO: x>", "<IndexGO>    a       <<U1>", "<Index>", "p            10", "q            -2", "r            0", "s            0", "<<U1>        <int64>", ">>> f.drop[['a', 'c']]", "<FrameGO: x>", "<IndexGO>    b       <<U1>", "<Index>", "p            8", "q            -3", "r            8", "s            0", "<<U1>        <int64>"], "FrameGO.drop.iloc[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.drop.iloc[1]", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.drop.iloc[1:]", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "<<U1>        <int64> <int64> <int64>", ">>> f.drop.iloc[[0, 2]]", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "q            -2      -3      0", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameGO.drop.loc[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.drop.loc['r']", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.drop.loc['r':]", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "<<U1>        <int64> <int64> <int64>", ">>> f.drop.loc[['p', 's']]", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "q            -2      -3      0", "r            0       8       9", "<<U1>        <int64> <int64> <int64>"], "FrameGO.mask[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.mask['c']", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  False  True", "q         False  False  True", "r         False  False  True", "s         False  False  True", "<<U1>     <bool> <bool> <bool>", ">>> f.mask['b':]", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  True   True", "q         False  True   True", "r         False  True   True", "s         False  True   True", "<<U1>     <bool> <bool> <bool>", ">>> f.mask[['a', 'c']]", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         True   False  True", "q         True   False  True", "r         True   False  True", "s         True   False  True", "<<U1>     <bool> <bool> <bool>"], "FrameGO.mask.iloc[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.mask.iloc[1]", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         True   True   True", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>", ">>> f.mask.iloc[1:]", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         True   True   True", "r         True   True   True", "s         True   True   True", "<<U1>     <bool> <bool> <bool>", ">>> f.mask.iloc[[0, 2]]", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         True   True   True", "q         False  False  False", "r         True   True   True", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameGO.mask.loc[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.mask.loc['r']", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         False  False  False", "r         True   True   True", "s         False  False  False", "<<U1>     <bool> <bool> <bool>", ">>> f.mask.loc['r':]", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         False  False  False", "r         True   True   True", "s         True   True   True", "<<U1>     <bool> <bool> <bool>", ">>> f.mask.loc[['p', 's']]", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         True   True   True", "q         False  False  False", "r         False  False  False", "s         True   True   True", "<<U1>     <bool> <bool> <bool>"], "FrameGO.masked_array[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.masked_array['c']", "[[10 8 --]", " [-2 -3 --]", " [0 8 --]", " [0 0 --]]", ">>> f.masked_array['b':]", "[[10 -- --]", " [-2 -- --]", " [0 -- --]", " [0 -- --]]", ">>> f.masked_array[['a', 'c']]", "[[-- 8 --]", " [-- -3 --]", " [-- 8 --]", " [-- 0 --]]"], "FrameGO.masked_array.iloc[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.masked_array.iloc[1]", "[[10 8 1]", " [-- -- --]", " [0 8 9]", " [0 0 12]]", ">>> f.masked_array.iloc[1:]", "[[10 8 1]", " [-- -- --]", " [-- -- --]", " [-- -- --]]", ">>> f.masked_array.iloc[[0, 2]]", "[[-- -- --]", " [-2 -3 0]", " [-- -- --]", " [0 0 12]]"], "FrameGO.masked_array.loc[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.masked_array.loc['r']", "[[10 8 1]", " [-2 -3 0]", " [-- -- --]", " [0 0 12]]", ">>> f.masked_array.loc['r':]", "[[10 8 1]", " [-2 -3 0]", " [-- -- --]", " [-- -- --]]", ">>> f.masked_array.loc[['p', 's']]", "[[-- -- --]", " [-2 -3 0]", " [0 8 9]", " [-- -- --]]"], "FrameGO.[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f['b']", "<Series: b>", "<Index>", "p           8", "q           -3", "r           8", "s           0", "<<U1>       <int64>", ">>> f['b':]", "<FrameGO: x>", "<IndexGO>    b       c       <<U1>", "<Index>", "p            8       1", "q            -3      0", "r            8       9", "s            0       12", "<<U1>        <int64> <int64>", ">>> f[['a', 'c']]", "<FrameGO: x>", "<IndexGO>    a       c       <<U1>", "<Index>", "p            10      1", "q            -2      0", "r            0       9", "s            0       12", "<<U1>        <int64> <int64>"], "FrameGO.iloc[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iloc[2]", "<Series: r>", "<Index>", "a           0", "b           8", "c           9", "<<U1>       <int64>", ">>> f.iloc[2:]", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iloc[[0, 3]]", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameGO.loc[]": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.loc['r']", "<Series: r>", "<Index>", "a           0", "b           8", "c           9", "<<U1>       <int64>", ">>> f.loc['r':]", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.loc[['p', 's']]", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameGO.iter_array()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_array())", "(array([10, -2,  0,  0]), array([ 8, -3,  8,  0]), array([ 1,  0,  9, 12]))"], "FrameGO.iter_array().apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_array().apply(lambda v: v.sum())", "<Series>", "<Index>", "a        8", "b        13", "c        22", "<<U1>    <int64>"], "FrameGO.iter_array().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_array().apply_iter(lambda v: v.sum()))", "(8, 13, 22)"], "FrameGO.iter_array().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_array().apply_iter_items(lambda v: v.sum()))", "(('a', 8), ('b', 13), ('c', 22))"], "FrameGO.iter_array().apply_pool()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_array().apply_pool(lambda v: v.sum(), use_threads=True)", "<Series>", "<Index>", "a        8", "b        13", "c        22", "<<U1>    <int64>"], "FrameGO.iter_array_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_array_items())", "(('a', array([10, -2,  0,  0])), ('b', array([ 8, -3,  8,  0])), ('c', array([ 1,  0,  9, 12])))"], "FrameGO.iter_array_items().apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_array_items().apply(lambda k, v: v.sum() if k != 'b' else -1)", "<Series>", "<Index>", "a        8", "b        -1", "c        22", "<<U1>    <int64>"], "FrameGO.iter_array_items().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_array_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))", "(8, -1, 22)"], "FrameGO.iter_array_items().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_array_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))", "(('a', 8), ('b', -1), ('c', 22))"], "FrameGO.iter_array_items().apply_pool()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_array_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)", "<Series>", "<Index>", "a        8", "b        -1", "c        22", "<<U1>    <int64>"], "FrameGO.iter_element()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element())", "(10, 8, 1, -2, -3, 0, 0, 8, 9, 0, 0, 12)"], "FrameGO.iter_element().apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element().apply(lambda e: e > 5)", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         True   True   False", "q         False  False  False", "r         False  True   True", "s         False  False  True", "<<U1>     <bool> <bool> <bool>"], "FrameGO.iter_element().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().apply_iter(lambda e: e > 10))", "(False, False, False, False, False, False, False, False, False, False, False, True)"], "FrameGO.iter_element().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().apply_iter_items(lambda e: e > 10))", "((('p', 'a'), False), (('p', 'b'), False), (('p', 'c'), False), (('q', 'a'), False), (('q', 'b'), False), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), False), (('r', 'c'), False), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), True))"], "FrameGO.iter_element().apply_pool()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element().apply_pool(lambda e: e > 5, use_threads=True)", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         True   True   False", "q         False  False  False", "r         False  True   True", "s         False  False  True", "<<U1>     <bool> <bool> <bool>"], "FrameGO.iter_element().map_all()": [">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element().map_all({0: 200, 1: -1, 2: 45})", "<FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "p         -1      45      -1", "q         45      -1      200", "r         200     45      45", "s         200     200     -1", "<<U1>     <int64> <int64> <int64>"], "FrameGO.iter_element().map_all_iter()": [">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_all_iter({0: 200, 1: -1, 2: 45}))", "(-1, 45, -1, 45, -1, 200, 200, 45, 45, 200, 200, -1)"], "FrameGO.iter_element().map_all_iter_items()": [">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_all_iter_items({0: 200, 1: -1, 2: 45}))", "((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 200), (('r', 'a'), 200), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 200), (('s', 'b'), 200), (('s', 'c'), -1))"], "FrameGO.iter_element().map_any()": [">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element().map_any({1: -1, 2: 45})", "<FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "p         -1      45      -1", "q         45      -1      0", "r         0       45      45", "s         0       0       -1", "<<U1>     <int64> <int64> <int64>"], "FrameGO.iter_element().map_any_iter()": [">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_any_iter({1: -1, 2: 45}))", "(-1, 45, -1, 45, -1, 0, 0, 45, 45, 0, 0, -1)"], "FrameGO.iter_element().map_any_iter_items()": [">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_any_iter_items({1: -1, 2: 45}))", "((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), -1))"], "FrameGO.iter_element().map_fill()": [">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element().map_fill({1: -1, 2: 45}, fill_value=np.nan)", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         -1.0      45.0      -1.0", "q         45.0      -1.0      nan", "r         nan       45.0      45.0", "s         nan       nan       -1.0", "<<U1>     <float64> <float64> <float64>"], "FrameGO.iter_element().map_fill_iter()": [">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_fill_iter({1: -1, 2: 45}, fill_value=np.nan))", "(-1, 45, -1, 45, -1, nan, nan, 45, 45, nan, nan, -1)"], "FrameGO.iter_element().map_fill_iter_items()": [">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element().map_fill_iter_items({1: -1, 2: 45}, fill_value=np.nan))", "((('p', 'a'), -1), (('p', 'b'), 45), (('p', 'c'), -1), (('q', 'a'), 45), (('q', 'b'), -1), (('q', 'c'), nan), (('r', 'a'), nan), (('r', 'b'), 45), (('r', 'c'), 45), (('s', 'a'), nan), (('s', 'b'), nan), (('s', 'c'), -1))"], "FrameGO.iter_element_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element_items())", "((('p', 'a'), 10), (('p', 'b'), 8), (('p', 'c'), 1), (('q', 'a'), -2), (('q', 'b'), -3), (('q', 'c'), 0), (('r', 'a'), 0), (('r', 'b'), 8), (('r', 'c'), 9), (('s', 'a'), 0), (('s', 'b'), 0), (('s', 'c'), 12))"], "FrameGO.iter_element_items().apply()": [">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element_items().apply(lambda k, v: v > 1 if k != ('q', 'b') else 'x')", "<FrameGO>", "<IndexGO> a      b        c      <<U1>", "<Index>", "p         False  True     False", "q         True   x        False", "r         False  True     True", "s         False  False    False", "<<U1>     <bool> <object> <bool>"], "FrameGO.iter_element_items().apply_iter()": [">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element_items().apply_iter(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))", "(False, True, False, True, 'x', False, False, True, True, False, False, False)"], "FrameGO.iter_element_items().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_element_items().apply_iter_items(lambda k, v: v > 1 if k != ('q', 'b') else 'x'))", "((('p', 'a'), False), (('p', 'b'), True), (('p', 'c'), False), (('q', 'a'), True), (('q', 'b'), 'x'), (('q', 'c'), False), (('r', 'a'), False), (('r', 'b'), True), (('r', 'c'), True), (('s', 'a'), False), (('s', 'b'), False), (('s', 'c'), False))"], "FrameGO.iter_element_items().apply_pool()": [">>> def func(pair): return pair[1] > 0 and pair[0] == ('q', 'b')", ">>> f = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_element_items().apply_pool(func, use_threads=True)", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         False  True   False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameGO.iter_element_items().map_all()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_element_items().map_all({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1})", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         200     -1", "q         45      1", "<<U1>     <int64> <int64>"], "FrameGO.iter_element_items().map_all_iter()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_element_items().map_all_iter({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))", "(200, -1, 45, 1)"], "FrameGO.iter_element_items().map_all_iter_items()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_element_items().map_all_iter_items({(('p', 'a'), 2): 200, (('p', 'b'), 3): -1, (('q', 'a'), 9): 45, (('q', 'b'), 8): 1}))", "((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), 45), (('q', 'b'), 1))"], "FrameGO.iter_element_items().map_any()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_element_items().map_any({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1})", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         200     3", "q         9       1", "<<U1>     <int64> <int64>"], "FrameGO.iter_element_items().map_any_iter()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_element_items().map_any_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))", "(200, 3, 9, 1)"], "FrameGO.iter_element_items().map_any_iter_items()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_element_items().map_any_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}))", "((('p', 'a'), 200), (('p', 'b'), 3), (('q', 'a'), 9), (('q', 'b'), 1))"], "FrameGO.iter_element_items().map_fill()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_element_items().map_fill({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1)", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         200     -1", "q         -1      1", "<<U1>     <int64> <int64>"], "FrameGO.iter_element_items().map_fill_iter()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_element_items().map_fill_iter({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))", "(200, -1, -1, 1)"], "FrameGO.iter_element_items().map_fill_iter_items()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_element_items().map_fill_iter_items({(('p', 'a'), 2): 200, (('q', 'b'), 8): 1}, fill_value=-1))", "((('p', 'a'), 200), (('p', 'b'), -1), (('q', 'a'), -1), (('q', 'b'), 1))"], "FrameGO.iter_group()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c'))", "(<FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "0         11      0       0", "2         10      3       0", "<int64>   <int64> <int64> <int64>, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "1         4       8       1", "3         2       8       1", "<int64>   <int64> <int64> <int64>)"], "FrameGO.iter_group().apply()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group('c').apply(lambda f: f['b'].sum())", "<Series>", "<Index: c>", "0          3", "1          16", "<int64>    <int64>"], "FrameGO.iter_group().apply_iter()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').apply_iter(lambda f: f['b'].sum()))", "(3, 16)"], "FrameGO.iter_group().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').apply_iter_items(lambda f: f['b'].sum()))", "((0, 3), (1, 16))"], "FrameGO.iter_group().apply_pool()": [">>> def func(f): return f['b'].sum()", ">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group('c').apply_pool(func, use_threads=True)", "<Series>", "<Index: c>", "0          3", "1          16", "<int64>    <int64>"], "FrameGO.iter_group().reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).keys())", "(0, 1)"], "FrameGO.iter_group().reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "(0, 1)"], "FrameGO.iter_group().reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).items())", "((0, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "2         10      3       0", "<int64>   <int64> <int64> <int64>), (1, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>))"], "FrameGO.iter_group().reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).values())", "(<FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "2         10      3       0", "<int64>   <int64> <int64> <int64>, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>)"], "FrameGO.iter_group().reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group('c').reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "2       10      3       0", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameGO.iter_group().reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_map_func(np.min).keys())", "(0, 1)"], "FrameGO.iter_group().reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_map_func(np.min).__iter__())", "(0, 1)"], "FrameGO.iter_group().reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_map_func(np.min).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group().reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_map_func(np.min).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group().reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group('c').reduce.from_map_func(np.min).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group().reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(0, 1)"], "FrameGO.iter_group().reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(0, 1)"], "FrameGO.iter_group().reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group().reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group().reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group('c').reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(0, 1)"], "FrameGO.iter_group().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(0, 1)"], "FrameGO.iter_group().reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((0, <Series: 0>", "<Index>", "b-min       0", "b-max       3", "<<U5>       <int64>), (1, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>))"], "FrameGO.iter_group().reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: 0>", "<Index>", "b-min       0", "b-max       3", "<<U5>       <int64>, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>)"], "FrameGO.iter_group().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       3", "1       8       8", "<int64> <int64> <int64>"], "FrameGO.iter_group_array()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c'))", "(array([[11,  0,  0],", "       [10,  3,  0]]), array([[4, 8, 1],", "       [2, 8, 1]]))"], "FrameGO.iter_group_array().apply()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array('c').apply(lambda a: np.sum(a))", "<Series>", "<Index: c>", "0          24", "1          24", "<int64>    <int64>"], "FrameGO.iter_group_array().apply_iter()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').apply_iter(lambda a: np.sum(a)))", "(24, 24)"], "FrameGO.iter_group_array().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').apply_iter_items(lambda a: np.sum(a)))", "((0, 24), (1, 24))"], "FrameGO.iter_group_array().apply_pool()": [">>> def func(a): return np.sum(a)", ">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array('c').apply_pool(func, use_threads=True)", "<Series>", "<Index: c>", "0          24", "1          24", "<int64>    <int64>"], "FrameGO.iter_group_array().reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).keys())", "(0, 1)"], "FrameGO.iter_group_array().reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).__iter__())", "(0, 1)"], "FrameGO.iter_group_array().reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).items())", "((0, array([21,  3,  0])), (1, array([ 6, 16,  2])))"], "FrameGO.iter_group_array().reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).values())", "(array([21,  3,  0]), array([ 6, 16,  2]))"], "FrameGO.iter_group_array().reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array('c').reduce.from_func(lambda a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       21", "1       3", "2       0", "3       6", "4       16", "5       2", "<int64> <int64>"], "FrameGO.iter_group_array().reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_map_func(np.min).keys())", "(0, 1)"], "FrameGO.iter_group_array().reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_map_func(np.min).__iter__())", "(0, 1)"], "FrameGO.iter_group_array().reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_map_func(np.min).items())", "((0, array([10,  0,  0])), (1, array([2, 8, 1])))"], "FrameGO.iter_group_array().reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_map_func(np.min).values())", "(array([10,  0,  0]), array([2, 8, 1]))"], "FrameGO.iter_group_array().reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array('c').reduce.from_map_func(np.min).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_array().reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(0, 1)"], "FrameGO.iter_group_array().reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(0, 1)"], "FrameGO.iter_group_array().reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((0, array([ 0, 11])), (1, array([8, 4])))"], "FrameGO.iter_group_array().reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(array([ 0, 11]), array([8, 4]))"], "FrameGO.iter_group_array().reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array('c').reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_array().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(0, 1)"], "FrameGO.iter_group_array().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(0, 1)"], "FrameGO.iter_group_array().reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((0, array([0, 3])), (1, array([8, 8])))"], "FrameGO.iter_group_array().reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(array([0, 3]), array([8, 8]))"], "FrameGO.iter_group_array().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array('c').reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       3", "1       8       8", "<int64> <int64> <int64>"], "FrameGO.iter_group_array_items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c'))", "((0, array([[11,  0,  0],", "       [10,  3,  0]])), (1, array([[4, 8, 1],", "       [2, 8, 1]])))"], "FrameGO.iter_group_array_items().apply()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').apply(lambda k, v: np.sum(v) if k == 0 else v.shape)", "<Series>", "<Index: c>", "0          24", "1          (2, 3)", "<int64>    <object>"], "FrameGO.iter_group_array_items().apply_iter()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').apply_iter(lambda k, v: np.sum(v) if k == 0 else v.shape))", "(24, (2, 3))"], "FrameGO.iter_group_array_items().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').apply_iter_items(lambda k, v: np.sum(v) if k == 0 else v.shape))", "((0, 24), (1, (2, 3)))"], "FrameGO.iter_group_array_items().reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).keys())", "(0, 1)"], "FrameGO.iter_group_array_items().reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).__iter__())", "(0, 1)"], "FrameGO.iter_group_array_items().reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).items())", "((0, array([21,  3,  0])), (1, array([ 6, 16,  2])))"], "FrameGO.iter_group_array_items().reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).values())", "(array([21,  3,  0]), array([ 6, 16,  2]))"], "FrameGO.iter_group_array_items().reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').reduce.from_func(lambda l, a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       21", "1       3", "2       0", "3       6", "4       16", "5       2", "<int64> <int64>"], "FrameGO.iter_group_array_items().reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).keys())", "(0, 1)"], "FrameGO.iter_group_array_items().reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).__iter__())", "(0, 1)"], "FrameGO.iter_group_array_items().reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).items())", "((0, array([10,  0,  0])), (1, array([2, 8, 1])))"], "FrameGO.iter_group_array_items().reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).values())", "(array([10,  0,  0]), array([2, 8, 1]))"], "FrameGO.iter_group_array_items().reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').reduce.from_map_func(lambda l, a: np.min(a)).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_array_items().reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).keys())", "(0, 1)"], "FrameGO.iter_group_array_items().reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).__iter__())", "(0, 1)"], "FrameGO.iter_group_array_items().reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).items())", "((0, array([ 0, 11])), (1, array([8, 4])))"], "FrameGO.iter_group_array_items().reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).values())", "(array([ 0, 11]), array([8, 4]))"], "FrameGO.iter_group_array_items().reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_array_items().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).keys())", "(0, 1)"], "FrameGO.iter_group_array_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).__iter__())", "(0, 1)"], "FrameGO.iter_group_array_items().reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).items())", "((0, array([0, 3])), (1, array([8, 8])))"], "FrameGO.iter_group_array_items().reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).values())", "(array([0, 3]), array([8, 8]))"], "FrameGO.iter_group_array_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_array_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       3", "1       8       8", "<int64> <int64> <int64>"], "FrameGO.iter_group_items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c'))", "((0, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "0         11      0       0", "2         10      3       0", "<int64>   <int64> <int64> <int64>), (1, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "1         4       8       1", "3         2       8       1", "<int64>   <int64> <int64> <int64>))"], "FrameGO.iter_group_items().apply()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_items('c').apply(lambda k, v: v['b'].sum() if k == 0 else v.shape)", "<Series>", "<Index: c>", "0          3", "1          (2, 3)", "<int64>    <object>"], "FrameGO.iter_group_items().apply_iter()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').apply_iter(lambda k, v: v['b'].sum() if k == 0 else v.shape))", "(3, (2, 3))"], "FrameGO.iter_group_items().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').apply_iter_items(lambda k, v: v['b'].sum() if k == 0 else v.shape))", "((0, 3), (1, (2, 3)))"], "FrameGO.iter_group_items().reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).keys())", "(0, 1)"], "FrameGO.iter_group_items().reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).__iter__())", "(0, 1)"], "FrameGO.iter_group_items().reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).items())", "((0, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "2         10      3       0", "<int64>   <int64> <int64> <int64>), (1, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>))"], "FrameGO.iter_group_items().reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).values())", "(<FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "2         10      3       0", "<int64>   <int64> <int64> <int64>, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>)"], "FrameGO.iter_group_items().reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_items('c').reduce.from_func(lambda l, f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "2       10      3       0", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameGO.iter_group_items().reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).keys())", "(0, 1)"], "FrameGO.iter_group_items().reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).__iter__())", "(0, 1)"], "FrameGO.iter_group_items().reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group_items().reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group_items().reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_items('c').reduce.from_map_func(lambda l, s: np.min(s)).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_items().reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).keys())", "(0, 1)"], "FrameGO.iter_group_items().reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).__iter__())", "(0, 1)"], "FrameGO.iter_group_items().reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group_items().reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group_items().reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_items('c').reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_items().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).keys())", "(0, 1)"], "FrameGO.iter_group_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).__iter__())", "(0, 1)"], "FrameGO.iter_group_items().reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).items())", "((0, <Series: 0>", "<Index>", "b-min       0", "b-max       3", "<<U5>       <int64>), (1, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>))"], "FrameGO.iter_group_items().reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).values())", "(<Series: 0>", "<Index>", "b-min       0", "b-max       3", "<<U5>       <int64>, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>)"], "FrameGO.iter_group_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_items('c').reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       3", "1       8       8", "<int64> <int64> <int64>"], "FrameGO.iter_group_labels()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels(1))", "(<FrameGO>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "1                p     8       True   1517-12-31", "<int64>          <<U1> <int64> <bool> <datetime64[D]>, <FrameGO>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>)"], "FrameGO.iter_group_labels().apply()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iter_group_labels(1).apply(lambda f: f['b'].sum())", "<Series>", "<Index>", "p        1", "q        1", "<<U1>    <int64>"], "FrameGO.iter_group_labels().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels(1).apply_iter(lambda f: f['b'].sum()))", "(1, 1)"], "FrameGO.iter_group_labels().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels(1).apply_iter_items(lambda f: f['b'].sum()))", "(('p', 1), ('q', 1))"], "FrameGO.iter_group_labels_array()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array(1))", "(array([[10, False, datetime.date(1517, 1, 1)],", "       [8, True, datetime.date(1517, 12, 31)]], dtype=object), array([[2, True, datetime.date(1517, 4, 1)],", "       [3, False, datetime.date(1517, 6, 30)]], dtype=object))"], "FrameGO.iter_group_labels_array().apply()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iter_group_labels_array(1).apply(lambda a: np.sum(a[:, 0]))", "<Series>", "<Index>", "p        18", "q        5", "<<U1>    <int64>"], "FrameGO.iter_group_labels_array().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array(1).apply_iter(lambda a: np.sum(a[:, 0])))", "(18, 5)"], "FrameGO.iter_group_labels_array().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array(1).apply_iter_items(lambda a: np.sum(a[:, 0])))", "(('p', 18), ('q', 5))"], "FrameGO.iter_group_labels_array_items()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array_items(1))", "(('p', array([[10, False, datetime.date(1517, 1, 1)],", "       [8, True, datetime.date(1517, 12, 31)]], dtype=object)), ('q', array([[2, True, datetime.date(1517, 4, 1)],", "       [3, False, datetime.date(1517, 6, 30)]], dtype=object)))"], "FrameGO.iter_group_labels_array_items().apply()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iter_group_labels_array_items(1).apply(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1)", "<Series>", "<Index>", "p        -1", "q        5", "<<U1>    <int64>"], "FrameGO.iter_group_labels_array_items().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array_items(1).apply_iter(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))", "(-1, 5)"], "FrameGO.iter_group_labels_array_items().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_array_items(1).apply_iter_items(lambda k, v: np.sum(v[:, 0]) if k != 'p' else -1))", "(('p', -1), ('q', 5))"], "FrameGO.iter_group_labels_items()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_items(1))", "(('p', <FrameGO>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "1                p     8       True   1517-12-31", "<int64>          <<U1> <int64> <bool> <datetime64[D]>), ('q', <FrameGO>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>))"], "FrameGO.iter_group_labels_items().apply()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.iter_group_labels_items(1).apply(lambda k, v: v['b'].sum() if k == 'p' else -1)", "<Series>", "<Index>", "p        1", "q        -1", "<<U1>    <int64>"], "FrameGO.iter_group_labels_items().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_items(1).apply_iter(lambda k, v: v['b'].sum() if k == 'p' else -1))", "(1, -1)"], "FrameGO.iter_group_labels_items().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.iter_group_labels_items(1).apply_iter_items(lambda k, v: v['b'].sum() if k == 'p' else -1))", "(('p', 1), ('q', -1))"], "FrameGO.iter_group_other()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 2))", "(<FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "0         11      0       0", "2         10      3       0", "<int64>   <int64> <int64> <int64>, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "1         4       8       1", "3         2       8       1", "<int64>   <int64> <int64> <int64>)"], "FrameGO.iter_group_other().apply()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 2).apply(lambda f: f['b'].sum())", "<Series>", "<Index>", "0        3", "1        16", "<int64>  <int64>"], "FrameGO.iter_group_other().apply_iter()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 2).apply_iter(lambda f: f['b'].sum()))", "(3, 16)"], "FrameGO.iter_group_other().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 2).apply_iter_items(lambda f: f['b'].sum()))", "((0, 3), (1, 16))"], "FrameGO.iter_group_other().reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other().reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other().reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).items())", "((0, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>), (1, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>), (2, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>))"], "FrameGO.iter_group_other().reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).values())", "(<FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>)"], "FrameGO.iter_group_other().reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 3).reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameGO.iter_group_other().reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other().reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other().reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group_other().reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group_other().reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 3).reduce.from_map_func(np.min).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_other().reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other().reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other().reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group_other().reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group_other().reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_other().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other().reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((0, <Series: 0>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>), (1, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>), (2, <Series: 2>", "<Index>", "b-min       3", "b-max       3", "<<U5>       <int64>))"], "FrameGO.iter_group_other().reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: 0>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>, <Series: 2>", "<Index>", "b-min       3", "b-max       3", "<<U5>       <int64>)"], "FrameGO.iter_group_other().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       8", "1       8       8", "2       3       3", "<int64> <int64> <int64>"], "FrameGO.iter_group_other_array()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 2))", "(array([[11,  0,  0],", "       [10,  3,  0]]), array([[4, 8, 1],", "       [2, 8, 1]]))"], "FrameGO.iter_group_other_array().apply()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 2).apply(lambda a: np.sum(a))", "<Series>", "<Index>", "0        24", "1        24", "<int64>  <int64>"], "FrameGO.iter_group_other_array().apply_iter()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 2).apply_iter(lambda a: np.sum(a)))", "(24, 24)"], "FrameGO.iter_group_other_array().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 2).apply_iter_items(lambda a: np.sum(a)))", "((0, 24), (1, 24))"], "FrameGO.iter_group_other_array().reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other_array().reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other_array().reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).items())", "((0, array([13,  8,  1])), (1, array([4, 8, 1])), (2, array([10,  3,  0])))"], "FrameGO.iter_group_other_array().reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).values())", "(array([13,  8,  1]), array([4, 8, 1]), array([10,  3,  0]))"], "FrameGO.iter_group_other_array().reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_func(lambda a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       13", "1       8", "2       1", "3       4", "4       8", "5       1", "6       10", "7       3", "8       0", "<int64> <int64>"], "FrameGO.iter_group_other_array().reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other_array().reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other_array().reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).items())", "((0, array([2, 0, 0])), (1, array([4, 8, 1])), (2, array([10,  3,  0])))"], "FrameGO.iter_group_other_array().reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).values())", "(array([2, 0, 0]), array([4, 8, 1]), array([10,  3,  0]))"], "FrameGO.iter_group_other_array().reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_map_func(np.min).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_other_array().reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other_array().reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other_array().reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((0, array([ 0, 11])), (1, array([8, 4])), (2, array([ 3, 10])))"], "FrameGO.iter_group_other_array().reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(array([ 0, 11]), array([8, 4]), array([ 3, 10]))"], "FrameGO.iter_group_other_array().reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_other_array().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other_array().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other_array().reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((0, array([0, 8])), (1, array([8, 8])), (2, array([3, 3])))"], "FrameGO.iter_group_other_array().reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(array([0, 8]), array([8, 8]), array([3, 3]))"], "FrameGO.iter_group_other_array().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       8", "1       8       8", "2       3       3", "<int64> <int64> <int64>"], "FrameGO.iter_group_other_array_items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 2))", "((0, array([[11,  0,  0],", "       [10,  3,  0]])), (1, array([[4, 8, 1],", "       [2, 8, 1]])))"], "FrameGO.iter_group_other_array_items().apply()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 2).apply(lambda k, v: np.sum(v) if k == 0 else v.shape)", "<Series>", "<Index>", "0        24", "1        (2, 3)", "<int64>  <object>"], "FrameGO.iter_group_other_array_items().apply_iter()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 2).apply_iter(lambda k, v: np.sum(v) if k == 0 else v.shape))", "(24, (2, 3))"], "FrameGO.iter_group_other_array_items().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 2).apply_iter_items(lambda k, v: np.sum(v) if k == 0 else v.shape))", "((0, 24), (1, (2, 3)))"], "FrameGO.iter_group_other_array_items().reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other_array_items().reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other_array_items().reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).items())", "((0, array([13,  8,  1])), (1, array([4, 8, 1])), (2, array([10,  3,  0])))"], "FrameGO.iter_group_other_array_items().reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).values())", "(array([13,  8,  1]), array([4, 8, 1]), array([10,  3,  0]))"], "FrameGO.iter_group_other_array_items().reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       13", "1       8", "2       1", "3       4", "4       8", "5       1", "6       10", "7       3", "8       0", "<int64> <int64>"], "FrameGO.iter_group_other_array_items().reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other_array_items().reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other_array_items().reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).items())", "((0, array([2, 0, 0])), (1, array([4, 8, 1])), (2, array([10,  3,  0])))"], "FrameGO.iter_group_other_array_items().reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).values())", "(array([2, 0, 0]), array([4, 8, 1]), array([10,  3,  0]))"], "FrameGO.iter_group_other_array_items().reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, a: np.min(a)).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_other_array_items().reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other_array_items().reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other_array_items().reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).items())", "((0, array([ 0, 11])), (1, array([8, 4])), (2, array([ 3, 10])))"], "FrameGO.iter_group_other_array_items().reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).values())", "(array([ 0, 11]), array([8, 4]), array([ 3, 10]))"], "FrameGO.iter_group_other_array_items().reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_other_array_items().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other_array_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other_array_items().reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).items())", "((0, array([0, 8])), (1, array([8, 8])), (2, array([3, 3])))"], "FrameGO.iter_group_other_array_items().reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).values())", "(array([0, 8]), array([8, 8]), array([3, 3]))"], "FrameGO.iter_group_other_array_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_array_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       8", "1       8       8", "2       3       3", "<int64> <int64> <int64>"], "FrameGO.iter_group_other_items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 2))", "((0, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "0         11      0       0", "2         10      3       0", "<int64>   <int64> <int64> <int64>), (1, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "1         4       8       1", "3         2       8       1", "<int64>   <int64> <int64> <int64>))"], "FrameGO.iter_group_other_items().apply()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 2).apply(lambda k, v: v['b'].sum() if k == 0 else v.shape)", "<Series>", "<Index>", "0        3", "1        (2, 3)", "<int64>  <object>"], "FrameGO.iter_group_other_items().apply_iter()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 2).apply_iter(lambda k, v: v['b'].sum() if k == 0 else v.shape))", "(3, (2, 3))"], "FrameGO.iter_group_other_items().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 2).apply_iter_items(lambda k, v: v['b'].sum() if k == 0 else v.shape))", "((0, 3), (1, (2, 3)))"], "FrameGO.iter_group_other_items().reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other_items().reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other_items().reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).items())", "((0, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>), (1, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>), (2, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>))"], "FrameGO.iter_group_other_items().reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).values())", "(<FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "3         2       8       1", "<int64>   <int64> <int64> <int64>, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>, <FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "<int64>   <int64> <int64> <int64>)"], "FrameGO.iter_group_other_items().reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_func(lambda l, f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameGO.iter_group_other_items().reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other_items().reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other_items().reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group_other_items().reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group_other_items().reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_map_func(lambda l, s: np.min(s)).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_other_items().reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other_items().reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other_items().reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group_other_items().reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_group_other_items().reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_group_other_items().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).keys())", "(0, 1, 2)"], "FrameGO.iter_group_other_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).__iter__())", "(0, 1, 2)"], "FrameGO.iter_group_other_items().reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).items())", "((0, <Series: 0>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>), (1, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>), (2, <Series: 2>", "<Index>", "b-min       3", "b-max       3", "<<U5>       <int64>))"], "FrameGO.iter_group_other_items().reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).values())", "(<Series: 0>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>, <Series: 1>", "<Index>", "b-min       8", "b-max       8", "<<U5>       <int64>, <Series: 2>", "<Index>", "b-min       3", "b-max       3", "<<U5>       <int64>)"], "FrameGO.iter_group_other_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_group_other_items(np.arange(len(f)) % 3).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "0       0       8", "1       8       8", "2       3       3", "<int64> <int64> <int64>"], "FrameGO.iter_series()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_series())", "(<Series: a>", "<Index>", "p           10", "q           -2", "r           0", "s           0", "<<U1>       <int64>, <Series: b>", "<Index>", "p           8", "q           -3", "r           8", "s           0", "<<U1>       <int64>, <Series: c>", "<Index>", "p           1", "q           0", "r           9", "s           12", "<<U1>       <int64>)"], "FrameGO.iter_series().apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_series().apply(lambda v: v.sum())", "<Series>", "<Index>", "a        8", "b        13", "c        22", "<<U1>    <int64>"], "FrameGO.iter_series().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_series().apply_iter(lambda v: v.sum()))", "(8, 13, 22)"], "FrameGO.iter_series().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_series().apply_iter_items(lambda v: v.sum()))", "(('a', 8), ('b', 13), ('c', 22))"], "FrameGO.iter_series().apply_pool()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_series().apply_pool(lambda v: v.sum(), use_threads=True)", "<Series>", "<Index>", "a        8", "b        13", "c        22", "<<U1>    <int64>"], "FrameGO.iter_series_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_series_items())", "(('a', <Series: a>", "<Index>", "p           10", "q           -2", "r           0", "s           0", "<<U1>       <int64>), ('b', <Series: b>", "<Index>", "p           8", "q           -3", "r           8", "s           0", "<<U1>       <int64>), ('c', <Series: c>", "<Index>", "p           1", "q           0", "r           9", "s           12", "<<U1>       <int64>))"], "FrameGO.iter_series_items().apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_series_items().apply(lambda k, v: v.sum() if k != 'b' else -1)", "<Series>", "<Index>", "a        8", "b        -1", "c        22", "<<U1>    <int64>"], "FrameGO.iter_series_items().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_series_items().apply_iter(lambda k, v: v.sum() if k != 'b' else -1))", "(8, -1, 22)"], "FrameGO.iter_series_items().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_series_items().apply_iter_items(lambda k, v: v.sum() if k != 'b' else -1))", "(('a', 8), ('b', -1), ('c', 22))"], "FrameGO.iter_series_items().apply_pool()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_series_items().apply_pool(lambda pair: pair[1].sum() if pair[0] != 'b' else -1, use_threads=True)", "<Series>", "<Index>", "a        8", "b        -1", "c        22", "<<U1>    <int64>"], "FrameGO.iter_tuple()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_tuple())", "(Axis(p=10, q=-2, r=0, s=0), Axis(p=8, q=-3, r=8, s=0), Axis(p=1, q=0, r=9, s=12))"], "FrameGO.iter_tuple().apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_tuple().apply(lambda v: v.p + v.q)", "<Series>", "<Index>", "a        8", "b        5", "c        1", "<<U1>    <int64>"], "FrameGO.iter_tuple().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_tuple().apply_iter(lambda v: v.p + v.q))", "(8, 5, 1)"], "FrameGO.iter_tuple().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_tuple().apply_iter_items(lambda v: v.p + v.q))", "(('a', 8), ('b', 5), ('c', 1))"], "FrameGO.iter_tuple().map_all()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_tuple().map_all({(2, 9): -1, (3, 8): -2})", "<Series>", "<Index>", "a        -1", "b        -2", "<<U1>    <int64>"], "FrameGO.iter_tuple().map_all_iter()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_all_iter({(2, 9): -1, (3, 8): -2}))", "(-1, -2)"], "FrameGO.iter_tuple().map_all_iter_items()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_all_iter_items({(2, 9): -1, (3, 8): -2}))", "(('a', -1), ('b', -2))"], "FrameGO.iter_tuple().map_any()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_any({(2, 9): -1}))", "('a', 'b')"], "FrameGO.iter_tuple().map_any_iter()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_any_iter({(2, 9): -1}))", "(-1, Axis(p=3, q=8))"], "FrameGO.iter_tuple().map_any_iter_items()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_any_iter_items({(2, 9): -1}))", "(('a', -1), ('b', Axis(p=3, q=8)))"], "FrameGO.iter_tuple().map_fill()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_tuple().map_fill({(2, 9): -1}, fill_value=np.nan)", "<Series>", "<Index>", "a        -1.0", "b        nan", "<<U1>    <float64>"], "FrameGO.iter_tuple().map_fill_iter()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_fill_iter({(2, 9): -1}, fill_value=np.nan))", "(-1, nan)"], "FrameGO.iter_tuple().map_fill_iter_items()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple().map_fill_iter_items({(2, 9): -1}, fill_value=np.nan))", "(('a', -1), ('b', nan))"], "FrameGO.iter_tuple_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_tuple_items())", "(('a', Axis(p=10, q=-2, r=0, s=0)), ('b', Axis(p=8, q=-3, r=8, s=0)), ('c', Axis(p=1, q=0, r=9, s=12)))"], "FrameGO.iter_tuple_items().apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_tuple_items().apply(lambda k, v: v.p + v.q if k == 'b' else -1)", "<Series>", "<Index>", "a        -1", "b        5", "c        -1", "<<U1>    <int64>"], "FrameGO.iter_tuple_items().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> tuple(f.iter_tuple_items().apply_iter(lambda k, v: v.p + v.q if k == 'b' else -1))", "(-1, 5, -1)"], "FrameGO.iter_tuple_items().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> tuple(f.iter_tuple_items().apply_iter_items(lambda k, v: v.p + v.q if k == 'b' else -1))", "(('a', -1), ('b', 5), ('c', -1))"], "FrameGO.iter_tuple_items().map_all()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_tuple_items().map_all({('a', (2, 9)): -1, ('b', (3, 8)): -2})", "<Series>", "<Index>", "a        -1", "b        -2", "<<U1>    <int64>"], "FrameGO.iter_tuple_items().map_all_iter()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_all_iter({('a', (2, 9)): -1, ('b', (3, 8)): -2}))", "(-1, -2)"], "FrameGO.iter_tuple_items().map_all_iter_items()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_all_iter_items({('a', (2, 9)): -1, ('b', (3, 8)): -2}))", "(('a', -1), ('b', -2))"], "FrameGO.iter_tuple_items().map_any()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_tuple_items().map_any({('a', (2, 9)): -1})", "<Series>", "<Index>", "a        -1", "b        Axis(p=3, q=8)", "<<U1>    <object>"], "FrameGO.iter_tuple_items().map_any_iter()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_any_iter({('a', (2, 9)): -1}))", "(-1, Axis(p=3, q=8))"], "FrameGO.iter_tuple_items().map_any_iter_items()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_any_iter_items({('a', (2, 9)): -1}))", "(('a', -1), ('b', Axis(p=3, q=8)))"], "FrameGO.iter_tuple_items().map_fill()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f.iter_tuple_items().map_fill({('a', (2, 9)): -1}, fill_value=np.nan)", "<Series>", "<Index>", "a        -1.0", "b        nan", "<<U1>    <float64>"], "FrameGO.iter_tuple_items().map_fill_iter()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_fill_iter({('a', (2, 9)): -1}, fill_value=np.nan))", "(-1, nan)"], "FrameGO.iter_tuple_items().map_fill_iter_items()": [">>> f = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> tuple(f.iter_tuple_items().map_fill_iter_items({('a', (2, 9)): -1}, fill_value=np.nan))", "(('a', -1), ('b', nan))"], "FrameGO.iter_window()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1))", "(<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "<<U1>        <int64> <int64> <int64>, <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "q            -2      -3      0", "r            0       8       9", "<<U1>        <int64> <int64> <int64>, <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>)"], "FrameGO.iter_window().apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).apply(lambda f: f.max().max())", "<Series>", "<Index>", "q        10", "r        9", "s        12", "<<U1>    <int64>"], "FrameGO.iter_window().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).apply_iter(lambda f: f.max().max()))", "(10, 9, 12)"], "FrameGO.iter_window().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).apply_iter_items(lambda f: f.max().max()))", "(('q', 10), ('r', 9), ('s', 12))"], "FrameGO.iter_window().reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).keys())", "(1, 2, 3)"], "FrameGO.iter_window().reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window().reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).items())", "((1, <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "1            4       8       1", "<int64>      <int64> <int64> <int64>), (2, <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "2            10      3       0", "<int64>      <int64> <int64> <int64>), (3, <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "3            2       8       1", "<int64>      <int64> <int64> <int64>))"], "FrameGO.iter_window().reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).values())", "(<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "1            4       8       1", "<int64>      <int64> <int64> <int64>, <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "2            10      3       0", "<int64>      <int64> <int64> <int64>, <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "3            2       8       1", "<int64>      <int64> <int64> <int64>)"], "FrameGO.iter_window().reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       8       1", "2       10      3       0", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameGO.iter_window().reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_map_func(np.min).keys())", "(1, 2, 3)"], "FrameGO.iter_window().reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_map_func(np.min).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window().reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_map_func(np.min).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_window().reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_map_func(np.min).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_window().reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).reduce.from_map_func(np.min).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_window().reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(1, 2, 3)"], "FrameGO.iter_window().reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window().reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_window().reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_window().reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_window().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(1, 2, 3)"], "FrameGO.iter_window().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window().reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((1, <Series: 1>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>), (2, <Series: 2>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>), (3, <Series: 3>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>))"], "FrameGO.iter_window().reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: 1>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>, <Series: 2>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>, <Series: 3>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>)"], "FrameGO.iter_window().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "1       0       8", "2       3       8", "3       3       8", "<int64> <int64> <int64>"], "FrameGO.iter_window_array()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1))", "(array([[10,  8,  1],", "       [-2, -3,  0]]), array([[-2, -3,  0],", "       [ 0,  8,  9]]), array([[ 0,  8,  9],", "       [ 0,  0, 12]]))"], "FrameGO.iter_window_array().apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).apply(lambda a: np.max(a))", "<Series>", "<Index>", "q        10", "r        9", "s        12", "<<U1>    <int64>"], "FrameGO.iter_window_array().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).apply_iter(lambda a: np.max(a)))", "(10, 9, 12)"], "FrameGO.iter_window_array().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).apply_iter_items(lambda a: np.max(a)))", "(('q', 10), ('r', 9), ('s', 12))"], "FrameGO.iter_window_array().reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).keys())", "(1, 2, 3)"], "FrameGO.iter_window_array().reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window_array().reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).items())", "((1, array([15,  8,  1])), (2, array([14, 11,  1])), (3, array([12, 11,  1])))"], "FrameGO.iter_window_array().reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).values())", "(array([15,  8,  1]), array([14, 11,  1]), array([12, 11,  1]))"], "FrameGO.iter_window_array().reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).reduce.from_func(lambda a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       15", "1       8", "2       1", "3       14", "4       11", "5       1", "6       12", "7       11", "8       1", "<int64> <int64>"], "FrameGO.iter_window_array().reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).keys())", "(1, 2, 3)"], "FrameGO.iter_window_array().reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window_array().reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).items())", "((1, array([4, 0, 0])), (2, array([4, 3, 0])), (3, array([2, 3, 0])))"], "FrameGO.iter_window_array().reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).values())", "(array([4, 0, 0]), array([4, 3, 0]), array([2, 3, 0]))"], "FrameGO.iter_window_array().reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).reduce.from_map_func(np.min).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_window_array().reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "(1, 2, 3)"], "FrameGO.iter_window_array().reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window_array().reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "((1, array([ 0, 11])), (2, array([ 3, 10])), (3, array([ 3, 10])))"], "FrameGO.iter_window_array().reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(array([ 0, 11]), array([ 3, 10]), array([ 3, 10]))"], "FrameGO.iter_window_array().reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_window_array().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "(1, 2, 3)"], "FrameGO.iter_window_array().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window_array().reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "((1, array([0, 8])), (2, array([3, 8])), (3, array([3, 8])))"], "FrameGO.iter_window_array().reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(array([0, 8]), array([3, 8]), array([3, 8]))"], "FrameGO.iter_window_array().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "1       0       8", "2       3       8", "3       3       8", "<int64> <int64> <int64>"], "FrameGO.iter_window_array_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1))", "(('q', array([[10,  8,  1],", "       [-2, -3,  0]])), ('r', array([[-2, -3,  0],", "       [ 0,  8,  9]])), ('s', array([[ 0,  8,  9],", "       [ 0,  0, 12]])))"], "FrameGO.iter_window_array_items().apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).apply(lambda k, v: np.max(v) if k == 'r' else np.min(v))", "<Series>", "<Index>", "q        -3", "r        9", "s        0", "<<U1>    <int64>"], "FrameGO.iter_window_array_items().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter(lambda k, v: np.max(v) if k == 'r' else np.min(v)))", "(-3, 9, 0)"], "FrameGO.iter_window_array_items().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).apply_iter_items(lambda k, v: np.max(v) if k == 'r' else np.min(v)))", "(('q', -3), ('r', 9), ('s', 0))"], "FrameGO.iter_window_array_items().reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).keys())", "(1, 2, 3)"], "FrameGO.iter_window_array_items().reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window_array_items().reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).items())", "((1, array([15,  8,  1])), (2, array([14, 11,  1])), (3, array([12, 11,  1])))"], "FrameGO.iter_window_array_items().reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).values())", "(array([15,  8,  1]), array([14, 11,  1]), array([12, 11,  1]))"], "FrameGO.iter_window_array_items().reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).reduce.from_func(lambda l, a: a.sum(axis=0)).to_frame()", "<Frame>", "<Index> 0       <int64>", "<Index>", "0       15", "1       8", "2       1", "3       14", "4       11", "5       1", "6       12", "7       11", "8       1", "<int64> <int64>"], "FrameGO.iter_window_array_items().reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).keys())", "(1, 2, 3)"], "FrameGO.iter_window_array_items().reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window_array_items().reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).items())", "((1, array([4, 0, 0])), (2, array([4, 3, 0])), (3, array([2, 3, 0])))"], "FrameGO.iter_window_array_items().reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).values())", "(array([4, 0, 0]), array([4, 3, 0]), array([2, 3, 0]))"], "FrameGO.iter_window_array_items().reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).reduce.from_map_func(lambda l, a: np.min(a)).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_window_array_items().reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).keys())", "(1, 2, 3)"], "FrameGO.iter_window_array_items().reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window_array_items().reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).items())", "((1, array([ 0, 11])), (2, array([ 3, 10])), (3, array([ 3, 10])))"], "FrameGO.iter_window_array_items().reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).values())", "(array([ 0, 11]), array([ 3, 10]), array([ 3, 10]))"], "FrameGO.iter_window_array_items().reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).reduce.from_label_map({'b': lambda l, a: np.min(a), 'a': lambda l, a: np.max(a)}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_window_array_items().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).keys())", "(1, 2, 3)"], "FrameGO.iter_window_array_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window_array_items().reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).items())", "((1, array([0, 8])), (2, array([3, 8])), (3, array([3, 8])))"], "FrameGO.iter_window_array_items().reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).values())", "(array([0, 8]), array([3, 8]), array([3, 8]))"], "FrameGO.iter_window_array_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_array_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, a: np.min(a), ('b', 'b-max'): lambda l, a: np.max(a)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "1       0       8", "2       3       8", "3       3       8", "<int64> <int64> <int64>"], "FrameGO.iter_window_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1))", "(('q', <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "<<U1>        <int64> <int64> <int64>), ('r', <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "q            -2      -3      0", "r            0       8       9", "<<U1>        <int64> <int64> <int64>), ('s', <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>))"], "FrameGO.iter_window_items().apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).apply(lambda k, v: v.max().max() if k == 'r' else v.min().min())", "<Series>", "<Index>", "q        -3", "r        9", "s        0", "<<U1>    <int64>"], "FrameGO.iter_window_items().apply_iter()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).apply_iter(lambda k, v: v.max().max() if k == 'r' else v.min().min()))", "(-3, 9, 0)"], "FrameGO.iter_window_items().apply_iter_items()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).apply_iter_items(lambda k, v: v.max().max() if k == 'r' else v.min().min()))", "(('q', -3), ('r', 9), ('s', 0))"], "FrameGO.iter_window_items().reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).keys())", "(1, 2, 3)"], "FrameGO.iter_window_items().reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window_items().reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).items())", "((1, <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "1            4       8       1", "<int64>      <int64> <int64> <int64>), (2, <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "2            10      3       0", "<int64>      <int64> <int64> <int64>), (3, <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "3            2       8       1", "<int64>      <int64> <int64> <int64>))"], "FrameGO.iter_window_items().reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).values())", "(<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "1            4       8       1", "<int64>      <int64> <int64> <int64>, <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "2            10      3       0", "<int64>      <int64> <int64> <int64>, <FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "3            2       8       1", "<int64>      <int64> <int64> <int64>)"], "FrameGO.iter_window_items().reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).reduce.from_func(lambda l, f: f.iloc[1:]).to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "1       4       8       1", "2       10      3       0", "3       2       8       1", "<int64> <int64> <int64> <int64>"], "FrameGO.iter_window_items().reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).keys())", "(1, 2, 3)"], "FrameGO.iter_window_items().reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window_items().reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_window_items().reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_window_items().reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).reduce.from_map_func(lambda l, s: np.min(s)).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_window_items().reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).keys())", "(1, 2, 3)"], "FrameGO.iter_window_items().reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window_items().reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_window_items().reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.iter_window_items().reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.iter_window_items().reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).keys())", "(1, 2, 3)"], "FrameGO.iter_window_items().reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).__iter__())", "(1, 2, 3)"], "FrameGO.iter_window_items().reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).items())", "((1, <Series: 1>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>), (2, <Series: 2>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>), (3, <Series: 3>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>))"], "FrameGO.iter_window_items().reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> tuple(f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).values())", "(<Series: 1>", "<Index>", "b-min       0", "b-max       8", "<<U5>       <int64>, <Series: 2>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>, <Series: 3>", "<Index>", "b-min       3", "b-max       8", "<<U5>       <int64>)"], "FrameGO.iter_window_items().reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "0            11      0       0", "1            4       8       1", "2            10      3       0", "3            2       8       1", "<int64>      <int64> <int64> <int64>", ">>> f.iter_window_items(size=2, step=1).reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b-min   b-max   <<U5>", "<Index>", "1       0       8", "2       3       8", "3       3       8", "<int64> <int64> <int64>"], "FrameGO.__add__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 + 8", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            18      16      9", "q            6       5       8", "r            8       16      17", "s            8       8       20", "<<U1>        <int64> <int64> <int64>", ">>> f1 + f2", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         12.0      11.0      nan", "q         7.0       5.0       nan", "r         nan       nan       nan", "s         nan       nan       nan", "<<U1>     <float64> <float64> <float64>"], "FrameGO.__and__()": [">>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> f & True", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> f & (True, False)", "<FrameGO>", "<IndexGO> a      b      <<U1>", "<Index>", "p         False  False", "q         True   False", "r         True   False", "<<U1>     <bool> <bool>"], "FrameGO.__eq__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 == 8", "<FrameGO: x>", "<IndexGO>    a      b      c      <<U1>", "<Index>", "p            False  True   False", "q            False  False  False", "r            False  True   False", "s            False  False  False", "<<U1>        <bool> <bool> <bool>", ">>> f1 == f2", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         False  False  False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameGO.__floordiv__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 // 8", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       1       0", "q            -1      -1      0", "r            0       1       1", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f1 // f2", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         5.0       2.0       nan", "q         -1.0      -1.0      nan", "r         nan       nan       nan", "s         nan       nan       nan", "<<U1>     <float64> <float64> <float64>"], "FrameGO.__ge__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 >= 8", "<FrameGO: x>", "<IndexGO>    a      b      c      <<U1>", "<Index>", "p            True   True   False", "q            False  False  False", "r            False  True   True", "s            False  False  True", "<<U1>        <bool> <bool> <bool>", ">>> f1 >= f2", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         True   True   False", "q         False  False  False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameGO.__gt__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 > 8", "<FrameGO: x>", "<IndexGO>    a      b      c      <<U1>", "<Index>", "p            True   False  False", "q            False  False  False", "r            False  False  True", "s            False  False  True", "<<U1>        <bool> <bool> <bool>", ">>> f1 > f2", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         True   True   False", "q         False  False  False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameGO.__le__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 <= 8", "<FrameGO: x>", "<IndexGO>    a      b      c      <<U1>", "<Index>", "p            False  True   True", "q            True   True   True", "r            True   True   False", "s            True   True   False", "<<U1>        <bool> <bool> <bool>", ">>> f1 <= f2", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         True   True   False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameGO.__lt__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 < 8", "<FrameGO: x>", "<IndexGO>    a      b      c      <<U1>", "<Index>", "p            False  False  True", "q            True   True   True", "r            True   False  False", "s            True   True   False", "<<U1>        <bool> <bool> <bool>", ">>> f1 < f2", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         True   True   False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameGO.__matmul__()": [">>> f1 = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f1 @ f2", "<FrameGO>", "<IndexGO> x       y       <<U1>", "<Index>", "p         23      14", "q         6       4", "r         40      24", "s         20      12", "<<U1>     <int64> <int64>"], "FrameGO.__mod__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 % 8", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            2       0       1", "q            6       5       0", "r            0       0       1", "s            0       0       4", "<<U1>        <int64> <int64> <int64>", ">>> f1 % f2", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         0.0       2.0       nan", "q         7.0       5.0       nan", "r         nan       nan       nan", "s         nan       nan       nan", "<<U1>     <float64> <float64> <float64>"], "FrameGO.__mul__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 * 8", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            80      64      8", "q            -16     -24     0", "r            0       64      72", "s            0       0       96", "<<U1>        <int64> <int64> <int64>", ">>> f1 * f2", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         20.0      24.0      nan", "q         -18.0     -24.0     nan", "r         nan       nan       nan", "s         nan       nan       nan", "<<U1>     <float64> <float64> <float64>"], "FrameGO.__ne__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 != 8", "<FrameGO: x>", "<IndexGO>    a      b      c      <<U1>", "<Index>", "p            True   False  True", "q            True   True   True", "r            True   False  True", "s            True   True   True", "<<U1>        <bool> <bool> <bool>", ">>> f1 != f2", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         True   True   True", "q         True   True   True", "r         True   True   True", "s         True   True   True", "<<U1>     <bool> <bool> <bool>"], "FrameGO.__or__()": [">>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> f | True", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            True   True", "q            True   True", "r            True   True", "<<U1>        <bool> <bool>", ">>> f | (True, False)", "<FrameGO>", "<IndexGO> a      b      <<U1>", "<Index>", "p         True   True", "q         True   True", "r         True   False", "<<U1>     <bool> <bool>"], "FrameGO.__pow__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 ** 8", "<FrameGO: x>", "<IndexGO>    a         b        c         <<U1>", "<Index>", "p            100000000 16777216 1", "q            256       6561     0", "r            0         16777216 43046721", "s            0         0        429981696", "<<U1>        <int64>   <int64>  <int64>", ">>> f1 ** f2", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         100.0     512.0     1.0", "q         -512.0    6561.0    nan", "r         nan       nan       nan", "s         nan       nan       nan", "<<U1>     <float64> <float64> <float64>"], "FrameGO.__radd__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> 8 + f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            18      16      9", "q            6       5       8", "r            8       16      17", "s            8       8       20", "<<U1>        <int64> <int64> <int64>"], "FrameGO.__rfloordiv__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> 8 // f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            0       1       8", "q            -4      -3      0", "r            0       1       0", "s            0       0       0", "<<U1>        <int64> <int64> <int64>"], "FrameGO.__rmatmul__()": [">>> f1 = sf.FrameGO.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            1       2       1", "q            2       1       0", "r            0       2       2", "s            0       0       1", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f1 @ f2", "<FrameGO>", "<IndexGO> x       y       <<U1>", "<Index>", "p         23      14", "q         6       4", "r         40      24", "s         20      12", "<<U1>     <int64> <int64>"], "FrameGO.__rmul__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> 8 * f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            80      64      8", "q            -16     -24     0", "r            0       64      72", "s            0       0       96", "<<U1>        <int64> <int64> <int64>"], "FrameGO.__rshift__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f1 >> 1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            5       4       0", "q            -1      -2      0", "r            0       4       4", "s            0       0       6", "<<U1>        <int64> <int64> <int64>"], "FrameGO.__rsub__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> 8 - f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            -2      0       7", "q            10      11      8", "r            8       0       -1", "s            8       8       -4", "<<U1>        <int64> <int64> <int64>"], "FrameGO.__rtruediv__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> 8 / f1", "<FrameGO: x>", "<IndexGO>    a         b                   c                  <<U1>", "<Index>", "p            0.8       1.0                 8.0", "q            -4.0      -2.6666666666666665 inf", "r            inf       1.0                 0.8888888888888888", "s            inf       inf                 0.6666666666666666", "<<U1>        <float64> <float64>           <float64>"], "FrameGO.__sub__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 - 8", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            2       0       -7", "q            -10     -11     -8", "r            -8      0       1", "s            -8      -8      4", "<<U1>        <int64> <int64> <int64>", ">>> f1 - f2", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         8.0       5.0       nan", "q         -11.0     -11.0     nan", "r         nan       nan       nan", "s         nan       nan       nan", "<<U1>     <float64> <float64> <float64>"], "FrameGO.__truediv__()": [">>> f1 = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f1", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       3", "q            9       8", "<<U1>        <int64> <int64>", ">>> f1 / 8", "<FrameGO: x>", "<IndexGO>    a         b         c         <<U1>", "<Index>", "p            1.25      1.0       0.125", "q            -0.25     -0.375    0.0", "r            0.0       1.0       1.125", "s            0.0       0.0       1.5", "<<U1>        <float64> <float64> <float64>", ">>> f1 / f2", "<FrameGO>", "<IndexGO> a                   b                  c         <<U1>", "<Index>", "p         5.0                 2.6666666666666665 nan", "q         -0.2222222222222222 -0.375             nan", "r         nan                 nan                nan", "s         nan                 nan                nan", "<<U1>     <float64>           <float64>          <float64>"], "FrameGO.__xor__()": [">>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> f ^ True", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            True   False", "q            False  False", "r            False  True", "<<U1>        <bool> <bool>", ">>> f ^ (True, False)", "<FrameGO>", "<IndexGO> a      b      <<U1>", "<Index>", "p         True   True", "q         False  True", "r         False  False", "<<U1>     <bool> <bool>"], "FrameGO.__abs__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> abs(f)", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            2       3       0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameGO.__invert__()": [">>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> ~f", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            True   False", "q            False  False", "r            False  True", "<<U1>        <bool> <bool>"], "FrameGO.__neg__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> -f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            -10     -8      -1", "q            2       3       0", "r            0       -8      -9", "s            0       0       -12", "<<U1>        <int64> <int64> <int64>"], "FrameGO.__pos__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> +f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameGO.abs()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.abs()", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            2       3       0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>"], "FrameGO.via_dt.__call__()": [">>> f = sf.FrameGO.from_fields((('1620-04-01', '', '1620-06-30'), ('1976-04-01', '1954-12-31', '')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1620-04-01      1976-04-01", "q         NaT             1954-12-31", "r         1620-06-30      NaT", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt(fill_value=-1).year", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         1620    1976", "q         -1      1954", "r         1620    -1", "<<U1>     <int64> <int64>"], "FrameGO.via_dt.year": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.year", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         1517    2022", "q         1517    2021", "r         1517    2022", "<<U1>     <int64> <int64>"], "FrameGO.via_dt.year_month": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.year_month", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         1517-04 2022-04", "q         1517-12 2021-12", "r         1517-06 2022-06", "<<U1>     <<U7>   <<U7>"], "FrameGO.via_dt.year_quarter": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.year_quarter", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         1517-Q2 2022-Q2", "q         1517-Q4 2021-Q4", "r         1517-Q2 2022-Q2", "<<U1>     <<U7>   <<U7>"], "FrameGO.via_dt.month": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.month", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         4       4", "q         12      12", "r         6       6", "<<U1>     <int64> <int64>"], "FrameGO.via_dt.day": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.day", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         1       1", "q         31      31", "r         30      30", "<<U1>     <int64> <int64>"], "FrameGO.via_dt.hour": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.hour", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         0       0", "q         0       0", "r         0       0", "<<U1>     <int64> <int64>"], "FrameGO.via_dt.minute": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.minute", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         0       0", "q         0       0", "r         0       0", "<<U1>     <int64> <int64>"], "FrameGO.via_dt.second": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.second", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         0       0", "q         0       0", "r         0       0", "<<U1>     <int64> <int64>"], "FrameGO.via_dt.weekday()": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.weekday()", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         6       4", "q         0       4", "r         5       3", "<<U1>     <int64> <int64>"], "FrameGO.via_dt.quarter()": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.quarter()", "<FrameGO>", "<IndexGO> a       b       <<U1>", "<Index>", "p         2       2", "q         4       4", "r         2       2", "<<U1>     <int64> <int64>"], "FrameGO.via_dt.is_month_end()": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_month_end()", "<FrameGO>", "<IndexGO> a      b      <<U1>", "<Index>", "p         False  False", "q         True   True", "r         True   True", "<<U1>     <bool> <bool>"], "FrameGO.via_dt.is_month_start()": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_month_start()", "<FrameGO>", "<IndexGO> a      b      <<U1>", "<Index>", "p         True   True", "q         False  False", "r         False  False", "<<U1>     <bool> <bool>"], "FrameGO.via_dt.is_year_end()": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_year_end()", "<FrameGO>", "<IndexGO> a      b      <<U1>", "<Index>", "p         False  False", "q         True   True", "r         False  False", "<<U1>     <bool> <bool>"], "FrameGO.via_dt.is_year_start()": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_year_start()", "<FrameGO>", "<IndexGO> a      b      <<U1>", "<Index>", "p         False  False", "q         False  False", "r         False  False", "<<U1>     <bool> <bool>"], "FrameGO.via_dt.is_quarter_end()": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_quarter_end()", "<FrameGO>", "<IndexGO> a      b      <<U1>", "<Index>", "p         False  False", "q         True   True", "r         True   True", "<<U1>     <bool> <bool>"], "FrameGO.via_dt.is_quarter_start()": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.is_quarter_start()", "<FrameGO>", "<IndexGO> a      b      <<U1>", "<Index>", "p         True   True", "q         False  False", "r         False  False", "<<U1>     <bool> <bool>"], "FrameGO.via_dt.timetuple()": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.timetuple()", "<FrameGO>", "<IndexGO> a                    b                    <<U1>", "<Index>", "p         time.struct_time(... time.struct_time(...", "q         time.struct_time(... time.struct_time(...", "r         time.struct_time(... time.struct_time(...", "<<U1>     <object>             <object>"], "FrameGO.via_dt.isoformat()": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.isoformat()", "<FrameGO>", "<IndexGO> a          b          <<U1>", "<Index>", "p         1517-04-01 2022-04-01", "q         1517-12-31 2021-12-31", "r         1517-06-30 2022-06-30", "<<U1>     <<U10>     <<U10>"], "FrameGO.via_dt.fromisoformat()": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'))", ">>> f", "<FrameGO>", "<IndexGO> a          b          <<U1>", "<Index>", "p         1517-04-01 2022-04-01", "q         1517-12-31 2021-12-31", "r         1517-06-30 2022-06-30", "<<U1>     <<U10>     <<U10>", ">>> f.via_dt.fromisoformat()", "<FrameGO>", "<IndexGO> a          b          <<U1>", "<Index>", "p         1517-04-01 2022-04-01", "q         1517-12-31 2021-12-31", "r         1517-06-30 2022-06-30", "<<U1>     <object>   <object>"], "FrameGO.via_dt.strftime()": [">>> f = sf.FrameGO.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)", ">>> f", "<FrameGO>", "<IndexGO> a               b               <<U1>", "<Index>", "p         1517-04-01      2022-04-01", "q         1517-12-31      2021-12-31", "r         1517-06-30      2022-06-30", "<<U1>     <datetime64[D]> <datetime64[D]>", ">>> f.via_dt.strftime(\"%A | %B\")", "<FrameGO>", "<IndexGO> a                 b                 <<U1>", "<Index>", "p         Sunday | April    Friday | April", "q         Monday | December Friday | December", "r         Saturday | June   Thursday | June", "<<U1>     <<U17>            <<U17>"], "FrameGO.via_dt.strptime()": [">>> f = sf.FrameGO.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))", ">>> f", "<FrameGO>", "<IndexGO> a          b          <<U1>", "<Index>", "p         4/1/1517   4/1/2022", "q         12/31/1517 12/31/2021", "r         6/30/1517  6/30/2022", "<<U1>     <<U10>     <<U10>", ">>> f.via_dt.strptime(\"%m/%d/%Y\")", "<FrameGO>", "<IndexGO> a                   b                   <<U1>", "<Index>", "p         1517-04-01 00:00:00 2022-04-01 00:00:00", "q         1517-12-31 00:00:00 2021-12-31 00:00:00", "r         1517-06-30 00:00:00 2022-06-30 00:00:00", "<<U1>     <object>            <object>"], "FrameGO.via_dt.strpdate()": [">>> f = sf.FrameGO.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))", ">>> f", "<FrameGO>", "<IndexGO> a          b          <<U1>", "<Index>", "p         4/1/1517   4/1/2022", "q         12/31/1517 12/31/2021", "r         6/30/1517  6/30/2022", "<<U1>     <<U10>     <<U10>", ">>> f.via_dt.strpdate(\"%m/%d/%Y\")", "<FrameGO>", "<IndexGO> a          b          <<U1>", "<Index>", "p         1517-04-01 2022-04-01", "q         1517-12-31 2021-12-31", "r         1517-06-30 2022-06-30", "<<U1>     <object>   <object>"], "FrameGO.via_str.__getitem__()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str[-1]", "<FrameGO: x>", "<IndexGO>    a     b     <<U1>", "<Index>", "p            0", "q            2     Z", "r            8     3", "s            3", "<<U1>        <<U1> <<U1>"], "FrameGO.via_str.capitalize()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.capitalize()", "<FrameGO: x>", "<IndexGO>    a      b     <<U1>", "<Index>", "p            10     Qrs", "q            2      Xyz", "r            8      123", "s            3       wx", "<<U1>        <<U21> <<U4>"], "FrameGO.via_str.center()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.center(8)", "<FrameGO: x>", "<IndexGO>    a        b        <<U1>", "<Index>", "p               10      qrs", "q               2       XYZ", "r               8       123", "s               3        wX", "<<U1>        <<U8>    <<U8>"], "FrameGO.via_str.contains()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.contains('X')", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  False", "q            False  True", "r            False  False", "s            False  True", "<<U1>        <bool> <bool>"], "FrameGO.via_str.count()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.count('X')", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            0       0", "q            0       1", "r            0       0", "s            0       1", "<<U1>        <int64> <int64>"], "FrameGO.via_str.decode()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x').astype(bytes)", ">>> f", "<FrameGO: x>", "<IndexGO>    a      b       <<U1>", "<Index>", "p            b'10'  b'qrs '", "q            b'2'   b'XYZ'", "r            b'8'   b'123'", "s            b'3'   b' wX '", "<<U1>        <|S21> <|S4>", ">>> f.via_str.decode()", "<FrameGO: x>", "<IndexGO>    a     b     <<U1>", "<Index>", "p            10    qrs", "q            2     XYZ", "r            8     123", "s            3      wX", "<<U1>        <<U2> <<U4>"], "FrameGO.via_str.encode()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.encode()", "<FrameGO: x>", "<IndexGO>    a     b       <<U1>", "<Index>", "p            b'10' b'qrs '", "q            b'2'  b'XYZ'", "r            b'8'  b'123'", "s            b'3'  b' wX '", "<<U1>        <|S2> <|S4>"], "FrameGO.via_str.endswith()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.endswith(' ')", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  True", "q            False  False", "r            False  False", "s            False  True", "<<U1>        <bool> <bool>"], "FrameGO.via_str.find()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.find('X')", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            -1      -1", "q            -1      0", "r            -1      -1", "s            -1      2", "<<U1>        <int64> <int64>"], "FrameGO.via_str.format()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.format('{:-^10}')", "<FrameGO: x>", "<IndexGO>    a          b          <<U1>", "<Index>", "p            ----10---- ---qrs ---", "q            ----2----- ---XYZ----", "r            ----8----- ---123----", "s            ----3----- --- wX ---", "<<U1>        <<U10>     <<U10>"], "FrameGO.via_str.index()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.index('X')", "ValueError('substring not found')"], "FrameGO.via_str.isalnum()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isalnum()", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            True   False", "q            True   True", "r            True   True", "s            True   False", "<<U1>        <bool> <bool>"], "FrameGO.via_str.isalpha()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isalpha()", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  False", "q            False  True", "r            False  False", "s            False  False", "<<U1>        <bool> <bool>"], "FrameGO.via_str.isdecimal()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isdecimal()", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            True   False", "q            True   False", "r            True   True", "s            True   False", "<<U1>        <bool> <bool>"], "FrameGO.via_str.isdigit()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isdigit()", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            True   False", "q            True   False", "r            True   True", "s            True   False", "<<U1>        <bool> <bool>"], "FrameGO.via_str.islower()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.islower()", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  True", "q            False  False", "r            False  False", "s            False  False", "<<U1>        <bool> <bool>"], "FrameGO.via_str.isnumeric()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isnumeric()", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            True   False", "q            True   False", "r            True   True", "s            True   False", "<<U1>        <bool> <bool>"], "FrameGO.via_str.isspace()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isspace()", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  False", "q            False  False", "r            False  False", "s            False  False", "<<U1>        <bool> <bool>"], "FrameGO.via_str.istitle()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.istitle()", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  False", "q            False  False", "r            False  False", "s            False  False", "<<U1>        <bool> <bool>"], "FrameGO.via_str.isupper()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.isupper()", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  False", "q            False  True", "r            False  False", "s            False  False", "<<U1>        <bool> <bool>"], "FrameGO.via_str.ljust()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.ljust(8)", "<FrameGO: x>", "<IndexGO>    a        b        <<U1>", "<Index>", "p            10       qrs", "q            2        XYZ", "r            8        123", "s            3         wX", "<<U1>        <<U8>    <<U8>"], "FrameGO.via_str.len()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.len()", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            2       4", "q            1       3", "r            1       3", "s            1       4", "<<U1>        <int64> <int64>"], "FrameGO.via_str.lower()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.lower()", "<FrameGO: x>", "<IndexGO>    a      b     <<U1>", "<Index>", "p            10     qrs", "q            2      xyz", "r            8      123", "s            3       wx", "<<U1>        <<U21> <<U4>"], "FrameGO.via_str.lstrip()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.lstrip()", "<FrameGO: x>", "<IndexGO>    a      b     <<U1>", "<Index>", "p            10     qrs", "q            2      XYZ", "r            8      123", "s            3      wX", "<<U1>        <<U21> <<U4>"], "FrameGO.via_str.partition()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.partition('X')", "<FrameGO: x>", "<IndexGO>    a              b                <<U1>", "<Index>", "p            ('10', '', '') ('qrs ', '', '')", "q            ('2', '', '')  ('', 'X', 'YZ')", "r            ('8', '', '')  ('123', '', '')", "s            ('3', '', '')  (' w', 'X', ' ')", "<<U1>        <object>       <object>"], "FrameGO.via_str.replace()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.replace('X', '*')", "<FrameGO: x>", "<IndexGO>    a     b     <<U1>", "<Index>", "p            10    qrs", "q            2     *YZ", "r            8     123", "s            3      w*", "<<U1>        <<U2> <<U4>"], "FrameGO.via_str.rfind()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.rfind('X')", "<FrameGO: x>", "<IndexGO>    a       b       <<U1>", "<Index>", "p            -1      -1", "q            -1      0", "r            -1      -1", "s            -1      2", "<<U1>        <int64> <int64>"], "FrameGO.via_str.rindex()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.rindex('X')", "ValueError('substring not found')"], "FrameGO.via_str.rjust()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.rjust(8)", "<FrameGO: x>", "<IndexGO>    a        b        <<U1>", "<Index>", "p                  10     qrs", "q                   2      XYZ", "r                   8      123", "s                   3      wX", "<<U1>        <<U8>    <<U8>"], "FrameGO.via_str.rpartition()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.rpartition('X')", "<FrameGO: x>", "<IndexGO>    a              b                <<U1>", "<Index>", "p            ('', '', '10') ('', '', 'qrs ')", "q            ('', '', '2')  ('', 'X', 'YZ')", "r            ('', '', '8')  ('', '', '123')", "s            ('', '', '3')  (' w', 'X', ' ')", "<<U1>        <object>       <object>"], "FrameGO.via_str.rsplit()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.rsplit('X')", "<FrameGO: x>", "<IndexGO>    a        b           <<U1>", "<Index>", "p            ('10',)  ('qrs ',)", "q            ('2',)   ('', 'YZ')", "r            ('8',)   ('123',)", "s            ('3',)   (' w', ' ')", "<<U1>        <object> <object>"], "FrameGO.via_str.rstrip()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.rstrip()", "<FrameGO: x>", "<IndexGO>    a      b     <<U1>", "<Index>", "p            10     qrs", "q            2      XYZ", "r            8      123", "s            3       wX", "<<U1>        <<U21> <<U4>"], "FrameGO.via_str.split()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.split('X')", "<FrameGO: x>", "<IndexGO>    a        b           <<U1>", "<Index>", "p            ('10',)  ('qrs ',)", "q            ('2',)   ('', 'YZ')", "r            ('8',)   ('123',)", "s            ('3',)   (' w', ' ')", "<<U1>        <object> <object>"], "FrameGO.via_str.startswith()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.startswith('X')", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  False", "q            False  True", "r            False  False", "s            False  False", "<<U1>        <bool> <bool>"], "FrameGO.via_str.strip()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.strip()", "<FrameGO: x>", "<IndexGO>    a      b     <<U1>", "<Index>", "p            10     qrs", "q            2      XYZ", "r            8      123", "s            3      wX", "<<U1>        <<U21> <<U4>"], "FrameGO.via_str.swapcase()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.swapcase()", "<FrameGO: x>", "<IndexGO>    a      b     <<U1>", "<Index>", "p            10     QRS", "q            2      xyz", "r            8      123", "s            3       Wx", "<<U1>        <<U21> <<U4>"], "FrameGO.via_str.title()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.title()", "<FrameGO: x>", "<IndexGO>    a      b     <<U1>", "<Index>", "p            10     Qrs", "q            2      Xyz", "r            8      123", "s            3       Wx", "<<U1>        <<U21> <<U4>"], "FrameGO.via_str.upper()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.upper()", "<FrameGO: x>", "<IndexGO>    a      b     <<U1>", "<Index>", "p            10     QRS", "q            2      XYZ", "r            8      123", "s            3       WX", "<<U1>        <<U21> <<U4>"], "FrameGO.via_str.zfill()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     <<U1>", "<Index>", "p            10      qrs", "q            2       XYZ", "r            8       123", "s            3        wX", "<<U1>        <int64> <<U4>", ">>> f.via_str.zfill(8)", "<FrameGO: x>", "<IndexGO>    a        b        <<U1>", "<Index>", "p            00000010 0000qrs", "q            00000002 00000XYZ", "r            00000008 00000123", "s            00000003 0000 wX", "<<U1>        <<U8>    <<U8>"], "FrameGO.via_T.via_fill_value()": [">>> "], "FrameGO.via_T.__add__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T + s", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         10.0      8.0       1.0", "q         -4.0      -5.0      -2.0", "r         0.5       8.5       9.5", "s         1.0       1.0       13.0", "<<U1>     <float64> <float64> <float64>"], "FrameGO.via_T.__sub__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T - s", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         10.0      8.0       1.0", "q         0.0       -1.0      2.0", "r         -0.5      7.5       8.5", "s         -1.0      -1.0      11.0", "<<U1>     <float64> <float64> <float64>"], "FrameGO.via_T.__mul__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T * s", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         0.0       0.0       0.0", "q         4.0       6.0       -0.0", "r         0.0       4.0       4.5", "s         0.0       0.0       12.0", "<<U1>     <float64> <float64> <float64>"], "FrameGO.via_T.__truediv__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T / s", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         inf       inf       inf", "q         1.0       1.5       -0.0", "r         0.0       16.0      18.0", "s         0.0       0.0       12.0", "<<U1>     <float64> <float64> <float64>"], "FrameGO.via_T.__floordiv__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T // s", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         inf       inf       inf", "q         1.0       1.0       -0.0", "r         0.0       16.0      18.0", "s         0.0       0.0       12.0", "<<U1>     <float64> <float64> <float64>"], "FrameGO.via_T.__mod__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T % s", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         nan       nan       nan", "q         -0.0      -1.0      -0.0", "r         0.0       0.0       0.0", "s         0.0       0.0       0.0", "<<U1>     <float64> <float64> <float64>"], "FrameGO.via_T.__pow__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T ** s", "<FrameGO>", "<IndexGO> a         b                  c         <<U1>", "<Index>", "p         1.0       1.0                1.0", "q         0.25      0.1111111111111111 inf", "r         0.0       2.8284271247461903 3.0", "s         0.0       0.0                12.0", "<<U1>     <float64> <float64>          <float64>"], "FrameGO.via_T.__lshift__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0", "q        -2", "r        3", "s        1", "<<U1>    <int64>", ">>> f.via_T << s", "<FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "p         10      8       1", "q         0       0       0", "r         0       64      72", "s         0       0       24", "<<U1>     <int64> <int64> <int64>"], "FrameGO.via_T.__rshift__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0", "q        -2", "r        3", "s        1", "<<U1>    <int64>", ">>> f.via_T >> s", "<FrameGO>", "<IndexGO> a       b       c       <<U1>", "<Index>", "p         10      8       1", "q         -1      -1      0", "r         0       1       1", "s         0       0       6", "<<U1>     <int64> <int64> <int64>"], "FrameGO.via_T.__and__()": [">>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> f.via_T & s", "<FrameGO>", "<IndexGO> a      b      <<U1>", "<Index>", "p         False  False", "q         True   True", "r         True   False", "<<U1>     <bool> <bool>"], "FrameGO.via_T.__xor__()": [">>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> f.via_T ^ s", "<FrameGO>", "<IndexGO> a      b      <<U1>", "<Index>", "p         False  True", "q         False  False", "r         False  True", "<<U1>     <bool> <bool>"], "FrameGO.via_T.__or__()": [">>> f = sf.FrameGO.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a      b      <<U1>", "<Index>", "p            False  True", "q            True   True", "r            True   False", "<<U1>        <bool> <bool>", ">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> s", "<Series>", "<Index>", "p        False", "q        True", "r        True", "<<U1>    <bool>", ">>> f.via_T | s", "<FrameGO>", "<IndexGO> a      b      <<U1>", "<Index>", "p         False  True", "q         True   True", "r         True   True", "<<U1>     <bool> <bool>"], "FrameGO.via_T.__lt__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T < s", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         False  True   False", "r         True   False  False", "s         True   True   False", "<<U1>     <bool> <bool> <bool>"], "FrameGO.via_T.__le__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T <= s", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         True   True   False", "r         True   False  False", "s         True   True   False", "<<U1>     <bool> <bool> <bool>"], "FrameGO.via_T.__eq__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T == s", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         False  False  False", "q         True   False  False", "r         False  False  False", "s         False  False  False", "<<U1>     <bool> <bool> <bool>"], "FrameGO.via_T.__ne__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T != s", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         True   True   True", "q         False  True   True", "r         True   True   True", "s         True   True   True", "<<U1>     <bool> <bool> <bool>"], "FrameGO.via_T.__gt__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T > s", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         True   True   True", "q         False  False  True", "r         False  True   True", "s         False  False  True", "<<U1>     <bool> <bool> <bool>"], "FrameGO.via_T.__ge__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T >= s", "<FrameGO>", "<IndexGO> a      b      c      <<U1>", "<Index>", "p         True   True   True", "q         True   False  True", "r         False  True   True", "s         False  False  True", "<<U1>     <bool> <bool> <bool>"], "FrameGO.via_T.__radd__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T + s", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         10.0      8.0       1.0", "q         -4.0      -5.0      -2.0", "r         0.5       8.5       9.5", "s         1.0       1.0       13.0", "<<U1>     <float64> <float64> <float64>"], "FrameGO.via_T.__rsub__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T - s", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         10.0      8.0       1.0", "q         0.0       -1.0      2.0", "r         -0.5      7.5       8.5", "s         -1.0      -1.0      11.0", "<<U1>     <float64> <float64> <float64>"], "FrameGO.via_T.__rmul__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T * s", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         0.0       0.0       0.0", "q         4.0       6.0       -0.0", "r         0.0       4.0       4.5", "s         0.0       0.0       12.0", "<<U1>     <float64> <float64> <float64>"], "FrameGO.via_T.__rtruediv__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T / s", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         inf       inf       inf", "q         1.0       1.5       -0.0", "r         0.0       16.0      18.0", "s         0.0       0.0       12.0", "<<U1>     <float64> <float64> <float64>"], "FrameGO.via_T.__rfloordiv__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0.0", "q        -2.0", "r        0.5", "s        1.0", "<<U1>    <float64>", ">>> f.via_T // s", "<FrameGO>", "<IndexGO> a         b         c         <<U1>", "<Index>", "p         inf       inf       inf", "q         1.0       1.0       -0.0", "r         0.0       16.0      18.0", "s         0.0       0.0       12.0", "<<U1>     <float64> <float64> <float64>"], "FrameGO.via_fill_value().loc": [">>> f = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f.via_fill_value(-1).loc[['a', 'b', 'd']]", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "d            -1      -1", "<<U1>        <int64> <int64>"], "FrameGO.via_fill_value().__getitem__()": [">>> f = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f.via_fill_value(-1)[['z', 'x']]", "<FrameGO: y>", "<IndexGO>    z       x       <<U1>", "<Index>", "a            -1      3", "b            -1      0", "c            -1      20", "<<U1>        <int64> <int64>"], "FrameGO.via_fill_value().via_T": [">>> f = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> s = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> f.via_fill_value(-1).via_T * s", "<FrameGO>", "<IndexGO> x       y       <<U1>", "<Index>", "a         -3      -2", "b         0       0", "c         160     96", "d         -19     -19", "<<U1>     <int64> <int64>"], "FrameGO.via_fill_value().__add__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) + f2", "<FrameGO>", "<IndexGO> x       y       <<U1>", "<Index>", "a         3       2", "b         2       3", "c         24      26", "<<U1>     <int64> <int64>"], "FrameGO.via_fill_value().__sub__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) - f2", "<FrameGO>", "<IndexGO> x       y       <<U1>", "<Index>", "a         3       2", "b         -2      -3", "c         16      -2", "<<U1>     <int64> <int64>"], "FrameGO.via_fill_value().__mul__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) * f2", "<FrameGO>", "<IndexGO> x       y       <<U1>", "<Index>", "a         0       0", "b         0       0", "c         80      168", "<<U1>     <int64> <int64>"], "FrameGO.via_fill_value().__truediv__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) / f2", "<FrameGO>", "<IndexGO> x         y                  <<U1>", "<Index>", "a         inf       inf", "b         0.0       0.0", "c         5.0       0.8571428571428571", "<<U1>     <float64> <float64>"], "FrameGO.via_fill_value().__floordiv__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) // f2", "<FrameGO>", "<IndexGO> x       y       <<U1>", "<Index>", "a         0       0", "b         0       0", "c         5       0", "<<U1>     <int64> <int64>"], "FrameGO.via_fill_value().__mod__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) % f2", "<FrameGO>", "<IndexGO> x       y       <<U1>", "<Index>", "a         0       0", "b         0       0", "c         0       12", "<<U1>     <int64> <int64>"], "FrameGO.via_fill_value().__pow__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) ** f2", "<FrameGO>", "<IndexGO> x       y                <<U1>", "<Index>", "a         1       1", "b         0       0", "c         160000  1283918464548864", "<<U1>     <int64> <int64>"], "FrameGO.via_fill_value().__lshift__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            0       2", "c            1       1", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) << f2", "<FrameGO>", "<IndexGO> x       y       <<U1>", "<Index>", "a         3       2", "b         0       0", "c         40      24", "<<U1>     <int64> <int64>"], "FrameGO.via_fill_value().__rshift__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            0       2", "c            1       1", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) >> f2", "<FrameGO>", "<IndexGO> x       y       <<U1>", "<Index>", "a         3       2", "b         0       0", "c         10      6", "<<U1>     <int64> <int64>"], "FrameGO.via_fill_value().__and__()": [">>> f1 = sf.FrameGO.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x      y      <<U1>", "<Index>", "a            False  True", "b            True   False", "c            True   True", "<<U1>        <bool> <bool>", ">>> f2 = sf.FrameGO.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x      y      <<U1>", "<Index>", "b            False  True", "c            True   True", "<<U1>        <bool> <bool>", ">>> f1.via_fill_value(False) & f2", "<FrameGO>", "<IndexGO> x      y      <<U1>", "<Index>", "a         False  False", "b         False  False", "c         True   True", "<<U1>     <bool> <bool>"], "FrameGO.via_fill_value().__xor__()": [">>> f1 = sf.FrameGO.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x      y      <<U1>", "<Index>", "a            False  True", "b            True   False", "c            True   True", "<<U1>        <bool> <bool>", ">>> f2 = sf.FrameGO.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x      y      <<U1>", "<Index>", "b            False  True", "c            True   True", "<<U1>        <bool> <bool>", ">>> f1.via_fill_value(False) ^ f2", "<FrameGO>", "<IndexGO> x      y      <<U1>", "<Index>", "a         False  True", "b         True   True", "c         False  False", "<<U1>     <bool> <bool>"], "FrameGO.via_fill_value().__or__()": [">>> f1 = sf.FrameGO.from_fields(((False, True, True), (True, False, True)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x      y      <<U1>", "<Index>", "a            False  True", "b            True   False", "c            True   True", "<<U1>        <bool> <bool>", ">>> f2 = sf.FrameGO.from_fields(((False, True), (True, True)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x      y      <<U1>", "<Index>", "b            False  True", "c            True   True", "<<U1>        <bool> <bool>", ">>> f1.via_fill_value(False) | f2", "<FrameGO>", "<IndexGO> x      y      <<U1>", "<Index>", "a         False  True", "b         True   True", "c         True   True", "<<U1>     <bool> <bool>"], "FrameGO.via_fill_value().__lt__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) < f2", "<FrameGO>", "<IndexGO> x      y      <<U1>", "<Index>", "a         False  False", "b         True   True", "c         False  True", "<<U1>     <bool> <bool>"], "FrameGO.via_fill_value().__le__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) <= f2", "<FrameGO>", "<IndexGO> x      y      <<U1>", "<Index>", "a         False  False", "b         True   True", "c         False  True", "<<U1>     <bool> <bool>"], "FrameGO.via_fill_value().__eq__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) == f2", "<FrameGO>", "<IndexGO> x      y      <<U1>", "<Index>", "a         False  False", "b         False  False", "c         False  False", "<<U1>     <bool> <bool>"], "FrameGO.via_fill_value().__ne__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) != f2", "<FrameGO>", "<IndexGO> x      y      <<U1>", "<Index>", "a         True   True", "b         True   True", "c         True   True", "<<U1>     <bool> <bool>"], "FrameGO.via_fill_value().__gt__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) > f2", "<FrameGO>", "<IndexGO> x      y      <<U1>", "<Index>", "a         True   True", "b         False  False", "c         True   False", "<<U1>     <bool> <bool>"], "FrameGO.via_fill_value().__ge__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f1.via_fill_value(0) >= f2", "<FrameGO>", "<IndexGO> x      y      <<U1>", "<Index>", "a         True   True", "b         False  False", "c         True   False", "<<U1>     <bool> <bool>"], "FrameGO.via_fill_value().__radd__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f2 + f1.via_fill_value(0)", "<FrameGO: y>", "<IndexGO>    x        y        <<U1>", "<Index>", "b            FrameGO  FrameGO", "c            FrameGO  FrameGO", "<<U1>        <object> <object>"], "FrameGO.via_fill_value().__rsub__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f2 - f1.via_fill_value(0)", "<FrameGO: y>", "<IndexGO>    x        y        <<U1>", "<Index>", "b            FrameGO  FrameGO", "c            FrameGO  FrameGO", "<<U1>        <object> <object>"], "FrameGO.via_fill_value().__rmul__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f2 * f1.via_fill_value(0)", "<FrameGO: y>", "<IndexGO>    x        y        <<U1>", "<Index>", "b            FrameGO  FrameGO", "c            FrameGO  FrameGO", "<<U1>        <object> <object>"], "FrameGO.via_fill_value().__rtruediv__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f2 / f1.via_fill_value(0)", "<FrameGO: y>", "<IndexGO>    x        y        <<U1>", "<Index>", "b            FrameGO  FrameGO", "c            FrameGO  FrameGO", "<<U1>        <object> <object>"], "FrameGO.via_fill_value().__rfloordiv__()": [">>> f1 = sf.FrameGO.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> f1", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "a            3       2", "b            0       0", "c            20      12", "<<U1>        <int64> <int64>", ">>> f2 = sf.FrameGO.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> f2", "<FrameGO: y>", "<IndexGO>    x       y       <<U1>", "<Index>", "b            2       3", "c            4       14", "<<U1>        <int64> <int64>", ">>> f2 // f1.via_fill_value(0)", "<FrameGO: y>", "<IndexGO>    x        y        <<U1>", "<Index>", "b            FrameGO  FrameGO", "c            FrameGO  FrameGO", "<<U1>        <object> <object>"], "FrameGO.via_re().search()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').search()", "<FrameGO: x>", "<IndexGO>    a      b      c      <<U1>", "<Index>", "0            True   False  True", "1            True   True   True", "2            False  True   True", "3            True   True   True", "<int64>      <bool> <bool> <bool>"], "FrameGO.via_re().match()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').match()", "<FrameGO: x>", "<IndexGO>    a      b      c      <<U1>", "<Index>", "0            True   False  True", "1            True   True   True", "2            False  True   True", "3            True   False  True", "<int64>      <bool> <bool> <bool>"], "FrameGO.via_re().fullmatch()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('123').fullmatch()", "<FrameGO: x>", "<IndexGO>    a      b      c      <<U1>", "<Index>", "0            False  False  False", "1            False  False  False", "2            False  True   False", "3            False  False  False", "<int64>      <bool> <bool> <bool>"], "FrameGO.via_re().split()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').split()", "<FrameGO: x>", "<IndexGO>    a         b                c                    <<U1>", "<Index>", "0            ('', '0') ('qrs ',)        ('', '5', '7-0', ...", "1            ('', '')  ('', 'YZ')       ('', '5', '7-04-0...", "2            ('8',)    ('', '', '', '') ('', '5', '7-', '...", "3            ('', '')  (' w', ' ')      ('', '5', '7-06-'...", "<int64>      <object>  <object>         <object>"], "FrameGO.via_re().findall()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').findall()", "<FrameGO: x>", "<IndexGO>    a        b               c                    <<U1>", "<Index>", "0            ('1',)   ()              ('1', '1', '1', '1')", "1            ('2',)   ('X',)          ('1', '1', '1')", "2            ()       ('1', '2', '3') ('1', '1', '1', '...", "3            ('3',)   ('X',)          ('1', '1', '3')", "<int64>      <object> <object>        <object>"], "FrameGO.via_re().sub()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').sub('==')", "<FrameGO: x>", "<IndexGO>    a     b      c                <<U1>", "<Index>", "0            ==0   qrs    ==5==7-0==-0==", "1            ==    ==YZ   ==5==7-04-0==", "2            8     ====== ==5==7-====-====", "3            ==     w==   ==5==7-06-==0", "<int64>      <<U3> <<U6>  <<U16>"], "FrameGO.via_re().subn()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_re('[X123]').subn('==', 1)", "<FrameGO: x>", "<IndexGO>    a          b            c                  <<U1>", "<Index>", "0            ('==0', 1) ('qrs ', 0)  ('==517-01-01', 1)", "1            ('==', 1)  ('==YZ', 1)  ('==517-04-01', 1)", "2            ('8', 0)   ('==23', 1)  ('==517-12-31', 1)", "3            ('==', 1)  (' w== ', 1) ('==517-06-30', 1)", "<int64>      <object>   <object>     <object>"], "FrameGO.via_hashlib().to_bytes()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).to_bytes()", "b'FrameGOIndex\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00IndexGOa\\x00\\x00\\x00b\\x00\\x00\\x00c\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x00\\xb1y\\xfd\\xff\\xff\\xff\\xff\\xff\\x0bz\\xfd\\xff\\xff\\xff\\xff\\xff\\x1d{\\xfd\\xff\\xff\\xff\\xff\\xffez\\xfd\\xff\\xff\\xff\\xff\\xff'"], "FrameGO.via_hashlib().md5()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).md5().hexdigest()", "5d776c2ad38ad4f14e2067789c350869"], "FrameGO.via_hashlib().sha256()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).sha256().hexdigest()", "e72692189222cc59ac71f1438698df520b02ef319a1d6f5be3cb6454c94a1a7f"], "FrameGO.via_hashlib().sha512()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).sha512().hexdigest()", "37369fc48eed2c55876307dc6860b0ebb546d799217b46b10b63c842818bde7698581686b876d89fbf718f3aa03aa580e0cae444b9b2a320ae51ddbcf74978de"], "FrameGO.via_hashlib().sha3_256()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).sha3_256().hexdigest()", "405e7c5661a178d789d681f154e9605df7ad7eb5a892897ba530ece310f8972f"], "FrameGO.via_hashlib().sha3_512()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).sha3_512().hexdigest()", "e77e5f634849cf0250d914dd174f695da4220f793d3d82406b4fd65ef8431a1f45fa022a8577e4388a18e854d25107f2a67f719aededf8dcb6f371db62ec8df0"], "FrameGO.via_hashlib().shake_128()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).shake_128().hexdigest(8)", "86c6ca0df1414a35"], "FrameGO.via_hashlib().shake_256()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).shake_256().hexdigest(8)", "0a2e9a5d9e6cd7ef"], "FrameGO.via_hashlib().blake2b()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).blake2b().hexdigest()", "d3630968e54744ba143e85391db35704e7ee7fa7031ee32b2796aa762dbe5a257dc5c5499f8939e5a41fc48dfc7e8a1105591155622a4ba9865916e0f8d41e2f"], "FrameGO.via_hashlib().blake2s()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b     c               <<U1>", "<Index>", "0            10      qrs   1517-01-01", "1            2       XYZ   1517-04-01", "2            8       123   1517-12-31", "3            3        wX   1517-06-30", "<int64>      <int64> <<U4> <datetime64[D]>", ">>> f.via_hashlib(include_name=False).blake2s().hexdigest()", "cebca441ca9ae07200b8f35a02edf2f4d7b2da2270c6fac37e630894ef621a92"], "FrameGO.via_values.apply()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> f.via_values.apply(np.sin)", "<FrameGO: x>", "<IndexGO>    a                   b                   c                   <<U1>", "<Index>", "p            -0.5440211108893698 0.9893582466233818  0.8414709848078965", "q            -0.9092974268256817 -0.1411200080598672 0.0", "r            0.0                 0.9893582466233818  0.4121184852417566", "s            0.0                 0.0                 -0.5365729180004349", "<<U1>        <float64>           <float64>           <float64>"], "FrameGO.via_values.__array_ufunc__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> np.sin(f.via_values)", "<FrameGO: x>", "<IndexGO>    a                   b                   c                   <<U1>", "<Index>", "p            -0.5440211108893698 0.9893582466233818  0.8414709848078965", "q            -0.9092974268256817 -0.1411200080598672 0.0", "r            0.0                 0.9893582466233818  0.4121184852417566", "s            0.0                 0.0                 -0.5365729180004349", "<<U1>        <float64>           <float64>           <float64>"], "FrameGO.via_values.__call__()": [">>> f = sf.FrameGO.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>    a       b       c       <<U1>", "<Index>", "p            10      8       1", "q            -2      -3      0", "r            0       8       9", "s            0       0       12", "<<U1>        <int64> <int64> <int64>", ">>> np.sin(f.via_values(unify_blocks=True))", "<FrameGO: x>", "<IndexGO>    a                   b                   c                   <<U1>", "<Index>", "p            -0.5440211108893698 0.9893582466233818  0.8414709848078965", "q            -0.9092974268256817 -0.1411200080598672 0.0", "r            0.0                 0.9893582466233818  0.4121184852417566", "s            0.0                 0.0                 -0.5365729180004349", "<<U1>        <float64>           <float64>           <float64>"], "FrameGO.via_type_clinic.to_hint()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.via_type_clinic.to_hint()", "TypeError(\"Too many arguments for <class 'static_frame.core.frame.FrameGO'>; actual 5, expected 2\")"], "FrameGO.via_type_clinic.check()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.via_type_clinic.check(sf.Frame[sf.IndexHierarchy[sf.Index[np.int64], sf.Index[np.str_]], sf.Index[np.int64], np.int64, np.bool_, np.str_])", "ClinicError('\\nIn Frame[IndexHierarchy[Index[int64], Index[str_]], Index[int64], int64, bool_, str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid\\nIn Frame[IndexHierarchy[Index[int64], Index[str_]], Index[int64], int64, bool_, str_]\\n\u2514\u2500\u2500 Index[int64]\\n    \u2514\u2500\u2500 Expected int64, provided str_ invalid')"], "FrameGO.via_type_clinic.__call__()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> cr = f.via_type_clinic(sf.Frame[sf.IndexHierarchy[sf.Index[np.int64], sf.Index[np.str_]], sf.Index[np.int64], np.int64, np.bool_, np.str_])", ">>> cr", "<ClinicResult: 2 errors>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Frame[IndexHierarchy[Index[int64], Index[str_]], Index[int64], int64, bool_, str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid", "In Frame[IndexHierarchy[Index[int64], Index[str_]], Index[int64], int64, bool_, str_]", "\u2514\u2500\u2500 Index[int64]", "    \u2514\u2500\u2500 Expected int64, provided str_ invalid"], "FrameGO.via_type_clinic.__repr__()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.via_type_clinic", "TypeError(\"Too many arguments for <class 'static_frame.core.frame.FrameGO'>; actual 5, expected 2\")"], "FrameGO.reduce.from_func().keys()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_func(lambda f: f.iloc[1:]).keys())", "('x',)"], "FrameGO.reduce.from_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "('x',)"], "FrameGO.reduce.from_func().items()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_func(lambda f: f.iloc[1:]).items())", "(('x', <FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>),)"], "FrameGO.reduce.from_func().values()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_func(lambda f: f.iloc[1:]).values())", "(<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>,)"], "FrameGO.reduce.from_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>"], "FrameGO.reduce.from_map_func().keys()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_map_func(np.min).keys())", "('x',)"], "FrameGO.reduce.from_map_func().__iter__()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_map_func(np.min).__iter__())", "('x',)"], "FrameGO.reduce.from_map_func().items()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_map_func(np.min).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.reduce.from_map_func().values()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_map_func(np.min).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.reduce.from_map_func().to_frame()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.reduce.from_map_func(np.min).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.reduce.from_label_map().keys()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "('x',)"], "FrameGO.reduce.from_label_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "('x',)"], "FrameGO.reduce.from_label_map().items()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.reduce.from_label_map().values()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "ErrorInitSeries('non-static index cannot be assigned to Series')"], "FrameGO.reduce.from_label_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "ErrorInitFrame('Supplied `columns_constructor` does not match required static attribute: True')"], "FrameGO.reduce.from_label_pair_map().keys()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "('x',)"], "FrameGO.reduce.from_label_pair_map().__iter__()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "('x',)"], "FrameGO.reduce.from_label_pair_map().items()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "(('x', <Series: x>", "<Index>", "b-min       False", "b-max       True", "<<U5>       <bool>),)"], "FrameGO.reduce.from_label_pair_map().values()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> tuple(f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: x>", "<Index>", "b-min       False", "b-max       True", "<<U5>       <bool>,)"], "FrameGO.reduce.from_label_pair_map().to_frame()": [">>> f = sf.FrameGO.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<FrameGO: x>", "<IndexGO>              a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min  b-max  <<U5>", "<Index>", "x       False  True", "<<U1>   <bool> <bool>"], "Index.__init__()": [">>> sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>"], "Index.from_labels()": [">>> sf.Index.from_labels(('a', 'b', 'c', 'd', 'e'), name='x')", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>"], "Index.from_pandas()": [">>> ix = pd.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> sf.Index.from_pandas(ix)", "<Index: x>", "a", "b", "c", "d", "e", "<object>"], "Index.to_pandas()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.to_pandas()", "Index(['a', 'b', 'c', 'd', 'e'], dtype='object', name='x')"], "Index.to_series()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.to_series()", "<Series: x>", "<Index>", "0           a", "1           b", "2           c", "3           d", "4           e", "<int64>     <<U1>"], "Index.STATIC": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.STATIC", "True"], "Index.depth": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.depth", "1"], "Index.dtype": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.dtype", "<U1"], "Index.index_types": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.index_types", "<Series>", "<Index>", "x        <Index>", "<<U1>    <object>"], "Index.memory": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.memory", "          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu", "Name      50  B     50  B     50  B     50   B     50   B     50  B", "Map       520 B     520 B     520 B     520  B     520  B     520 B", "Labels    132 B     148 B     20  B     132  B     148  B     20  B", "Positions 112 B     128 B     0   B     8.22 KB    168  B     40  B", "Total     938 B     970 B     714 B     9.03 KB    1010 B     754 B"], "Index.name": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.name", "x"], "Index.names": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.names", "('x',)"], "Index.nbytes": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.nbytes", "20"], "Index.ndim": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.ndim", "1"], "Index.positions": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.positions", "[0 1 2 3 4]"], "Index.shape": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.shape", "(5,)"], "Index.size": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.size", "5"], "Index.__array__()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.__array__()", "[1024 2048 4096]"], "Index.__array_ufunc__()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> np.array((0, 1, 0)) * ix", "[   0 2048    0]"], "Index.__bool__()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "Index.__copy__()": [">>> import copy", ">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> copy.copy(ix)", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>"], "Index.__deepcopy__()": [">>> import copy", ">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> copy.deepcopy(ix)", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>"], "Index.__len__()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> len(ix)", "5"], "Index.all()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix.all()", "False"], "Index.any()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix.any()", "True"], "Index.astype()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.astype(float)", "<Index: y>", "1024.0", "2048.0", "4096.0", "<float64>"], "Index.copy()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.copy()", "<Index: y>", "1024", "2048", "4096", "<int64>"], "Index.cumprod()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.cumprod()", "[      1024    2097152 8589934592]"], "Index.cumsum()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.cumsum()", "[1024 3072 7168]"], "Index.difference()": [">>> ix1 = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix1", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix2 = sf.Index(('c', 'd', 'e', 'f'), name='y')", ">>> ix2", "<Index: y>", "c", "d", "e", "f", "<<U1>", ">>> ix1.difference(ix2)", "<Index>", "a", "b", "<<U1>"], "Index.dropfalsy()": [">>> ix = sf.Index(('', 'b', 'c', 'd'))", ">>> ix", "<Index>", "", "b", "c", "d", "<<U1>", ">>> ix.dropfalsy()", "<Index>", "b", "c", "d", "<<U1>"], "Index.dropna()": [">>> ix = sf.Index((None, 'A', 1024, True), name='x')", ">>> ix", "<Index: x>", "None", "A", "1024", "True", "<object>", ">>> ix.dropna()", "<Index: x>", "A", "1024", "True", "<object>"], "Index.equals()": [">>> ix1 = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix1", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix2 = sf.Index((1024, 2048, 4096), name='y')", ">>> ix2", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix1.equals(ix2)", "False"], "Index.fillfalsy()": [">>> ix = sf.Index(('', 'b', 'c', 'd'))", ">>> ix", "<Index>", "", "b", "c", "d", "<<U1>", ">>> ix.fillfalsy('A')", "<Index>", "A", "b", "c", "d", "<<U1>"], "Index.fillna()": [">>> ix = sf.Index((None, 'A', 1024, True), name='x')", ">>> ix", "<Index: x>", "None", "A", "1024", "True", "<object>", ">>> ix.fillna(0)", "<Index: x>", "0", "A", "1024", "True", "<object>"], "Index.head()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.head(2)", "<Index: x>", "a", "b", "<<U1>"], "Index.iloc_searchsorted()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.iloc_searchsorted('c')", "2"], "Index.intersection()": [">>> ix1 = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix1", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix2 = sf.Index(('c', 'd', 'e', 'f'), name='y')", ">>> ix2", "<Index: y>", "c", "d", "e", "f", "<<U1>", ">>> ix1.intersection(ix2)", "<Index>", "c", "d", "e", "<<U1>"], "Index.isfalsy()": [">>> ix = sf.Index(('a', '', None, 0, np.nan, 'b'))", ">>> ix.isfalsy()", "[False  True  True  True  True False]"], "Index.isin()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.isin(('a', 'e'))", "[ True False False False  True]"], "Index.isna()": [">>> ix = sf.Index(('a', '', None, 0, np.nan, 'b'))", ">>> ix.isna()", "[False False  True False  True False]"], "Index.label_widths_at_depth()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> tuple(ix.label_widths_at_depth(0))", "(('a', 1), ('b', 1), ('c', 1), ('d', 1), ('e', 1))"], "Index.level_add()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.level_add('A')", "<IndexHierarchy: y>", "A                   1024", "A                   2048", "A                   4096", "<<U1>               <int64>"], "Index.loc_searchsorted()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.loc_searchsorted('c')", "c"], "Index.loc_to_iloc()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.loc_to_iloc('d')", "3", ">>> ix.loc_to_iloc(['a', 'e'])", "[0 4]", ">>> ix.loc_to_iloc(slice('c', None))", "slice(2, None, None)"], "Index.max()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.max()", "4096"], "Index.mean()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.mean()", "2389.3333333333335"], "Index.median()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.median()", "2048.0"], "Index.min()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.min()", "1024"], "Index.notfalsy()": [">>> ix = sf.Index(('a', '', None, 0, np.nan, 'b'))", ">>> ix.notfalsy()", "[ True False False False False  True]"], "Index.notna()": [">>> ix = sf.Index(('a', '', None, 0, np.nan, 'b'))", ">>> ix.notna()", "[ True  True False  True False  True]"], "Index.prod()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.prod()", "8589934592"], "Index.relabel()": [">>> ix = sf.Index(('a', 'b', 'c'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "<<U1>", ">>> ix.relabel(dict(a='x', c='y'))", "<Index: x>", "x", "b", "y", "<<U1>", ">>> ix.relabel(lambda l: l.upper() if l != 'b' else l)", "<Index: x>", "A", "b", "C", "<<U1>"], "Index.rename()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.rename('y')", "<Index: y>", "a", "b", "c", "d", "e", "<<U1>"], "Index.roll()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.roll(2)", "<Index: x>", "d", "e", "a", "b", "c", "<<U1>"], "Index.sample()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.sample(2, seed=0)", "<Index: x>", "a", "c", "<<U1>"], "Index.sort()": [">>> ix = sf.Index(('b', 'e', 'c', 'a', 'd'), name='x')", ">>> ix", "<Index: x>", "b", "e", "c", "a", "d", "<<U1>", ">>> ix.sort()", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.sort(ascending=False)", "<Index: x>", "e", "d", "c", "b", "a", "<<U1>"], "Index.std()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.std()", "1277.1523880188386"], "Index.sum()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.sum()", "7168"], "Index.tail()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.tail(2)", "<Index: x>", "d", "e", "<<U1>"], "Index.union()": [">>> ix1 = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix1", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix2 = sf.Index(('c', 'd', 'e', 'f'), name='y')", ">>> ix2", "<Index: y>", "c", "d", "e", "f", "<<U1>", ">>> ix1.union(ix2)", "<Index>", "a", "b", "c", "d", "e", "f", "<<U1>"], "Index.unique()": [">>> ix = sf.Index((None, 'A', 1024, True), name='x')", ">>> ix", "<Index: x>", "None", "A", "1024", "True", "<object>", ">>> ix.unique()", "[None 'A' 1024 True]"], "Index.values_at_depth()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.values_at_depth(0)", "['a' 'b' 'c' 'd' 'e']"], "Index.var()": [">>> ix = sf.Index((1024, 2048, 4096), name='y')", ">>> ix", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ix.var()", "1631118.222222222"], "Index.__contains__()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.__contains__('a')", "True"], "Index.__iter__()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> tuple(ix.__iter__())", "('a', 'b', 'c', 'd', 'e')"], "Index.__reversed__()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> tuple(ix.__reversed__())", "('e', 'd', 'c', 'b', 'a')"], "Index.values": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.values", "['a' 'b' 'c' 'd' 'e']"], "Index.interface": [">>> ix = sf.Index((None, 'A', 1024, True), name='x')", ">>> ix", "<Index: x>", "None", "A", "1024", "True", "<object>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... Index    Constructor          Initializer. Args...", "from_labels(labels, *, name)         Index    Constructor          Construct an Inde...", "from_pandas(value)                   Index    Constructor          Given a Pandas in...", "to_html(config, style_config)        Index    Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... Index    Exporter             Return a complete...", "to_pandas()                          Index    Exporter             Return a Pandas I...", "to_series()                          Index    Exporter             Return a Series w...", "to_visidata()                        Index    Exporter             Open an interacti...", "STATIC                               Index    Attribute            bool(x) -> bool R...", "depth                                Index    Attribute            int([x]) -> integ...", "dtype                                Index    Attribute            Return the dtype ...", "index_types                          Index    Attribute            Return a Series o...", "memory                               Index    Attribute            Return a MemoryDi...", "mloc                                 Index    Attribute            The memory locati...", "name                                 Index    Attribute            A hashable label ...", "names                                Index    Attribute            Provide a suitabl...", "nbytes                               Index    Attribute            Return the total ...", "...                                  ...      ...                  ...", "via_re(pattern, flags).sub(repl, ... Index    Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... Index    Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... Index    Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... Index    Accessor Hashlib", "via_hashlib(include_name, include... Index    Accessor Hashlib", "via_hashlib(include_name, include... Index    Accessor Hashlib", "via_hashlib(include_name, include... Index    Accessor Hashlib", "via_hashlib(include_name, include... Index    Accessor Hashlib", "via_hashlib(include_name, include... Index    Accessor Hashlib", "via_hashlib(include_name, include... Index    Accessor Hashlib", "via_hashlib(include_name, include... Index    Accessor Hashlib", "via_hashlib(include_name, include... Index    Accessor Hashlib", "via_type_clinic.to_hint()            Index    Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... Index    Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... Index    Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... Index    Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           Index    Accessor Type Clinic Return a compact ...", "<<U90>                               <<U5>    <<U27>               <<U83>"], "Index.__repr__()": [">>> ix = sf.Index((None, 'A', 1024, True), name='x')", ">>> repr(ix)", "<Index: x>", "None", "A", "1024", "True", "<object>"], "Index.__str__()": [">>> ix = sf.Index((None, 'A', 1024, True), name='x')", ">>> str(ix)", "<Index: x>", "None", "A", "1024", "True", "<object>"], "Index.display()": [">>> ix = sf.Index((None, 'A', 1024, True), name='x')", ">>> ix.display()", "<Index: x>", "None", "A", "1024", "True", "<object>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "None", "A", "1024", "True"], "Index.display_tall()": [">>> ix = sf.Index((None, 'A', 1024, True), name='x')", ">>> ix.display_tall()", "<Index: x>", "None", "A", "1024", "True", "<object>"], "Index.display_wide()": [">>> ix = sf.Index((None, 'A', 1024, True), name='x')", ">>> ix.display_wide()", "<Index: x>", "None", "A", "1024", "True", "<object>"], "Index.drop.iloc[]": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.drop.iloc[2]", "<Index: x>", "a", "b", "d", "e", "<<U1>", ">>> ix.drop.iloc[2:]", "<Index: x>", "a", "b", "<<U1>", ">>> ix.drop.iloc[[0, 3]]", "<Index: x>", "b", "c", "e", "<<U1>"], "Index.drop.loc[]": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.drop.loc['c']", "<Index: x>", "a", "b", "d", "e", "<<U1>", ">>> ix.drop.loc['c':]", "<Index: x>", "a", "b", "<<U1>", ">>> ix.drop.loc[['a', 'd']]", "<Index: x>", "b", "c", "e", "<<U1>"], "Index.[]": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix[2]", "c", ">>> ix[2:]", "<Index: x>", "c", "d", "e", "<<U1>", ">>> ix[[0, 3]]", "<Index: x>", "a", "d", "<<U1>"], "Index.iloc[]": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.iloc[2]", "c", ">>> ix.iloc[2:]", "<Index: x>", "c", "d", "e", "<<U1>", ">>> ix.iloc[[0, 3]]", "<Index: x>", "a", "d", "<<U1>"], "Index.loc[]": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.loc['c']", "c", ">>> ix.loc['c':]", "<Index: x>", "c", "d", "e", "<<U1>", ">>> ix.loc[['a', 'e']]", "<Index: x>", "a", "e", "<<U1>"], "Index.iter_label()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> tuple(ix.iter_label())", "('a', 'b', 'c', 'd', 'e')"], "Index.iter_label().apply()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.iter_label().apply(lambda l: l if l == 'b' else l.upper())", "['A' 'b' 'C' 'D' 'E']"], "Index.iter_label().apply_iter()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l if l == 'b' else l.upper()))", "('A', 'b', 'C', 'D', 'E')"], "Index.iter_label().apply_iter_items()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l if l == 'b' else l.upper()))", "((0, 'A'), (1, 'b'), (2, 'C'), (3, 'D'), (4, 'E'))"], "Index.iter_label().apply_pool()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.iter_label().apply_pool(lambda l: l if l == 'b' else l.upper(), use_threads=True)", "['A' 'b' 'C' 'D' 'E']"], "Index.__add__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix + 8", "[    8  1032 -2040  4104]"], "Index.__and__()": [">>> ix = sf.Index((False, True), name='x')", ">>> ix", "<Index: x>", "False", "True", "<bool>", ">>> ix & True", "[False  True]", ">>> ix & (False, True)", "[False  True]"], "Index.__eq__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix == 8", "[False False False False]"], "Index.__floordiv__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix // 8", "[   0  128 -256  512]"], "Index.__ge__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix >= 8", "[False  True False  True]"], "Index.__gt__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix > 8", "[False  True False  True]"], "Index.__le__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix <= 8", "[ True False  True False]"], "Index.__lt__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix < 8", "[ True False  True False]"], "Index.__matmul__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix @ (3, 0, 4, 0)", "-8192"], "Index.__mod__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix % 8", "[0 0 0 0]"], "Index.__mul__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix * 8", "[     0   8192 -16384  32768]"], "Index.__ne__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix != 8", "[ True  True  True  True]"], "Index.__or__()": [">>> ix = sf.Index((False, True), name='x')", ">>> ix", "<Index: x>", "False", "True", "<bool>", ">>> ix | True", "[ True  True]", ">>> ix | (False, True)", "[False  True]"], "Index.__pow__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix ** 8", "[0 0 0 0]"], "Index.__radd__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> 8 + ix", "[    8  1032 -2040  4104]"], "Index.__rfloordiv__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> 8 // ix", "[ 0  0 -1  0]"], "Index.__rmatmul__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix @ (3, 0, 4, 0)", "-8192"], "Index.__rmul__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> 8 * ix", "[     0   8192 -16384  32768]"], "Index.__rshift__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix >> 1", "[    0   512 -1024  2048]"], "Index.__rsub__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> 8 - ix", "[    8 -1016  2056 -4088]"], "Index.__rtruediv__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> 8 / ix", "[        inf  0.0078125  -0.00390625  0.00195312]"], "Index.__sub__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix - 8", "[   -8  1016 -2056  4088]"], "Index.__truediv__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix / 8", "[   0.  128. -256.  512.]"], "Index.__xor__()": [">>> ix = sf.Index((False, True), name='x')", ">>> ix", "<Index: x>", "False", "True", "<bool>", ">>> ix ^ True", "[ True False]", ">>> ix ^ (False, True)", "[False False]"], "Index.__abs__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> abs(ix)", "[   0 1024 2048 4096]"], "Index.__invert__()": [">>> ix = sf.Index((False, True), name='x')", ">>> ix", "<Index: x>", "False", "True", "<bool>", ">>> ~ix", "[ True False]"], "Index.__neg__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> -ix", "[    0 -1024  2048 -4096]"], "Index.__pos__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> +ix", "[    0  1024 -2048  4096]"], "Index.via_dt.__call__()": [">>> ix = sf.Index(('1517-01-01', '', '1517-12-31', '1517-06-30'))", ">>> ix", "<Index>", "1517-01-01", "", "1517-12-31", "1517-06-30", "<<U10>", ">>> ix.via_dt(fill_value=-1).day", "RuntimeError('invalid dtype (<U10) for date operation')"], "Index.via_dt.year": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.year", "[1517 1517]"], "Index.via_dt.year_month": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.year_month", "['1517-01' '1517-04']"], "Index.via_dt.year_quarter": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.year_quarter", "['1517-Q1' '1517-Q2']"], "Index.via_dt.month": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.month", "[1 4]"], "Index.via_dt.day": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.day", "[1 1]"], "Index.via_dt.hour": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.hour", "[0 8]"], "Index.via_dt.minute": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.minute", "[ 0 30]"], "Index.via_dt.second": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.second", "[ 0 59]"], "Index.via_dt.weekday()": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.weekday()", "[0 6]"], "Index.via_dt.quarter()": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.quarter()", "[1 2]"], "Index.via_dt.is_month_end()": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.is_month_end()", "[False False]"], "Index.via_dt.is_month_start()": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.is_month_start()", "[ True  True]"], "Index.via_dt.is_year_end()": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.is_year_end()", "[False False]"], "Index.via_dt.is_year_start()": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.is_year_start()", "[ True False]"], "Index.via_dt.is_quarter_end()": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.is_quarter_end()", "[False False]"], "Index.via_dt.is_quarter_start()": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.is_quarter_start()", "[ True  True]"], "Index.via_dt.timetuple()": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=8, tm_min=30, tm_sec=59, tm_wday=6, tm_yday=91, tm_isdst=-1)]"], "Index.via_dt.isoformat()": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.isoformat()", "['1517-01-01T00:00:00' '1517-04-01T08:30:59']"], "Index.via_dt.fromisoformat()": [">>> ix = sf.Index(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'))", ">>> ix", "<Index>", "1517-01-01", "1517-04-01", "1517-12-31", "1517-06-30", "1517-10-01", "<<U10>", ">>> ix.via_dt.fromisoformat()", "[datetime.date(1517, 1, 1) datetime.date(1517, 4, 1)", " datetime.date(1517, 12, 31) datetime.date(1517, 6, 30)", " datetime.date(1517, 10, 1)]"], "Index.via_dt.strftime()": [">>> import datetime", ">>> ix = sf.Index((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<Index>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Monday | January' 'Sunday | April']"], "Index.via_dt.strptime()": [">>> ix = sf.Index(('1/1/1517', '4/1/1517', '6/30/1517'))", ">>> ix", "<Index>", "1/1/1517", "4/1/1517", "6/30/1517", "<<U9>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "[datetime.datetime(1517, 1, 1, 0, 0) datetime.datetime(1517, 4, 1, 0, 0)", " datetime.datetime(1517, 6, 30, 0, 0)]"], "Index.via_dt.strpdate()": [">>> ix = sf.Index(('1/1/1517', '4/1/1517', '6/30/1517'))", ">>> ix", "<Index>", "1/1/1517", "4/1/1517", "6/30/1517", "<<U9>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "[datetime.date(1517, 1, 1) datetime.date(1517, 4, 1)", " datetime.date(1517, 6, 30)]"], "Index.via_str.__getitem__()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str[-1]", "[' ' 'Z' '3' ' ']"], "Index.via_str.capitalize()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.capitalize()", "['Qrs ' 'Xyz' '123' ' wx ']"], "Index.via_str.center()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.center(8)", "['  qrs   ' '  XYZ   ' '  123   ' '   wX   ']"], "Index.via_str.contains()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.contains('X')", "[False  True False  True]"], "Index.via_str.count()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.count('X')", "[0 1 0 1]"], "Index.via_str.decode()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX ')).astype(bytes)", ">>> ix", "<Index>", "b'qrs '", "b'XYZ'", "b'123'", "b' wX '", "<|S4>", ">>> ix.via_str.decode()", "['qrs ' 'XYZ' '123' ' wX ']"], "Index.via_str.encode()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.encode()", "[b'qrs ' b'XYZ' b'123' b' wX ']"], "Index.via_str.endswith()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.endswith(' ')", "[ True False False  True]"], "Index.via_str.find()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.find('X')", "[-1  0 -1  2]"], "Index.via_str.format()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.format('{:-^10}')", "['---qrs ---' '---XYZ----' '---123----' '--- wX ---']"], "Index.via_str.index()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "Index.via_str.isalnum()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isalnum()", "[False  True  True False]"], "Index.via_str.isalpha()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isalpha()", "[False  True False False]"], "Index.via_str.isdecimal()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isdecimal()", "[False False  True False]"], "Index.via_str.isdigit()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isdigit()", "[False False  True False]"], "Index.via_str.islower()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.islower()", "[ True False False False]"], "Index.via_str.isnumeric()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isnumeric()", "[False False  True False]"], "Index.via_str.isspace()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isspace()", "[False False False False]"], "Index.via_str.istitle()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.istitle()", "[False False False False]"], "Index.via_str.isupper()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isupper()", "[False  True False False]"], "Index.via_str.ljust()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.ljust(8)", "['qrs     ' 'XYZ     ' '123     ' ' wX     ']"], "Index.via_str.len()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.len()", "[4 3 3 4]"], "Index.via_str.lower()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.lower()", "['qrs ' 'xyz' '123' ' wx ']"], "Index.via_str.lstrip()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.lstrip()", "['qrs ' 'XYZ' '123' 'wX ']"], "Index.via_str.partition()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.partition('X')", "[('qrs ', '', '') ('', 'X', 'YZ') ('123', '', '') (' w', 'X', ' ')]"], "Index.via_str.replace()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.replace('X', '*')", "['qrs ' '*YZ' '123' ' w* ']"], "Index.via_str.rfind()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.rfind('X')", "[-1  0 -1  2]"], "Index.via_str.rindex()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "Index.via_str.rjust()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.rjust(8)", "['    qrs ' '     XYZ' '     123' '     wX ']"], "Index.via_str.rpartition()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.rpartition('X')", "[('', '', 'qrs ') ('', 'X', 'YZ') ('', '', '123') (' w', 'X', ' ')]"], "Index.via_str.rsplit()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.rsplit('X')", "[('qrs ',) ('', 'YZ') ('123',) (' w', ' ')]"], "Index.via_str.rstrip()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.rstrip()", "['qrs' 'XYZ' '123' ' wX']"], "Index.via_str.split()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.split('X')", "[('qrs ',) ('', 'YZ') ('123',) (' w', ' ')]"], "Index.via_str.startswith()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.startswith('X')", "[False  True False False]"], "Index.via_str.strip()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.strip()", "['qrs' 'XYZ' '123' 'wX']"], "Index.via_str.swapcase()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.swapcase()", "['QRS ' 'xyz' '123' ' Wx ']"], "Index.via_str.title()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.title()", "['Qrs ' 'Xyz' '123' ' Wx ']"], "Index.via_str.upper()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.upper()", "['QRS ' 'XYZ' '123' ' WX ']"], "Index.via_str.zfill()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.zfill(8)", "['0000qrs ' '00000XYZ' '00000123' '0000 wX ']"], "Index.via_re().search()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('[X123]').search()", "[False  True  True  True]"], "Index.via_re().match()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('[X123]').match()", "[False  True  True False]"], "Index.via_re().fullmatch()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('123').fullmatch()", "[False False  True False]"], "Index.via_re().split()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('[X123]').split()", "[('qrs ',) ('', 'YZ') ('', '', '', '') (' w', ' ')]"], "Index.via_re().findall()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('[X123]').findall()", "[() ('X',) ('1', '2', '3') ('X',)]"], "Index.via_re().sub()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('[X123]').sub('==')", "['qrs ' '==YZ' '======' ' w== ']"], "Index.via_re().subn()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('qrs ', 0) ('==YZ', 1) ('==23', 1) (' w== ', 1)]"], "Index.via_hashlib().to_bytes()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'Indexq\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x00'"], "Index.via_hashlib().md5()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "24ed80ccfb988104bf351eceade4b5ec"], "Index.via_hashlib().sha256()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "0ae1ec6f45473d8355874141cb3808c3bc440044c98002abd3dd9ca04042088a"], "Index.via_hashlib().sha512()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "8ffed6cb9adc71dd15b29e078c83e0e6eabc0e607a5d47f54edefa7a2e76553b00f71e5c0058eba4ac0e3bad9047a7d9807e00f30e7125107f411d07c43245db"], "Index.via_hashlib().sha3_256()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "3e02e7b632ffc3ebf6ac0f5dbe738eb0eba03d06190f8c07d4002cf58d6886da"], "Index.via_hashlib().sha3_512()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "8fa349fcfad0cc3fa459167b74e1c0c2d36df9680a31adc4fdd0e10d8b489dda493ebffb7963f9eec7ab68d2ac75e62be575d4a98acd8136f4a28268dd130a72"], "Index.via_hashlib().shake_128()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "eee1376b5761f54b"], "Index.via_hashlib().shake_256()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "9d0fbdaf57c8d41f"], "Index.via_hashlib().blake2b()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "a93c96cab59f877491edb9fa52696e120bfd39a4ba10f97cf7a30688044dc14c169d299c33acb7ea6eaf350bea531a2868cd3cf29ae160a508dc13d6dcdf10fe"], "Index.via_hashlib().blake2s()": [">>> ix = sf.Index(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<Index>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "c5b2ec8be5df645b7f8b60d167be31e72fa7197612bd5887765cea5203ce0c79"], "Index.via_values.apply()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix.via_values.apply(np.sin)", "<Index>", "0.0", "-0.15853338004399595", "0.31305701279012343", "-0.5946419876082146", "<float64>"], "Index.via_values.__array_ufunc__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> np.sin(ix.via_values)", "<Index>", "0.0", "-0.15853338004399595", "0.31305701279012343", "-0.5946419876082146", "<float64>"], "Index.via_values.__call__()": [">>> ix = sf.Index((0, 1024, -2048, 4096))", ">>> ix", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> np.sin(ix.via_values(unify_blocks=True))", "<Index>", "0.0", "-0.15853338004399595", "0.31305701279012343", "-0.5946419876082146", "<float64>"], "Index.via_type_clinic.to_hint()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.via_type_clinic.to_hint()", "static_frame.core.index.Index[numpy.str_]"], "Index.via_type_clinic.check()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.via_type_clinic.check(sf.Index[np.int64])", "ClinicError('\\nIn Index[int64]\\n\u2514\u2500\u2500 Expected int64, provided str_ invalid')"], "Index.via_type_clinic.__call__()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> cr = ix.via_type_clinic(sf.Index[np.int64])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[int64]", "\u2514\u2500\u2500 Expected int64, provided str_ invalid"], "Index.via_type_clinic.__repr__()": [">>> ix = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<Index: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.via_type_clinic", "Index[str_]"], "IndexGO.__init__()": [">>> sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>"], "IndexGO.from_labels()": [">>> sf.IndexGO.from_labels(('a', 'b', 'c', 'd', 'e'), name='x')", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>"], "IndexGO.from_pandas()": [">>> ix = pd.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> sf.IndexGO.from_pandas(ix)", "<IndexGO: x>", "a", "b", "c", "d", "e", "<object>"], "IndexGO.to_pandas()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.to_pandas()", "Index(['a', 'b', 'c', 'd', 'e'], dtype='object', name='x')"], "IndexGO.to_series()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.to_series()", "<Series: x>", "<Index>", "0           a", "1           b", "2           c", "3           d", "4           e", "<int64>     <<U1>"], "IndexGO.STATIC": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.STATIC", "False"], "IndexGO.depth": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.depth", "1"], "IndexGO.dtype": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.dtype", "<U1"], "IndexGO.index_types": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.index_types", "<Series>", "<Index>", "x        <IndexGO>", "<<U1>    <object>"], "IndexGO.memory": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.memory", "          L   Lu    LM   LMu   LMD  LMDu  R    Ru    RM   RMu   RMD  RMDu", "Name      50  B     50   B     50   B     50   B     50   B     50   B", "Map       520 B     520  B     520  B     520  B     520  B     520  B", "Labels    132 B     148  B     20   B     132  B     148  B     20   B", "Positions 112 B     128  B     0    B     8.22 KB    168  B     40   B", "Total     1.4 KB    1.43 KB    1.18 KB    9.51 KB    1.47 KB    1.22 KB"], "IndexGO.name": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.name", "x"], "IndexGO.names": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.names", "('x',)"], "IndexGO.nbytes": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.nbytes", "20"], "IndexGO.ndim": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.ndim", "1"], "IndexGO.positions": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.positions", "[0 1 2 3 4]"], "IndexGO.shape": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.shape", "(5,)"], "IndexGO.size": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix.size", "5"], "IndexGO.__array__()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.__array__()", "[1024 2048 4096]"], "IndexGO.__array_ufunc__()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> np.array((0, 1, 0)) * ix", "[   0 2048    0]"], "IndexGO.__bool__()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexGO.__copy__()": [">>> import copy", ">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> copy.copy(ix)", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>"], "IndexGO.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> copy.deepcopy(ix)", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>"], "IndexGO.__len__()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> len(ix)", "5"], "IndexGO.all()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix.all()", "False"], "IndexGO.any()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix.any()", "True"], "IndexGO.append()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.append('f')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "f", "<<U1>"], "IndexGO.astype()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.astype(float)", "<IndexGO: y>", "1024.0", "2048.0", "4096.0", "<float64>"], "IndexGO.copy()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.copy()", "<IndexGO: y>", "1024", "2048", "4096", "<int64>"], "IndexGO.cumprod()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.cumprod()", "[      1024    2097152 8589934592]"], "IndexGO.cumsum()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.cumsum()", "[1024 3072 7168]"], "IndexGO.difference()": [">>> ix1 = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix1", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix2 = sf.IndexGO(('c', 'd', 'e', 'f'), name='y')", ">>> ix2", "<IndexGO: y>", "c", "d", "e", "f", "<<U1>", ">>> ix1.difference(ix2)", "<IndexGO>", "a", "b", "<<U1>"], "IndexGO.dropfalsy()": [">>> ix = sf.IndexGO(('', 'b', 'c', 'd'))", ">>> ix", "<IndexGO>", "", "b", "c", "d", "<<U1>", ">>> ix.dropfalsy()", "<IndexGO>", "b", "c", "d", "<<U1>"], "IndexGO.dropna()": [">>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')", ">>> ix", "<IndexGO: x>", "None", "A", "1024", "True", "<object>", ">>> ix.dropna()", "<IndexGO: x>", "A", "1024", "True", "<object>"], "IndexGO.equals()": [">>> ix1 = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix1", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix2 = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix2", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix1.equals(ix2)", "False"], "IndexGO.extend()": [">>> ix1 = sf.IndexGO(('a', 'b', 'c'), name='x')", ">>> ix1", "<IndexGO: x>", "a", "b", "c", "<<U1>", ">>> ix2 = sf.IndexGO(('d', 'e', 'f'))", ">>> ix2", "<IndexGO>", "d", "e", "f", "<<U1>", ">>> ix1.extend(ix2)", ">>> ix1", "<IndexGO: x>", "a", "b", "c", "d", "e", "f", "<<U1>"], "IndexGO.fillfalsy()": [">>> ix = sf.IndexGO(('', 'b', 'c', 'd'))", ">>> ix", "<IndexGO>", "", "b", "c", "d", "<<U1>", ">>> ix.fillfalsy('A')", "<IndexGO>", "A", "b", "c", "d", "<<U1>"], "IndexGO.fillna()": [">>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')", ">>> ix", "<IndexGO: x>", "None", "A", "1024", "True", "<object>", ">>> ix.fillna(0)", "<IndexGO: x>", "0", "A", "1024", "True", "<object>"], "IndexGO.head()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.head(2)", "<IndexGO: x>", "a", "b", "<<U1>"], "IndexGO.iloc_searchsorted()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.iloc_searchsorted('c')", "2"], "IndexGO.intersection()": [">>> ix1 = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix1", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix2 = sf.IndexGO(('c', 'd', 'e', 'f'), name='y')", ">>> ix2", "<IndexGO: y>", "c", "d", "e", "f", "<<U1>", ">>> ix1.intersection(ix2)", "<IndexGO>", "c", "d", "e", "<<U1>"], "IndexGO.isfalsy()": [">>> ix = sf.IndexGO(('a', '', None, 0, np.nan, 'b'))", ">>> ix.isfalsy()", "[False  True  True  True  True False]"], "IndexGO.isin()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.isin(('a', 'e'))", "[ True False False False  True]"], "IndexGO.isna()": [">>> ix = sf.IndexGO(('a', '', None, 0, np.nan, 'b'))", ">>> ix.isna()", "[False False  True False  True False]"], "IndexGO.label_widths_at_depth()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> tuple(ix.label_widths_at_depth(0))", "(('a', 1), ('b', 1), ('c', 1), ('d', 1), ('e', 1))"], "IndexGO.level_add()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.level_add('A')", "<IndexHierarchyGO: y>", "A                     1024", "A                     2048", "A                     4096", "<<U1>                 <int64>"], "IndexGO.loc_searchsorted()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.loc_searchsorted('c')", "c"], "IndexGO.loc_to_iloc()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.loc_to_iloc('d')", "3", ">>> ix.loc_to_iloc(['a', 'e'])", "[0 4]", ">>> ix.loc_to_iloc(slice('c', None))", "slice(2, None, None)"], "IndexGO.max()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.max()", "4096"], "IndexGO.mean()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.mean()", "2389.3333333333335"], "IndexGO.median()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.median()", "2048.0"], "IndexGO.min()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.min()", "1024"], "IndexGO.notfalsy()": [">>> ix = sf.IndexGO(('a', '', None, 0, np.nan, 'b'))", ">>> ix.notfalsy()", "[ True False False False False  True]"], "IndexGO.notna()": [">>> ix = sf.IndexGO(('a', '', None, 0, np.nan, 'b'))", ">>> ix.notna()", "[ True  True False  True False  True]"], "IndexGO.prod()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.prod()", "8589934592"], "IndexGO.relabel()": [">>> ix = sf.IndexGO(('a', 'b', 'c'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "<<U1>", ">>> ix.relabel(dict(a='x', c='y'))", "<IndexGO: x>", "x", "b", "y", "<<U1>", ">>> ix.relabel(lambda l: l.upper() if l != 'b' else l)", "<IndexGO: x>", "A", "b", "C", "<<U1>"], "IndexGO.rename()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.rename('y')", "<IndexGO: y>", "a", "b", "c", "d", "e", "<<U1>"], "IndexGO.roll()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.roll(2)", "<IndexGO: x>", "d", "e", "a", "b", "c", "<<U1>"], "IndexGO.sample()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.sample(2, seed=0)", "<IndexGO: x>", "a", "c", "<<U1>"], "IndexGO.sort()": [">>> ix = sf.IndexGO(('b', 'e', 'c', 'a', 'd'), name='x')", ">>> ix", "<IndexGO: x>", "b", "e", "c", "a", "d", "<<U1>", ">>> ix.sort()", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.sort(ascending=False)", "<IndexGO: x>", "e", "d", "c", "b", "a", "<<U1>"], "IndexGO.std()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.std()", "1277.1523880188386"], "IndexGO.sum()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.sum()", "7168"], "IndexGO.tail()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.tail(2)", "<IndexGO: x>", "d", "e", "<<U1>"], "IndexGO.union()": [">>> ix1 = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix1", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix2 = sf.IndexGO(('c', 'd', 'e', 'f'), name='y')", ">>> ix2", "<IndexGO: y>", "c", "d", "e", "f", "<<U1>", ">>> ix1.union(ix2)", "<IndexGO>", "a", "b", "c", "d", "e", "f", "<<U1>"], "IndexGO.unique()": [">>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')", ">>> ix", "<IndexGO: x>", "None", "A", "1024", "True", "<object>", ">>> ix.unique()", "[None 'A' 1024 True]"], "IndexGO.values_at_depth()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.values_at_depth(0)", "['a' 'b' 'c' 'd' 'e']"], "IndexGO.var()": [">>> ix = sf.IndexGO((1024, 2048, 4096), name='y')", ">>> ix", "<IndexGO: y>", "1024", "2048", "4096", "<int64>", ">>> ix.var()", "1631118.222222222"], "IndexGO.__contains__()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.__contains__('a')", "True"], "IndexGO.__iter__()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> tuple(ix.__iter__())", "('a', 'b', 'c', 'd', 'e')"], "IndexGO.__reversed__()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> tuple(ix.__reversed__())", "('e', 'd', 'c', 'b', 'a')"], "IndexGO.values": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.values", "['a' 'b' 'c' 'd' 'e']"], "IndexGO.interface": [">>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')", ">>> ix", "<IndexGO: x>", "None", "A", "1024", "True", "<object>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexGO  Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexGO  Constructor          Construct an Inde...", "from_pandas(value)                   IndexGO  Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexGO  Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexGO  Exporter             Return a complete...", "to_pandas()                          IndexGO  Exporter             Return a Pandas I...", "to_series()                          IndexGO  Exporter             Return a Series w...", "to_visidata()                        IndexGO  Exporter             Open an interacti...", "STATIC                               IndexGO  Attribute            bool(x) -> bool R...", "depth                                IndexGO  Attribute            int([x]) -> integ...", "dtype                                IndexGO  Attribute            Return the dtype ...", "index_types                          IndexGO  Attribute            Return a Series o...", "memory                               IndexGO  Attribute            Return a MemoryDi...", "mloc                                 IndexGO  Attribute            The memory locati...", "name                                 IndexGO  Attribute            A hashable label ...", "names                                IndexGO  Attribute            Provide a suitabl...", "nbytes                               IndexGO  Attribute            Return the total ...", "...                                  ...      ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexGO  Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexGO  Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexGO  Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexGO  Accessor Hashlib", "via_hashlib(include_name, include... IndexGO  Accessor Hashlib", "via_hashlib(include_name, include... IndexGO  Accessor Hashlib", "via_hashlib(include_name, include... IndexGO  Accessor Hashlib", "via_hashlib(include_name, include... IndexGO  Accessor Hashlib", "via_hashlib(include_name, include... IndexGO  Accessor Hashlib", "via_hashlib(include_name, include... IndexGO  Accessor Hashlib", "via_hashlib(include_name, include... IndexGO  Accessor Hashlib", "via_hashlib(include_name, include... IndexGO  Accessor Hashlib", "via_type_clinic.to_hint()            IndexGO  Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexGO  Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexGO  Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexGO  Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexGO  Accessor Type Clinic Return a compact ...", "<<U90>                               <<U7>    <<U27>               <<U83>"], "IndexGO.__repr__()": [">>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')", ">>> repr(ix)", "<IndexGO: x>", "None", "A", "1024", "True", "<object>"], "IndexGO.__str__()": [">>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')", ">>> str(ix)", "<IndexGO: x>", "None", "A", "1024", "True", "<object>"], "IndexGO.display()": [">>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')", ">>> ix.display()", "<IndexGO: x>", "None", "A", "1024", "True", "<object>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "None", "A", "1024", "True"], "IndexGO.display_tall()": [">>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')", ">>> ix.display_tall()", "<IndexGO: x>", "None", "A", "1024", "True", "<object>"], "IndexGO.display_wide()": [">>> ix = sf.IndexGO((None, 'A', 1024, True), name='x')", ">>> ix.display_wide()", "<IndexGO: x>", "None", "A", "1024", "True", "<object>"], "IndexGO.drop.iloc[]": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.drop.iloc[2]", "<IndexGO: x>", "a", "b", "d", "e", "<<U1>", ">>> ix.drop.iloc[2:]", "<IndexGO: x>", "a", "b", "<<U1>", ">>> ix.drop.iloc[[0, 3]]", "<IndexGO: x>", "b", "c", "e", "<<U1>"], "IndexGO.drop.loc[]": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.drop.loc['c']", "<IndexGO: x>", "a", "b", "d", "e", "<<U1>", ">>> ix.drop.loc['c':]", "<IndexGO: x>", "a", "b", "<<U1>", ">>> ix.drop.loc[['a', 'd']]", "<IndexGO: x>", "b", "c", "e", "<<U1>"], "IndexGO.[]": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix[2]", "c", ">>> ix[2:]", "<IndexGO: x>", "c", "d", "e", "<<U1>", ">>> ix[[0, 3]]", "<IndexGO: x>", "a", "d", "<<U1>"], "IndexGO.iloc[]": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.iloc[2]", "c", ">>> ix.iloc[2:]", "<IndexGO: x>", "c", "d", "e", "<<U1>", ">>> ix.iloc[[0, 3]]", "<IndexGO: x>", "a", "d", "<<U1>"], "IndexGO.loc[]": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.loc['c']", "c", ">>> ix.loc['c':]", "<IndexGO: x>", "c", "d", "e", "<<U1>", ">>> ix.loc[['a', 'e']]", "<IndexGO: x>", "a", "e", "<<U1>"], "IndexGO.iter_label()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> tuple(ix.iter_label())", "('a', 'b', 'c', 'd', 'e')"], "IndexGO.iter_label().apply()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.iter_label().apply(lambda l: l if l == 'b' else l.upper())", "['A' 'b' 'C' 'D' 'E']"], "IndexGO.iter_label().apply_iter()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l if l == 'b' else l.upper()))", "('A', 'b', 'C', 'D', 'E')"], "IndexGO.iter_label().apply_iter_items()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l if l == 'b' else l.upper()))", "((0, 'A'), (1, 'b'), (2, 'C'), (3, 'D'), (4, 'E'))"], "IndexGO.iter_label().apply_pool()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.iter_label().apply_pool(lambda l: l if l == 'b' else l.upper(), use_threads=True)", "['A' 'b' 'C' 'D' 'E']"], "IndexGO.__add__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix + 8", "[    8  1032 -2040  4104]"], "IndexGO.__and__()": [">>> ix = sf.IndexGO((False, True), name='x')", ">>> ix", "<IndexGO: x>", "False", "True", "<bool>", ">>> ix & True", "[False  True]", ">>> ix & (False, True)", "[False  True]"], "IndexGO.__eq__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix == 8", "[False False False False]"], "IndexGO.__floordiv__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix // 8", "[   0  128 -256  512]"], "IndexGO.__ge__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix >= 8", "[False  True False  True]"], "IndexGO.__gt__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix > 8", "[False  True False  True]"], "IndexGO.__le__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix <= 8", "[ True False  True False]"], "IndexGO.__lt__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix < 8", "[ True False  True False]"], "IndexGO.__matmul__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix @ (3, 0, 4, 0)", "-8192"], "IndexGO.__mod__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix % 8", "[0 0 0 0]"], "IndexGO.__mul__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix * 8", "[     0   8192 -16384  32768]"], "IndexGO.__ne__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix != 8", "[ True  True  True  True]"], "IndexGO.__or__()": [">>> ix = sf.IndexGO((False, True), name='x')", ">>> ix", "<IndexGO: x>", "False", "True", "<bool>", ">>> ix | True", "[ True  True]", ">>> ix | (False, True)", "[False  True]"], "IndexGO.__pow__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix ** 8", "[0 0 0 0]"], "IndexGO.__radd__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> 8 + ix", "[    8  1032 -2040  4104]"], "IndexGO.__rfloordiv__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> 8 // ix", "[ 0  0 -1  0]"], "IndexGO.__rmatmul__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix @ (3, 0, 4, 0)", "-8192"], "IndexGO.__rmul__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> 8 * ix", "[     0   8192 -16384  32768]"], "IndexGO.__rshift__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix >> 1", "[    0   512 -1024  2048]"], "IndexGO.__rsub__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> 8 - ix", "[    8 -1016  2056 -4088]"], "IndexGO.__rtruediv__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> 8 / ix", "[        inf  0.0078125  -0.00390625  0.00195312]"], "IndexGO.__sub__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix - 8", "[   -8  1016 -2056  4088]"], "IndexGO.__truediv__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix / 8", "[   0.  128. -256.  512.]"], "IndexGO.__xor__()": [">>> ix = sf.IndexGO((False, True), name='x')", ">>> ix", "<IndexGO: x>", "False", "True", "<bool>", ">>> ix ^ True", "[ True False]", ">>> ix ^ (False, True)", "[False False]"], "IndexGO.__abs__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> abs(ix)", "[   0 1024 2048 4096]"], "IndexGO.__invert__()": [">>> ix = sf.IndexGO((False, True), name='x')", ">>> ix", "<IndexGO: x>", "False", "True", "<bool>", ">>> ~ix", "[ True False]"], "IndexGO.__neg__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> -ix", "[    0 -1024  2048 -4096]"], "IndexGO.__pos__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> +ix", "[    0  1024 -2048  4096]"], "IndexGO.via_dt.__call__()": [">>> ix = sf.IndexGO(('1517-01-01', '', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexGO>", "1517-01-01", "", "1517-12-31", "1517-06-30", "<<U10>", ">>> ix.via_dt(fill_value=-1).day", "RuntimeError('invalid dtype (<U10) for date operation')"], "IndexGO.via_dt.year": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.year", "[1517 1517]"], "IndexGO.via_dt.year_month": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.year_month", "['1517-01' '1517-04']"], "IndexGO.via_dt.year_quarter": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.year_quarter", "['1517-Q1' '1517-Q2']"], "IndexGO.via_dt.month": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.month", "[1 4]"], "IndexGO.via_dt.day": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.day", "[1 1]"], "IndexGO.via_dt.hour": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.hour", "[0 8]"], "IndexGO.via_dt.minute": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.minute", "[ 0 30]"], "IndexGO.via_dt.second": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.second", "[ 0 59]"], "IndexGO.via_dt.weekday()": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.weekday()", "[0 6]"], "IndexGO.via_dt.quarter()": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.quarter()", "[1 2]"], "IndexGO.via_dt.is_month_end()": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.is_month_end()", "[False False]"], "IndexGO.via_dt.is_month_start()": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.is_month_start()", "[ True  True]"], "IndexGO.via_dt.is_year_end()": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.is_year_end()", "[False False]"], "IndexGO.via_dt.is_year_start()": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.is_year_start()", "[ True False]"], "IndexGO.via_dt.is_quarter_end()": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.is_quarter_end()", "[False False]"], "IndexGO.via_dt.is_quarter_start()": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.is_quarter_start()", "[ True  True]"], "IndexGO.via_dt.timetuple()": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=1, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=8, tm_min=30, tm_sec=59, tm_wday=6, tm_yday=91, tm_isdst=-1)]"], "IndexGO.via_dt.isoformat()": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.isoformat()", "['1517-01-01T00:00:00' '1517-04-01T08:30:59']"], "IndexGO.via_dt.fromisoformat()": [">>> ix = sf.IndexGO(('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30', '1517-10-01'))", ">>> ix", "<IndexGO>", "1517-01-01", "1517-04-01", "1517-12-31", "1517-06-30", "1517-10-01", "<<U10>", ">>> ix.via_dt.fromisoformat()", "[datetime.date(1517, 1, 1) datetime.date(1517, 4, 1)", " datetime.date(1517, 12, 31) datetime.date(1517, 6, 30)", " datetime.date(1517, 10, 1)]"], "IndexGO.via_dt.strftime()": [">>> import datetime", ">>> ix = sf.IndexGO((datetime.datetime(1517, 1, 1), datetime.datetime(1517, 4, 1, 8, 30, 59)))", ">>> ix", "<IndexGO>", "1517-01-01 00:00:00", "1517-04-01 08:30:59", "<object>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Monday | January' 'Sunday | April']"], "IndexGO.via_dt.strptime()": [">>> ix = sf.IndexGO(('1/1/1517', '4/1/1517', '6/30/1517'))", ">>> ix", "<IndexGO>", "1/1/1517", "4/1/1517", "6/30/1517", "<<U9>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "[datetime.datetime(1517, 1, 1, 0, 0) datetime.datetime(1517, 4, 1, 0, 0)", " datetime.datetime(1517, 6, 30, 0, 0)]"], "IndexGO.via_dt.strpdate()": [">>> ix = sf.IndexGO(('1/1/1517', '4/1/1517', '6/30/1517'))", ">>> ix", "<IndexGO>", "1/1/1517", "4/1/1517", "6/30/1517", "<<U9>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "[datetime.date(1517, 1, 1) datetime.date(1517, 4, 1)", " datetime.date(1517, 6, 30)]"], "IndexGO.via_str.__getitem__()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str[-1]", "[' ' 'Z' '3' ' ']"], "IndexGO.via_str.capitalize()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.capitalize()", "['Qrs ' 'Xyz' '123' ' wx ']"], "IndexGO.via_str.center()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.center(8)", "['  qrs   ' '  XYZ   ' '  123   ' '   wX   ']"], "IndexGO.via_str.contains()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.contains('X')", "[False  True False  True]"], "IndexGO.via_str.count()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.count('X')", "[0 1 0 1]"], "IndexGO.via_str.decode()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX ')).astype(bytes)", ">>> ix", "<IndexGO>", "b'qrs '", "b'XYZ'", "b'123'", "b' wX '", "<|S4>", ">>> ix.via_str.decode()", "['qrs ' 'XYZ' '123' ' wX ']"], "IndexGO.via_str.encode()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.encode()", "[b'qrs ' b'XYZ' b'123' b' wX ']"], "IndexGO.via_str.endswith()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.endswith(' ')", "[ True False False  True]"], "IndexGO.via_str.find()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.find('X')", "[-1  0 -1  2]"], "IndexGO.via_str.format()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.format('{:-^10}')", "['---qrs ---' '---XYZ----' '---123----' '--- wX ---']"], "IndexGO.via_str.index()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexGO.via_str.isalnum()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isalnum()", "[False  True  True False]"], "IndexGO.via_str.isalpha()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isalpha()", "[False  True False False]"], "IndexGO.via_str.isdecimal()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isdecimal()", "[False False  True False]"], "IndexGO.via_str.isdigit()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isdigit()", "[False False  True False]"], "IndexGO.via_str.islower()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.islower()", "[ True False False False]"], "IndexGO.via_str.isnumeric()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isnumeric()", "[False False  True False]"], "IndexGO.via_str.isspace()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isspace()", "[False False False False]"], "IndexGO.via_str.istitle()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.istitle()", "[False False False False]"], "IndexGO.via_str.isupper()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.isupper()", "[False  True False False]"], "IndexGO.via_str.ljust()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.ljust(8)", "['qrs     ' 'XYZ     ' '123     ' ' wX     ']"], "IndexGO.via_str.len()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.len()", "[4 3 3 4]"], "IndexGO.via_str.lower()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.lower()", "['qrs ' 'xyz' '123' ' wx ']"], "IndexGO.via_str.lstrip()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.lstrip()", "['qrs ' 'XYZ' '123' 'wX ']"], "IndexGO.via_str.partition()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.partition('X')", "[('qrs ', '', '') ('', 'X', 'YZ') ('123', '', '') (' w', 'X', ' ')]"], "IndexGO.via_str.replace()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.replace('X', '*')", "['qrs ' '*YZ' '123' ' w* ']"], "IndexGO.via_str.rfind()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.rfind('X')", "[-1  0 -1  2]"], "IndexGO.via_str.rindex()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexGO.via_str.rjust()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.rjust(8)", "['    qrs ' '     XYZ' '     123' '     wX ']"], "IndexGO.via_str.rpartition()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.rpartition('X')", "[('', '', 'qrs ') ('', 'X', 'YZ') ('', '', '123') (' w', 'X', ' ')]"], "IndexGO.via_str.rsplit()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.rsplit('X')", "[('qrs ',) ('', 'YZ') ('123',) (' w', ' ')]"], "IndexGO.via_str.rstrip()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.rstrip()", "['qrs' 'XYZ' '123' ' wX']"], "IndexGO.via_str.split()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.split('X')", "[('qrs ',) ('', 'YZ') ('123',) (' w', ' ')]"], "IndexGO.via_str.startswith()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.startswith('X')", "[False  True False False]"], "IndexGO.via_str.strip()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.strip()", "['qrs' 'XYZ' '123' 'wX']"], "IndexGO.via_str.swapcase()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.swapcase()", "['QRS ' 'xyz' '123' ' Wx ']"], "IndexGO.via_str.title()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.title()", "['Qrs ' 'Xyz' '123' ' Wx ']"], "IndexGO.via_str.upper()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.upper()", "['QRS ' 'XYZ' '123' ' WX ']"], "IndexGO.via_str.zfill()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_str.zfill(8)", "['0000qrs ' '00000XYZ' '00000123' '0000 wX ']"], "IndexGO.via_re().search()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('[X123]').search()", "[False  True  True  True]"], "IndexGO.via_re().match()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('[X123]').match()", "[False  True  True False]"], "IndexGO.via_re().fullmatch()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('123').fullmatch()", "[False False  True False]"], "IndexGO.via_re().split()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('[X123]').split()", "[('qrs ',) ('', 'YZ') ('', '', '', '') (' w', ' ')]"], "IndexGO.via_re().findall()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('[X123]').findall()", "[() ('X',) ('1', '2', '3') ('X',)]"], "IndexGO.via_re().sub()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('[X123]').sub('==')", "['qrs ' '==YZ' '======' ' w== ']"], "IndexGO.via_re().subn()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('qrs ', 0) ('==YZ', 1) ('==23', 1) (' w== ', 1)]"], "IndexGO.via_hashlib().to_bytes()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexGOq\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x00'"], "IndexGO.via_hashlib().md5()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "0c16f5058d50cedce3d93711a18088ee"], "IndexGO.via_hashlib().sha256()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "c815b13d8a313118e9c86ed8fe6d5aef921c8f92a0379cb7acce76974c4ba659"], "IndexGO.via_hashlib().sha512()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "62a09270264fa7f1251b862675fc0eb24ae8068a76efa066c468d2ffbc3589d44a0e61df1b1ce6fa3090a6e37f92a74e97f4daabf44c626a0dfcf484faf4f493"], "IndexGO.via_hashlib().sha3_256()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "926647c4d8590e5790f5c67fc68a19741d9bf47986e342725905a5737aebb5fd"], "IndexGO.via_hashlib().sha3_512()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "822892c705635787f63c10f2c2ee909695d3e00980c2401b44931ecabe37c3bff2a2f11c3ba32d7abd78955ed54a600b532ee2711c6647e2252b0c8b4075b6af"], "IndexGO.via_hashlib().shake_128()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "8b27c5dcab0b368e"], "IndexGO.via_hashlib().shake_256()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "f3b7d93b52855052"], "IndexGO.via_hashlib().blake2b()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "99255be554feb7e62066da21d8a779120bf9eb1961e1387018b769e82992b7ba7be3bf1b5bd642c553f9e9089cf69f6880b5c0105b4c5bfa556f7f5079d0d9af"], "IndexGO.via_hashlib().blake2s()": [">>> ix = sf.IndexGO(('qrs ', 'XYZ', '123', ' wX '))", ">>> ix", "<IndexGO>", "qrs", "XYZ", "123", " wX", "<<U4>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "d06aec0088aeea5db879c39d0f5ab7c6f049c9a248cd186e0dd831747387826d"], "IndexGO.via_values.apply()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> ix.via_values.apply(np.sin)", "<IndexGO>", "0.0", "-0.15853338004399595", "0.31305701279012343", "-0.5946419876082146", "<float64>"], "IndexGO.via_values.__array_ufunc__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> np.sin(ix.via_values)", "<IndexGO>", "0.0", "-0.15853338004399595", "0.31305701279012343", "-0.5946419876082146", "<float64>"], "IndexGO.via_values.__call__()": [">>> ix = sf.IndexGO((0, 1024, -2048, 4096))", ">>> ix", "<IndexGO>", "0", "1024", "-2048", "4096", "<int64>", ">>> np.sin(ix.via_values(unify_blocks=True))", "<IndexGO>", "0.0", "-0.15853338004399595", "0.31305701279012343", "-0.5946419876082146", "<float64>"], "IndexGO.via_type_clinic.to_hint()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.via_type_clinic.to_hint()", "static_frame.core.index.IndexGO[numpy.str_]"], "IndexGO.via_type_clinic.check()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.via_type_clinic.check(sf.Index[np.int64])", "ClinicError('\\nIn Index[int64]\\n\u2514\u2500\u2500 Expected int64, provided str_ invalid')"], "IndexGO.via_type_clinic.__call__()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> cr = ix.via_type_clinic(sf.Index[np.int64])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[int64]", "\u2514\u2500\u2500 Expected int64, provided str_ invalid"], "IndexGO.via_type_clinic.__repr__()": [">>> ix = sf.IndexGO(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> ix", "<IndexGO: x>", "a", "b", "c", "d", "e", "<<U1>", ">>> ix.via_type_clinic", "IndexGO[str_]"], "IndexYear.__init__()": [">>> sf.IndexYear(('1517', '1520', '1518'))", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYear.from_date_range()": [">>> sf.IndexYear.from_date_range('2021-12-30', '2022-01-02')", "<IndexYear>", "2021", "2022", "<datetime64[Y]>"], "IndexYear.from_labels()": [">>> sf.IndexYear.from_labels(('1517', '1520', '1518'))", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYear.from_pandas()": [">>> ix = pd.Index(('1517', '1520', '1518'))", ">>> sf.IndexYear.from_pandas(ix)", "<Index>", "1517", "1520", "1518", "<object>"], "IndexYear.from_year_month_range()": [">>> sf.IndexYear.from_year_month_range('2021-12', '2022-01')", "<IndexYear>", "2021", "2022", "<datetime64[Y]>"], "IndexYear.from_year_range()": [">>> sf.IndexYear.from_year_range('2021', '2022')", "<IndexYear>", "2021", "2022", "<datetime64[Y]>"], "IndexYear.to_pandas()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.to_pandas()", "NotImplementedError('Pandas does not support a year type, and it is ambiguous if a date proxy should be the first of the year or the last of the year.')"], "IndexYear.to_series()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517", "1        1520", "2        1518", "<int64>  <datetime64[Y]>"], "IndexYear.STATIC": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix.STATIC", "True"], "IndexYear.depth": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix.depth", "1"], "IndexYear.dtype": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix.dtype", "datetime64[Y]"], "IndexYear.index_types": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexYear>", "<object> <object>"], "IndexYear.memory": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix.memory", "          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Name      16  B     16  B     16  B     16   B     16  B     16  B", "Map       472 B     472 B     472 B     472  B     472 B     472 B", "Labels    136 B     152 B     24  B     136  B     152 B     24  B", "Positions 112 B     128 B     0   B     8.22 KB    152 B     24  B", "Total     844 B     876 B     620 B     8.93 KB    900 B     644 B"], "IndexYear.name": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix.name"], "IndexYear.names": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix.names", "('__index0__',)"], "IndexYear.nbytes": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix.nbytes", "24"], "IndexYear.ndim": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix.ndim", "1"], "IndexYear.positions": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix.positions", "[0 1 2]"], "IndexYear.shape": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix.shape", "(3,)"], "IndexYear.size": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix.size", "3"], "IndexYear.__array__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.__array__()", "['1517' '1520' '1518']"], "IndexYear.__array_ufunc__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[Y]')))"], "IndexYear.__bool__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexYear.__copy__()": [">>> import copy", ">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> copy.copy(ix)", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYear.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> copy.deepcopy(ix)", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYear.__len__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> len(ix)", "3"], "IndexYear.all()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.all()", "True"], "IndexYear.any()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.any()", "True"], "IndexYear.astype()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.astype(str)", "<Index>", "1517", "1520", "1518", "<<U22>"], "IndexYear.copy()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.copy()", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYear.cumprod()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.cumsum()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.difference()": [">>> ix1 = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix1", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix2 = sf.IndexYear(('2022', '2021', '2018'))", ">>> ix2", "<IndexYear>", "2022", "2021", "2018", "<datetime64[Y]>", ">>> ix1.difference(ix2)", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYear.dropfalsy()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYear>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.dropfalsy()", "<IndexYear>", "1620", "1619", "<datetime64[Y]>"], "IndexYear.dropna()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYear>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.dropna()", "<IndexYear>", "1620", "1619", "<datetime64[Y]>"], "IndexYear.equals()": [">>> ix1 = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix1", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix2 = sf.IndexYear(('2022', '2021', '2018'))", ">>> ix2", "<IndexYear>", "2022", "2021", "2018", "<datetime64[Y]>", ">>> ix1.equals(ix2)", "False"], "IndexYear.fillfalsy()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYear>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexYear.fillna()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYear>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.fillna(0)", "<IndexYear>", "1620", "1970", "1619", "<datetime64[Y]>"], "IndexYear.head()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.head(2)", "<IndexYear>", "1517", "1520", "<datetime64[Y]>"], "IndexYear.iloc_searchsorted()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexYear.intersection()": [">>> ix1 = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix1", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix2 = sf.IndexYear(('2022', '2021', '2018'))", ">>> ix2", "<IndexYear>", "2022", "2021", "2018", "<datetime64[Y]>", ">>> ix1.intersection(ix2)", "<IndexYear>", "<datetime64[Y]>"], "IndexYear.isfalsy()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexYear.isin()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.isin(('1518',))", "[False False False]"], "IndexYear.isna()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix.isna()", "[False  True False]"], "IndexYear.label_widths_at_depth()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517'), 1), (numpy.datetime64('1520'), 1), (numpy.datetime64('1518'), 1))"], "IndexYear.level_add()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.level_add('A')", "<IndexHierarchy>", "A                1517", "A                1520", "A                1518", "<<U1>            <datetime64[Y]>"], "IndexYear.loc_searchsorted()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexYear.loc_to_iloc()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.loc_to_iloc('1518')", "2", ">>> ix.loc_to_iloc(['1517', '1518'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1520', None))", "slice(1, None, None)"], "IndexYear.max()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.max()", "1520"], "IndexYear.mean()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.median()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.min()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.min()", "1517"], "IndexYear.notfalsy()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexYear.notna()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix.notna()", "[ True False  True]"], "IndexYear.prod()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.relabel()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "ErrorInitIndexNonUnique('Labels have non-unique values. Examples from iterators not are available.')"], "IndexYear.rename()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.rename('y')", "<IndexYear: y>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYear.roll()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.roll(2)", "<IndexYear>", "1520", "1518", "1517", "<datetime64[Y]>"], "IndexYear.sample()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.sample(2, seed=0)", "<IndexYear>", "1520", "1518", "<datetime64[Y]>"], "IndexYear.sort()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.sort()", "<IndexYear>", "1517", "1518", "1520", "<datetime64[Y]>", ">>> ix.sort(ascending=False)", "<IndexYear>", "1520", "1518", "1517", "<datetime64[Y]>"], "IndexYear.std()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.sum()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.tail()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.tail(2)", "<IndexYear>", "1520", "1518", "<datetime64[Y]>"], "IndexYear.union()": [">>> ix1 = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix1", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix2 = sf.IndexYear(('2022', '2021', '2018'))", ">>> ix2", "<IndexYear>", "2022", "2021", "2018", "<datetime64[Y]>", ">>> ix1.union(ix2)", "<IndexYear>", "1517", "1518", "1520", "2018", "2021", "2022", "<datetime64[Y]>"], "IndexYear.unique()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYear>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.unique()", "['1620'  'NaT' '1619']"], "IndexYear.values_at_depth()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.values_at_depth(0)", "['1517' '1520' '1518']"], "IndexYear.var()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.__contains__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.__contains__('a')", "ValueError('Error parsing datetime string \"a\" at position 0')", ">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.__contains__('1518')", "True"], "IndexYear.__iter__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517'), numpy.datetime64('1520'), numpy.datetime64('1518'))", ">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517'), numpy.datetime64('1520'), numpy.datetime64('1518'))"], "IndexYear.__reversed__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1518'), numpy.datetime64('1520'), numpy.datetime64('1517'))", ">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1518'), numpy.datetime64('1520'), numpy.datetime64('1517'))"], "IndexYear.values": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.values", "['1517' '1520' '1518']", ">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.values", "['1517' '1520' '1518']"], "IndexYear.interface": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYear>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name  group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexYear Constructor          Initializer. Args...", "from_date_range(start, stop, step... IndexYear Constructor          Get an IndexYearM...", "from_labels(labels, *, name)         IndexYear Constructor          Construct an Inde...", "from_pandas(value)                   IndexYear Constructor          Given a Pandas in...", "from_year_month_range(start, stop... IndexYear Constructor          Get an IndexYearM...", "from_year_range(start, stop, step... IndexYear Constructor          Get an IndexDate ...", "to_html(config, style_config)        IndexYear Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexYear Exporter             Return a complete...", "to_pandas()                          IndexYear Exporter             Return a Pandas I...", "to_series()                          IndexYear Exporter             Return a Series w...", "to_visidata()                        IndexYear Exporter             Open an interacti...", "STATIC                               IndexYear Attribute            bool(x) -> bool R...", "depth                                IndexYear Attribute            int([x]) -> integ...", "dtype                                IndexYear Attribute            Return the dtype ...", "index_types                          IndexYear Attribute            Return a Series o...", "memory                               IndexYear Attribute            Return a MemoryDi...", "mloc                                 IndexYear Attribute            The memory locati...", "...                                  ...       ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexYear Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexYear Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexYear Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexYear Accessor Hashlib", "via_hashlib(include_name, include... IndexYear Accessor Hashlib", "via_hashlib(include_name, include... IndexYear Accessor Hashlib", "via_hashlib(include_name, include... IndexYear Accessor Hashlib", "via_hashlib(include_name, include... IndexYear Accessor Hashlib", "via_hashlib(include_name, include... IndexYear Accessor Hashlib", "via_hashlib(include_name, include... IndexYear Accessor Hashlib", "via_hashlib(include_name, include... IndexYear Accessor Hashlib", "via_hashlib(include_name, include... IndexYear Accessor Hashlib", "via_type_clinic.to_hint()            IndexYear Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexYear Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexYear Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexYear Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexYear Accessor Type Clinic Return a compact ...", "<<U90>                               <<U9>     <<U27>               <<U83>"], "IndexYear.__repr__()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> repr(ix)", "<IndexYear>", "1620", "NaT", "1619", "<datetime64[Y]>"], "IndexYear.__str__()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> str(ix)", "<IndexYear>", "1620", "NaT", "1619", "<datetime64[Y]>"], "IndexYear.display()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix.display()", "<IndexYear>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620", "NaT", "1619"], "IndexYear.display_tall()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix.display_tall()", "<IndexYear>", "1620", "NaT", "1619", "<datetime64[Y]>"], "IndexYear.display_wide()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix.display_wide()", "<IndexYear>", "1620", "NaT", "1619", "<datetime64[Y]>"], "IndexYear.drop.iloc[]": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.drop.iloc[1]", "<IndexYear>", "1517", "1518", "<datetime64[Y]>", ">>> ix.drop.iloc[1:]", "<IndexYear>", "1517", "<datetime64[Y]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexYear>", "1520", "<datetime64[Y]>"], "IndexYear.drop.loc[]": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.drop.loc['1518']", "<IndexYear>", "1517", "1520", "<datetime64[Y]>", ">>> ix.drop.loc['1518':]", "<IndexYear>", "1517", "1520", "<datetime64[Y]>"], "IndexYear.[]": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix[1]", "1520", ">>> ix[1:]", "<IndexYear>", "1520", "1518", "<datetime64[Y]>", ">>> ix[[0, 2]]", "<IndexYear>", "1517", "1518", "<datetime64[Y]>"], "IndexYear.iloc[]": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.iloc[1]", "1520", ">>> ix.iloc[1:]", "<IndexYear>", "1520", "1518", "<datetime64[Y]>", ">>> ix.iloc[[0, 2]]", "<IndexYear>", "1517", "1518", "<datetime64[Y]>"], "IndexYear.loc[]": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.loc['1518']", "1518", ">>> ix.loc['1518':]", "<IndexYear>", "1518", "<datetime64[Y]>"], "IndexYear.iter_label()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517'), numpy.datetime64('1520'), numpy.datetime64('1518'))"], "IndexYear.iter_label().apply()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1520 1518]"], "IndexYear.iter_label().apply_iter()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 1, 1, 0, 0), datetime.datetime(1520, 1, 1, 0, 0), datetime.datetime(1518, 1, 1, 0, 0))"], "IndexYear.iter_label().apply_iter_items()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 1, 1, 0, 0)), (1, datetime.datetime(1520, 1, 1, 0, 0)), (2, datetime.datetime(1518, 1, 1, 0, 0)))"], "IndexYear.iter_label().apply_pool()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[1 1 1]"], "IndexYear.__add__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix + 2", "['1519' '1522' '1520']"], "IndexYear.__and__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYear.__eq__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix == '1518'", "[False False  True]"], "IndexYear.__floordiv__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix // '1518'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.__ge__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix >= '1518'", "[False  True  True]"], "IndexYear.__gt__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix > '1518'", "[False  True False]"], "IndexYear.__le__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix <= '1518'", "[ True False  True]"], "IndexYear.__lt__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix < '1518'", "[ True False False]"], "IndexYear.__matmul__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexYear.__mod__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix % '1518'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.__mul__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix * '1518'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.__ne__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix != '1518'", "[ True  True False]"], "IndexYear.__or__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYear.__pow__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix ** '1518'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYear.__radd__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> '1518' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.__rfloordiv__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> '1518' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.__rmatmul__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexYear.__rmul__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> '1518' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.__rshift__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYear.__rsub__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> '1518' - ix", "[ 1 -2  0]"], "IndexYear.__rtruediv__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> '1518' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.__sub__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix - 2", "['1515' '1518' '1516']"], "IndexYear.__truediv__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix / '1518'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYear.__xor__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYear.__abs__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexYear.__invert__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYear.__neg__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexYear.__pos__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexYear.via_dt.__call__()": [">>> ix = sf.IndexYear(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYear>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1619]"], "IndexYear.via_dt.year": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.year", "[1517 1520 1518]"], "IndexYear.via_dt.year_month": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.year_month", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.year_quarter": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.year_quarter", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.month": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.month", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.day": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.day", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.hour": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexYear.via_dt.minute": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexYear.via_dt.second": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexYear.via_dt.weekday()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.weekday()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.quarter()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.quarter()", "[1 1 1]"], "IndexYear.via_dt.is_month_end()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.is_month_end()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.is_month_start()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.is_month_start()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.is_year_end()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.is_year_end()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.is_year_start()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.is_year_start()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.is_quarter_end()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.is_quarter_end()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.is_quarter_start()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.is_quarter_start()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.timetuple()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.timetuple()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.isoformat()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.isoformat()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.fromisoformat()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[Y]) for operation on string types')"], "IndexYear.via_dt.strftime()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYear.via_dt.strptime()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[Y]) for operation on string types')"], "IndexYear.via_dt.strpdate()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[Y]) for operation on string types')"], "IndexYear.via_str.__getitem__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str[-1]", "['7' '0' '8']"], "IndexYear.via_str.capitalize()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.capitalize()", "['1517' '1520' '1518']"], "IndexYear.via_str.center()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.center(8)", "['  1517  ' '  1520  ' '  1518  ']"], "IndexYear.via_str.contains()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexYear.via_str.count()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexYear.via_str.decode()": [">>> ix = sf.IndexYear(('1517', '1520', '1518')).astype(bytes)", ">>> ix", "<Index>", "b'1517'", "b'1520'", "b'1518'", "<|S22>", ">>> ix.via_str.decode()", "['1517' '1520' '1518']"], "IndexYear.via_str.encode()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.encode()", "[b'1517' b'1520' b'1518']"], "IndexYear.via_str.endswith()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexYear.via_str.find()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexYear.via_str.format()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.format('{:-^10}')", "['---1517---' '---1520---' '---1518---']"], "IndexYear.via_str.index()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexYear.via_str.isalnum()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isalnum()", "[ True  True  True]"], "IndexYear.via_str.isalpha()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexYear.via_str.isdecimal()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isdecimal()", "[ True  True  True]"], "IndexYear.via_str.isdigit()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isdigit()", "[ True  True  True]"], "IndexYear.via_str.islower()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexYear.via_str.isnumeric()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isnumeric()", "[ True  True  True]"], "IndexYear.via_str.isspace()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexYear.via_str.istitle()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.istitle()", "[False False False]"], "IndexYear.via_str.isupper()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isupper()", "[False False False]"], "IndexYear.via_str.ljust()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.ljust(8)", "['1517    ' '1520    ' '1518    ']"], "IndexYear.via_str.len()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.len()", "[4 4 4]"], "IndexYear.via_str.lower()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.lower()", "['1517' '1520' '1518']"], "IndexYear.via_str.lstrip()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.lstrip()", "['1517' '1520' '1518']"], "IndexYear.via_str.partition()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.partition('X')", "[('1517', '', '') ('1520', '', '') ('1518', '', '')]"], "IndexYear.via_str.replace()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.replace('X', '*')", "['1517' '1520' '1518']"], "IndexYear.via_str.rfind()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexYear.via_str.rindex()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexYear.via_str.rjust()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.rjust(8)", "['    1517' '    1520' '    1518']"], "IndexYear.via_str.rpartition()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517') ('', '', '1520') ('', '', '1518')]"], "IndexYear.via_str.rsplit()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.rsplit('X')", "[('1517',) ('1520',) ('1518',)]"], "IndexYear.via_str.rstrip()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.rstrip()", "['1517' '1520' '1518']"], "IndexYear.via_str.split()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.split('X')", "[('1517',) ('1520',) ('1518',)]"], "IndexYear.via_str.startswith()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexYear.via_str.strip()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.strip()", "['1517' '1520' '1518']"], "IndexYear.via_str.swapcase()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.swapcase()", "['1517' '1520' '1518']"], "IndexYear.via_str.title()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.title()", "['1517' '1520' '1518']"], "IndexYear.via_str.upper()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.upper()", "['1517' '1520' '1518']"], "IndexYear.via_str.zfill()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.zfill(8)", "['00001517' '00001520' '00001518']"], "IndexYear.via_re().search()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexYear.via_re().match()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexYear.via_re().fullmatch()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexYear.via_re().split()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7') ('', '5', '0') ('', '5', '8')]"], "IndexYear.via_re().findall()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1') ('1', '2') ('1', '1')]"], "IndexYear.via_re().sub()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7' '==5==0' '==5==8']"], "IndexYear.via_re().subn()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517', 1) ('==520', 1) ('==518', 1)]"], "IndexYear.via_hashlib().to_bytes()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexYear;\\xfe\\xff\\xff\\xff\\xff\\xff\\xff>\\xfe\\xff\\xff\\xff\\xff\\xff\\xff<\\xfe\\xff\\xff\\xff\\xff\\xff\\xff'"], "IndexYear.via_hashlib().md5()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "3a8897ef1c16808931d633e4480b125f"], "IndexYear.via_hashlib().sha256()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "4d593d5c6a230582152dc5fe8129959cb3b3e3b5a731e0f9c748a5ee729c07ca"], "IndexYear.via_hashlib().sha512()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "f9c11277f71ecf908cd1c619883988f5922413468d21120a456f74d2dfaeffdd308f68e30a7524a8cd95691fdffea88b1059d889a62b2793ad9f3d28c544147a"], "IndexYear.via_hashlib().sha3_256()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "5ceba64aae45d05459c400186a8d3695874926e36096ec1ab60cb0d092034506"], "IndexYear.via_hashlib().sha3_512()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "02a3c1b3bd4affd624e56018e78018e0a46bf7f8dee2b5ee96c608de0e7cee828a9c496eb11f46c3fdc0809146a1c065f0c3c5ac15c07edbcea9887bf12834f7"], "IndexYear.via_hashlib().shake_128()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "940f4d75cf379472"], "IndexYear.via_hashlib().shake_256()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "b4d68f10e0fcec18"], "IndexYear.via_hashlib().blake2b()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "33c76bd0222e16ffb8a9a5bdfa0026529f7b57f2cfe5e74e64906f955565a2722bf9ec52f3a649d3ce8b9c72176cfdb89b9e89855f69bda0dace0eb3b72d5f61"], "IndexYear.via_hashlib().blake2s()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "c8c58b38f2041317271a2765dca2963aade0f9c8c76cbdeca372394b4aa6f745"], "IndexYear.via_values.apply()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYear.via_values.__array_ufunc__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYear.via_values.__call__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYear.via_type_clinic.to_hint()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexYear'>"], "IndexYear.via_type_clinic.check()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexYear.via_type_clinic.__call__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexYear.via_type_clinic.__repr__()": [">>> ix = sf.IndexYear(('1517', '1520', '1518'))", ">>> ix", "<IndexYear>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_type_clinic", "IndexYear"], "IndexYearGO.__init__()": [">>> sf.IndexYearGO(('1517', '1520', '1518'))", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYearGO.from_date_range()": [">>> sf.IndexYearGO.from_date_range('2021-12-30', '2022-01-02')", "<IndexYearGO>", "2021", "2022", "<datetime64[Y]>"], "IndexYearGO.from_labels()": [">>> sf.IndexYearGO.from_labels(('1517', '1520', '1518'))", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYearGO.from_pandas()": [">>> ix = pd.Index(('1517', '1520', '1518'))", ">>> sf.IndexYearGO.from_pandas(ix)", "<IndexGO>", "1517", "1520", "1518", "<object>"], "IndexYearGO.from_year_month_range()": [">>> sf.IndexYearGO.from_year_month_range('2021-12', '2022-01')", "<IndexYearGO>", "2021", "2022", "<datetime64[Y]>"], "IndexYearGO.from_year_range()": [">>> sf.IndexYearGO.from_year_range('2021', '2022')", "<IndexYearGO>", "2021", "2022", "<datetime64[Y]>"], "IndexYearGO.to_pandas()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.to_pandas()", "NotImplementedError('Pandas does not support a year type, and it is ambiguous if a date proxy should be the first of the year or the last of the year.')"], "IndexYearGO.to_series()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517", "1        1520", "2        1518", "<int64>  <datetime64[Y]>"], "IndexYearGO.STATIC": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix.STATIC", "False"], "IndexYearGO.depth": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix.depth", "1"], "IndexYearGO.dtype": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix.dtype", "datetime64[Y]"], "IndexYearGO.index_types": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexYearGO>", "<object> <object>"], "IndexYearGO.memory": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix.memory", "          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Name      16   B     16   B     16  B     16   B     16  B     16  B", "Map       472  B     472  B     472 B     472  B     472 B     472 B", "Labels    136  B     152  B     24  B     136  B     152 B     24  B", "Positions 112  B     128  B     0   B     8.22 KB    152 B     24  B", "Total     1.14 KB    1.17 KB    944 B     9.25 KB    1.2 KB    968 B"], "IndexYearGO.name": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix.name"], "IndexYearGO.names": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix.names", "('__index0__',)"], "IndexYearGO.nbytes": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix.nbytes", "24"], "IndexYearGO.ndim": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix.ndim", "1"], "IndexYearGO.positions": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix.positions", "[0 1 2]"], "IndexYearGO.shape": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix.shape", "(3,)"], "IndexYearGO.size": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix.size", "3"], "IndexYearGO.__array__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.__array__()", "['1517' '1520' '1518']"], "IndexYearGO.__array_ufunc__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[Y]')))"], "IndexYearGO.__bool__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexYearGO.__copy__()": [">>> import copy", ">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> copy.copy(ix)", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYearGO.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> copy.deepcopy(ix)", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYearGO.__len__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> len(ix)", "3"], "IndexYearGO.all()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.all()", "True"], "IndexYearGO.any()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.any()", "True"], "IndexYearGO.append()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.append('f')", "GrowOnlyInvalid('Cannot perform an in-place grow-only operation due to the class of the columns Index.')", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYearGO.astype()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.astype(str)", "<IndexGO>", "1517", "1520", "1518", "<<U22>"], "IndexYearGO.copy()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.copy()", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYearGO.cumprod()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.cumsum()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.difference()": [">>> ix1 = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix1", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix2 = sf.IndexYearGO(('2022', '2021', '2018'))", ">>> ix2", "<IndexYearGO>", "2022", "2021", "2018", "<datetime64[Y]>", ">>> ix1.difference(ix2)", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYearGO.dropfalsy()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYearGO>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.dropfalsy()", "<IndexYearGO>", "1620", "1619", "<datetime64[Y]>"], "IndexYearGO.dropna()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYearGO>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.dropna()", "<IndexYearGO>", "1620", "1619", "<datetime64[Y]>"], "IndexYearGO.equals()": [">>> ix1 = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix1", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix2 = sf.IndexYearGO(('2022', '2021', '2018'))", ">>> ix2", "<IndexYearGO>", "2022", "2021", "2018", "<datetime64[Y]>", ">>> ix1.equals(ix2)", "False"], "IndexYearGO.extend()": [">>> ix1 = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix1", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix2 = sf.IndexYearGO(('2022', '2021', '2018'))", ">>> ix2", "<IndexYearGO>", "2022", "2021", "2018", "<datetime64[Y]>", ">>> ix1.extend(ix2)", ">>> ix1", "<IndexYearGO>", "1517", "1520", "1518", "2022", "2021", "2018", "<datetime64[Y]>"], "IndexYearGO.fillfalsy()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYearGO>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexYearGO.fillna()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYearGO>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.fillna(0)", "<IndexYearGO>", "1620", "1970", "1619", "<datetime64[Y]>"], "IndexYearGO.head()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.head(2)", "<IndexYearGO>", "1517", "1520", "<datetime64[Y]>"], "IndexYearGO.iloc_searchsorted()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexYearGO.intersection()": [">>> ix1 = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix1", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix2 = sf.IndexYearGO(('2022', '2021', '2018'))", ">>> ix2", "<IndexYearGO>", "2022", "2021", "2018", "<datetime64[Y]>", ">>> ix1.intersection(ix2)", "<IndexYearGO>", "<datetime64[Y]>"], "IndexYearGO.isfalsy()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexYearGO.isin()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.isin(('1518',))", "[False False False]"], "IndexYearGO.isna()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix.isna()", "[False  True False]"], "IndexYearGO.label_widths_at_depth()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517'), 1), (numpy.datetime64('1520'), 1), (numpy.datetime64('1518'), 1))"], "IndexYearGO.level_add()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.level_add('A')", "<IndexHierarchyGO>", "A                  1517", "A                  1520", "A                  1518", "<<U1>              <datetime64[Y]>"], "IndexYearGO.loc_searchsorted()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexYearGO.loc_to_iloc()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.loc_to_iloc('1518')", "2", ">>> ix.loc_to_iloc(['1517', '1518'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1520', None))", "slice(1, None, None)"], "IndexYearGO.max()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.max()", "1520"], "IndexYearGO.mean()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.median()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.min()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.min()", "1517"], "IndexYearGO.notfalsy()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexYearGO.notna()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix.notna()", "[ True False  True]"], "IndexYearGO.prod()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.relabel()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "ErrorInitIndexNonUnique('Labels have non-unique values. Examples from iterators not are available.')"], "IndexYearGO.rename()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.rename('y')", "<IndexYearGO: y>", "1517", "1520", "1518", "<datetime64[Y]>"], "IndexYearGO.roll()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.roll(2)", "<IndexYearGO>", "1520", "1518", "1517", "<datetime64[Y]>"], "IndexYearGO.sample()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.sample(2, seed=0)", "<IndexYearGO>", "1520", "1518", "<datetime64[Y]>"], "IndexYearGO.sort()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.sort()", "<IndexYearGO>", "1517", "1518", "1520", "<datetime64[Y]>", ">>> ix.sort(ascending=False)", "<IndexYearGO>", "1520", "1518", "1517", "<datetime64[Y]>"], "IndexYearGO.std()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.sum()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.tail()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.tail(2)", "<IndexYearGO>", "1520", "1518", "<datetime64[Y]>"], "IndexYearGO.union()": [">>> ix1 = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix1", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix2 = sf.IndexYearGO(('2022', '2021', '2018'))", ">>> ix2", "<IndexYearGO>", "2022", "2021", "2018", "<datetime64[Y]>", ">>> ix1.union(ix2)", "<IndexYearGO>", "1517", "1518", "1520", "2018", "2021", "2022", "<datetime64[Y]>"], "IndexYearGO.unique()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYearGO>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.unique()", "['1620'  'NaT' '1619']"], "IndexYearGO.values_at_depth()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.values_at_depth(0)", "['1517' '1520' '1518']"], "IndexYearGO.var()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.__contains__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.__contains__('a')", "ValueError('Error parsing datetime string \"a\" at position 0')", ">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.__contains__('1518')", "True"], "IndexYearGO.__iter__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517'), numpy.datetime64('1520'), numpy.datetime64('1518'))", ">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517'), numpy.datetime64('1520'), numpy.datetime64('1518'))"], "IndexYearGO.__reversed__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1518'), numpy.datetime64('1520'), numpy.datetime64('1517'))", ">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1518'), numpy.datetime64('1520'), numpy.datetime64('1517'))"], "IndexYearGO.values": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.values", "['1517' '1520' '1518']", ">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.values", "['1517' '1520' '1518']"], "IndexYearGO.interface": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYearGO>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name    group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexYearGO Constructor          Initializer. Args...", "from_date_range(start, stop, step... IndexYearGO Constructor          Get an IndexYearM...", "from_labels(labels, *, name)         IndexYearGO Constructor          Construct an Inde...", "from_pandas(value)                   IndexYearGO Constructor          Given a Pandas in...", "from_year_month_range(start, stop... IndexYearGO Constructor          Get an IndexYearM...", "from_year_range(start, stop, step... IndexYearGO Constructor          Get an IndexDate ...", "to_html(config, style_config)        IndexYearGO Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexYearGO Exporter             Return a complete...", "to_pandas()                          IndexYearGO Exporter             Return a Pandas I...", "to_series()                          IndexYearGO Exporter             Return a Series w...", "to_visidata()                        IndexYearGO Exporter             Open an interacti...", "STATIC                               IndexYearGO Attribute            bool(x) -> bool R...", "depth                                IndexYearGO Attribute            int([x]) -> integ...", "dtype                                IndexYearGO Attribute            Return the dtype ...", "index_types                          IndexYearGO Attribute            Return a Series o...", "memory                               IndexYearGO Attribute            Return a MemoryDi...", "mloc                                 IndexYearGO Attribute            The memory locati...", "...                                  ...         ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexYearGO Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexYearGO Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexYearGO Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexYearGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearGO Accessor Hashlib", "via_type_clinic.to_hint()            IndexYearGO Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexYearGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexYearGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexYearGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexYearGO Accessor Type Clinic Return a compact ...", "<<U90>                               <<U11>      <<U27>               <<U83>"], "IndexYearGO.__repr__()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> repr(ix)", "<IndexYearGO>", "1620", "NaT", "1619", "<datetime64[Y]>"], "IndexYearGO.__str__()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> str(ix)", "<IndexYearGO>", "1620", "NaT", "1619", "<datetime64[Y]>"], "IndexYearGO.display()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix.display()", "<IndexYearGO>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620", "NaT", "1619"], "IndexYearGO.display_tall()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix.display_tall()", "<IndexYearGO>", "1620", "NaT", "1619", "<datetime64[Y]>"], "IndexYearGO.display_wide()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix.display_wide()", "<IndexYearGO>", "1620", "NaT", "1619", "<datetime64[Y]>"], "IndexYearGO.drop.iloc[]": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.drop.iloc[1]", "<IndexYearGO>", "1517", "1518", "<datetime64[Y]>", ">>> ix.drop.iloc[1:]", "<IndexYearGO>", "1517", "<datetime64[Y]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexYearGO>", "1520", "<datetime64[Y]>"], "IndexYearGO.drop.loc[]": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.drop.loc['1518']", "<IndexYearGO>", "1517", "1520", "<datetime64[Y]>", ">>> ix.drop.loc['1518':]", "<IndexYearGO>", "1517", "1520", "<datetime64[Y]>"], "IndexYearGO.[]": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix[1]", "1520", ">>> ix[1:]", "<IndexYearGO>", "1520", "1518", "<datetime64[Y]>", ">>> ix[[0, 2]]", "<IndexYearGO>", "1517", "1518", "<datetime64[Y]>"], "IndexYearGO.iloc[]": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.iloc[1]", "1520", ">>> ix.iloc[1:]", "<IndexYearGO>", "1520", "1518", "<datetime64[Y]>", ">>> ix.iloc[[0, 2]]", "<IndexYearGO>", "1517", "1518", "<datetime64[Y]>"], "IndexYearGO.loc[]": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.loc['1518']", "1518", ">>> ix.loc['1518':]", "<IndexYearGO>", "1518", "<datetime64[Y]>"], "IndexYearGO.iter_label()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517'), numpy.datetime64('1520'), numpy.datetime64('1518'))"], "IndexYearGO.iter_label().apply()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1520 1518]"], "IndexYearGO.iter_label().apply_iter()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 1, 1, 0, 0), datetime.datetime(1520, 1, 1, 0, 0), datetime.datetime(1518, 1, 1, 0, 0))"], "IndexYearGO.iter_label().apply_iter_items()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 1, 1, 0, 0)), (1, datetime.datetime(1520, 1, 1, 0, 0)), (2, datetime.datetime(1518, 1, 1, 0, 0)))"], "IndexYearGO.iter_label().apply_pool()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[1 1 1]"], "IndexYearGO.__add__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix + 2", "['1519' '1522' '1520']"], "IndexYearGO.__and__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearGO.__eq__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix == '1518'", "[False False  True]"], "IndexYearGO.__floordiv__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix // '1518'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.__ge__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix >= '1518'", "[False  True  True]"], "IndexYearGO.__gt__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix > '1518'", "[False  True False]"], "IndexYearGO.__le__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix <= '1518'", "[ True False  True]"], "IndexYearGO.__lt__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix < '1518'", "[ True False False]"], "IndexYearGO.__matmul__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexYearGO.__mod__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix % '1518'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.__mul__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix * '1518'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.__ne__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix != '1518'", "[ True  True False]"], "IndexYearGO.__or__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearGO.__pow__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix ** '1518'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearGO.__radd__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> '1518' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.__rfloordiv__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> '1518' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.__rmatmul__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexYearGO.__rmul__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> '1518' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.__rshift__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearGO.__rsub__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> '1518' - ix", "[ 1 -2  0]"], "IndexYearGO.__rtruediv__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> '1518' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.__sub__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix - 2", "['1515' '1518' '1516']"], "IndexYearGO.__truediv__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix / '1518'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[Y]'), dtype('<M8[Y]')))"], "IndexYearGO.__xor__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearGO.__abs__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexYearGO.__invert__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearGO.__neg__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexYearGO.__pos__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexYearGO.via_dt.__call__()": [">>> ix = sf.IndexYearGO(('1620', 'NaT', '1619'))", ">>> ix", "<IndexYearGO>", "1620", "NaT", "1619", "<datetime64[Y]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1619]"], "IndexYearGO.via_dt.year": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.year", "[1517 1520 1518]"], "IndexYearGO.via_dt.year_month": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.year_month", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.year_quarter": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.year_quarter", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.month": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.month", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.day": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.day", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.hour": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexYearGO.via_dt.minute": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexYearGO.via_dt.second": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexYearGO.via_dt.weekday()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.weekday()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.quarter()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.quarter()", "[1 1 1]"], "IndexYearGO.via_dt.is_month_end()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.is_month_end()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.is_month_start()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.is_month_start()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.is_year_end()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.is_year_end()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.is_year_start()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.is_year_start()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.is_quarter_end()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.is_quarter_end()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.is_quarter_start()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.is_quarter_start()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.timetuple()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.timetuple()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.isoformat()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.isoformat()", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.fromisoformat()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[Y]) for operation on string types')"], "IndexYearGO.via_dt.strftime()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "RuntimeError('invalid dtype (datetime64[Y]) for date operation')"], "IndexYearGO.via_dt.strptime()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[Y]) for operation on string types')"], "IndexYearGO.via_dt.strpdate()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[Y]) for operation on string types')"], "IndexYearGO.via_str.__getitem__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str[-1]", "['7' '0' '8']"], "IndexYearGO.via_str.capitalize()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.capitalize()", "['1517' '1520' '1518']"], "IndexYearGO.via_str.center()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.center(8)", "['  1517  ' '  1520  ' '  1518  ']"], "IndexYearGO.via_str.contains()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexYearGO.via_str.count()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexYearGO.via_str.decode()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518')).astype(bytes)", ">>> ix", "<IndexGO>", "b'1517'", "b'1520'", "b'1518'", "<|S22>", ">>> ix.via_str.decode()", "['1517' '1520' '1518']"], "IndexYearGO.via_str.encode()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.encode()", "[b'1517' b'1520' b'1518']"], "IndexYearGO.via_str.endswith()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexYearGO.via_str.find()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexYearGO.via_str.format()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.format('{:-^10}')", "['---1517---' '---1520---' '---1518---']"], "IndexYearGO.via_str.index()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexYearGO.via_str.isalnum()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isalnum()", "[ True  True  True]"], "IndexYearGO.via_str.isalpha()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexYearGO.via_str.isdecimal()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isdecimal()", "[ True  True  True]"], "IndexYearGO.via_str.isdigit()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isdigit()", "[ True  True  True]"], "IndexYearGO.via_str.islower()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexYearGO.via_str.isnumeric()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isnumeric()", "[ True  True  True]"], "IndexYearGO.via_str.isspace()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexYearGO.via_str.istitle()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.istitle()", "[False False False]"], "IndexYearGO.via_str.isupper()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.isupper()", "[False False False]"], "IndexYearGO.via_str.ljust()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.ljust(8)", "['1517    ' '1520    ' '1518    ']"], "IndexYearGO.via_str.len()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.len()", "[4 4 4]"], "IndexYearGO.via_str.lower()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.lower()", "['1517' '1520' '1518']"], "IndexYearGO.via_str.lstrip()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.lstrip()", "['1517' '1520' '1518']"], "IndexYearGO.via_str.partition()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.partition('X')", "[('1517', '', '') ('1520', '', '') ('1518', '', '')]"], "IndexYearGO.via_str.replace()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.replace('X', '*')", "['1517' '1520' '1518']"], "IndexYearGO.via_str.rfind()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexYearGO.via_str.rindex()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexYearGO.via_str.rjust()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.rjust(8)", "['    1517' '    1520' '    1518']"], "IndexYearGO.via_str.rpartition()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517') ('', '', '1520') ('', '', '1518')]"], "IndexYearGO.via_str.rsplit()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.rsplit('X')", "[('1517',) ('1520',) ('1518',)]"], "IndexYearGO.via_str.rstrip()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.rstrip()", "['1517' '1520' '1518']"], "IndexYearGO.via_str.split()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.split('X')", "[('1517',) ('1520',) ('1518',)]"], "IndexYearGO.via_str.startswith()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexYearGO.via_str.strip()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.strip()", "['1517' '1520' '1518']"], "IndexYearGO.via_str.swapcase()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.swapcase()", "['1517' '1520' '1518']"], "IndexYearGO.via_str.title()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.title()", "['1517' '1520' '1518']"], "IndexYearGO.via_str.upper()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.upper()", "['1517' '1520' '1518']"], "IndexYearGO.via_str.zfill()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_str.zfill(8)", "['00001517' '00001520' '00001518']"], "IndexYearGO.via_re().search()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexYearGO.via_re().match()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexYearGO.via_re().fullmatch()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexYearGO.via_re().split()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7') ('', '5', '0') ('', '5', '8')]"], "IndexYearGO.via_re().findall()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1') ('1', '2') ('1', '1')]"], "IndexYearGO.via_re().sub()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7' '==5==0' '==5==8']"], "IndexYearGO.via_re().subn()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517', 1) ('==520', 1) ('==518', 1)]"], "IndexYearGO.via_hashlib().to_bytes()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexYearGO;\\xfe\\xff\\xff\\xff\\xff\\xff\\xff>\\xfe\\xff\\xff\\xff\\xff\\xff\\xff<\\xfe\\xff\\xff\\xff\\xff\\xff\\xff'"], "IndexYearGO.via_hashlib().md5()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "209b3a6244ce83fef4c9540a5be2f56d"], "IndexYearGO.via_hashlib().sha256()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "f47407988d36715292a902e0c4a13af456c6f1c3711ba1a28e59662416d9b564"], "IndexYearGO.via_hashlib().sha512()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "3bb2720597ec4b14336fc897e6fc298127d04ff76795013548b947aa8e5030a90369d3e7ac4704d381ebae86fed0f193f45f24fbc81561211782298f5a359510"], "IndexYearGO.via_hashlib().sha3_256()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "f1a811b3603e73834cdb69c76ceab20e346e8e08ffe8e65e004af823dfd4520b"], "IndexYearGO.via_hashlib().sha3_512()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "a9928be855522062c4013149192477eb882da82928ab7833e583f9c6a9593e014a6430532950cbd0e50dea5a9139e078bcd9dc954016f9c33af19204fc5987db"], "IndexYearGO.via_hashlib().shake_128()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "21d6260b46890069"], "IndexYearGO.via_hashlib().shake_256()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "99af2c2211e50205"], "IndexYearGO.via_hashlib().blake2b()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "7f02c1aa11c4020002e0dd395498dc965c08726636d940d9553d50763caa4d0eb150b121ca1fb85870e530e4e2f6c32fded1f87490ce38c20ca39b0953f2bf36"], "IndexYearGO.via_hashlib().blake2s()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "219f1cda6733b1cd9b88d6814894c15239ac2176bfef71012a8873bf0c8c6113"], "IndexYearGO.via_values.apply()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearGO.via_values.__array_ufunc__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearGO.via_values.__call__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearGO.via_type_clinic.to_hint()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexYearGO'>"], "IndexYearGO.via_type_clinic.check()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexYearGO.via_type_clinic.__call__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexYearGO.via_type_clinic.__repr__()": [">>> ix = sf.IndexYearGO(('1517', '1520', '1518'))", ">>> ix", "<IndexYearGO>", "1517", "1520", "1518", "<datetime64[Y]>", ">>> ix.via_type_clinic", "IndexYearGO"], "IndexYearMonth.__init__()": [">>> sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonth.from_date_range()": [">>> sf.IndexYearMonth.from_date_range('2021-12-30', '2022-01-02')", "<IndexYearMonth>", "2021-12", "2022-01", "<datetime64[M]>"], "IndexYearMonth.from_labels()": [">>> sf.IndexYearMonth.from_labels(('1517-04', '1517-12', '1517-06'))", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonth.from_pandas()": [">>> ix = pd.Index(('1517-04', '1517-12', '1517-06'))", ">>> sf.IndexYearMonth.from_pandas(ix)", "<Index>", "1517-04", "1517-12", "1517-06", "<object>"], "IndexYearMonth.from_year_month_range()": [">>> sf.IndexYearMonth.from_year_month_range('2021-12', '2022-01')", "<IndexYearMonth>", "2021-12", "2022-01", "<datetime64[M]>"], "IndexYearMonth.from_year_range()": [">>> sf.IndexYearMonth.from_year_range('2021', '2022')", "<IndexYearMonth>", "2021-01", "2021-02", "2021-03", "2021-04", "2021-05", "2021-06", "2021-07", "2021-08", "2021-09", "2021-10", "2021-11", "2021-12", "2022-01", "2022-02", "2022-03", "2022-04", "2022-05", "2022-06", "2022-07", "2022-08", "2022-09", "2022-10", "2022-11", "2022-12", "<datetime64[M]>"], "IndexYearMonth.to_pandas()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.to_pandas()", "NotImplementedError('Pandas does not support a year month type, and it is ambiguous if a date proxy should be the first of the month or the last of the month.')"], "IndexYearMonth.to_series()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04", "1        1517-12", "2        1517-06", "<int64>  <datetime64[M]>"], "IndexYearMonth.STATIC": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix.STATIC", "True"], "IndexYearMonth.depth": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix.depth", "1"], "IndexYearMonth.dtype": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix.dtype", "datetime64[M]"], "IndexYearMonth.index_types": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexYearMonth>", "<object> <object>"], "IndexYearMonth.memory": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix.memory", "          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Name      16  B     16  B     16  B     16   B     16  B     16  B", "Map       472 B     472 B     472 B     472  B     472 B     472 B", "Labels    136 B     152 B     24  B     136  B     152 B     24  B", "Positions 112 B     128 B     0   B     8.22 KB    152 B     24  B", "Total     844 B     876 B     620 B     8.93 KB    900 B     644 B"], "IndexYearMonth.name": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix.name"], "IndexYearMonth.names": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix.names", "('__index0__',)"], "IndexYearMonth.nbytes": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix.nbytes", "24"], "IndexYearMonth.ndim": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix.ndim", "1"], "IndexYearMonth.positions": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix.positions", "[0 1 2]"], "IndexYearMonth.shape": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix.shape", "(3,)"], "IndexYearMonth.size": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix.size", "3"], "IndexYearMonth.__array__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.__array__()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.__array_ufunc__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[M]')))"], "IndexYearMonth.__bool__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexYearMonth.__copy__()": [">>> import copy", ">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> copy.copy(ix)", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonth.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> copy.deepcopy(ix)", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonth.__len__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> len(ix)", "3"], "IndexYearMonth.all()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.all()", "True"], "IndexYearMonth.any()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.any()", "True"], "IndexYearMonth.astype()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.astype(str)", "<Index>", "1517-04", "1517-12", "1517-06", "<<U25>"], "IndexYearMonth.copy()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.copy()", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonth.cumprod()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.cumsum()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.difference()": [">>> ix1 = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix1", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix2 = sf.IndexYearMonth(('2022-04', '2021-12', '2022-06'))", ">>> ix2", "<IndexYearMonth>", "2022-04", "2021-12", "2022-06", "<datetime64[M]>", ">>> ix1.difference(ix2)", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonth.dropfalsy()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonth>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.dropfalsy()", "<IndexYearMonth>", "1620-09", "1620-11", "<datetime64[M]>"], "IndexYearMonth.dropna()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonth>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.dropna()", "<IndexYearMonth>", "1620-09", "1620-11", "<datetime64[M]>"], "IndexYearMonth.equals()": [">>> ix1 = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix1", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix2 = sf.IndexYearMonth(('2022-04', '2021-12', '2022-06'))", ">>> ix2", "<IndexYearMonth>", "2022-04", "2021-12", "2022-06", "<datetime64[M]>", ">>> ix1.equals(ix2)", "False"], "IndexYearMonth.fillfalsy()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonth>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexYearMonth.fillna()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonth>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.fillna(0)", "<IndexYearMonth>", "1620-09", "1970-01", "1620-11", "<datetime64[M]>"], "IndexYearMonth.head()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.head(2)", "<IndexYearMonth>", "1517-04", "1517-12", "<datetime64[M]>"], "IndexYearMonth.iloc_searchsorted()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexYearMonth.intersection()": [">>> ix1 = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix1", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix2 = sf.IndexYearMonth(('2022-04', '2021-12', '2022-06'))", ">>> ix2", "<IndexYearMonth>", "2022-04", "2021-12", "2022-06", "<datetime64[M]>", ">>> ix1.intersection(ix2)", "<IndexYearMonth>", "<datetime64[M]>"], "IndexYearMonth.isfalsy()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexYearMonth.isin()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.isin(('1517-06',))", "[False False False]"], "IndexYearMonth.isna()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix.isna()", "[False  True False]"], "IndexYearMonth.label_widths_at_depth()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04'), 1), (numpy.datetime64('1517-12'), 1), (numpy.datetime64('1517-06'), 1))"], "IndexYearMonth.level_add()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.level_add('A')", "<IndexHierarchy>", "A                1517-04", "A                1517-12", "A                1517-06", "<<U1>            <datetime64[M]>"], "IndexYearMonth.loc_searchsorted()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexYearMonth.loc_to_iloc()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.loc_to_iloc('1517-06')", "2", ">>> ix.loc_to_iloc(['1517-04', '1517-06'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12', None))", "slice(1, None, None)"], "IndexYearMonth.max()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.max()", "1517-12"], "IndexYearMonth.mean()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.median()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.min()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.min()", "1517-04"], "IndexYearMonth.notfalsy()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexYearMonth.notna()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix.notna()", "[ True False  True]"], "IndexYearMonth.prod()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.relabel()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "InvalidDatetime64Initializer('Attempting to create datetime64[M] from an integer, which is generally not desired as the result will be an offset from the epoch.')"], "IndexYearMonth.rename()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.rename('y')", "<IndexYearMonth: y>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonth.roll()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.roll(2)", "<IndexYearMonth>", "1517-12", "1517-06", "1517-04", "<datetime64[M]>"], "IndexYearMonth.sample()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.sample(2, seed=0)", "<IndexYearMonth>", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonth.sort()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.sort()", "<IndexYearMonth>", "1517-04", "1517-06", "1517-12", "<datetime64[M]>", ">>> ix.sort(ascending=False)", "<IndexYearMonth>", "1517-12", "1517-06", "1517-04", "<datetime64[M]>"], "IndexYearMonth.std()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.sum()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.tail()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.tail(2)", "<IndexYearMonth>", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonth.union()": [">>> ix1 = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix1", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix2 = sf.IndexYearMonth(('2022-04', '2021-12', '2022-06'))", ">>> ix2", "<IndexYearMonth>", "2022-04", "2021-12", "2022-06", "<datetime64[M]>", ">>> ix1.union(ix2)", "<IndexYearMonth>", "1517-04", "1517-06", "1517-12", "2021-12", "2022-04", "2022-06", "<datetime64[M]>"], "IndexYearMonth.unique()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonth>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.unique()", "['1620-09'     'NaT' '1620-11']"], "IndexYearMonth.values_at_depth()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.values_at_depth(0)", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.var()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.__contains__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.__contains__('1517-06')", "True"], "IndexYearMonth.__iter__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04'), numpy.datetime64('1517-12'), numpy.datetime64('1517-06'))", ">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04'), numpy.datetime64('1517-12'), numpy.datetime64('1517-06'))"], "IndexYearMonth.__reversed__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06'), numpy.datetime64('1517-12'), numpy.datetime64('1517-04'))", ">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06'), numpy.datetime64('1517-12'), numpy.datetime64('1517-04'))"], "IndexYearMonth.values": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.values", "['1517-04' '1517-12' '1517-06']", ">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.values", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.interface": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonth>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name       group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexYearMonth Constructor          Initializer. Args...", "from_date_range(start, stop, step... IndexYearMonth Constructor          Get an IndexYearM...", "from_labels(labels, *, name)         IndexYearMonth Constructor          Construct an Inde...", "from_pandas(value)                   IndexYearMonth Constructor          Given a Pandas in...", "from_year_month_range(start, stop... IndexYearMonth Constructor          Get an IndexYearM...", "from_year_range(start, stop, step... IndexYearMonth Constructor          Get an IndexYearM...", "to_html(config, style_config)        IndexYearMonth Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexYearMonth Exporter             Return a complete...", "to_pandas()                          IndexYearMonth Exporter             Return a Pandas I...", "to_series()                          IndexYearMonth Exporter             Return a Series w...", "to_visidata()                        IndexYearMonth Exporter             Open an interacti...", "STATIC                               IndexYearMonth Attribute            bool(x) -> bool R...", "depth                                IndexYearMonth Attribute            int([x]) -> integ...", "dtype                                IndexYearMonth Attribute            Return the dtype ...", "index_types                          IndexYearMonth Attribute            Return a Series o...", "memory                               IndexYearMonth Attribute            Return a MemoryDi...", "mloc                                 IndexYearMonth Attribute            The memory locati...", "...                                  ...            ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexYearMonth Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexYearMonth Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexYearMonth Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexYearMonth Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonth Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonth Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonth Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonth Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonth Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonth Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonth Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonth Accessor Hashlib", "via_type_clinic.to_hint()            IndexYearMonth Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexYearMonth Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexYearMonth Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexYearMonth Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexYearMonth Accessor Type Clinic Return a compact ...", "<<U90>                               <<U14>         <<U27>               <<U83>"], "IndexYearMonth.__repr__()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> repr(ix)", "<IndexYearMonth>", "1620-09", "NaT", "1620-11", "<datetime64[M]>"], "IndexYearMonth.__str__()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> str(ix)", "<IndexYearMonth>", "1620-09", "NaT", "1620-11", "<datetime64[M]>"], "IndexYearMonth.display()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix.display()", "<IndexYearMonth>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09", "NaT", "1620-11"], "IndexYearMonth.display_tall()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix.display_tall()", "<IndexYearMonth>", "1620-09", "NaT", "1620-11", "<datetime64[M]>"], "IndexYearMonth.display_wide()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix.display_wide()", "<IndexYearMonth>", "1620-09", "NaT", "1620-11", "<datetime64[M]>"], "IndexYearMonth.drop.iloc[]": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.drop.iloc[1]", "<IndexYearMonth>", "1517-04", "1517-06", "<datetime64[M]>", ">>> ix.drop.iloc[1:]", "<IndexYearMonth>", "1517-04", "<datetime64[M]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexYearMonth>", "1517-12", "<datetime64[M]>"], "IndexYearMonth.drop.loc[]": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.drop.loc['1517-06']", "<IndexYearMonth>", "1517-04", "1517-12", "<datetime64[M]>", ">>> ix.drop.loc['1517-06':]", "<IndexYearMonth>", "1517-04", "1517-12", "<datetime64[M]>"], "IndexYearMonth.[]": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix[1]", "1517-12", ">>> ix[1:]", "<IndexYearMonth>", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix[[0, 2]]", "<IndexYearMonth>", "1517-04", "1517-06", "<datetime64[M]>"], "IndexYearMonth.iloc[]": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.iloc[1]", "1517-12", ">>> ix.iloc[1:]", "<IndexYearMonth>", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.iloc[[0, 2]]", "<IndexYearMonth>", "1517-04", "1517-06", "<datetime64[M]>"], "IndexYearMonth.loc[]": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.loc['1517-06']", "1517-06", ">>> ix.loc['1517-06':]", "<IndexYearMonth>", "1517-06", "<datetime64[M]>"], "IndexYearMonth.iter_label()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04'), numpy.datetime64('1517-12'), numpy.datetime64('1517-06'))"], "IndexYearMonth.iter_label().apply()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexYearMonth.iter_label().apply_iter()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 1, 0, 0), datetime.datetime(1517, 6, 1, 0, 0))"], "IndexYearMonth.iter_label().apply_iter_items()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 1, 0, 0)), (2, datetime.datetime(1517, 6, 1, 0, 0)))"], "IndexYearMonth.iter_label().apply_pool()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexYearMonth.__add__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix + 2", "['1517-06' '1518-02' '1517-08']"], "IndexYearMonth.__and__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonth.__eq__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix == '1517-06'", "[False False  True]"], "IndexYearMonth.__floordiv__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix // '1517-06'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.__ge__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix >= '1517-06'", "[False  True  True]"], "IndexYearMonth.__gt__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix > '1517-06'", "[False  True False]"], "IndexYearMonth.__le__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix <= '1517-06'", "[ True False  True]"], "IndexYearMonth.__lt__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix < '1517-06'", "[ True False False]"], "IndexYearMonth.__matmul__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexYearMonth.__mod__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix % '1517-06'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.__mul__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix * '1517-06'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.__ne__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix != '1517-06'", "[ True  True False]"], "IndexYearMonth.__or__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonth.__pow__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix ** '1517-06'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonth.__radd__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> '1517-06' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.__rfloordiv__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> '1517-06' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.__rmatmul__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexYearMonth.__rmul__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> '1517-06' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.__rshift__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonth.__rsub__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> '1517-06' - ix", "[ 2 -6  0]"], "IndexYearMonth.__rtruediv__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> '1517-06' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.__sub__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix - 2", "['1517-02' '1517-10' '1517-04']"], "IndexYearMonth.__truediv__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix / '1517-06'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonth.__xor__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonth.__abs__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexYearMonth.__invert__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonth.__neg__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexYearMonth.__pos__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexYearMonth.via_dt.__call__()": [">>> ix = sf.IndexYearMonth(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonth>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexYearMonth.via_dt.year": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexYearMonth.via_dt.year_month": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.via_dt.year_quarter": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexYearMonth.via_dt.month": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexYearMonth.via_dt.day": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.day", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonth.via_dt.hour": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexYearMonth.via_dt.minute": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexYearMonth.via_dt.second": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexYearMonth.via_dt.weekday()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.weekday()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonth.via_dt.quarter()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexYearMonth.via_dt.is_month_end()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.is_month_end()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonth.via_dt.is_month_start()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.is_month_start()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonth.via_dt.is_year_end()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.is_year_end()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonth.via_dt.is_year_start()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.is_year_start()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonth.via_dt.is_quarter_end()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.is_quarter_end()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonth.via_dt.is_quarter_start()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.is_quarter_start()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonth.via_dt.timetuple()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.timetuple()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonth.via_dt.isoformat()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.isoformat()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonth.via_dt.fromisoformat()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[M]) for operation on string types')"], "IndexYearMonth.via_dt.strftime()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonth.via_dt.strptime()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[M]) for operation on string types')"], "IndexYearMonth.via_dt.strpdate()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[M]) for operation on string types')"], "IndexYearMonth.via_str.__getitem__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str[-1]", "['4' '2' '6']"], "IndexYearMonth.via_str.capitalize()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.capitalize()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.via_str.center()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.center(8)", "['1517-04 ' '1517-12 ' '1517-06 ']"], "IndexYearMonth.via_str.contains()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexYearMonth.via_str.count()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexYearMonth.via_str.decode()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06')).astype(bytes)", ">>> ix", "<Index>", "b'1517-04'", "b'1517-12'", "b'1517-06'", "<|S25>", ">>> ix.via_str.decode()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.via_str.encode()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.encode()", "[b'1517-04' b'1517-12' b'1517-06']"], "IndexYearMonth.via_str.endswith()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexYearMonth.via_str.find()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexYearMonth.via_str.format()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.format('{:-^10}')", "['-1517-04--' '-1517-12--' '-1517-06--']"], "IndexYearMonth.via_str.index()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexYearMonth.via_str.isalnum()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexYearMonth.via_str.isalpha()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexYearMonth.via_str.isdecimal()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexYearMonth.via_str.isdigit()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexYearMonth.via_str.islower()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexYearMonth.via_str.isnumeric()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexYearMonth.via_str.isspace()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexYearMonth.via_str.istitle()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.istitle()", "[False False False]"], "IndexYearMonth.via_str.isupper()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isupper()", "[False False False]"], "IndexYearMonth.via_str.ljust()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.ljust(8)", "['1517-04 ' '1517-12 ' '1517-06 ']"], "IndexYearMonth.via_str.len()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.len()", "[7 7 7]"], "IndexYearMonth.via_str.lower()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.lower()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.via_str.lstrip()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.lstrip()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.via_str.partition()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.partition('X')", "[('1517-04', '', '') ('1517-12', '', '') ('1517-06', '', '')]"], "IndexYearMonth.via_str.replace()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.replace('X', '*')", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.via_str.rfind()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexYearMonth.via_str.rindex()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexYearMonth.via_str.rjust()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.rjust(8)", "[' 1517-04' ' 1517-12' ' 1517-06']"], "IndexYearMonth.via_str.rpartition()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04') ('', '', '1517-12') ('', '', '1517-06')]"], "IndexYearMonth.via_str.rsplit()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.rsplit('X')", "[('1517-04',) ('1517-12',) ('1517-06',)]"], "IndexYearMonth.via_str.rstrip()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.rstrip()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.via_str.split()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.split('X')", "[('1517-04',) ('1517-12',) ('1517-06',)]"], "IndexYearMonth.via_str.startswith()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexYearMonth.via_str.strip()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.strip()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.via_str.swapcase()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.swapcase()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.via_str.title()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.title()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.via_str.upper()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.upper()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonth.via_str.zfill()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.zfill(8)", "['01517-04' '01517-12' '01517-06']"], "IndexYearMonth.via_re().search()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexYearMonth.via_re().match()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexYearMonth.via_re().fullmatch()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexYearMonth.via_re().split()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04') ('', '5', '7-', '', '') ('', '5', '7-06')]"], "IndexYearMonth.via_re().findall()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1') ('1', '1', '1', '2') ('1', '1')]"], "IndexYearMonth.via_re().sub()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04' '==5==7-====' '==5==7-06']"], "IndexYearMonth.via_re().subn()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04', 1) ('==517-12', 1) ('==517-06', 1)]"], "IndexYearMonth.via_hashlib().to_bytes()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexYearMonth\\xc7\\xea\\xff\\xff\\xff\\xff\\xff\\xff\\xcf\\xea\\xff\\xff\\xff\\xff\\xff\\xff\\xc9\\xea\\xff\\xff\\xff\\xff\\xff\\xff'"], "IndexYearMonth.via_hashlib().md5()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "144f076132ec51d6a64b99b26434213c"], "IndexYearMonth.via_hashlib().sha256()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "c038bd32aff224e9eac81551d72cd1ba7aef62377476955fa8c99a287fcdd2ea"], "IndexYearMonth.via_hashlib().sha512()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "b9465ce164f6e8958c53cb1154a5cf18406f63527ea759c8284b6be0d3dd7454c6b79a750d5d4c10dfa9c90c62a020f4c10a35b98cfe0bb4fa4651b43b53253a"], "IndexYearMonth.via_hashlib().sha3_256()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "002aa66886119bff834127a0cc7efc2f7d55b55110c763cf6b8870d24d79d94c"], "IndexYearMonth.via_hashlib().sha3_512()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "a0cc2c5a3d450a4348b288475eec702828a35454de24f376185c39584ef080eb3b8a4d89e67bc5b21431210a541ec25cf19c8fbbb07e09a39c1e41a4debb7a38"], "IndexYearMonth.via_hashlib().shake_128()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "141bdf2458b7b4cb"], "IndexYearMonth.via_hashlib().shake_256()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "9da1d87292f1edb1"], "IndexYearMonth.via_hashlib().blake2b()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "14ef80e958badc127ecddba0def948def29f3fd27665a959a0af80043d055a07e60391f49652fa846ecacd1f8dd32defba422d46930921a1a9da4cd3c3f1774f"], "IndexYearMonth.via_hashlib().blake2s()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "68b00331b872c3ea67a6d57c6f93f4cf3329320bc3d694d860b40b1b20998415"], "IndexYearMonth.via_values.apply()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonth.via_values.__array_ufunc__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonth.via_values.__call__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonth.via_type_clinic.to_hint()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexYearMonth'>"], "IndexYearMonth.via_type_clinic.check()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexYearMonth.via_type_clinic.__call__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexYearMonth.via_type_clinic.__repr__()": [">>> ix = sf.IndexYearMonth(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonth>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_type_clinic", "IndexYearMonth"], "IndexYearMonthGO.__init__()": [">>> sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.from_date_range()": [">>> sf.IndexYearMonthGO.from_date_range('2021-12-30', '2022-01-02')", "<IndexYearMonthGO>", "2021-12", "2022-01", "<datetime64[M]>"], "IndexYearMonthGO.from_labels()": [">>> sf.IndexYearMonthGO.from_labels(('1517-04', '1517-12', '1517-06'))", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.from_pandas()": [">>> ix = pd.Index(('1517-04', '1517-12', '1517-06'))", ">>> sf.IndexYearMonthGO.from_pandas(ix)", "<IndexGO>", "1517-04", "1517-12", "1517-06", "<object>"], "IndexYearMonthGO.from_year_month_range()": [">>> sf.IndexYearMonthGO.from_year_month_range('2021-12', '2022-01')", "<IndexYearMonthGO>", "2021-12", "2022-01", "<datetime64[M]>"], "IndexYearMonthGO.from_year_range()": [">>> sf.IndexYearMonthGO.from_year_range('2021', '2022')", "<IndexYearMonthGO>", "2021-01", "2021-02", "2021-03", "2021-04", "2021-05", "2021-06", "2021-07", "2021-08", "2021-09", "2021-10", "2021-11", "2021-12", "2022-01", "2022-02", "2022-03", "2022-04", "2022-05", "2022-06", "2022-07", "2022-08", "2022-09", "2022-10", "2022-11", "2022-12", "<datetime64[M]>"], "IndexYearMonthGO.to_pandas()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.to_pandas()", "NotImplementedError('Pandas does not support a year month type, and it is ambiguous if a date proxy should be the first of the month or the last of the month.')"], "IndexYearMonthGO.to_series()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04", "1        1517-12", "2        1517-06", "<int64>  <datetime64[M]>"], "IndexYearMonthGO.STATIC": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix.STATIC", "False"], "IndexYearMonthGO.depth": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix.depth", "1"], "IndexYearMonthGO.dtype": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix.dtype", "datetime64[M]"], "IndexYearMonthGO.index_types": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexYearMonthGO>", "<object> <object>"], "IndexYearMonthGO.memory": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix.memory", "          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Name      16   B     16   B     16  B     16   B     16  B     16  B", "Map       472  B     472  B     472 B     472  B     472 B     472 B", "Labels    136  B     152  B     24  B     136  B     152 B     24  B", "Positions 112  B     128  B     0   B     8.22 KB    152 B     24  B", "Total     1.14 KB    1.17 KB    944 B     9.25 KB    1.2 KB    968 B"], "IndexYearMonthGO.name": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix.name"], "IndexYearMonthGO.names": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix.names", "('__index0__',)"], "IndexYearMonthGO.nbytes": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix.nbytes", "24"], "IndexYearMonthGO.ndim": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix.ndim", "1"], "IndexYearMonthGO.positions": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix.positions", "[0 1 2]"], "IndexYearMonthGO.shape": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix.shape", "(3,)"], "IndexYearMonthGO.size": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix.size", "3"], "IndexYearMonthGO.__array__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.__array__()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.__array_ufunc__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[M]')))"], "IndexYearMonthGO.__bool__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexYearMonthGO.__copy__()": [">>> import copy", ">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> copy.copy(ix)", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> copy.deepcopy(ix)", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.__len__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> len(ix)", "3"], "IndexYearMonthGO.all()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.all()", "True"], "IndexYearMonthGO.any()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.any()", "True"], "IndexYearMonthGO.append()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.append('f')", "GrowOnlyInvalid('Cannot perform an in-place grow-only operation due to the class of the columns Index.')", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.astype()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.astype(str)", "<IndexGO>", "1517-04", "1517-12", "1517-06", "<<U25>"], "IndexYearMonthGO.copy()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.copy()", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.cumprod()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.cumsum()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.difference()": [">>> ix1 = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix1", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix2 = sf.IndexYearMonthGO(('2022-04', '2021-12', '2022-06'))", ">>> ix2", "<IndexYearMonthGO>", "2022-04", "2021-12", "2022-06", "<datetime64[M]>", ">>> ix1.difference(ix2)", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.dropfalsy()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonthGO>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.dropfalsy()", "<IndexYearMonthGO>", "1620-09", "1620-11", "<datetime64[M]>"], "IndexYearMonthGO.dropna()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonthGO>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.dropna()", "<IndexYearMonthGO>", "1620-09", "1620-11", "<datetime64[M]>"], "IndexYearMonthGO.equals()": [">>> ix1 = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix1", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix2 = sf.IndexYearMonthGO(('2022-04', '2021-12', '2022-06'))", ">>> ix2", "<IndexYearMonthGO>", "2022-04", "2021-12", "2022-06", "<datetime64[M]>", ">>> ix1.equals(ix2)", "False"], "IndexYearMonthGO.extend()": [">>> ix1 = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix1", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix2 = sf.IndexYearMonthGO(('2022-04', '2021-12', '2022-06'))", ">>> ix2", "<IndexYearMonthGO>", "2022-04", "2021-12", "2022-06", "<datetime64[M]>", ">>> ix1.extend(ix2)", ">>> ix1", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "2022-04", "2021-12", "2022-06", "<datetime64[M]>"], "IndexYearMonthGO.fillfalsy()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonthGO>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexYearMonthGO.fillna()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonthGO>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.fillna(0)", "<IndexYearMonthGO>", "1620-09", "1970-01", "1620-11", "<datetime64[M]>"], "IndexYearMonthGO.head()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.head(2)", "<IndexYearMonthGO>", "1517-04", "1517-12", "<datetime64[M]>"], "IndexYearMonthGO.iloc_searchsorted()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexYearMonthGO.intersection()": [">>> ix1 = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix1", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix2 = sf.IndexYearMonthGO(('2022-04', '2021-12', '2022-06'))", ">>> ix2", "<IndexYearMonthGO>", "2022-04", "2021-12", "2022-06", "<datetime64[M]>", ">>> ix1.intersection(ix2)", "<IndexYearMonthGO>", "<datetime64[M]>"], "IndexYearMonthGO.isfalsy()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexYearMonthGO.isin()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.isin(('1517-06',))", "[False False False]"], "IndexYearMonthGO.isna()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix.isna()", "[False  True False]"], "IndexYearMonthGO.label_widths_at_depth()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04'), 1), (numpy.datetime64('1517-12'), 1), (numpy.datetime64('1517-06'), 1))"], "IndexYearMonthGO.level_add()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.level_add('A')", "<IndexHierarchyGO>", "A                  1517-04", "A                  1517-12", "A                  1517-06", "<<U1>              <datetime64[M]>"], "IndexYearMonthGO.loc_searchsorted()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexYearMonthGO.loc_to_iloc()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.loc_to_iloc('1517-06')", "2", ">>> ix.loc_to_iloc(['1517-04', '1517-06'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12', None))", "slice(1, None, None)"], "IndexYearMonthGO.max()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.max()", "1517-12"], "IndexYearMonthGO.mean()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.median()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.min()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.min()", "1517-04"], "IndexYearMonthGO.notfalsy()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexYearMonthGO.notna()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix.notna()", "[ True False  True]"], "IndexYearMonthGO.prod()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.relabel()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "InvalidDatetime64Initializer('Attempting to create datetime64[M] from an integer, which is generally not desired as the result will be an offset from the epoch.')"], "IndexYearMonthGO.rename()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.rename('y')", "<IndexYearMonthGO: y>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.roll()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.roll(2)", "<IndexYearMonthGO>", "1517-12", "1517-06", "1517-04", "<datetime64[M]>"], "IndexYearMonthGO.sample()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.sample(2, seed=0)", "<IndexYearMonthGO>", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.sort()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.sort()", "<IndexYearMonthGO>", "1517-04", "1517-06", "1517-12", "<datetime64[M]>", ">>> ix.sort(ascending=False)", "<IndexYearMonthGO>", "1517-12", "1517-06", "1517-04", "<datetime64[M]>"], "IndexYearMonthGO.std()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.sum()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.tail()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.tail(2)", "<IndexYearMonthGO>", "1517-12", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.union()": [">>> ix1 = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix1", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix2 = sf.IndexYearMonthGO(('2022-04', '2021-12', '2022-06'))", ">>> ix2", "<IndexYearMonthGO>", "2022-04", "2021-12", "2022-06", "<datetime64[M]>", ">>> ix1.union(ix2)", "<IndexYearMonthGO>", "1517-04", "1517-06", "1517-12", "2021-12", "2022-04", "2022-06", "<datetime64[M]>"], "IndexYearMonthGO.unique()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonthGO>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.unique()", "['1620-09'     'NaT' '1620-11']"], "IndexYearMonthGO.values_at_depth()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.values_at_depth(0)", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.var()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.__contains__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.__contains__('1517-06')", "True"], "IndexYearMonthGO.__iter__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04'), numpy.datetime64('1517-12'), numpy.datetime64('1517-06'))", ">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04'), numpy.datetime64('1517-12'), numpy.datetime64('1517-06'))"], "IndexYearMonthGO.__reversed__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06'), numpy.datetime64('1517-12'), numpy.datetime64('1517-04'))", ">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06'), numpy.datetime64('1517-12'), numpy.datetime64('1517-04'))"], "IndexYearMonthGO.values": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.values", "['1517-04' '1517-12' '1517-06']", ">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.values", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.interface": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonthGO>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name         group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexYearMonthGO Constructor          Initializer. Args...", "from_date_range(start, stop, step... IndexYearMonthGO Constructor          Get an IndexYearM...", "from_labels(labels, *, name)         IndexYearMonthGO Constructor          Construct an Inde...", "from_pandas(value)                   IndexYearMonthGO Constructor          Given a Pandas in...", "from_year_month_range(start, stop... IndexYearMonthGO Constructor          Get an IndexYearM...", "from_year_range(start, stop, step... IndexYearMonthGO Constructor          Get an IndexYearM...", "to_html(config, style_config)        IndexYearMonthGO Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexYearMonthGO Exporter             Return a complete...", "to_pandas()                          IndexYearMonthGO Exporter             Return a Pandas I...", "to_series()                          IndexYearMonthGO Exporter             Return a Series w...", "to_visidata()                        IndexYearMonthGO Exporter             Open an interacti...", "STATIC                               IndexYearMonthGO Attribute            bool(x) -> bool R...", "depth                                IndexYearMonthGO Attribute            int([x]) -> integ...", "dtype                                IndexYearMonthGO Attribute            Return the dtype ...", "index_types                          IndexYearMonthGO Attribute            Return a Series o...", "memory                               IndexYearMonthGO Attribute            Return a MemoryDi...", "mloc                                 IndexYearMonthGO Attribute            The memory locati...", "...                                  ...              ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexYearMonthGO Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexYearMonthGO Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexYearMonthGO Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexYearMonthGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonthGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonthGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonthGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonthGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonthGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonthGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonthGO Accessor Hashlib", "via_hashlib(include_name, include... IndexYearMonthGO Accessor Hashlib", "via_type_clinic.to_hint()            IndexYearMonthGO Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexYearMonthGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexYearMonthGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexYearMonthGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexYearMonthGO Accessor Type Clinic Return a compact ...", "<<U90>                               <<U16>           <<U27>               <<U83>"], "IndexYearMonthGO.__repr__()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> repr(ix)", "<IndexYearMonthGO>", "1620-09", "NaT", "1620-11", "<datetime64[M]>"], "IndexYearMonthGO.__str__()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> str(ix)", "<IndexYearMonthGO>", "1620-09", "NaT", "1620-11", "<datetime64[M]>"], "IndexYearMonthGO.display()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix.display()", "<IndexYearMonthGO>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09", "NaT", "1620-11"], "IndexYearMonthGO.display_tall()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix.display_tall()", "<IndexYearMonthGO>", "1620-09", "NaT", "1620-11", "<datetime64[M]>"], "IndexYearMonthGO.display_wide()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix.display_wide()", "<IndexYearMonthGO>", "1620-09", "NaT", "1620-11", "<datetime64[M]>"], "IndexYearMonthGO.drop.iloc[]": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.drop.iloc[1]", "<IndexYearMonthGO>", "1517-04", "1517-06", "<datetime64[M]>", ">>> ix.drop.iloc[1:]", "<IndexYearMonthGO>", "1517-04", "<datetime64[M]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexYearMonthGO>", "1517-12", "<datetime64[M]>"], "IndexYearMonthGO.drop.loc[]": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.drop.loc['1517-06']", "<IndexYearMonthGO>", "1517-04", "1517-12", "<datetime64[M]>", ">>> ix.drop.loc['1517-06':]", "<IndexYearMonthGO>", "1517-04", "1517-12", "<datetime64[M]>"], "IndexYearMonthGO.[]": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix[1]", "1517-12", ">>> ix[1:]", "<IndexYearMonthGO>", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix[[0, 2]]", "<IndexYearMonthGO>", "1517-04", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.iloc[]": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.iloc[1]", "1517-12", ">>> ix.iloc[1:]", "<IndexYearMonthGO>", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.iloc[[0, 2]]", "<IndexYearMonthGO>", "1517-04", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.loc[]": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.loc['1517-06']", "1517-06", ">>> ix.loc['1517-06':]", "<IndexYearMonthGO>", "1517-06", "<datetime64[M]>"], "IndexYearMonthGO.iter_label()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04'), numpy.datetime64('1517-12'), numpy.datetime64('1517-06'))"], "IndexYearMonthGO.iter_label().apply()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexYearMonthGO.iter_label().apply_iter()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 1, 0, 0), datetime.datetime(1517, 6, 1, 0, 0))"], "IndexYearMonthGO.iter_label().apply_iter_items()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 1, 0, 0)), (2, datetime.datetime(1517, 6, 1, 0, 0)))"], "IndexYearMonthGO.iter_label().apply_pool()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexYearMonthGO.__add__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix + 2", "['1517-06' '1518-02' '1517-08']"], "IndexYearMonthGO.__and__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonthGO.__eq__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix == '1517-06'", "[False False  True]"], "IndexYearMonthGO.__floordiv__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix // '1517-06'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.__ge__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix >= '1517-06'", "[False  True  True]"], "IndexYearMonthGO.__gt__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix > '1517-06'", "[False  True False]"], "IndexYearMonthGO.__le__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix <= '1517-06'", "[ True False  True]"], "IndexYearMonthGO.__lt__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix < '1517-06'", "[ True False False]"], "IndexYearMonthGO.__matmul__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexYearMonthGO.__mod__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix % '1517-06'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.__mul__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix * '1517-06'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.__ne__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix != '1517-06'", "[ True  True False]"], "IndexYearMonthGO.__or__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonthGO.__pow__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix ** '1517-06'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonthGO.__radd__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> '1517-06' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.__rfloordiv__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> '1517-06' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.__rmatmul__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexYearMonthGO.__rmul__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> '1517-06' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.__rshift__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonthGO.__rsub__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> '1517-06' - ix", "[ 2 -6  0]"], "IndexYearMonthGO.__rtruediv__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> '1517-06' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.__sub__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix - 2", "['1517-02' '1517-10' '1517-04']"], "IndexYearMonthGO.__truediv__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix / '1517-06'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[M]'), dtype('<M8[M]')))"], "IndexYearMonthGO.__xor__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonthGO.__abs__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexYearMonthGO.__invert__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonthGO.__neg__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexYearMonthGO.__pos__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexYearMonthGO.via_dt.__call__()": [">>> ix = sf.IndexYearMonthGO(('1620-09', 'NaT', '1620-11'))", ">>> ix", "<IndexYearMonthGO>", "1620-09", "NaT", "1620-11", "<datetime64[M]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexYearMonthGO.via_dt.year": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexYearMonthGO.via_dt.year_month": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.via_dt.year_quarter": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexYearMonthGO.via_dt.month": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexYearMonthGO.via_dt.day": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.day", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonthGO.via_dt.hour": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexYearMonthGO.via_dt.minute": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexYearMonthGO.via_dt.second": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexYearMonthGO.via_dt.weekday()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.weekday()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonthGO.via_dt.quarter()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexYearMonthGO.via_dt.is_month_end()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.is_month_end()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonthGO.via_dt.is_month_start()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.is_month_start()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonthGO.via_dt.is_year_end()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.is_year_end()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonthGO.via_dt.is_year_start()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.is_year_start()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonthGO.via_dt.is_quarter_end()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.is_quarter_end()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonthGO.via_dt.is_quarter_start()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.is_quarter_start()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonthGO.via_dt.timetuple()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.timetuple()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonthGO.via_dt.isoformat()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.isoformat()", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonthGO.via_dt.fromisoformat()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[M]) for operation on string types')"], "IndexYearMonthGO.via_dt.strftime()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "RuntimeError('invalid dtype (datetime64[M]) for date operation')"], "IndexYearMonthGO.via_dt.strptime()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[M]) for operation on string types')"], "IndexYearMonthGO.via_dt.strpdate()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[M]) for operation on string types')"], "IndexYearMonthGO.via_str.__getitem__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str[-1]", "['4' '2' '6']"], "IndexYearMonthGO.via_str.capitalize()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.capitalize()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.via_str.center()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.center(8)", "['1517-04 ' '1517-12 ' '1517-06 ']"], "IndexYearMonthGO.via_str.contains()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexYearMonthGO.via_str.count()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexYearMonthGO.via_str.decode()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06')).astype(bytes)", ">>> ix", "<IndexGO>", "b'1517-04'", "b'1517-12'", "b'1517-06'", "<|S25>", ">>> ix.via_str.decode()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.via_str.encode()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.encode()", "[b'1517-04' b'1517-12' b'1517-06']"], "IndexYearMonthGO.via_str.endswith()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexYearMonthGO.via_str.find()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexYearMonthGO.via_str.format()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.format('{:-^10}')", "['-1517-04--' '-1517-12--' '-1517-06--']"], "IndexYearMonthGO.via_str.index()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexYearMonthGO.via_str.isalnum()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexYearMonthGO.via_str.isalpha()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexYearMonthGO.via_str.isdecimal()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexYearMonthGO.via_str.isdigit()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexYearMonthGO.via_str.islower()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexYearMonthGO.via_str.isnumeric()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexYearMonthGO.via_str.isspace()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexYearMonthGO.via_str.istitle()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.istitle()", "[False False False]"], "IndexYearMonthGO.via_str.isupper()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.isupper()", "[False False False]"], "IndexYearMonthGO.via_str.ljust()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.ljust(8)", "['1517-04 ' '1517-12 ' '1517-06 ']"], "IndexYearMonthGO.via_str.len()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.len()", "[7 7 7]"], "IndexYearMonthGO.via_str.lower()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.lower()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.via_str.lstrip()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.lstrip()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.via_str.partition()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.partition('X')", "[('1517-04', '', '') ('1517-12', '', '') ('1517-06', '', '')]"], "IndexYearMonthGO.via_str.replace()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.replace('X', '*')", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.via_str.rfind()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexYearMonthGO.via_str.rindex()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexYearMonthGO.via_str.rjust()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.rjust(8)", "[' 1517-04' ' 1517-12' ' 1517-06']"], "IndexYearMonthGO.via_str.rpartition()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04') ('', '', '1517-12') ('', '', '1517-06')]"], "IndexYearMonthGO.via_str.rsplit()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.rsplit('X')", "[('1517-04',) ('1517-12',) ('1517-06',)]"], "IndexYearMonthGO.via_str.rstrip()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.rstrip()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.via_str.split()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.split('X')", "[('1517-04',) ('1517-12',) ('1517-06',)]"], "IndexYearMonthGO.via_str.startswith()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexYearMonthGO.via_str.strip()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.strip()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.via_str.swapcase()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.swapcase()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.via_str.title()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.title()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.via_str.upper()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.upper()", "['1517-04' '1517-12' '1517-06']"], "IndexYearMonthGO.via_str.zfill()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_str.zfill(8)", "['01517-04' '01517-12' '01517-06']"], "IndexYearMonthGO.via_re().search()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexYearMonthGO.via_re().match()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexYearMonthGO.via_re().fullmatch()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexYearMonthGO.via_re().split()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04') ('', '5', '7-', '', '') ('', '5', '7-06')]"], "IndexYearMonthGO.via_re().findall()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1') ('1', '1', '1', '2') ('1', '1')]"], "IndexYearMonthGO.via_re().sub()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04' '==5==7-====' '==5==7-06']"], "IndexYearMonthGO.via_re().subn()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04', 1) ('==517-12', 1) ('==517-06', 1)]"], "IndexYearMonthGO.via_hashlib().to_bytes()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexYearMonthGO\\xc7\\xea\\xff\\xff\\xff\\xff\\xff\\xff\\xcf\\xea\\xff\\xff\\xff\\xff\\xff\\xff\\xc9\\xea\\xff\\xff\\xff\\xff\\xff\\xff'"], "IndexYearMonthGO.via_hashlib().md5()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "47bdbacdf87c6bd46bae2017ea7079b8"], "IndexYearMonthGO.via_hashlib().sha256()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "8ed445cb150064f827972c922916bcef84933c07a7394fde805aac746cf99e20"], "IndexYearMonthGO.via_hashlib().sha512()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "2c07fdb0c6d7cf316927a4838d207e6bc7c5c00e6d655febda94772f55f3fa1bd5e76557d511e6e616af5d9d5e7125d80c636fc06ce0dff91ccacb65df75caf2"], "IndexYearMonthGO.via_hashlib().sha3_256()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "1586f4457cb23690ab39f5cacce0d844c143b06681c71f8e49d5304d1e047087"], "IndexYearMonthGO.via_hashlib().sha3_512()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "a9a89908f5857baaad4b73847ca157cd614ffcdc5f3e02b20a735d087debb87cf898aec2fb049b3d33d5ab10321210ff389c5b6989fef0b889b0178374425bb1"], "IndexYearMonthGO.via_hashlib().shake_128()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "b4f10d3e42896cea"], "IndexYearMonthGO.via_hashlib().shake_256()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "32ff864f8254307f"], "IndexYearMonthGO.via_hashlib().blake2b()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "4c5eaaba5b4e8ed9dd4bcbb3add29714d846192570ad48d5cc83d08e7409d48927f8116d7ab04c755c028c8c3f7ffe5da1abab0f345fad0d0c867ed896cc8829"], "IndexYearMonthGO.via_hashlib().blake2s()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "6237f7ec7c86fb6efded17a2c5e9bfc44990ba3a4f1c22802289d787f8242bb9"], "IndexYearMonthGO.via_values.apply()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonthGO.via_values.__array_ufunc__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonthGO.via_values.__call__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexYearMonthGO.via_type_clinic.to_hint()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexYearMonthGO'>"], "IndexYearMonthGO.via_type_clinic.check()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexYearMonthGO.via_type_clinic.__call__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexYearMonthGO.via_type_clinic.__repr__()": [">>> ix = sf.IndexYearMonthGO(('1517-04', '1517-12', '1517-06'))", ">>> ix", "<IndexYearMonthGO>", "1517-04", "1517-12", "1517-06", "<datetime64[M]>", ">>> ix.via_type_clinic", "IndexYearMonthGO"], "IndexDate.__init__()": [">>> sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDate.from_date_range()": [">>> sf.IndexDate.from_date_range('2021-12-30', '2022-01-02')", "<IndexDate>", "2021-12-30", "2021-12-31", "2022-01-01", "2022-01-02", "<datetime64[D]>"], "IndexDate.from_labels()": [">>> sf.IndexDate.from_labels(('1517-04-01', '1517-12', '1517-06-30'))", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDate.from_pandas()": [">>> ix = pd.Index(('1517-04-01', '1517-12', '1517-06-30'))", ">>> sf.IndexDate.from_pandas(ix)", "<Index>", "1517-04-01", "1517-12", "1517-06-30", "<object>"], "IndexDate.from_year_month_range()": [">>> sf.IndexDate.from_year_month_range('2021-12', '2022-01')", "<IndexDate>", "2021-12-01", "2021-12-02", "2021-12-03", "2021-12-04", "2021-12-05", "2021-12-06", "2021-12-07", "2021-12-08", "2021-12-09", "2021-12-10", "2021-12-11", "2021-12-12", "2021-12-13", "2021-12-14", "2021-12-15", "2021-12-16", "2021-12-17", "...", "2022-01-15", "2022-01-16", "2022-01-17", "2022-01-18", "2022-01-19", "2022-01-20", "2022-01-21", "2022-01-22", "2022-01-23", "2022-01-24", "2022-01-25", "2022-01-26", "2022-01-27", "2022-01-28", "2022-01-29", "2022-01-30", "2022-01-31", "<datetime64[D]>"], "IndexDate.from_year_range()": [">>> sf.IndexDate.from_year_range('2021', '2022')", "<IndexDate>", "2021-01-01", "2021-01-02", "2021-01-03", "2021-01-04", "2021-01-05", "2021-01-06", "2021-01-07", "2021-01-08", "2021-01-09", "2021-01-10", "2021-01-11", "2021-01-12", "2021-01-13", "2021-01-14", "2021-01-15", "2021-01-16", "2021-01-17", "...", "2022-12-15", "2022-12-16", "2022-12-17", "2022-12-18", "2022-12-19", "2022-12-20", "2022-12-21", "2022-12-22", "2022-12-23", "2022-12-24", "2022-12-25", "2022-12-26", "2022-12-27", "2022-12-28", "2022-12-29", "2022-12-30", "2022-12-31", "<datetime64[D]>"], "IndexDate.to_pandas()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.to_pandas()", "DatetimeIndex(['1517-04-01', '1517-12-01', '1517-06-30'], dtype='datetime64[s]', freq=None)"], "IndexDate.to_series()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04-01", "1        1517-12-01", "2        1517-06-30", "<int64>  <datetime64[D]>"], "IndexDate.STATIC": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.STATIC", "True"], "IndexDate.depth": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.depth", "1"], "IndexDate.dtype": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.dtype", "datetime64[D]"], "IndexDate.index_types": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexDate>", "<object> <object>"], "IndexDate.memory": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.memory", "          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Name      16  B     16  B     16  B     16   B     16  B     16  B", "Map       472 B     472 B     472 B     472  B     472 B     472 B", "Labels    136 B     152 B     24  B     136  B     152 B     24  B", "Positions 112 B     128 B     0   B     8.22 KB    152 B     24  B", "Total     844 B     876 B     620 B     8.93 KB    900 B     644 B"], "IndexDate.name": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.name"], "IndexDate.names": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.names", "('__index0__',)"], "IndexDate.nbytes": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.nbytes", "24"], "IndexDate.ndim": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.ndim", "1"], "IndexDate.positions": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.positions", "[0 1 2]"], "IndexDate.shape": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.shape", "(3,)"], "IndexDate.size": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.size", "3"], "IndexDate.__array__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.__array__()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.__array_ufunc__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[D]')))"], "IndexDate.__bool__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexDate.__copy__()": [">>> import copy", ">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> copy.copy(ix)", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDate.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> copy.deepcopy(ix)", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDate.__len__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> len(ix)", "3"], "IndexDate.all()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.all()", "True"], "IndexDate.any()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.any()", "True"], "IndexDate.astype()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.astype(str)", "<Index>", "1517-04-01", "1517-12-01", "1517-06-30", "<<U28>"], "IndexDate.copy()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.copy()", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDate.cumprod()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.cumsum()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.difference()": [">>> ix1 = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix2 = sf.IndexDate(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexDate>", "2022-04-01", "2021-12-31", "2022-06-30", "<datetime64[D]>", ">>> ix1.difference(ix2)", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDate.dropfalsy()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDate>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.dropfalsy()", "<IndexDate>", "1620-09-16", "1620-11-21", "<datetime64[D]>"], "IndexDate.dropna()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDate>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.dropna()", "<IndexDate>", "1620-09-16", "1620-11-21", "<datetime64[D]>"], "IndexDate.equals()": [">>> ix1 = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix2 = sf.IndexDate(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexDate>", "2022-04-01", "2021-12-31", "2022-06-30", "<datetime64[D]>", ">>> ix1.equals(ix2)", "False"], "IndexDate.fillfalsy()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDate>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexDate.fillna()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDate>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.fillna(0)", "<IndexDate>", "1620-09-16", "1970-01-01", "1620-11-21", "<datetime64[D]>"], "IndexDate.head()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.head(2)", "<IndexDate>", "1517-04-01", "1517-12-01", "<datetime64[D]>"], "IndexDate.iloc_searchsorted()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexDate.intersection()": [">>> ix1 = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix2 = sf.IndexDate(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexDate>", "2022-04-01", "2021-12-31", "2022-06-30", "<datetime64[D]>", ">>> ix1.intersection(ix2)", "<IndexDate>", "<datetime64[D]>"], "IndexDate.isfalsy()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexDate.isin()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.isin(('1517-06-30',))", "[False False False]"], "IndexDate.isna()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isna()", "[False  True False]"], "IndexDate.label_widths_at_depth()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04-01'), 1), (numpy.datetime64('1517-12-01'), 1), (numpy.datetime64('1517-06-30'), 1))"], "IndexDate.level_add()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.level_add('A')", "<IndexHierarchy>", "A                1517-04-01", "A                1517-12-01", "A                1517-06-30", "<<U1>            <datetime64[D]>"], "IndexDate.loc_searchsorted()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexDate.loc_to_iloc()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.loc_to_iloc('1517-06-30')", "2", ">>> ix.loc_to_iloc(['1517-04-01', '1517-06-30'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12', None))", "slice(1, None, None)"], "IndexDate.max()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.max()", "1517-12-01"], "IndexDate.mean()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.median()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.min()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.min()", "1517-04-01"], "IndexDate.notfalsy()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexDate.notna()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notna()", "[ True False  True]"], "IndexDate.prod()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.relabel()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "InvalidDatetime64Initializer('Attempting to create datetime64[D] from an integer, which is generally not desired as the result will be an offset from the epoch.')"], "IndexDate.rename()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.rename('y')", "<IndexDate: y>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDate.roll()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.roll(2)", "<IndexDate>", "1517-12-01", "1517-06-30", "1517-04-01", "<datetime64[D]>"], "IndexDate.sample()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.sample(2, seed=0)", "<IndexDate>", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDate.sort()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.sort()", "<IndexDate>", "1517-04-01", "1517-06-30", "1517-12-01", "<datetime64[D]>", ">>> ix.sort(ascending=False)", "<IndexDate>", "1517-12-01", "1517-06-30", "1517-04-01", "<datetime64[D]>"], "IndexDate.std()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.sum()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.tail()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.tail(2)", "<IndexDate>", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDate.union()": [">>> ix1 = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix2 = sf.IndexDate(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexDate>", "2022-04-01", "2021-12-31", "2022-06-30", "<datetime64[D]>", ">>> ix1.union(ix2)", "<IndexDate>", "1517-04-01", "1517-06-30", "1517-12-01", "2021-12-31", "2022-04-01", "2022-06-30", "<datetime64[D]>"], "IndexDate.unique()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDate>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.unique()", "['1620-09-16'        'NaT' '1620-11-21']"], "IndexDate.values_at_depth()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.values_at_depth(0)", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.var()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.__contains__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.__contains__('1517-06-30')", "True"], "IndexDate.__iter__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-06-30'))", ">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-06-30'))"], "IndexDate.__reversed__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-04-01'))", ">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-04-01'))"], "IndexDate.values": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.values", "['1517-04-01' '1517-12-01' '1517-06-30']", ">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.values", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.interface": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDate>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name  group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexDate Constructor          Initializer. Args...", "from_date_range(start, stop, step... IndexDate Constructor          Get an IndexDate ...", "from_labels(labels, *, name)         IndexDate Constructor          Construct an Inde...", "from_pandas(value)                   IndexDate Constructor          Given a Pandas in...", "from_year_month_range(start, stop... IndexDate Constructor          Get an IndexDate ...", "from_year_range(start, stop, step... IndexDate Constructor          Get an IndexDate ...", "to_html(config, style_config)        IndexDate Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexDate Exporter             Return a complete...", "to_pandas()                          IndexDate Exporter             Return a Pandas I...", "to_series()                          IndexDate Exporter             Return a Series w...", "to_visidata()                        IndexDate Exporter             Open an interacti...", "STATIC                               IndexDate Attribute            bool(x) -> bool R...", "depth                                IndexDate Attribute            int([x]) -> integ...", "dtype                                IndexDate Attribute            Return the dtype ...", "index_types                          IndexDate Attribute            Return a Series o...", "memory                               IndexDate Attribute            Return a MemoryDi...", "mloc                                 IndexDate Attribute            The memory locati...", "...                                  ...       ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexDate Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexDate Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexDate Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexDate Accessor Hashlib", "via_hashlib(include_name, include... IndexDate Accessor Hashlib", "via_hashlib(include_name, include... IndexDate Accessor Hashlib", "via_hashlib(include_name, include... IndexDate Accessor Hashlib", "via_hashlib(include_name, include... IndexDate Accessor Hashlib", "via_hashlib(include_name, include... IndexDate Accessor Hashlib", "via_hashlib(include_name, include... IndexDate Accessor Hashlib", "via_hashlib(include_name, include... IndexDate Accessor Hashlib", "via_hashlib(include_name, include... IndexDate Accessor Hashlib", "via_type_clinic.to_hint()            IndexDate Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexDate Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexDate Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexDate Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexDate Accessor Type Clinic Return a compact ...", "<<U90>                               <<U9>     <<U27>               <<U83>"], "IndexDate.__repr__()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> repr(ix)", "<IndexDate>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>"], "IndexDate.__str__()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> str(ix)", "<IndexDate>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>"], "IndexDate.display()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display()", "<IndexDate>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09-16", "NaT", "1620-11-21"], "IndexDate.display_tall()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_tall()", "<IndexDate>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>"], "IndexDate.display_wide()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_wide()", "<IndexDate>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>"], "IndexDate.drop.iloc[]": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.drop.iloc[1]", "<IndexDate>", "1517-04-01", "1517-06-30", "<datetime64[D]>", ">>> ix.drop.iloc[1:]", "<IndexDate>", "1517-04-01", "<datetime64[D]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexDate>", "1517-12-01", "<datetime64[D]>"], "IndexDate.drop.loc[]": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.drop.loc['1517-06-30']", "<IndexDate>", "1517-04-01", "1517-12-01", "<datetime64[D]>", ">>> ix.drop.loc['1517-06-30':]", "<IndexDate>", "1517-04-01", "1517-12-01", "<datetime64[D]>"], "IndexDate.[]": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix[1]", "1517-12-01", ">>> ix[1:]", "<IndexDate>", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix[[0, 2]]", "<IndexDate>", "1517-04-01", "1517-06-30", "<datetime64[D]>"], "IndexDate.iloc[]": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.iloc[1]", "1517-12-01", ">>> ix.iloc[1:]", "<IndexDate>", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.iloc[[0, 2]]", "<IndexDate>", "1517-04-01", "1517-06-30", "<datetime64[D]>"], "IndexDate.loc[]": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.loc['1517-06-30']", "1517-06-30", ">>> ix.loc['1517-06-30':]", "<IndexDate>", "1517-06-30", "<datetime64[D]>"], "IndexDate.iter_label()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04-01'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-06-30'))"], "IndexDate.iter_label().apply()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexDate.iter_label().apply_iter()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 1, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))"], "IndexDate.iter_label().apply_iter_items()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 1, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))"], "IndexDate.iter_label().apply_pool()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexDate.__add__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix + 2", "['1517-04-03' '1517-12-03' '1517-07-02']"], "IndexDate.__and__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDate.__eq__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix == '1517-06-30'", "[False False  True]"], "IndexDate.__floordiv__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix // '1517-06-30'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.__ge__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix >= '1517-06-30'", "[False  True  True]"], "IndexDate.__gt__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix > '1517-06-30'", "[False  True False]"], "IndexDate.__le__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix <= '1517-06-30'", "[ True False  True]"], "IndexDate.__lt__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix < '1517-06-30'", "[ True False False]"], "IndexDate.__matmul__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexDate.__mod__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix % '1517-06-30'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.__mul__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix * '1517-06-30'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.__ne__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix != '1517-06-30'", "[ True  True False]"], "IndexDate.__or__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDate.__pow__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix ** '1517-06-30'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDate.__radd__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> '1517-06-30' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.__rfloordiv__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> '1517-06-30' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.__rmatmul__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexDate.__rmul__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> '1517-06-30' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.__rshift__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDate.__rsub__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> '1517-06-30' - ix", "[  90 -154    0]"], "IndexDate.__rtruediv__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> '1517-06-30' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.__sub__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix - 2", "['1517-03-30' '1517-11-29' '1517-06-28']"], "IndexDate.__truediv__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix / '1517-06-30'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDate.__xor__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDate.__abs__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexDate.__invert__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDate.__neg__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexDate.__pos__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexDate.via_dt.__call__()": [">>> ix = sf.IndexDate(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDate>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexDate.via_dt.year": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexDate.via_dt.year_month": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexDate.via_dt.year_quarter": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexDate.via_dt.month": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexDate.via_dt.day": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.day", "[ 1  1 30]"], "IndexDate.via_dt.hour": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexDate.via_dt.minute": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexDate.via_dt.second": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexDate.via_dt.weekday()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.weekday()", "[6 5 5]"], "IndexDate.via_dt.quarter()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexDate.via_dt.is_month_end()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.is_month_end()", "[False False  True]"], "IndexDate.via_dt.is_month_start()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.is_month_start()", "[ True  True False]"], "IndexDate.via_dt.is_year_end()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.is_year_end()", "[False False False]"], "IndexDate.via_dt.is_year_start()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexDate.via_dt.is_quarter_end()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.is_quarter_end()", "[False False  True]"], "IndexDate.via_dt.is_quarter_start()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.is_quarter_start()", "[ True False False]"], "IndexDate.via_dt.timetuple()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=12, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=335, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]"], "IndexDate.via_dt.isoformat()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.isoformat()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.via_dt.fromisoformat()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[D]) for operation on string types')"], "IndexDate.via_dt.strftime()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Sunday | April' 'Saturday | December' 'Saturday | June']"], "IndexDate.via_dt.strptime()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[D]) for operation on string types')"], "IndexDate.via_dt.strpdate()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[D]) for operation on string types')"], "IndexDate.via_str.__getitem__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str[-1]", "['1' '1' '0']"], "IndexDate.via_str.capitalize()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.capitalize()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.via_str.center()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.center(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexDate.via_str.contains()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexDate.via_str.count()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexDate.via_str.decode()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30')).astype(bytes)", ">>> ix", "<Index>", "b'1517-04-01'", "b'1517-12-01'", "b'1517-06-30'", "<|S28>", ">>> ix.via_str.decode()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.via_str.encode()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.encode()", "[b'1517-04-01' b'1517-12-01' b'1517-06-30']"], "IndexDate.via_str.endswith()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexDate.via_str.find()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexDate.via_str.format()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.format('{:-^10}')", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.via_str.index()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexDate.via_str.isalnum()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexDate.via_str.isalpha()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexDate.via_str.isdecimal()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexDate.via_str.isdigit()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexDate.via_str.islower()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexDate.via_str.isnumeric()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexDate.via_str.isspace()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexDate.via_str.istitle()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.istitle()", "[False False False]"], "IndexDate.via_str.isupper()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isupper()", "[False False False]"], "IndexDate.via_str.ljust()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.ljust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexDate.via_str.len()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.len()", "[10 10 10]"], "IndexDate.via_str.lower()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.lower()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.via_str.lstrip()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.lstrip()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.via_str.partition()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.partition('X')", "[('1517-04-01', '', '') ('1517-12-01', '', '') ('1517-06-30', '', '')]"], "IndexDate.via_str.replace()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.replace('X', '*')", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.via_str.rfind()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexDate.via_str.rindex()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexDate.via_str.rjust()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.rjust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexDate.via_str.rpartition()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04-01') ('', '', '1517-12-01') ('', '', '1517-06-30')]"], "IndexDate.via_str.rsplit()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.rsplit('X')", "[('1517-04-01',) ('1517-12-01',) ('1517-06-30',)]"], "IndexDate.via_str.rstrip()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.rstrip()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.via_str.split()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.split('X')", "[('1517-04-01',) ('1517-12-01',) ('1517-06-30',)]"], "IndexDate.via_str.startswith()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexDate.via_str.strip()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.strip()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.via_str.swapcase()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.swapcase()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.via_str.title()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.title()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.via_str.upper()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.upper()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDate.via_str.zfill()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.zfill(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexDate.via_re().search()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexDate.via_re().match()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexDate.via_re().fullmatch()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexDate.via_re().split()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04-0', '') ('', '5', '7-', '', '-0', '')", " ('', '5', '7-06-', '0')]"], "IndexDate.via_re().findall()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1', '1') ('1', '1', '1', '2', '1') ('1', '1', '3')]"], "IndexDate.via_re().sub()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04-0==' '==5==7-====-0==' '==5==7-06-==0']"], "IndexDate.via_re().subn()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04-01', 1) ('==517-12-01', 1) ('==517-06-30', 1)]"], "IndexDate.via_hashlib().to_bytes()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexDate\\x0bz\\xfd\\xff\\xff\\xff\\xff\\xff\\xffz\\xfd\\xff\\xff\\xff\\xff\\xffez\\xfd\\xff\\xff\\xff\\xff\\xff'"], "IndexDate.via_hashlib().md5()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "5367731693592605ed4f88a747b9e8d7"], "IndexDate.via_hashlib().sha256()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "0bc62d60a0ecebfe559d4fcaaeedc708635557632c9d85270d90758149baab50"], "IndexDate.via_hashlib().sha512()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "af0a3cf4b486b02d5be96e9281023d305e54bf645d018b51a9bfc2305ac00c34ffccb2f7f3063ef074864a0e99111f0c593e88e577c8f682cd07be4129791e12"], "IndexDate.via_hashlib().sha3_256()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "97257b5e8aae14efc7b5e431ec1b2918074916a0dfe2f3d0630d535e8db47782"], "IndexDate.via_hashlib().sha3_512()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "c6fac859aebdd688a59cffbbcd806e017e608bacd66cdc559a754a83d4d4dfb1373cbadbcf80fae52e927f2f12ec79dee916b12c97c38c14fe929e46993ec13d"], "IndexDate.via_hashlib().shake_128()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "4053a32b9c84ed27"], "IndexDate.via_hashlib().shake_256()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "f9fb4a61215836cb"], "IndexDate.via_hashlib().blake2b()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "f7303c8c4389fe263cac1a271aef8b17649bfe0861a1252a6366e74131b920a07b2d55a3dba30915a75a90f67d992d3e643c818bd33661773f3124ab15c84da3"], "IndexDate.via_hashlib().blake2s()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "7fd94123d178533e02bc58e0bf7b6739b7c5a73256360c75b25a67940034bdb6"], "IndexDate.via_values.apply()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDate.via_values.__array_ufunc__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDate.via_values.__call__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDate.via_type_clinic.to_hint()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexDate'>"], "IndexDate.via_type_clinic.check()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexDate.via_type_clinic.__call__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexDate.via_type_clinic.__repr__()": [">>> ix = sf.IndexDate(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDate>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_type_clinic", "IndexDate"], "IndexDateGO.__init__()": [">>> sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.from_date_range()": [">>> sf.IndexDateGO.from_date_range('2021-12-30', '2022-01-02')", "<IndexDateGO>", "2021-12-30", "2021-12-31", "2022-01-01", "2022-01-02", "<datetime64[D]>"], "IndexDateGO.from_labels()": [">>> sf.IndexDateGO.from_labels(('1517-04-01', '1517-12', '1517-06-30'))", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.from_pandas()": [">>> ix = pd.Index(('1517-04-01', '1517-12', '1517-06-30'))", ">>> sf.IndexDateGO.from_pandas(ix)", "<IndexGO>", "1517-04-01", "1517-12", "1517-06-30", "<object>"], "IndexDateGO.from_year_month_range()": [">>> sf.IndexDateGO.from_year_month_range('2021-12', '2022-01')", "<IndexDateGO>", "2021-12-01", "2021-12-02", "2021-12-03", "2021-12-04", "2021-12-05", "2021-12-06", "2021-12-07", "2021-12-08", "2021-12-09", "2021-12-10", "2021-12-11", "2021-12-12", "2021-12-13", "2021-12-14", "2021-12-15", "2021-12-16", "2021-12-17", "...", "2022-01-15", "2022-01-16", "2022-01-17", "2022-01-18", "2022-01-19", "2022-01-20", "2022-01-21", "2022-01-22", "2022-01-23", "2022-01-24", "2022-01-25", "2022-01-26", "2022-01-27", "2022-01-28", "2022-01-29", "2022-01-30", "2022-01-31", "<datetime64[D]>"], "IndexDateGO.from_year_range()": [">>> sf.IndexDateGO.from_year_range('2021', '2022')", "<IndexDateGO>", "2021-01-01", "2021-01-02", "2021-01-03", "2021-01-04", "2021-01-05", "2021-01-06", "2021-01-07", "2021-01-08", "2021-01-09", "2021-01-10", "2021-01-11", "2021-01-12", "2021-01-13", "2021-01-14", "2021-01-15", "2021-01-16", "2021-01-17", "...", "2022-12-15", "2022-12-16", "2022-12-17", "2022-12-18", "2022-12-19", "2022-12-20", "2022-12-21", "2022-12-22", "2022-12-23", "2022-12-24", "2022-12-25", "2022-12-26", "2022-12-27", "2022-12-28", "2022-12-29", "2022-12-30", "2022-12-31", "<datetime64[D]>"], "IndexDateGO.to_pandas()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.to_pandas()", "DatetimeIndex(['1517-04-01', '1517-12-01', '1517-06-30'], dtype='datetime64[s]', freq=None)"], "IndexDateGO.to_series()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04-01", "1        1517-12-01", "2        1517-06-30", "<int64>  <datetime64[D]>"], "IndexDateGO.STATIC": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.STATIC", "False"], "IndexDateGO.depth": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.depth", "1"], "IndexDateGO.dtype": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.dtype", "datetime64[D]"], "IndexDateGO.index_types": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexDateGO>", "<object> <object>"], "IndexDateGO.memory": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.memory", "          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Name      16   B     16   B     16  B     16   B     16  B     16  B", "Map       472  B     472  B     472 B     472  B     472 B     472 B", "Labels    136  B     152  B     24  B     136  B     152 B     24  B", "Positions 112  B     128  B     0   B     8.22 KB    152 B     24  B", "Total     1.14 KB    1.17 KB    944 B     9.25 KB    1.2 KB    968 B"], "IndexDateGO.name": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.name"], "IndexDateGO.names": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.names", "('__index0__',)"], "IndexDateGO.nbytes": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.nbytes", "24"], "IndexDateGO.ndim": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.ndim", "1"], "IndexDateGO.positions": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.positions", "[0 1 2]"], "IndexDateGO.shape": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.shape", "(3,)"], "IndexDateGO.size": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.size", "3"], "IndexDateGO.__array__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.__array__()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.__array_ufunc__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[D]')))"], "IndexDateGO.__bool__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexDateGO.__copy__()": [">>> import copy", ">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> copy.copy(ix)", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> copy.deepcopy(ix)", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.__len__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> len(ix)", "3"], "IndexDateGO.all()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.all()", "True"], "IndexDateGO.any()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.any()", "True"], "IndexDateGO.append()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.append('f')", "GrowOnlyInvalid('Cannot perform an in-place grow-only operation due to the class of the columns Index.')", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.astype()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.astype(str)", "<IndexGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<<U28>"], "IndexDateGO.copy()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.copy()", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.cumprod()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.cumsum()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.difference()": [">>> ix1 = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix2 = sf.IndexDateGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexDateGO>", "2022-04-01", "2021-12-31", "2022-06-30", "<datetime64[D]>", ">>> ix1.difference(ix2)", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.dropfalsy()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDateGO>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.dropfalsy()", "<IndexDateGO>", "1620-09-16", "1620-11-21", "<datetime64[D]>"], "IndexDateGO.dropna()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDateGO>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.dropna()", "<IndexDateGO>", "1620-09-16", "1620-11-21", "<datetime64[D]>"], "IndexDateGO.equals()": [">>> ix1 = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix2 = sf.IndexDateGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexDateGO>", "2022-04-01", "2021-12-31", "2022-06-30", "<datetime64[D]>", ">>> ix1.equals(ix2)", "False"], "IndexDateGO.extend()": [">>> ix1 = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix2 = sf.IndexDateGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexDateGO>", "2022-04-01", "2021-12-31", "2022-06-30", "<datetime64[D]>", ">>> ix1.extend(ix2)", ">>> ix1", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "2022-04-01", "2021-12-31", "2022-06-30", "<datetime64[D]>"], "IndexDateGO.fillfalsy()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDateGO>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexDateGO.fillna()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDateGO>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.fillna(0)", "<IndexDateGO>", "1620-09-16", "1970-01-01", "1620-11-21", "<datetime64[D]>"], "IndexDateGO.head()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.head(2)", "<IndexDateGO>", "1517-04-01", "1517-12-01", "<datetime64[D]>"], "IndexDateGO.iloc_searchsorted()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexDateGO.intersection()": [">>> ix1 = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix2 = sf.IndexDateGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexDateGO>", "2022-04-01", "2021-12-31", "2022-06-30", "<datetime64[D]>", ">>> ix1.intersection(ix2)", "<IndexDateGO>", "<datetime64[D]>"], "IndexDateGO.isfalsy()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexDateGO.isin()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.isin(('1517-06-30',))", "[False False False]"], "IndexDateGO.isna()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isna()", "[False  True False]"], "IndexDateGO.label_widths_at_depth()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04-01'), 1), (numpy.datetime64('1517-12-01'), 1), (numpy.datetime64('1517-06-30'), 1))"], "IndexDateGO.level_add()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.level_add('A')", "<IndexHierarchyGO>", "A                  1517-04-01", "A                  1517-12-01", "A                  1517-06-30", "<<U1>              <datetime64[D]>"], "IndexDateGO.loc_searchsorted()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexDateGO.loc_to_iloc()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.loc_to_iloc('1517-06-30')", "2", ">>> ix.loc_to_iloc(['1517-04-01', '1517-06-30'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12', None))", "slice(1, None, None)"], "IndexDateGO.max()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.max()", "1517-12-01"], "IndexDateGO.mean()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.median()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.min()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.min()", "1517-04-01"], "IndexDateGO.notfalsy()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexDateGO.notna()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notna()", "[ True False  True]"], "IndexDateGO.prod()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.relabel()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "InvalidDatetime64Initializer('Attempting to create datetime64[D] from an integer, which is generally not desired as the result will be an offset from the epoch.')"], "IndexDateGO.rename()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.rename('y')", "<IndexDateGO: y>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.roll()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.roll(2)", "<IndexDateGO>", "1517-12-01", "1517-06-30", "1517-04-01", "<datetime64[D]>"], "IndexDateGO.sample()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.sample(2, seed=0)", "<IndexDateGO>", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.sort()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.sort()", "<IndexDateGO>", "1517-04-01", "1517-06-30", "1517-12-01", "<datetime64[D]>", ">>> ix.sort(ascending=False)", "<IndexDateGO>", "1517-12-01", "1517-06-30", "1517-04-01", "<datetime64[D]>"], "IndexDateGO.std()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.sum()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.tail()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.tail(2)", "<IndexDateGO>", "1517-12-01", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.union()": [">>> ix1 = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix2 = sf.IndexDateGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexDateGO>", "2022-04-01", "2021-12-31", "2022-06-30", "<datetime64[D]>", ">>> ix1.union(ix2)", "<IndexDateGO>", "1517-04-01", "1517-06-30", "1517-12-01", "2021-12-31", "2022-04-01", "2022-06-30", "<datetime64[D]>"], "IndexDateGO.unique()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDateGO>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.unique()", "['1620-09-16'        'NaT' '1620-11-21']"], "IndexDateGO.values_at_depth()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.values_at_depth(0)", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.var()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.__contains__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.__contains__('1517-06-30')", "True"], "IndexDateGO.__iter__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-06-30'))", ">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-06-30'))"], "IndexDateGO.__reversed__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-04-01'))", ">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-04-01'))"], "IndexDateGO.values": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.values", "['1517-04-01' '1517-12-01' '1517-06-30']", ">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.values", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.interface": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDateGO>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name    group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexDateGO Constructor          Initializer. Args...", "from_date_range(start, stop, step... IndexDateGO Constructor          Get an IndexDate ...", "from_labels(labels, *, name)         IndexDateGO Constructor          Construct an Inde...", "from_pandas(value)                   IndexDateGO Constructor          Given a Pandas in...", "from_year_month_range(start, stop... IndexDateGO Constructor          Get an IndexDate ...", "from_year_range(start, stop, step... IndexDateGO Constructor          Get an IndexDate ...", "to_html(config, style_config)        IndexDateGO Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexDateGO Exporter             Return a complete...", "to_pandas()                          IndexDateGO Exporter             Return a Pandas I...", "to_series()                          IndexDateGO Exporter             Return a Series w...", "to_visidata()                        IndexDateGO Exporter             Open an interacti...", "STATIC                               IndexDateGO Attribute            bool(x) -> bool R...", "depth                                IndexDateGO Attribute            int([x]) -> integ...", "dtype                                IndexDateGO Attribute            Return the dtype ...", "index_types                          IndexDateGO Attribute            Return a Series o...", "memory                               IndexDateGO Attribute            Return a MemoryDi...", "mloc                                 IndexDateGO Attribute            The memory locati...", "...                                  ...         ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexDateGO Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexDateGO Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexDateGO Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexDateGO Accessor Hashlib", "via_hashlib(include_name, include... IndexDateGO Accessor Hashlib", "via_hashlib(include_name, include... IndexDateGO Accessor Hashlib", "via_hashlib(include_name, include... IndexDateGO Accessor Hashlib", "via_hashlib(include_name, include... IndexDateGO Accessor Hashlib", "via_hashlib(include_name, include... IndexDateGO Accessor Hashlib", "via_hashlib(include_name, include... IndexDateGO Accessor Hashlib", "via_hashlib(include_name, include... IndexDateGO Accessor Hashlib", "via_hashlib(include_name, include... IndexDateGO Accessor Hashlib", "via_type_clinic.to_hint()            IndexDateGO Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexDateGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexDateGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexDateGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexDateGO Accessor Type Clinic Return a compact ...", "<<U90>                               <<U11>      <<U27>               <<U83>"], "IndexDateGO.__repr__()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> repr(ix)", "<IndexDateGO>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>"], "IndexDateGO.__str__()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> str(ix)", "<IndexDateGO>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>"], "IndexDateGO.display()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display()", "<IndexDateGO>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09-16", "NaT", "1620-11-21"], "IndexDateGO.display_tall()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_tall()", "<IndexDateGO>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>"], "IndexDateGO.display_wide()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_wide()", "<IndexDateGO>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>"], "IndexDateGO.drop.iloc[]": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.drop.iloc[1]", "<IndexDateGO>", "1517-04-01", "1517-06-30", "<datetime64[D]>", ">>> ix.drop.iloc[1:]", "<IndexDateGO>", "1517-04-01", "<datetime64[D]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexDateGO>", "1517-12-01", "<datetime64[D]>"], "IndexDateGO.drop.loc[]": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.drop.loc['1517-06-30']", "<IndexDateGO>", "1517-04-01", "1517-12-01", "<datetime64[D]>", ">>> ix.drop.loc['1517-06-30':]", "<IndexDateGO>", "1517-04-01", "1517-12-01", "<datetime64[D]>"], "IndexDateGO.[]": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix[1]", "1517-12-01", ">>> ix[1:]", "<IndexDateGO>", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix[[0, 2]]", "<IndexDateGO>", "1517-04-01", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.iloc[]": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.iloc[1]", "1517-12-01", ">>> ix.iloc[1:]", "<IndexDateGO>", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.iloc[[0, 2]]", "<IndexDateGO>", "1517-04-01", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.loc[]": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.loc['1517-06-30']", "1517-06-30", ">>> ix.loc['1517-06-30':]", "<IndexDateGO>", "1517-06-30", "<datetime64[D]>"], "IndexDateGO.iter_label()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04-01'), numpy.datetime64('1517-12-01'), numpy.datetime64('1517-06-30'))"], "IndexDateGO.iter_label().apply()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexDateGO.iter_label().apply_iter()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 1, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))"], "IndexDateGO.iter_label().apply_iter_items()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 1, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))"], "IndexDateGO.iter_label().apply_pool()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexDateGO.__add__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix + 2", "['1517-04-03' '1517-12-03' '1517-07-02']"], "IndexDateGO.__and__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDateGO.__eq__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix == '1517-06-30'", "[False False  True]"], "IndexDateGO.__floordiv__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix // '1517-06-30'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.__ge__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix >= '1517-06-30'", "[False  True  True]"], "IndexDateGO.__gt__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix > '1517-06-30'", "[False  True False]"], "IndexDateGO.__le__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix <= '1517-06-30'", "[ True False  True]"], "IndexDateGO.__lt__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix < '1517-06-30'", "[ True False False]"], "IndexDateGO.__matmul__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexDateGO.__mod__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix % '1517-06-30'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.__mul__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix * '1517-06-30'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.__ne__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix != '1517-06-30'", "[ True  True False]"], "IndexDateGO.__or__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDateGO.__pow__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix ** '1517-06-30'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDateGO.__radd__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> '1517-06-30' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.__rfloordiv__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> '1517-06-30' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.__rmatmul__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexDateGO.__rmul__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> '1517-06-30' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.__rshift__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDateGO.__rsub__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> '1517-06-30' - ix", "[  90 -154    0]"], "IndexDateGO.__rtruediv__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> '1517-06-30' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.__sub__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix - 2", "['1517-03-30' '1517-11-29' '1517-06-28']"], "IndexDateGO.__truediv__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix / '1517-06-30'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexDateGO.__xor__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDateGO.__abs__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexDateGO.__invert__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDateGO.__neg__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexDateGO.__pos__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexDateGO.via_dt.__call__()": [">>> ix = sf.IndexDateGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexDateGO>", "1620-09-16", "NaT", "1620-11-21", "<datetime64[D]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexDateGO.via_dt.year": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexDateGO.via_dt.year_month": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexDateGO.via_dt.year_quarter": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexDateGO.via_dt.month": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexDateGO.via_dt.day": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.day", "[ 1  1 30]"], "IndexDateGO.via_dt.hour": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexDateGO.via_dt.minute": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexDateGO.via_dt.second": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexDateGO.via_dt.weekday()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.weekday()", "[6 5 5]"], "IndexDateGO.via_dt.quarter()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexDateGO.via_dt.is_month_end()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.is_month_end()", "[False False  True]"], "IndexDateGO.via_dt.is_month_start()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.is_month_start()", "[ True  True False]"], "IndexDateGO.via_dt.is_year_end()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.is_year_end()", "[False False False]"], "IndexDateGO.via_dt.is_year_start()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexDateGO.via_dt.is_quarter_end()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.is_quarter_end()", "[False False  True]"], "IndexDateGO.via_dt.is_quarter_start()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.is_quarter_start()", "[ True False False]"], "IndexDateGO.via_dt.timetuple()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=12, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=335, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]"], "IndexDateGO.via_dt.isoformat()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.isoformat()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.via_dt.fromisoformat()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[D]) for operation on string types')"], "IndexDateGO.via_dt.strftime()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Sunday | April' 'Saturday | December' 'Saturday | June']"], "IndexDateGO.via_dt.strptime()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[D]) for operation on string types')"], "IndexDateGO.via_dt.strpdate()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[D]) for operation on string types')"], "IndexDateGO.via_str.__getitem__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str[-1]", "['1' '1' '0']"], "IndexDateGO.via_str.capitalize()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.capitalize()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.via_str.center()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.center(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexDateGO.via_str.contains()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexDateGO.via_str.count()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexDateGO.via_str.decode()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30')).astype(bytes)", ">>> ix", "<IndexGO>", "b'1517-04-01'", "b'1517-12-01'", "b'1517-06-30'", "<|S28>", ">>> ix.via_str.decode()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.via_str.encode()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.encode()", "[b'1517-04-01' b'1517-12-01' b'1517-06-30']"], "IndexDateGO.via_str.endswith()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexDateGO.via_str.find()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexDateGO.via_str.format()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.format('{:-^10}')", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.via_str.index()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexDateGO.via_str.isalnum()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexDateGO.via_str.isalpha()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexDateGO.via_str.isdecimal()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexDateGO.via_str.isdigit()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexDateGO.via_str.islower()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexDateGO.via_str.isnumeric()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexDateGO.via_str.isspace()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexDateGO.via_str.istitle()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.istitle()", "[False False False]"], "IndexDateGO.via_str.isupper()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.isupper()", "[False False False]"], "IndexDateGO.via_str.ljust()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.ljust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexDateGO.via_str.len()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.len()", "[10 10 10]"], "IndexDateGO.via_str.lower()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.lower()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.via_str.lstrip()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.lstrip()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.via_str.partition()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.partition('X')", "[('1517-04-01', '', '') ('1517-12-01', '', '') ('1517-06-30', '', '')]"], "IndexDateGO.via_str.replace()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.replace('X', '*')", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.via_str.rfind()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexDateGO.via_str.rindex()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexDateGO.via_str.rjust()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.rjust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexDateGO.via_str.rpartition()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04-01') ('', '', '1517-12-01') ('', '', '1517-06-30')]"], "IndexDateGO.via_str.rsplit()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.rsplit('X')", "[('1517-04-01',) ('1517-12-01',) ('1517-06-30',)]"], "IndexDateGO.via_str.rstrip()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.rstrip()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.via_str.split()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.split('X')", "[('1517-04-01',) ('1517-12-01',) ('1517-06-30',)]"], "IndexDateGO.via_str.startswith()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexDateGO.via_str.strip()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.strip()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.via_str.swapcase()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.swapcase()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.via_str.title()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.title()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.via_str.upper()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.upper()", "['1517-04-01' '1517-12-01' '1517-06-30']"], "IndexDateGO.via_str.zfill()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_str.zfill(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexDateGO.via_re().search()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexDateGO.via_re().match()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexDateGO.via_re().fullmatch()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexDateGO.via_re().split()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04-0', '') ('', '5', '7-', '', '-0', '')", " ('', '5', '7-06-', '0')]"], "IndexDateGO.via_re().findall()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1', '1') ('1', '1', '1', '2', '1') ('1', '1', '3')]"], "IndexDateGO.via_re().sub()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04-0==' '==5==7-====-0==' '==5==7-06-==0']"], "IndexDateGO.via_re().subn()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04-01', 1) ('==517-12-01', 1) ('==517-06-30', 1)]"], "IndexDateGO.via_hashlib().to_bytes()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexDateGO\\x0bz\\xfd\\xff\\xff\\xff\\xff\\xff\\xffz\\xfd\\xff\\xff\\xff\\xff\\xffez\\xfd\\xff\\xff\\xff\\xff\\xff'"], "IndexDateGO.via_hashlib().md5()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "7fd7c165d987a0fa6aca9b22687150b3"], "IndexDateGO.via_hashlib().sha256()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "d0b2a43eff9bcea32b07b38d944dcbfb3cdb54290cfb8792b07fec6c29e6f1ad"], "IndexDateGO.via_hashlib().sha512()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "8d6687a8b8bbf402be815c111c55bf0926cc24477025a9ec3837f0892b72155f7c122640d7d2505c82ddcc219cb2811c240a99bab8cfce13311ac96a191ad88c"], "IndexDateGO.via_hashlib().sha3_256()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "346c844cf17c3f3a6371d8a96c2a13672b613f37cfd82ac5ee8c2e6f434fc123"], "IndexDateGO.via_hashlib().sha3_512()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "436148f10bdc0f64399b6e44ccf3774b06b25825097ae2b73349ac269e703eacbc29a507cda3da358692e03e9c6c16db87b31ba2ff4d1b9085a134c4f7dabe6f"], "IndexDateGO.via_hashlib().shake_128()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "471ca799bb9f8ac3"], "IndexDateGO.via_hashlib().shake_256()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "5e33f5c8f8cedba6"], "IndexDateGO.via_hashlib().blake2b()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "140a0243b347be0ff73c83a4d5e7d22e2cf29c7ecc14caf7b19bc63a7577cd27d672d2f285c41a79d5d1f8d701a344639bd72db22b6f4f3df6923a8a0e5d9b05"], "IndexDateGO.via_hashlib().blake2s()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "d2b117a9c91636dd7432d4b57a2b2f50ff2aeb344be6bbe154e03b6d3378bac5"], "IndexDateGO.via_values.apply()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDateGO.via_values.__array_ufunc__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDateGO.via_values.__call__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexDateGO.via_type_clinic.to_hint()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexDateGO'>"], "IndexDateGO.via_type_clinic.check()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexDateGO.via_type_clinic.__call__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexDateGO.via_type_clinic.__repr__()": [">>> ix = sf.IndexDateGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexDateGO>", "1517-04-01", "1517-12-01", "1517-06-30", "<datetime64[D]>", ">>> ix.via_type_clinic", "IndexDateGO"], "IndexMinute.__init__()": [">>> sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinute.from_labels()": [">>> sf.IndexMinute.from_labels(('1517-04-01', '1517-12', '1517-06-30'))", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinute.from_pandas()": [">>> ix = pd.Index(('1517-04-01', '1517-12', '1517-06-30'))", ">>> sf.IndexMinute.from_pandas(ix)", "<Index>", "1517-04-01", "1517-12", "1517-06-30", "<object>"], "IndexMinute.to_pandas()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.to_pandas()", "DatetimeIndex(['1517-04-01', '1517-12-01', '1517-06-30'], dtype='datetime64[s]', freq=None)"], "IndexMinute.to_series()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04-01T00:00", "1        1517-12-01T00:00", "2        1517-06-30T00:00", "<int64>  <datetime64[m]>"], "IndexMinute.STATIC": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.STATIC", "True"], "IndexMinute.depth": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.depth", "1"], "IndexMinute.dtype": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.dtype", "datetime64[m]"], "IndexMinute.index_types": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexMinute>", "<object> <object>"], "IndexMinute.memory": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.memory", "          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Name      16  B     16  B     16  B     16   B     16  B     16  B", "Map       472 B     472 B     472 B     472  B     472 B     472 B", "Labels    136 B     152 B     24  B     136  B     152 B     24  B", "Positions 112 B     128 B     0   B     8.22 KB    152 B     24  B", "Total     844 B     876 B     620 B     8.93 KB    900 B     644 B"], "IndexMinute.name": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.name"], "IndexMinute.names": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.names", "('__index0__',)"], "IndexMinute.nbytes": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.nbytes", "24"], "IndexMinute.ndim": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.ndim", "1"], "IndexMinute.positions": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.positions", "[0 1 2]"], "IndexMinute.shape": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.shape", "(3,)"], "IndexMinute.size": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.size", "3"], "IndexMinute.__array__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.__array__()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinute.__array_ufunc__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[m]')))"], "IndexMinute.__bool__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexMinute.__copy__()": [">>> import copy", ">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> copy.copy(ix)", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinute.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> copy.deepcopy(ix)", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinute.__len__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> len(ix)", "3"], "IndexMinute.all()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.all()", "True"], "IndexMinute.any()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.any()", "True"], "IndexMinute.astype()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.astype(str)", "<Index>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<<U35>"], "IndexMinute.copy()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.copy()", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinute.cumprod()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinute.cumsum()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinute.difference()": [">>> ix1 = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix2 = sf.IndexMinute(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMinute>", "2022-04-01T00:00", "2021-12-31T00:00", "2022-06-30T00:00", "<datetime64[m]>", ">>> ix1.difference(ix2)", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinute.dropfalsy()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinute>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.dropfalsy()", "<IndexMinute>", "1620-09-16T00:00", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinute.dropna()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinute>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.dropna()", "<IndexMinute>", "1620-09-16T00:00", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinute.equals()": [">>> ix1 = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix2 = sf.IndexMinute(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMinute>", "2022-04-01T00:00", "2021-12-31T00:00", "2022-06-30T00:00", "<datetime64[m]>", ">>> ix1.equals(ix2)", "False"], "IndexMinute.fillfalsy()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinute>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexMinute.fillna()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinute>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.fillna(0)", "<IndexMinute>", "1620-09-16T00:00", "1970-01-01T00:00", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinute.head()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.head(2)", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "<datetime64[m]>"], "IndexMinute.iloc_searchsorted()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexMinute.intersection()": [">>> ix1 = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix2 = sf.IndexMinute(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMinute>", "2022-04-01T00:00", "2021-12-31T00:00", "2022-06-30T00:00", "<datetime64[m]>", ">>> ix1.intersection(ix2)", "<IndexMinute>", "<datetime64[m]>"], "IndexMinute.isfalsy()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexMinute.isin()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.isin(('1517-06-30',))", "[False False False]"], "IndexMinute.isna()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isna()", "[False  True False]"], "IndexMinute.label_widths_at_depth()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04-01T00:00'), 1), (numpy.datetime64('1517-12-01T00:00'), 1), (numpy.datetime64('1517-06-30T00:00'), 1))"], "IndexMinute.level_add()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.level_add('A')", "<IndexHierarchy>", "A                1517-04-01T00:00", "A                1517-12-01T00:00", "A                1517-06-30T00:00", "<<U1>            <datetime64[m]>"], "IndexMinute.loc_searchsorted()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexMinute.loc_to_iloc()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.loc_to_iloc('1517-06-30')", "[2]", ">>> ix.loc_to_iloc(['1517-04-01', '1517-06-30'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12', None))", "slice(1, None, None)"], "IndexMinute.max()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.max()", "1517-12-01T00:00"], "IndexMinute.mean()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinute.median()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinute.min()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.min()", "1517-04-01T00:00"], "IndexMinute.notfalsy()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexMinute.notna()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notna()", "[ True False  True]"], "IndexMinute.prod()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinute.relabel()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "ErrorInitIndexNonUnique('Labels have non-unique values. Examples from iterators not are available.')"], "IndexMinute.rename()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.rename('y')", "<IndexMinute: y>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinute.roll()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.roll(2)", "<IndexMinute>", "1517-12-01T00:00", "1517-06-30T00:00", "1517-04-01T00:00", "<datetime64[m]>"], "IndexMinute.sample()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.sample(2, seed=0)", "<IndexMinute>", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinute.sort()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.sort()", "<IndexMinute>", "1517-04-01T00:00", "1517-06-30T00:00", "1517-12-01T00:00", "<datetime64[m]>", ">>> ix.sort(ascending=False)", "<IndexMinute>", "1517-12-01T00:00", "1517-06-30T00:00", "1517-04-01T00:00", "<datetime64[m]>"], "IndexMinute.std()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinute.sum()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinute.tail()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.tail(2)", "<IndexMinute>", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinute.union()": [">>> ix1 = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix2 = sf.IndexMinute(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMinute>", "2022-04-01T00:00", "2021-12-31T00:00", "2022-06-30T00:00", "<datetime64[m]>", ">>> ix1.union(ix2)", "<IndexMinute>", "1517-04-01T00:00", "1517-06-30T00:00", "1517-12-01T00:00", "2021-12-31T00:00", "2022-04-01T00:00", "2022-06-30T00:00", "<datetime64[m]>"], "IndexMinute.unique()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinute>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.unique()", "['1620-09-16T00:00'              'NaT' '1620-11-21T00:00']"], "IndexMinute.values_at_depth()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.values_at_depth(0)", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinute.var()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinute.__contains__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.__contains__('1517-06-30')", "False"], "IndexMinute.__iter__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-06-30T00:00'))", ">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-06-30T00:00'))"], "IndexMinute.__reversed__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-04-01T00:00'))", ">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-04-01T00:00'))"], "IndexMinute.values": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.values", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']", ">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.values", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinute.interface": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinute>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name    group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexMinute Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexMinute Constructor          Construct an Inde...", "from_pandas(value)                   IndexMinute Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexMinute Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexMinute Exporter             Return a complete...", "to_pandas()                          IndexMinute Exporter             Return a Pandas I...", "to_series()                          IndexMinute Exporter             Return a Series w...", "to_visidata()                        IndexMinute Exporter             Open an interacti...", "STATIC                               IndexMinute Attribute            bool(x) -> bool R...", "depth                                IndexMinute Attribute            int([x]) -> integ...", "dtype                                IndexMinute Attribute            Return the dtype ...", "index_types                          IndexMinute Attribute            Return a Series o...", "memory                               IndexMinute Attribute            Return a MemoryDi...", "mloc                                 IndexMinute Attribute            The memory locati...", "name                                 IndexMinute Attribute            A hashable label ...", "names                                IndexMinute Attribute            Provide a suitabl...", "nbytes                               IndexMinute Attribute            Return the total ...", "...                                  ...         ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexMinute Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexMinute Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexMinute Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexMinute Accessor Hashlib", "via_hashlib(include_name, include... IndexMinute Accessor Hashlib", "via_hashlib(include_name, include... IndexMinute Accessor Hashlib", "via_hashlib(include_name, include... IndexMinute Accessor Hashlib", "via_hashlib(include_name, include... IndexMinute Accessor Hashlib", "via_hashlib(include_name, include... IndexMinute Accessor Hashlib", "via_hashlib(include_name, include... IndexMinute Accessor Hashlib", "via_hashlib(include_name, include... IndexMinute Accessor Hashlib", "via_hashlib(include_name, include... IndexMinute Accessor Hashlib", "via_type_clinic.to_hint()            IndexMinute Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexMinute Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexMinute Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexMinute Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexMinute Accessor Type Clinic Return a compact ...", "<<U90>                               <<U11>      <<U27>               <<U83>"], "IndexMinute.__repr__()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> repr(ix)", "<IndexMinute>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinute.__str__()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> str(ix)", "<IndexMinute>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinute.display()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display()", "<IndexMinute>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09-16T00:00", "NaT", "1620-11-21T00:00"], "IndexMinute.display_tall()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_tall()", "<IndexMinute>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinute.display_wide()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_wide()", "<IndexMinute>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinute.drop.iloc[]": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.drop.iloc[1]", "<IndexMinute>", "1517-04-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.drop.iloc[1:]", "<IndexMinute>", "1517-04-01T00:00", "<datetime64[m]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexMinute>", "1517-12-01T00:00", "<datetime64[m]>"], "IndexMinute.drop.loc[]": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.drop.loc['1517-06-30']", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "<datetime64[m]>", ">>> ix.drop.loc['1517-06-30':]", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "<datetime64[m]>"], "IndexMinute.[]": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix[1]", "1517-12-01T00:00", ">>> ix[1:]", "<IndexMinute>", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix[[0, 2]]", "<IndexMinute>", "1517-04-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinute.iloc[]": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.iloc[1]", "1517-12-01T00:00", ">>> ix.iloc[1:]", "<IndexMinute>", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.iloc[[0, 2]]", "<IndexMinute>", "1517-04-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinute.loc[]": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.loc['1517-06-30']", "<IndexMinute>", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.loc['1517-06-30':]", "<IndexMinute>", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinute.iter_label()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04-01T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-06-30T00:00'))"], "IndexMinute.iter_label().apply()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexMinute.iter_label().apply_iter()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 1, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))"], "IndexMinute.iter_label().apply_iter_items()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 1, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))"], "IndexMinute.iter_label().apply_pool()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexMinute.__add__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix + 2", "['1517-04-01T00:02' '1517-12-01T00:02' '1517-06-30T00:02']"], "IndexMinute.__and__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinute.__eq__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix == '1517-06-30'", "[False False  True]"], "IndexMinute.__floordiv__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix // '1517-06-30'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinute.__ge__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix >= '1517-06-30'", "[False  True  True]"], "IndexMinute.__gt__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix > '1517-06-30'", "[False  True False]"], "IndexMinute.__le__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix <= '1517-06-30'", "[ True False  True]"], "IndexMinute.__lt__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix < '1517-06-30'", "[ True False False]"], "IndexMinute.__matmul__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexMinute.__mod__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix % '1517-06-30'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinute.__mul__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix * '1517-06-30'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinute.__ne__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix != '1517-06-30'", "[ True  True False]"], "IndexMinute.__or__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinute.__pow__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix ** '1517-06-30'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinute.__radd__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> '1517-06-30' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinute.__rfloordiv__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> '1517-06-30' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinute.__rmatmul__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexMinute.__rmul__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> '1517-06-30' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinute.__rshift__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinute.__rsub__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> '1517-06-30' - ix", "[  90 -154    0]"], "IndexMinute.__rtruediv__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> '1517-06-30' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinute.__sub__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix - 2", "['1517-03-31T23:58' '1517-11-30T23:58' '1517-06-29T23:58']"], "IndexMinute.__truediv__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix / '1517-06-30'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinute.__xor__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinute.__abs__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMinute.__invert__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinute.__neg__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMinute.__pos__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMinute.via_dt.__call__()": [">>> ix = sf.IndexMinute(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinute>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexMinute.via_dt.year": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexMinute.via_dt.year_month": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexMinute.via_dt.year_quarter": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexMinute.via_dt.month": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexMinute.via_dt.day": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.day", "[ 1  1 30]"], "IndexMinute.via_dt.hour": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexMinute.via_dt.minute": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexMinute.via_dt.second": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexMinute.via_dt.weekday()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.weekday()", "[6 5 5]"], "IndexMinute.via_dt.quarter()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexMinute.via_dt.is_month_end()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.is_month_end()", "[False False  True]"], "IndexMinute.via_dt.is_month_start()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.is_month_start()", "[ True  True False]"], "IndexMinute.via_dt.is_year_end()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.is_year_end()", "[False False False]"], "IndexMinute.via_dt.is_year_start()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexMinute.via_dt.is_quarter_end()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.is_quarter_end()", "[False False  True]"], "IndexMinute.via_dt.is_quarter_start()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.is_quarter_start()", "[ True False False]"], "IndexMinute.via_dt.timetuple()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=12, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=335, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]"], "IndexMinute.via_dt.isoformat()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.isoformat()", "['1517-04-01T00:00:00' '1517-12-01T00:00:00' '1517-06-30T00:00:00']"], "IndexMinute.via_dt.fromisoformat()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[m]) for operation on string types')"], "IndexMinute.via_dt.strftime()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Sunday | April' 'Saturday | December' 'Saturday | June']"], "IndexMinute.via_dt.strptime()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[m]) for operation on string types')"], "IndexMinute.via_dt.strpdate()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[m]) for operation on string types')"], "IndexMinute.via_str.__getitem__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str[-1]", "['0' '0' '0']"], "IndexMinute.via_str.capitalize()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.capitalize()", "['1517-04-01t00:00' '1517-12-01t00:00' '1517-06-30t00:00']"], "IndexMinute.via_str.center()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.center(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMinute.via_str.contains()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexMinute.via_str.count()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexMinute.via_str.decode()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30')).astype(bytes)", ">>> ix", "<Index>", "b'1517-04-01T00:00'", "b'1517-12-01T00:00'", "b'1517-06-30T00:00'", "<|S35>", ">>> ix.via_str.decode()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinute.via_str.encode()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.encode()", "[b'1517-04-01T00:00' b'1517-12-01T00:00' b'1517-06-30T00:00']"], "IndexMinute.via_str.endswith()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexMinute.via_str.find()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexMinute.via_str.format()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.format('{:-^10}')", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinute.via_str.index()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexMinute.via_str.isalnum()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexMinute.via_str.isalpha()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexMinute.via_str.isdecimal()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexMinute.via_str.isdigit()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexMinute.via_str.islower()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexMinute.via_str.isnumeric()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexMinute.via_str.isspace()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexMinute.via_str.istitle()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.istitle()", "[ True  True  True]"], "IndexMinute.via_str.isupper()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isupper()", "[ True  True  True]"], "IndexMinute.via_str.ljust()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.ljust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMinute.via_str.len()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.len()", "[16 16 16]"], "IndexMinute.via_str.lower()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.lower()", "['1517-04-01t00:00' '1517-12-01t00:00' '1517-06-30t00:00']"], "IndexMinute.via_str.lstrip()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.lstrip()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinute.via_str.partition()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.partition('X')", "[('1517-04-01T00:00', '', '') ('1517-12-01T00:00', '', '')", " ('1517-06-30T00:00', '', '')]"], "IndexMinute.via_str.replace()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.replace('X', '*')", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinute.via_str.rfind()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexMinute.via_str.rindex()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexMinute.via_str.rjust()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.rjust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMinute.via_str.rpartition()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04-01T00:00') ('', '', '1517-12-01T00:00')", " ('', '', '1517-06-30T00:00')]"], "IndexMinute.via_str.rsplit()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.rsplit('X')", "[('1517-04-01T00:00',) ('1517-12-01T00:00',) ('1517-06-30T00:00',)]"], "IndexMinute.via_str.rstrip()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.rstrip()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinute.via_str.split()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.split('X')", "[('1517-04-01T00:00',) ('1517-12-01T00:00',) ('1517-06-30T00:00',)]"], "IndexMinute.via_str.startswith()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexMinute.via_str.strip()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.strip()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinute.via_str.swapcase()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.swapcase()", "['1517-04-01t00:00' '1517-12-01t00:00' '1517-06-30t00:00']"], "IndexMinute.via_str.title()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.title()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinute.via_str.upper()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.upper()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinute.via_str.zfill()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.zfill(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMinute.via_re().search()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexMinute.via_re().match()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexMinute.via_re().fullmatch()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexMinute.via_re().split()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04-0', 'T00:00') ('', '5', '7-', '', '-0', 'T00:00')", " ('', '5', '7-06-', '0T00:00')]"], "IndexMinute.via_re().findall()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1', '1') ('1', '1', '1', '2', '1') ('1', '1', '3')]"], "IndexMinute.via_re().sub()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04-0==T00:00' '==5==7-====-0==T00:00' '==5==7-06-==0T00:00']"], "IndexMinute.via_re().subn()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04-01T00:00', 1) ('==517-12-01T00:00', 1)", " ('==517-06-30T00:00', 1)]"], "IndexMinute.via_hashlib().to_bytes()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexMinute\\xe0}\\xce\\xf1\\xff\\xff\\xff\\xff`\\xda\\xd3\\xf1\\xff\\xff\\xff\\xff x\\xd0\\xf1\\xff\\xff\\xff\\xff'"], "IndexMinute.via_hashlib().md5()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "988c54574e6927a9278d5877d5cdffd3"], "IndexMinute.via_hashlib().sha256()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "269b3a82b248f1cff38d03a39cd6974405b51c34911a856e53f2eb1db0dbc22a"], "IndexMinute.via_hashlib().sha512()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "989c158d79d2f835cec9f8cce460c62127bec1d212a025a9416c219a1494cb6aaf8ddb5e7f75ea883bfc1ffd502a65912f39fdb18a2660cceac6389c6fda22fe"], "IndexMinute.via_hashlib().sha3_256()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "01129e10850cf921f8d28f348cf5d25daa69d400c6be322e1a8ad5fdabeab38b"], "IndexMinute.via_hashlib().sha3_512()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "01a90576017b99dbd49beec67fd1de6ae596cc76ca98f9b45ea23f0c72161cecf0882b8793a8b307f005e96b35f4d3c0f276b9003302686066bc3282a8d53f06"], "IndexMinute.via_hashlib().shake_128()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "0e63b5b38d2d241a"], "IndexMinute.via_hashlib().shake_256()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "44ad16371a174d4c"], "IndexMinute.via_hashlib().blake2b()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "7aad5ae4f19f15dc90d0edfaf90fca47beaa6acede1171beb60106b02694e3175c471817ac71af0b0186484b8b55a1b39ac60d1bd95aa76e8406fca1e46af252"], "IndexMinute.via_hashlib().blake2s()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "b039c3da39f7ea85bb8040f9faec3731ab2594165977aa3d4274409d3d806fe8"], "IndexMinute.via_values.apply()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinute.via_values.__array_ufunc__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinute.via_values.__call__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinute.via_type_clinic.to_hint()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexMinute'>"], "IndexMinute.via_type_clinic.check()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexMinute.via_type_clinic.__call__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexMinute.via_type_clinic.__repr__()": [">>> ix = sf.IndexMinute(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinute>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_type_clinic", "IndexMinute"], "IndexMinuteGO.__init__()": [">>> sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.from_labels()": [">>> sf.IndexMinuteGO.from_labels(('1517-04-01', '1517-12', '1517-06-30'))", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.from_pandas()": [">>> ix = pd.Index(('1517-04-01', '1517-12', '1517-06-30'))", ">>> sf.IndexMinuteGO.from_pandas(ix)", "<IndexGO>", "1517-04-01", "1517-12", "1517-06-30", "<object>"], "IndexMinuteGO.to_pandas()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.to_pandas()", "DatetimeIndex(['1517-04-01', '1517-12-01', '1517-06-30'], dtype='datetime64[s]', freq=None)"], "IndexMinuteGO.to_series()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04-01T00:00", "1        1517-12-01T00:00", "2        1517-06-30T00:00", "<int64>  <datetime64[m]>"], "IndexMinuteGO.STATIC": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.STATIC", "False"], "IndexMinuteGO.depth": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.depth", "1"], "IndexMinuteGO.dtype": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.dtype", "datetime64[m]"], "IndexMinuteGO.index_types": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexMinuteGO>", "<object> <object>"], "IndexMinuteGO.memory": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.memory", "          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD  RMDu", "Name      16   B     16   B     16  B     16   B     16   B     16   B", "Map       472  B     472  B     472 B     472  B     472  B     472  B", "Labels    136  B     152  B     24  B     136  B     152  B     24   B", "Positions 112  B     128  B     0   B     8.22 KB    152  B     24   B", "Total     1.19 KB    1.22 KB    992 B     9.3  KB    1.24 KB    1016 B"], "IndexMinuteGO.name": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.name"], "IndexMinuteGO.names": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.names", "('__index0__',)"], "IndexMinuteGO.nbytes": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.nbytes", "24"], "IndexMinuteGO.ndim": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.ndim", "1"], "IndexMinuteGO.positions": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.positions", "[0 1 2]"], "IndexMinuteGO.shape": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.shape", "(3,)"], "IndexMinuteGO.size": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix.size", "3"], "IndexMinuteGO.__array__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.__array__()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinuteGO.__array_ufunc__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[m]')))"], "IndexMinuteGO.__bool__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexMinuteGO.__copy__()": [">>> import copy", ">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> copy.copy(ix)", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> copy.deepcopy(ix)", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.__len__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> len(ix)", "3"], "IndexMinuteGO.all()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.all()", "True"], "IndexMinuteGO.any()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.any()", "True"], "IndexMinuteGO.append()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.append('f')", "GrowOnlyInvalid('Cannot perform an in-place grow-only operation due to the class of the columns Index.')", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.astype()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.astype(str)", "<IndexGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<<U35>"], "IndexMinuteGO.copy()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.copy()", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.cumprod()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinuteGO.cumsum()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinuteGO.difference()": [">>> ix1 = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix2 = sf.IndexMinuteGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMinuteGO>", "2022-04-01T00:00", "2021-12-31T00:00", "2022-06-30T00:00", "<datetime64[m]>", ">>> ix1.difference(ix2)", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.dropfalsy()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinuteGO>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.dropfalsy()", "<IndexMinuteGO>", "1620-09-16T00:00", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinuteGO.dropna()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinuteGO>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.dropna()", "<IndexMinuteGO>", "1620-09-16T00:00", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinuteGO.equals()": [">>> ix1 = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix2 = sf.IndexMinuteGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMinuteGO>", "2022-04-01T00:00", "2021-12-31T00:00", "2022-06-30T00:00", "<datetime64[m]>", ">>> ix1.equals(ix2)", "False"], "IndexMinuteGO.extend()": [">>> ix1 = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix2 = sf.IndexMinuteGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMinuteGO>", "2022-04-01T00:00", "2021-12-31T00:00", "2022-06-30T00:00", "<datetime64[m]>", ">>> ix1.extend(ix2)", ">>> ix1", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "2022-04-01T00:00", "2021-12-31T00:00", "2022-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.fillfalsy()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinuteGO>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexMinuteGO.fillna()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinuteGO>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.fillna(0)", "<IndexMinuteGO>", "1620-09-16T00:00", "1970-01-01T00:00", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinuteGO.head()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.head(2)", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "<datetime64[m]>"], "IndexMinuteGO.iloc_searchsorted()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexMinuteGO.intersection()": [">>> ix1 = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix2 = sf.IndexMinuteGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMinuteGO>", "2022-04-01T00:00", "2021-12-31T00:00", "2022-06-30T00:00", "<datetime64[m]>", ">>> ix1.intersection(ix2)", "<IndexMinuteGO>", "<datetime64[m]>"], "IndexMinuteGO.isfalsy()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexMinuteGO.isin()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.isin(('1517-06-30',))", "[False False False]"], "IndexMinuteGO.isna()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isna()", "[False  True False]"], "IndexMinuteGO.label_widths_at_depth()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04-01T00:00'), 1), (numpy.datetime64('1517-12-01T00:00'), 1), (numpy.datetime64('1517-06-30T00:00'), 1))"], "IndexMinuteGO.level_add()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.level_add('A')", "<IndexHierarchyGO>", "A                  1517-04-01T00:00", "A                  1517-12-01T00:00", "A                  1517-06-30T00:00", "<<U1>              <datetime64[m]>"], "IndexMinuteGO.loc_searchsorted()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexMinuteGO.loc_to_iloc()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.loc_to_iloc('1517-06-30')", "[2]", ">>> ix.loc_to_iloc(['1517-04-01', '1517-06-30'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12', None))", "slice(1, None, None)"], "IndexMinuteGO.max()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.max()", "1517-12-01T00:00"], "IndexMinuteGO.mean()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinuteGO.median()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinuteGO.min()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.min()", "1517-04-01T00:00"], "IndexMinuteGO.notfalsy()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexMinuteGO.notna()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notna()", "[ True False  True]"], "IndexMinuteGO.prod()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinuteGO.relabel()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "ErrorInitIndexNonUnique('Labels have non-unique values. Examples from iterators not are available.')"], "IndexMinuteGO.rename()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.rename('y')", "<IndexMinuteGO: y>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.roll()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.roll(2)", "<IndexMinuteGO>", "1517-12-01T00:00", "1517-06-30T00:00", "1517-04-01T00:00", "<datetime64[m]>"], "IndexMinuteGO.sample()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.sample(2, seed=0)", "<IndexMinuteGO>", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.sort()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.sort()", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-06-30T00:00", "1517-12-01T00:00", "<datetime64[m]>", ">>> ix.sort(ascending=False)", "<IndexMinuteGO>", "1517-12-01T00:00", "1517-06-30T00:00", "1517-04-01T00:00", "<datetime64[m]>"], "IndexMinuteGO.std()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinuteGO.sum()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinuteGO.tail()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.tail(2)", "<IndexMinuteGO>", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.union()": [">>> ix1 = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix1", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix2 = sf.IndexMinuteGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMinuteGO>", "2022-04-01T00:00", "2021-12-31T00:00", "2022-06-30T00:00", "<datetime64[m]>", ">>> ix1.union(ix2)", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-06-30T00:00", "1517-12-01T00:00", "2021-12-31T00:00", "2022-04-01T00:00", "2022-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.unique()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinuteGO>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.unique()", "['1620-09-16T00:00'              'NaT' '1620-11-21T00:00']"], "IndexMinuteGO.values_at_depth()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.values_at_depth(0)", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinuteGO.var()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[m]'), dtype('<M8[m]')))"], "IndexMinuteGO.__contains__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.__contains__('1517-06-30')", "False"], "IndexMinuteGO.__iter__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-06-30T00:00'))", ">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-06-30T00:00'))"], "IndexMinuteGO.__reversed__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-04-01T00:00'))", ">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-04-01T00:00'))"], "IndexMinuteGO.values": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.values", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']", ">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.values", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinuteGO.interface": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinuteGO>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name      group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexMinuteGO Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexMinuteGO Constructor          Construct an Inde...", "from_pandas(value)                   IndexMinuteGO Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexMinuteGO Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexMinuteGO Exporter             Return a complete...", "to_pandas()                          IndexMinuteGO Exporter             Return a Pandas I...", "to_series()                          IndexMinuteGO Exporter             Return a Series w...", "to_visidata()                        IndexMinuteGO Exporter             Open an interacti...", "STATIC                               IndexMinuteGO Attribute            bool(x) -> bool R...", "depth                                IndexMinuteGO Attribute            int([x]) -> integ...", "dtype                                IndexMinuteGO Attribute            Return the dtype ...", "index_types                          IndexMinuteGO Attribute            Return a Series o...", "memory                               IndexMinuteGO Attribute            Return a MemoryDi...", "mloc                                 IndexMinuteGO Attribute            The memory locati...", "name                                 IndexMinuteGO Attribute            A hashable label ...", "names                                IndexMinuteGO Attribute            Provide a suitabl...", "nbytes                               IndexMinuteGO Attribute            Return the total ...", "...                                  ...           ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexMinuteGO Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexMinuteGO Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexMinuteGO Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexMinuteGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMinuteGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMinuteGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMinuteGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMinuteGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMinuteGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMinuteGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMinuteGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMinuteGO Accessor Hashlib", "via_type_clinic.to_hint()            IndexMinuteGO Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexMinuteGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexMinuteGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexMinuteGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexMinuteGO Accessor Type Clinic Return a compact ...", "<<U90>                               <<U13>        <<U27>               <<U83>"], "IndexMinuteGO.__repr__()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> repr(ix)", "<IndexMinuteGO>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinuteGO.__str__()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> str(ix)", "<IndexMinuteGO>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinuteGO.display()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display()", "<IndexMinuteGO>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09-16T00:00", "NaT", "1620-11-21T00:00"], "IndexMinuteGO.display_tall()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_tall()", "<IndexMinuteGO>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinuteGO.display_wide()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_wide()", "<IndexMinuteGO>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>"], "IndexMinuteGO.drop.iloc[]": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.drop.iloc[1]", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.drop.iloc[1:]", "<IndexMinuteGO>", "1517-04-01T00:00", "<datetime64[m]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexMinuteGO>", "1517-12-01T00:00", "<datetime64[m]>"], "IndexMinuteGO.drop.loc[]": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.drop.loc['1517-06-30']", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "<datetime64[m]>", ">>> ix.drop.loc['1517-06-30':]", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "<datetime64[m]>"], "IndexMinuteGO.[]": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix[1]", "1517-12-01T00:00", ">>> ix[1:]", "<IndexMinuteGO>", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix[[0, 2]]", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.iloc[]": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.iloc[1]", "1517-12-01T00:00", ">>> ix.iloc[1:]", "<IndexMinuteGO>", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.iloc[[0, 2]]", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.loc[]": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.loc['1517-06-30']", "<IndexMinuteGO>", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.loc['1517-06-30':]", "<IndexMinuteGO>", "1517-06-30T00:00", "<datetime64[m]>"], "IndexMinuteGO.iter_label()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04-01T00:00'), numpy.datetime64('1517-12-01T00:00'), numpy.datetime64('1517-06-30T00:00'))"], "IndexMinuteGO.iter_label().apply()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexMinuteGO.iter_label().apply_iter()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 1, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))"], "IndexMinuteGO.iter_label().apply_iter_items()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 1, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))"], "IndexMinuteGO.iter_label().apply_pool()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexMinuteGO.__add__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix + 2", "['1517-04-01T00:02' '1517-12-01T00:02' '1517-06-30T00:02']"], "IndexMinuteGO.__and__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinuteGO.__eq__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix == '1517-06-30'", "[False False  True]"], "IndexMinuteGO.__floordiv__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix // '1517-06-30'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinuteGO.__ge__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix >= '1517-06-30'", "[False  True  True]"], "IndexMinuteGO.__gt__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix > '1517-06-30'", "[False  True False]"], "IndexMinuteGO.__le__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix <= '1517-06-30'", "[ True False  True]"], "IndexMinuteGO.__lt__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix < '1517-06-30'", "[ True False False]"], "IndexMinuteGO.__matmul__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexMinuteGO.__mod__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix % '1517-06-30'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinuteGO.__mul__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix * '1517-06-30'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinuteGO.__ne__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix != '1517-06-30'", "[ True  True False]"], "IndexMinuteGO.__or__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinuteGO.__pow__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix ** '1517-06-30'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinuteGO.__radd__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> '1517-06-30' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinuteGO.__rfloordiv__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> '1517-06-30' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinuteGO.__rmatmul__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexMinuteGO.__rmul__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> '1517-06-30' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinuteGO.__rshift__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinuteGO.__rsub__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> '1517-06-30' - ix", "[  90 -154    0]"], "IndexMinuteGO.__rtruediv__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> '1517-06-30' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinuteGO.__sub__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix - 2", "['1517-03-31T23:58' '1517-11-30T23:58' '1517-06-29T23:58']"], "IndexMinuteGO.__truediv__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix / '1517-06-30'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMinuteGO.__xor__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinuteGO.__abs__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMinuteGO.__invert__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinuteGO.__neg__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMinuteGO.__pos__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMinuteGO.via_dt.__call__()": [">>> ix = sf.IndexMinuteGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMinuteGO>", "1620-09-16T00:00", "NaT", "1620-11-21T00:00", "<datetime64[m]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexMinuteGO.via_dt.year": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexMinuteGO.via_dt.year_month": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexMinuteGO.via_dt.year_quarter": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexMinuteGO.via_dt.month": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexMinuteGO.via_dt.day": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.day", "[ 1  1 30]"], "IndexMinuteGO.via_dt.hour": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexMinuteGO.via_dt.minute": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexMinuteGO.via_dt.second": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexMinuteGO.via_dt.weekday()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.weekday()", "[6 5 5]"], "IndexMinuteGO.via_dt.quarter()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexMinuteGO.via_dt.is_month_end()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.is_month_end()", "[False False  True]"], "IndexMinuteGO.via_dt.is_month_start()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.is_month_start()", "[ True  True False]"], "IndexMinuteGO.via_dt.is_year_end()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.is_year_end()", "[False False False]"], "IndexMinuteGO.via_dt.is_year_start()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexMinuteGO.via_dt.is_quarter_end()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.is_quarter_end()", "[False False  True]"], "IndexMinuteGO.via_dt.is_quarter_start()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.is_quarter_start()", "[ True False False]"], "IndexMinuteGO.via_dt.timetuple()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=12, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=335, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]"], "IndexMinuteGO.via_dt.isoformat()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.isoformat()", "['1517-04-01T00:00:00' '1517-12-01T00:00:00' '1517-06-30T00:00:00']"], "IndexMinuteGO.via_dt.fromisoformat()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[m]) for operation on string types')"], "IndexMinuteGO.via_dt.strftime()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Sunday | April' 'Saturday | December' 'Saturday | June']"], "IndexMinuteGO.via_dt.strptime()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[m]) for operation on string types')"], "IndexMinuteGO.via_dt.strpdate()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[m]) for operation on string types')"], "IndexMinuteGO.via_str.__getitem__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str[-1]", "['0' '0' '0']"], "IndexMinuteGO.via_str.capitalize()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.capitalize()", "['1517-04-01t00:00' '1517-12-01t00:00' '1517-06-30t00:00']"], "IndexMinuteGO.via_str.center()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.center(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMinuteGO.via_str.contains()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexMinuteGO.via_str.count()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexMinuteGO.via_str.decode()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30')).astype(bytes)", ">>> ix", "<IndexGO>", "b'1517-04-01T00:00'", "b'1517-12-01T00:00'", "b'1517-06-30T00:00'", "<|S35>", ">>> ix.via_str.decode()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinuteGO.via_str.encode()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.encode()", "[b'1517-04-01T00:00' b'1517-12-01T00:00' b'1517-06-30T00:00']"], "IndexMinuteGO.via_str.endswith()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexMinuteGO.via_str.find()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexMinuteGO.via_str.format()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.format('{:-^10}')", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinuteGO.via_str.index()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexMinuteGO.via_str.isalnum()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexMinuteGO.via_str.isalpha()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexMinuteGO.via_str.isdecimal()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexMinuteGO.via_str.isdigit()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexMinuteGO.via_str.islower()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexMinuteGO.via_str.isnumeric()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexMinuteGO.via_str.isspace()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexMinuteGO.via_str.istitle()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.istitle()", "[ True  True  True]"], "IndexMinuteGO.via_str.isupper()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.isupper()", "[ True  True  True]"], "IndexMinuteGO.via_str.ljust()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.ljust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMinuteGO.via_str.len()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.len()", "[16 16 16]"], "IndexMinuteGO.via_str.lower()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.lower()", "['1517-04-01t00:00' '1517-12-01t00:00' '1517-06-30t00:00']"], "IndexMinuteGO.via_str.lstrip()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.lstrip()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinuteGO.via_str.partition()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.partition('X')", "[('1517-04-01T00:00', '', '') ('1517-12-01T00:00', '', '')", " ('1517-06-30T00:00', '', '')]"], "IndexMinuteGO.via_str.replace()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.replace('X', '*')", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinuteGO.via_str.rfind()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexMinuteGO.via_str.rindex()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexMinuteGO.via_str.rjust()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.rjust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMinuteGO.via_str.rpartition()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04-01T00:00') ('', '', '1517-12-01T00:00')", " ('', '', '1517-06-30T00:00')]"], "IndexMinuteGO.via_str.rsplit()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.rsplit('X')", "[('1517-04-01T00:00',) ('1517-12-01T00:00',) ('1517-06-30T00:00',)]"], "IndexMinuteGO.via_str.rstrip()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.rstrip()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinuteGO.via_str.split()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.split('X')", "[('1517-04-01T00:00',) ('1517-12-01T00:00',) ('1517-06-30T00:00',)]"], "IndexMinuteGO.via_str.startswith()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexMinuteGO.via_str.strip()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.strip()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinuteGO.via_str.swapcase()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.swapcase()", "['1517-04-01t00:00' '1517-12-01t00:00' '1517-06-30t00:00']"], "IndexMinuteGO.via_str.title()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.title()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinuteGO.via_str.upper()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.upper()", "['1517-04-01T00:00' '1517-12-01T00:00' '1517-06-30T00:00']"], "IndexMinuteGO.via_str.zfill()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_str.zfill(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMinuteGO.via_re().search()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexMinuteGO.via_re().match()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexMinuteGO.via_re().fullmatch()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexMinuteGO.via_re().split()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04-0', 'T00:00') ('', '5', '7-', '', '-0', 'T00:00')", " ('', '5', '7-06-', '0T00:00')]"], "IndexMinuteGO.via_re().findall()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1', '1') ('1', '1', '1', '2', '1') ('1', '1', '3')]"], "IndexMinuteGO.via_re().sub()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04-0==T00:00' '==5==7-====-0==T00:00' '==5==7-06-==0T00:00']"], "IndexMinuteGO.via_re().subn()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04-01T00:00', 1) ('==517-12-01T00:00', 1)", " ('==517-06-30T00:00', 1)]"], "IndexMinuteGO.via_hashlib().to_bytes()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexMinuteGO\\xe0}\\xce\\xf1\\xff\\xff\\xff\\xff`\\xda\\xd3\\xf1\\xff\\xff\\xff\\xff x\\xd0\\xf1\\xff\\xff\\xff\\xff'"], "IndexMinuteGO.via_hashlib().md5()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "7841ca4f24de35ff580a52ec5f2ecda1"], "IndexMinuteGO.via_hashlib().sha256()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "c74a67109c668f879f40675fedd16058e376b7276b03cb46ab902b4396cd9dc7"], "IndexMinuteGO.via_hashlib().sha512()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "5036cb780329b05738ce1fafd6cc8c3eb81935799ee67bd011eb1512c010606774ef9e744acbb9ee15103f3e8f297c0b628f64d1992c134648454c9286305227"], "IndexMinuteGO.via_hashlib().sha3_256()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "5c2975f6eac33fd078f5cd0f85431b48dac13ea51c4e198c241c27d3de9d547a"], "IndexMinuteGO.via_hashlib().sha3_512()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "6a4ab1ef51d81e3baed12253aaed4d802732c17b1c85cc8566f528f2d58fc243a06773335c8a145ebf05a2e0dac99aef507491670042725d9089b3ff40e28678"], "IndexMinuteGO.via_hashlib().shake_128()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "8ec1759f9043ba31"], "IndexMinuteGO.via_hashlib().shake_256()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "fd634ccacfccac08"], "IndexMinuteGO.via_hashlib().blake2b()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "f8cc61af00f282ae7a7a029eeb32c8f98eb5a9c0b289abe9c26536186956b0603b3ab854d18f7769e588a24fba9827019c5f7d68fd82078b5226250da7b6715d"], "IndexMinuteGO.via_hashlib().blake2s()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "d68617213ffa59c3af597fcbc32fbf82a1ce4511bcb32813ad1f057a8f7524b9"], "IndexMinuteGO.via_values.apply()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinuteGO.via_values.__array_ufunc__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinuteGO.via_values.__call__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMinuteGO.via_type_clinic.to_hint()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexMinuteGO'>"], "IndexMinuteGO.via_type_clinic.check()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexMinuteGO.via_type_clinic.__call__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexMinuteGO.via_type_clinic.__repr__()": [">>> ix = sf.IndexMinuteGO(('1517-04-01', '1517-12', '1517-06-30'))", ">>> ix", "<IndexMinuteGO>", "1517-04-01T00:00", "1517-12-01T00:00", "1517-06-30T00:00", "<datetime64[m]>", ">>> ix.via_type_clinic", "IndexMinuteGO"], "IndexHour.__init__()": [">>> sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHour.from_labels()": [">>> sf.IndexHour.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHour.from_pandas()": [">>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> sf.IndexHour.from_pandas(ix)", "<Index>", "1517-04-01", "1517-12-31", "1517-06-30", "<object>"], "IndexHour.to_pandas()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.to_pandas()", "DatetimeIndex(['1517-04-01', '1517-12-31', '1517-06-30'], dtype='datetime64[s]', freq=None)"], "IndexHour.to_series()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04-01T00", "1        1517-12-31T00", "2        1517-06-30T00", "<int64>  <datetime64[h]>"], "IndexHour.STATIC": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.STATIC", "True"], "IndexHour.depth": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.depth", "1"], "IndexHour.dtype": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.dtype", "datetime64[h]"], "IndexHour.index_types": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexHour>", "<object> <object>"], "IndexHour.memory": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.memory", "          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Name      16  B     16  B     16  B     16   B     16  B     16  B", "Map       472 B     472 B     472 B     472  B     472 B     472 B", "Labels    136 B     152 B     24  B     136  B     152 B     24  B", "Positions 112 B     128 B     0   B     8.22 KB    152 B     24  B", "Total     844 B     876 B     620 B     8.93 KB    900 B     644 B"], "IndexHour.name": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.name"], "IndexHour.names": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.names", "('__index0__',)"], "IndexHour.nbytes": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.nbytes", "24"], "IndexHour.ndim": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.ndim", "1"], "IndexHour.positions": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.positions", "[0 1 2]"], "IndexHour.shape": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.shape", "(3,)"], "IndexHour.size": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.size", "3"], "IndexHour.__array__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.__array__()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHour.__array_ufunc__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[h]')))"], "IndexHour.__bool__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexHour.__copy__()": [">>> import copy", ">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> copy.copy(ix)", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHour.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> copy.deepcopy(ix)", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHour.__len__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> len(ix)", "3"], "IndexHour.all()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.all()", "True"], "IndexHour.any()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.any()", "True"], "IndexHour.astype()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.astype(str)", "<Index>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<<U32>"], "IndexHour.copy()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.copy()", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHour.cumprod()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHour.cumsum()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHour.difference()": [">>> ix1 = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix2 = sf.IndexHour(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexHour>", "2022-04-01T00", "2021-12-31T00", "2022-06-30T00", "<datetime64[h]>", ">>> ix1.difference(ix2)", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHour.dropfalsy()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHour>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.dropfalsy()", "<IndexHour>", "1620-09-16T00", "1620-11-21T00", "<datetime64[h]>"], "IndexHour.dropna()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHour>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.dropna()", "<IndexHour>", "1620-09-16T00", "1620-11-21T00", "<datetime64[h]>"], "IndexHour.equals()": [">>> ix1 = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix2 = sf.IndexHour(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexHour>", "2022-04-01T00", "2021-12-31T00", "2022-06-30T00", "<datetime64[h]>", ">>> ix1.equals(ix2)", "False"], "IndexHour.fillfalsy()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHour>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexHour.fillna()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHour>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.fillna(0)", "<IndexHour>", "1620-09-16T00", "1970-01-01T00", "1620-11-21T00", "<datetime64[h]>"], "IndexHour.head()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.head(2)", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "<datetime64[h]>"], "IndexHour.iloc_searchsorted()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexHour.intersection()": [">>> ix1 = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix2 = sf.IndexHour(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexHour>", "2022-04-01T00", "2021-12-31T00", "2022-06-30T00", "<datetime64[h]>", ">>> ix1.intersection(ix2)", "<IndexHour>", "<datetime64[h]>"], "IndexHour.isfalsy()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexHour.isin()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.isin(('1517-06-30',))", "[False False False]"], "IndexHour.isna()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isna()", "[False  True False]"], "IndexHour.label_widths_at_depth()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04-01T00','h'), 1), (numpy.datetime64('1517-12-31T00','h'), 1), (numpy.datetime64('1517-06-30T00','h'), 1))"], "IndexHour.level_add()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.level_add('A')", "<IndexHierarchy>", "A                1517-04-01T00", "A                1517-12-31T00", "A                1517-06-30T00", "<<U1>            <datetime64[h]>"], "IndexHour.loc_searchsorted()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexHour.loc_to_iloc()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.loc_to_iloc('1517-06-30')", "[2]", ">>> ix.loc_to_iloc(['1517-04-01', '1517-06-30'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12-31', None))", "slice(1, None, None)"], "IndexHour.max()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.max()", "1517-12-31T00"], "IndexHour.mean()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHour.median()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHour.min()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.min()", "1517-04-01T00"], "IndexHour.notfalsy()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexHour.notna()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notna()", "[ True False  True]"], "IndexHour.prod()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHour.relabel()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "<IndexHour>", "1970-01-01T01", "1970-01-02T07", "1970-01-02T06", "<datetime64[h]>"], "IndexHour.rename()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.rename('y')", "<IndexHour: y>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHour.roll()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.roll(2)", "<IndexHour>", "1517-12-31T00", "1517-06-30T00", "1517-04-01T00", "<datetime64[h]>"], "IndexHour.sample()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.sample(2, seed=0)", "<IndexHour>", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHour.sort()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.sort()", "<IndexHour>", "1517-04-01T00", "1517-06-30T00", "1517-12-31T00", "<datetime64[h]>", ">>> ix.sort(ascending=False)", "<IndexHour>", "1517-12-31T00", "1517-06-30T00", "1517-04-01T00", "<datetime64[h]>"], "IndexHour.std()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHour.sum()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHour.tail()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.tail(2)", "<IndexHour>", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHour.union()": [">>> ix1 = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix2 = sf.IndexHour(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexHour>", "2022-04-01T00", "2021-12-31T00", "2022-06-30T00", "<datetime64[h]>", ">>> ix1.union(ix2)", "<IndexHour>", "1517-04-01T00", "1517-06-30T00", "1517-12-31T00", "2021-12-31T00", "2022-04-01T00", "2022-06-30T00", "<datetime64[h]>"], "IndexHour.unique()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHour>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.unique()", "['1620-09-16T00'           'NaT' '1620-11-21T00']"], "IndexHour.values_at_depth()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.values_at_depth(0)", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHour.var()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHour.__contains__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.__contains__('1517-06-30')", "False"], "IndexHour.__iter__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-06-30T00','h'))", ">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-06-30T00','h'))"], "IndexHour.__reversed__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-04-01T00','h'))", ">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-04-01T00','h'))"], "IndexHour.values": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.values", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']", ">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.values", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHour.interface": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHour>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name  group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexHour Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexHour Constructor          Construct an Inde...", "from_pandas(value)                   IndexHour Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexHour Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexHour Exporter             Return a complete...", "to_pandas()                          IndexHour Exporter             Return a Pandas I...", "to_series()                          IndexHour Exporter             Return a Series w...", "to_visidata()                        IndexHour Exporter             Open an interacti...", "STATIC                               IndexHour Attribute            bool(x) -> bool R...", "depth                                IndexHour Attribute            int([x]) -> integ...", "dtype                                IndexHour Attribute            Return the dtype ...", "index_types                          IndexHour Attribute            Return a Series o...", "memory                               IndexHour Attribute            Return a MemoryDi...", "mloc                                 IndexHour Attribute            The memory locati...", "name                                 IndexHour Attribute            A hashable label ...", "names                                IndexHour Attribute            Provide a suitabl...", "nbytes                               IndexHour Attribute            Return the total ...", "...                                  ...       ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexHour Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexHour Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexHour Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexHour Accessor Hashlib", "via_hashlib(include_name, include... IndexHour Accessor Hashlib", "via_hashlib(include_name, include... IndexHour Accessor Hashlib", "via_hashlib(include_name, include... IndexHour Accessor Hashlib", "via_hashlib(include_name, include... IndexHour Accessor Hashlib", "via_hashlib(include_name, include... IndexHour Accessor Hashlib", "via_hashlib(include_name, include... IndexHour Accessor Hashlib", "via_hashlib(include_name, include... IndexHour Accessor Hashlib", "via_hashlib(include_name, include... IndexHour Accessor Hashlib", "via_type_clinic.to_hint()            IndexHour Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexHour Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexHour Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexHour Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexHour Accessor Type Clinic Return a compact ...", "<<U90>                               <<U9>     <<U27>               <<U83>"], "IndexHour.__repr__()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> repr(ix)", "<IndexHour>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>"], "IndexHour.__str__()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> str(ix)", "<IndexHour>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>"], "IndexHour.display()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display()", "<IndexHour>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09-16T00", "NaT", "1620-11-21T00"], "IndexHour.display_tall()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_tall()", "<IndexHour>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>"], "IndexHour.display_wide()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_wide()", "<IndexHour>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>"], "IndexHour.drop.iloc[]": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.drop.iloc[1]", "<IndexHour>", "1517-04-01T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.drop.iloc[1:]", "<IndexHour>", "1517-04-01T00", "<datetime64[h]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexHour>", "1517-12-31T00", "<datetime64[h]>"], "IndexHour.drop.loc[]": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.drop.loc['1517-06-30']", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "<datetime64[h]>", ">>> ix.drop.loc['1517-06-30':]", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "<datetime64[h]>"], "IndexHour.[]": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix[1]", "1517-12-31T00", ">>> ix[1:]", "<IndexHour>", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix[[0, 2]]", "<IndexHour>", "1517-04-01T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHour.iloc[]": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.iloc[1]", "1517-12-31T00", ">>> ix.iloc[1:]", "<IndexHour>", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.iloc[[0, 2]]", "<IndexHour>", "1517-04-01T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHour.loc[]": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.loc['1517-06-30']", "<IndexHour>", "1517-06-30T00", "<datetime64[h]>", ">>> ix.loc['1517-06-30':]", "<IndexHour>", "1517-06-30T00", "<datetime64[h]>"], "IndexHour.iter_label()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04-01T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-06-30T00','h'))"], "IndexHour.iter_label().apply()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexHour.iter_label().apply_iter()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))"], "IndexHour.iter_label().apply_iter_items()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))"], "IndexHour.iter_label().apply_pool()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexHour.__add__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix + 2", "['1517-04-01T02' '1517-12-31T02' '1517-06-30T02']"], "IndexHour.__and__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHour.__eq__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix == '1517-06-30'", "[False False  True]"], "IndexHour.__floordiv__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix // '1517-06-30'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHour.__ge__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix >= '1517-06-30'", "[False  True  True]"], "IndexHour.__gt__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix > '1517-06-30'", "[False  True False]"], "IndexHour.__le__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix <= '1517-06-30'", "[ True False  True]"], "IndexHour.__lt__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix < '1517-06-30'", "[ True False False]"], "IndexHour.__matmul__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexHour.__mod__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix % '1517-06-30'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHour.__mul__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix * '1517-06-30'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHour.__ne__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix != '1517-06-30'", "[ True  True False]"], "IndexHour.__or__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHour.__pow__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix ** '1517-06-30'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHour.__radd__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> '1517-06-30' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHour.__rfloordiv__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> '1517-06-30' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHour.__rmatmul__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexHour.__rmul__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> '1517-06-30' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHour.__rshift__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHour.__rsub__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> '1517-06-30' - ix", "[  90 -184    0]"], "IndexHour.__rtruediv__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> '1517-06-30' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHour.__sub__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix - 2", "['1517-03-31T22' '1517-12-30T22' '1517-06-29T22']"], "IndexHour.__truediv__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix / '1517-06-30'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHour.__xor__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHour.__abs__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexHour.__invert__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHour.__neg__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexHour.__pos__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexHour.via_dt.__call__()": [">>> ix = sf.IndexHour(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHour>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexHour.via_dt.year": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexHour.via_dt.year_month": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexHour.via_dt.year_quarter": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexHour.via_dt.month": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexHour.via_dt.day": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.day", "[ 1 31 30]"], "IndexHour.via_dt.hour": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexHour.via_dt.minute": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexHour.via_dt.second": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexHour.via_dt.weekday()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.weekday()", "[6 0 5]"], "IndexHour.via_dt.quarter()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexHour.via_dt.is_month_end()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.is_month_end()", "[False  True  True]"], "IndexHour.via_dt.is_month_start()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.is_month_start()", "[ True False False]"], "IndexHour.via_dt.is_year_end()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.is_year_end()", "[False  True False]"], "IndexHour.via_dt.is_year_start()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexHour.via_dt.is_quarter_end()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.is_quarter_end()", "[False  True  True]"], "IndexHour.via_dt.is_quarter_start()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.is_quarter_start()", "[ True False False]"], "IndexHour.via_dt.timetuple()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]"], "IndexHour.via_dt.isoformat()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.isoformat()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexHour.via_dt.fromisoformat()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[h]) for operation on string types')"], "IndexHour.via_dt.strftime()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Sunday | April' 'Monday | December' 'Saturday | June']"], "IndexHour.via_dt.strptime()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[h]) for operation on string types')"], "IndexHour.via_dt.strpdate()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[h]) for operation on string types')"], "IndexHour.via_str.__getitem__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str[-1]", "['0' '0' '0']"], "IndexHour.via_str.capitalize()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.capitalize()", "['1517-04-01t00' '1517-12-31t00' '1517-06-30t00']"], "IndexHour.via_str.center()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.center(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexHour.via_str.contains()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexHour.via_str.count()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexHour.via_str.decode()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)", ">>> ix", "<Index>", "b'1517-04-01T00'", "b'1517-12-31T00'", "b'1517-06-30T00'", "<|S32>", ">>> ix.via_str.decode()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHour.via_str.encode()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.encode()", "[b'1517-04-01T00' b'1517-12-31T00' b'1517-06-30T00']"], "IndexHour.via_str.endswith()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexHour.via_str.find()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexHour.via_str.format()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.format('{:-^10}')", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHour.via_str.index()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexHour.via_str.isalnum()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexHour.via_str.isalpha()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexHour.via_str.isdecimal()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexHour.via_str.isdigit()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexHour.via_str.islower()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexHour.via_str.isnumeric()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexHour.via_str.isspace()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexHour.via_str.istitle()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.istitle()", "[ True  True  True]"], "IndexHour.via_str.isupper()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isupper()", "[ True  True  True]"], "IndexHour.via_str.ljust()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.ljust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexHour.via_str.len()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.len()", "[13 13 13]"], "IndexHour.via_str.lower()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.lower()", "['1517-04-01t00' '1517-12-31t00' '1517-06-30t00']"], "IndexHour.via_str.lstrip()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.lstrip()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHour.via_str.partition()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.partition('X')", "[('1517-04-01T00', '', '') ('1517-12-31T00', '', '')", " ('1517-06-30T00', '', '')]"], "IndexHour.via_str.replace()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.replace('X', '*')", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHour.via_str.rfind()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexHour.via_str.rindex()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexHour.via_str.rjust()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.rjust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexHour.via_str.rpartition()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04-01T00') ('', '', '1517-12-31T00')", " ('', '', '1517-06-30T00')]"], "IndexHour.via_str.rsplit()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.rsplit('X')", "[('1517-04-01T00',) ('1517-12-31T00',) ('1517-06-30T00',)]"], "IndexHour.via_str.rstrip()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.rstrip()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHour.via_str.split()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.split('X')", "[('1517-04-01T00',) ('1517-12-31T00',) ('1517-06-30T00',)]"], "IndexHour.via_str.startswith()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexHour.via_str.strip()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.strip()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHour.via_str.swapcase()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.swapcase()", "['1517-04-01t00' '1517-12-31t00' '1517-06-30t00']"], "IndexHour.via_str.title()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.title()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHour.via_str.upper()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.upper()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHour.via_str.zfill()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.zfill(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexHour.via_re().search()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexHour.via_re().match()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexHour.via_re().fullmatch()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexHour.via_re().split()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04-0', 'T00') ('', '5', '7-', '', '-', '', 'T00')", " ('', '5', '7-06-', '0T00')]"], "IndexHour.via_re().findall()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]"], "IndexHour.via_re().sub()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04-0==T00' '==5==7-====-====T00' '==5==7-06-==0T00']"], "IndexHour.via_re().subn()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04-01T00', 1) ('==517-12-31T00', 1) ('==517-06-30T00', 1)]"], "IndexHour.via_hashlib().to_bytes()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexHour\\x08q\\xc3\\xff\\xff\\xff\\xff\\xff\\xb8\\x8a\\xc3\\xff\\xff\\xff\\xff\\xffxy\\xc3\\xff\\xff\\xff\\xff\\xff'"], "IndexHour.via_hashlib().md5()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "1836688ab52d42cee913f2ca20cc5d40"], "IndexHour.via_hashlib().sha256()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "b4b2ce362a04180e6371586d1b780f580621ac267f4a397c1fb9412aea454b48"], "IndexHour.via_hashlib().sha512()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "e1654981a3a0bb428d268575bd36ea9a5ea5e733ab63a7c39f906cc3a73454dc38a2bf541bc66bb709698f500bbc0eff2a1478bb161021129e01a0f0663f6a79"], "IndexHour.via_hashlib().sha3_256()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "ac6de030b006877a25d4fb7234ba82a32981d16cd5ed09ec84d2ed5fac5c3bfe"], "IndexHour.via_hashlib().sha3_512()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "df759633b48114b4d75cc9b370d57dfed2ede3043d84e5808d450f7b72f94b7376e6d8876e7cece36a2d5c1d0e6c20123419f1ac2c619bb21e8e4bee9fb13c33"], "IndexHour.via_hashlib().shake_128()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "10ae69b1412ed9ea"], "IndexHour.via_hashlib().shake_256()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "72ce409eaea33422"], "IndexHour.via_hashlib().blake2b()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "49c5080625cbde41b5b38269692593f34458e525ad66ef759872dad62e4bcd95cb0e9980e7d212abedc561a841c3ffea95f9c6b434d5aa510d55a2e88a0ec50f"], "IndexHour.via_hashlib().blake2s()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "8d778a00c15f7f34f953aa7f085bcda8eb0b6696e272403ce623c3eef14cc5a3"], "IndexHour.via_values.apply()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHour.via_values.__array_ufunc__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHour.via_values.__call__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHour.via_type_clinic.to_hint()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexHour'>"], "IndexHour.via_type_clinic.check()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexHour.via_type_clinic.__call__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexHour.via_type_clinic.__repr__()": [">>> ix = sf.IndexHour(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHour>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_type_clinic", "IndexHour"], "IndexHourGO.__init__()": [">>> sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.from_labels()": [">>> sf.IndexHourGO.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.from_pandas()": [">>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> sf.IndexHourGO.from_pandas(ix)", "<IndexGO>", "1517-04-01", "1517-12-31", "1517-06-30", "<object>"], "IndexHourGO.to_pandas()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.to_pandas()", "DatetimeIndex(['1517-04-01', '1517-12-31', '1517-06-30'], dtype='datetime64[s]', freq=None)"], "IndexHourGO.to_series()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04-01T00", "1        1517-12-31T00", "2        1517-06-30T00", "<int64>  <datetime64[h]>"], "IndexHourGO.STATIC": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.STATIC", "False"], "IndexHourGO.depth": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.depth", "1"], "IndexHourGO.dtype": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.dtype", "datetime64[h]"], "IndexHourGO.index_types": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexHourGO>", "<object> <object>"], "IndexHourGO.memory": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.memory", "          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD  RMDu", "Name      16   B     16   B     16  B     16   B     16   B     16   B", "Map       472  B     472  B     472 B     472  B     472  B     472  B", "Labels    136  B     152  B     24  B     136  B     152  B     24   B", "Positions 112  B     128  B     0   B     8.22 KB    152  B     24   B", "Total     1.19 KB    1.22 KB    992 B     9.3  KB    1.24 KB    1016 B"], "IndexHourGO.name": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.name"], "IndexHourGO.names": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.names", "('__index0__',)"], "IndexHourGO.nbytes": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.nbytes", "24"], "IndexHourGO.ndim": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.ndim", "1"], "IndexHourGO.positions": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.positions", "[0 1 2]"], "IndexHourGO.shape": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.shape", "(3,)"], "IndexHourGO.size": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.size", "3"], "IndexHourGO.__array__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.__array__()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHourGO.__array_ufunc__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[h]')))"], "IndexHourGO.__bool__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexHourGO.__copy__()": [">>> import copy", ">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> copy.copy(ix)", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> copy.deepcopy(ix)", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.__len__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> len(ix)", "3"], "IndexHourGO.all()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.all()", "True"], "IndexHourGO.any()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.any()", "True"], "IndexHourGO.append()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.append('f')", "GrowOnlyInvalid('Cannot perform an in-place grow-only operation due to the class of the columns Index.')", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.astype()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.astype(str)", "<IndexGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<<U32>"], "IndexHourGO.copy()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.copy()", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.cumprod()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHourGO.cumsum()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHourGO.difference()": [">>> ix1 = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix2 = sf.IndexHourGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexHourGO>", "2022-04-01T00", "2021-12-31T00", "2022-06-30T00", "<datetime64[h]>", ">>> ix1.difference(ix2)", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.dropfalsy()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHourGO>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.dropfalsy()", "<IndexHourGO>", "1620-09-16T00", "1620-11-21T00", "<datetime64[h]>"], "IndexHourGO.dropna()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHourGO>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.dropna()", "<IndexHourGO>", "1620-09-16T00", "1620-11-21T00", "<datetime64[h]>"], "IndexHourGO.equals()": [">>> ix1 = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix2 = sf.IndexHourGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexHourGO>", "2022-04-01T00", "2021-12-31T00", "2022-06-30T00", "<datetime64[h]>", ">>> ix1.equals(ix2)", "False"], "IndexHourGO.extend()": [">>> ix1 = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix2 = sf.IndexHourGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexHourGO>", "2022-04-01T00", "2021-12-31T00", "2022-06-30T00", "<datetime64[h]>", ">>> ix1.extend(ix2)", ">>> ix1", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "2022-04-01T00", "2021-12-31T00", "2022-06-30T00", "<datetime64[h]>"], "IndexHourGO.fillfalsy()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHourGO>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexHourGO.fillna()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHourGO>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.fillna(0)", "<IndexHourGO>", "1620-09-16T00", "1970-01-01T00", "1620-11-21T00", "<datetime64[h]>"], "IndexHourGO.head()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.head(2)", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "<datetime64[h]>"], "IndexHourGO.iloc_searchsorted()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexHourGO.intersection()": [">>> ix1 = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix2 = sf.IndexHourGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexHourGO>", "2022-04-01T00", "2021-12-31T00", "2022-06-30T00", "<datetime64[h]>", ">>> ix1.intersection(ix2)", "<IndexHourGO>", "<datetime64[h]>"], "IndexHourGO.isfalsy()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexHourGO.isin()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.isin(('1517-06-30',))", "[False False False]"], "IndexHourGO.isna()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isna()", "[False  True False]"], "IndexHourGO.label_widths_at_depth()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04-01T00','h'), 1), (numpy.datetime64('1517-12-31T00','h'), 1), (numpy.datetime64('1517-06-30T00','h'), 1))"], "IndexHourGO.level_add()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.level_add('A')", "<IndexHierarchyGO>", "A                  1517-04-01T00", "A                  1517-12-31T00", "A                  1517-06-30T00", "<<U1>              <datetime64[h]>"], "IndexHourGO.loc_searchsorted()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexHourGO.loc_to_iloc()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.loc_to_iloc('1517-06-30')", "[2]", ">>> ix.loc_to_iloc(['1517-04-01', '1517-06-30'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12-31', None))", "slice(1, None, None)"], "IndexHourGO.max()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.max()", "1517-12-31T00"], "IndexHourGO.mean()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHourGO.median()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHourGO.min()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.min()", "1517-04-01T00"], "IndexHourGO.notfalsy()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexHourGO.notna()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notna()", "[ True False  True]"], "IndexHourGO.prod()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHourGO.relabel()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "<IndexHourGO>", "1970-01-01T01", "1970-01-02T07", "1970-01-02T06", "<datetime64[h]>"], "IndexHourGO.rename()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.rename('y')", "<IndexHourGO: y>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.roll()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.roll(2)", "<IndexHourGO>", "1517-12-31T00", "1517-06-30T00", "1517-04-01T00", "<datetime64[h]>"], "IndexHourGO.sample()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.sample(2, seed=0)", "<IndexHourGO>", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.sort()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.sort()", "<IndexHourGO>", "1517-04-01T00", "1517-06-30T00", "1517-12-31T00", "<datetime64[h]>", ">>> ix.sort(ascending=False)", "<IndexHourGO>", "1517-12-31T00", "1517-06-30T00", "1517-04-01T00", "<datetime64[h]>"], "IndexHourGO.std()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHourGO.sum()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHourGO.tail()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.tail(2)", "<IndexHourGO>", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.union()": [">>> ix1 = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix2 = sf.IndexHourGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexHourGO>", "2022-04-01T00", "2021-12-31T00", "2022-06-30T00", "<datetime64[h]>", ">>> ix1.union(ix2)", "<IndexHourGO>", "1517-04-01T00", "1517-06-30T00", "1517-12-31T00", "2021-12-31T00", "2022-04-01T00", "2022-06-30T00", "<datetime64[h]>"], "IndexHourGO.unique()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHourGO>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.unique()", "['1620-09-16T00'           'NaT' '1620-11-21T00']"], "IndexHourGO.values_at_depth()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.values_at_depth(0)", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHourGO.var()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[h]'), dtype('<M8[h]')))"], "IndexHourGO.__contains__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.__contains__('1517-06-30')", "False"], "IndexHourGO.__iter__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-06-30T00','h'))", ">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-06-30T00','h'))"], "IndexHourGO.__reversed__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-04-01T00','h'))", ">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-04-01T00','h'))"], "IndexHourGO.values": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.values", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']", ">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.values", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHourGO.interface": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHourGO>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name    group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexHourGO Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexHourGO Constructor          Construct an Inde...", "from_pandas(value)                   IndexHourGO Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexHourGO Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexHourGO Exporter             Return a complete...", "to_pandas()                          IndexHourGO Exporter             Return a Pandas I...", "to_series()                          IndexHourGO Exporter             Return a Series w...", "to_visidata()                        IndexHourGO Exporter             Open an interacti...", "STATIC                               IndexHourGO Attribute            bool(x) -> bool R...", "depth                                IndexHourGO Attribute            int([x]) -> integ...", "dtype                                IndexHourGO Attribute            Return the dtype ...", "index_types                          IndexHourGO Attribute            Return a Series o...", "memory                               IndexHourGO Attribute            Return a MemoryDi...", "mloc                                 IndexHourGO Attribute            The memory locati...", "name                                 IndexHourGO Attribute            A hashable label ...", "names                                IndexHourGO Attribute            Provide a suitabl...", "nbytes                               IndexHourGO Attribute            Return the total ...", "...                                  ...         ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexHourGO Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexHourGO Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexHourGO Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexHourGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHourGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHourGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHourGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHourGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHourGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHourGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHourGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHourGO Accessor Hashlib", "via_type_clinic.to_hint()            IndexHourGO Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexHourGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexHourGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexHourGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexHourGO Accessor Type Clinic Return a compact ...", "<<U90>                               <<U11>      <<U27>               <<U83>"], "IndexHourGO.__repr__()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> repr(ix)", "<IndexHourGO>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>"], "IndexHourGO.__str__()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> str(ix)", "<IndexHourGO>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>"], "IndexHourGO.display()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display()", "<IndexHourGO>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09-16T00", "NaT", "1620-11-21T00"], "IndexHourGO.display_tall()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_tall()", "<IndexHourGO>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>"], "IndexHourGO.display_wide()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_wide()", "<IndexHourGO>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>"], "IndexHourGO.drop.iloc[]": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.drop.iloc[1]", "<IndexHourGO>", "1517-04-01T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.drop.iloc[1:]", "<IndexHourGO>", "1517-04-01T00", "<datetime64[h]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexHourGO>", "1517-12-31T00", "<datetime64[h]>"], "IndexHourGO.drop.loc[]": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.drop.loc['1517-06-30']", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "<datetime64[h]>", ">>> ix.drop.loc['1517-06-30':]", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "<datetime64[h]>"], "IndexHourGO.[]": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix[1]", "1517-12-31T00", ">>> ix[1:]", "<IndexHourGO>", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix[[0, 2]]", "<IndexHourGO>", "1517-04-01T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.iloc[]": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.iloc[1]", "1517-12-31T00", ">>> ix.iloc[1:]", "<IndexHourGO>", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.iloc[[0, 2]]", "<IndexHourGO>", "1517-04-01T00", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.loc[]": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.loc['1517-06-30']", "<IndexHourGO>", "1517-06-30T00", "<datetime64[h]>", ">>> ix.loc['1517-06-30':]", "<IndexHourGO>", "1517-06-30T00", "<datetime64[h]>"], "IndexHourGO.iter_label()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04-01T00','h'), numpy.datetime64('1517-12-31T00','h'), numpy.datetime64('1517-06-30T00','h'))"], "IndexHourGO.iter_label().apply()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexHourGO.iter_label().apply_iter()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))"], "IndexHourGO.iter_label().apply_iter_items()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))"], "IndexHourGO.iter_label().apply_pool()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexHourGO.__add__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix + 2", "['1517-04-01T02' '1517-12-31T02' '1517-06-30T02']"], "IndexHourGO.__and__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHourGO.__eq__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix == '1517-06-30'", "[False False  True]"], "IndexHourGO.__floordiv__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix // '1517-06-30'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHourGO.__ge__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix >= '1517-06-30'", "[False  True  True]"], "IndexHourGO.__gt__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix > '1517-06-30'", "[False  True False]"], "IndexHourGO.__le__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix <= '1517-06-30'", "[ True False  True]"], "IndexHourGO.__lt__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix < '1517-06-30'", "[ True False False]"], "IndexHourGO.__matmul__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexHourGO.__mod__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix % '1517-06-30'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHourGO.__mul__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix * '1517-06-30'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHourGO.__ne__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix != '1517-06-30'", "[ True  True False]"], "IndexHourGO.__or__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHourGO.__pow__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix ** '1517-06-30'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHourGO.__radd__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> '1517-06-30' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHourGO.__rfloordiv__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> '1517-06-30' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHourGO.__rmatmul__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexHourGO.__rmul__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> '1517-06-30' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHourGO.__rshift__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHourGO.__rsub__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> '1517-06-30' - ix", "[  90 -184    0]"], "IndexHourGO.__rtruediv__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> '1517-06-30' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHourGO.__sub__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix - 2", "['1517-03-31T22' '1517-12-30T22' '1517-06-29T22']"], "IndexHourGO.__truediv__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix / '1517-06-30'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexHourGO.__xor__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHourGO.__abs__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexHourGO.__invert__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHourGO.__neg__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexHourGO.__pos__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexHourGO.via_dt.__call__()": [">>> ix = sf.IndexHourGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexHourGO>", "1620-09-16T00", "NaT", "1620-11-21T00", "<datetime64[h]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexHourGO.via_dt.year": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexHourGO.via_dt.year_month": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexHourGO.via_dt.year_quarter": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexHourGO.via_dt.month": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexHourGO.via_dt.day": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.day", "[ 1 31 30]"], "IndexHourGO.via_dt.hour": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexHourGO.via_dt.minute": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexHourGO.via_dt.second": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexHourGO.via_dt.weekday()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.weekday()", "[6 0 5]"], "IndexHourGO.via_dt.quarter()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexHourGO.via_dt.is_month_end()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.is_month_end()", "[False  True  True]"], "IndexHourGO.via_dt.is_month_start()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.is_month_start()", "[ True False False]"], "IndexHourGO.via_dt.is_year_end()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.is_year_end()", "[False  True False]"], "IndexHourGO.via_dt.is_year_start()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexHourGO.via_dt.is_quarter_end()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.is_quarter_end()", "[False  True  True]"], "IndexHourGO.via_dt.is_quarter_start()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.is_quarter_start()", "[ True False False]"], "IndexHourGO.via_dt.timetuple()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]"], "IndexHourGO.via_dt.isoformat()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.isoformat()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexHourGO.via_dt.fromisoformat()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[h]) for operation on string types')"], "IndexHourGO.via_dt.strftime()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Sunday | April' 'Monday | December' 'Saturday | June']"], "IndexHourGO.via_dt.strptime()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[h]) for operation on string types')"], "IndexHourGO.via_dt.strpdate()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[h]) for operation on string types')"], "IndexHourGO.via_str.__getitem__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str[-1]", "['0' '0' '0']"], "IndexHourGO.via_str.capitalize()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.capitalize()", "['1517-04-01t00' '1517-12-31t00' '1517-06-30t00']"], "IndexHourGO.via_str.center()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.center(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexHourGO.via_str.contains()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexHourGO.via_str.count()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexHourGO.via_str.decode()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)", ">>> ix", "<IndexGO>", "b'1517-04-01T00'", "b'1517-12-31T00'", "b'1517-06-30T00'", "<|S32>", ">>> ix.via_str.decode()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHourGO.via_str.encode()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.encode()", "[b'1517-04-01T00' b'1517-12-31T00' b'1517-06-30T00']"], "IndexHourGO.via_str.endswith()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexHourGO.via_str.find()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexHourGO.via_str.format()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.format('{:-^10}')", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHourGO.via_str.index()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexHourGO.via_str.isalnum()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexHourGO.via_str.isalpha()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexHourGO.via_str.isdecimal()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexHourGO.via_str.isdigit()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexHourGO.via_str.islower()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexHourGO.via_str.isnumeric()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexHourGO.via_str.isspace()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexHourGO.via_str.istitle()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.istitle()", "[ True  True  True]"], "IndexHourGO.via_str.isupper()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.isupper()", "[ True  True  True]"], "IndexHourGO.via_str.ljust()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.ljust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexHourGO.via_str.len()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.len()", "[13 13 13]"], "IndexHourGO.via_str.lower()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.lower()", "['1517-04-01t00' '1517-12-31t00' '1517-06-30t00']"], "IndexHourGO.via_str.lstrip()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.lstrip()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHourGO.via_str.partition()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.partition('X')", "[('1517-04-01T00', '', '') ('1517-12-31T00', '', '')", " ('1517-06-30T00', '', '')]"], "IndexHourGO.via_str.replace()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.replace('X', '*')", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHourGO.via_str.rfind()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexHourGO.via_str.rindex()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexHourGO.via_str.rjust()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.rjust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexHourGO.via_str.rpartition()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04-01T00') ('', '', '1517-12-31T00')", " ('', '', '1517-06-30T00')]"], "IndexHourGO.via_str.rsplit()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.rsplit('X')", "[('1517-04-01T00',) ('1517-12-31T00',) ('1517-06-30T00',)]"], "IndexHourGO.via_str.rstrip()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.rstrip()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHourGO.via_str.split()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.split('X')", "[('1517-04-01T00',) ('1517-12-31T00',) ('1517-06-30T00',)]"], "IndexHourGO.via_str.startswith()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexHourGO.via_str.strip()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.strip()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHourGO.via_str.swapcase()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.swapcase()", "['1517-04-01t00' '1517-12-31t00' '1517-06-30t00']"], "IndexHourGO.via_str.title()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.title()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHourGO.via_str.upper()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.upper()", "['1517-04-01T00' '1517-12-31T00' '1517-06-30T00']"], "IndexHourGO.via_str.zfill()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_str.zfill(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexHourGO.via_re().search()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexHourGO.via_re().match()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexHourGO.via_re().fullmatch()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexHourGO.via_re().split()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04-0', 'T00') ('', '5', '7-', '', '-', '', 'T00')", " ('', '5', '7-06-', '0T00')]"], "IndexHourGO.via_re().findall()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]"], "IndexHourGO.via_re().sub()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04-0==T00' '==5==7-====-====T00' '==5==7-06-==0T00']"], "IndexHourGO.via_re().subn()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04-01T00', 1) ('==517-12-31T00', 1) ('==517-06-30T00', 1)]"], "IndexHourGO.via_hashlib().to_bytes()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexHourGO\\x08q\\xc3\\xff\\xff\\xff\\xff\\xff\\xb8\\x8a\\xc3\\xff\\xff\\xff\\xff\\xffxy\\xc3\\xff\\xff\\xff\\xff\\xff'"], "IndexHourGO.via_hashlib().md5()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "13f058e927847422958d783176c6bb9e"], "IndexHourGO.via_hashlib().sha256()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "10aa98bfe35e0e7fd45148c9ede10bbc1c41b081cf56f12ef655f3902ff246a5"], "IndexHourGO.via_hashlib().sha512()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "9ea23ca95c48304aa91074e66b358b8dba6f6d5d6fac26988605dd0b0dd03fb4f6c067cd6ce3d35c82c0ede1d33270e2bffff7f4b46f914e9961a5e2cd572289"], "IndexHourGO.via_hashlib().sha3_256()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "49d679e908049ad1f6a9d307187524b150d969ef4d4ef3c62fd39656ffc1f56d"], "IndexHourGO.via_hashlib().sha3_512()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "b19815e289cca5a7ade8a760ef01ce9877fe4a9b6039da0d40d6dd7f464dfc35896ea57b6f3f3d205785751447d95e7d9d653bd3a7126aa43339c581719ae288"], "IndexHourGO.via_hashlib().shake_128()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "676d130d2a69802a"], "IndexHourGO.via_hashlib().shake_256()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "6a342c5495c3632d"], "IndexHourGO.via_hashlib().blake2b()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "0d0e5406ccaa8a44a55c3b10526ce7271f78af44c893ca0d8ae0ea2687e1705f69d3781a08153ec5ed7aeeac37068d707d716d00a9ca6678a26ee2fb806a9af7"], "IndexHourGO.via_hashlib().blake2s()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "2949e05c40203520edcdd729abc27bad1ead618a7bc2c44b603758aabf8dff85"], "IndexHourGO.via_values.apply()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHourGO.via_values.__array_ufunc__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHourGO.via_values.__call__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHourGO.via_type_clinic.to_hint()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexHourGO'>"], "IndexHourGO.via_type_clinic.check()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexHourGO.via_type_clinic.__call__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexHourGO.via_type_clinic.__repr__()": [">>> ix = sf.IndexHourGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexHourGO>", "1517-04-01T00", "1517-12-31T00", "1517-06-30T00", "<datetime64[h]>", ">>> ix.via_type_clinic", "IndexHourGO"], "IndexSecond.__init__()": [">>> sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.from_labels()": [">>> sf.IndexSecond.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.from_pandas()": [">>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> sf.IndexSecond.from_pandas(ix)", "<Index>", "1517-04-01", "1517-12-31", "1517-06-30", "<object>"], "IndexSecond.to_pandas()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.to_pandas()", "DatetimeIndex(['1517-04-01', '1517-12-31', '1517-06-30'], dtype='datetime64[s]', freq=None)"], "IndexSecond.to_series()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04-01T00:00:00", "1        1517-12-31T00:00:00", "2        1517-06-30T00:00:00", "<int64>  <datetime64[s]>"], "IndexSecond.STATIC": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.STATIC", "True"], "IndexSecond.depth": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.depth", "1"], "IndexSecond.dtype": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.dtype", "datetime64[s]"], "IndexSecond.index_types": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexSecond>", "<object> <object>"], "IndexSecond.memory": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.memory", "          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Name      16  B     16  B     16  B     16   B     16  B     16  B", "Map       472 B     472 B     472 B     472  B     472 B     472 B", "Labels    136 B     152 B     24  B     136  B     152 B     24  B", "Positions 112 B     128 B     0   B     8.22 KB    152 B     24  B", "Total     844 B     876 B     620 B     8.93 KB    900 B     644 B"], "IndexSecond.name": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.name"], "IndexSecond.names": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.names", "('__index0__',)"], "IndexSecond.nbytes": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.nbytes", "24"], "IndexSecond.ndim": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.ndim", "1"], "IndexSecond.positions": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.positions", "[0 1 2]"], "IndexSecond.shape": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.shape", "(3,)"], "IndexSecond.size": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.size", "3"], "IndexSecond.__array__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.__array__()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecond.__array_ufunc__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[s]')))"], "IndexSecond.__bool__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexSecond.__copy__()": [">>> import copy", ">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> copy.copy(ix)", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> copy.deepcopy(ix)", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.__len__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> len(ix)", "3"], "IndexSecond.all()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.all()", "True"], "IndexSecond.any()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.any()", "True"], "IndexSecond.astype()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.astype(str)", "<Index>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<<U38>"], "IndexSecond.copy()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.copy()", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.cumprod()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecond.cumsum()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecond.difference()": [">>> ix1 = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix2 = sf.IndexSecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexSecond>", "2022-04-01T00:00:00", "2021-12-31T00:00:00", "2022-06-30T00:00:00", "<datetime64[s]>", ">>> ix1.difference(ix2)", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.dropfalsy()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecond>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.dropfalsy()", "<IndexSecond>", "1620-09-16T00:00:00", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecond.dropna()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecond>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.dropna()", "<IndexSecond>", "1620-09-16T00:00:00", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecond.equals()": [">>> ix1 = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix2 = sf.IndexSecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexSecond>", "2022-04-01T00:00:00", "2021-12-31T00:00:00", "2022-06-30T00:00:00", "<datetime64[s]>", ">>> ix1.equals(ix2)", "False"], "IndexSecond.fillfalsy()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecond>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexSecond.fillna()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecond>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.fillna(0)", "<IndexSecond>", "1620-09-16T00:00:00", "1970-01-01T00:00:00", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecond.head()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.head(2)", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "<datetime64[s]>"], "IndexSecond.iloc_searchsorted()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexSecond.intersection()": [">>> ix1 = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix2 = sf.IndexSecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexSecond>", "2022-04-01T00:00:00", "2021-12-31T00:00:00", "2022-06-30T00:00:00", "<datetime64[s]>", ">>> ix1.intersection(ix2)", "<IndexSecond>", "<datetime64[s]>"], "IndexSecond.isfalsy()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexSecond.isin()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.isin(('1517-06-30',))", "[False False False]"], "IndexSecond.isna()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isna()", "[False  True False]"], "IndexSecond.label_widths_at_depth()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04-01T00:00:00'), 1), (numpy.datetime64('1517-12-31T00:00:00'), 1), (numpy.datetime64('1517-06-30T00:00:00'), 1))"], "IndexSecond.level_add()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.level_add('A')", "<IndexHierarchy>", "A                1517-04-01T00:00:00", "A                1517-12-31T00:00:00", "A                1517-06-30T00:00:00", "<<U1>            <datetime64[s]>"], "IndexSecond.loc_searchsorted()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexSecond.loc_to_iloc()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.loc_to_iloc('1517-06-30')", "[2]", ">>> ix.loc_to_iloc(['1517-04-01', '1517-06-30'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12-31', None))", "slice(1, None, None)"], "IndexSecond.max()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.max()", "1517-12-31T00:00:00"], "IndexSecond.mean()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecond.median()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecond.min()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.min()", "1517-04-01T00:00:00"], "IndexSecond.notfalsy()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexSecond.notna()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notna()", "[ True False  True]"], "IndexSecond.prod()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecond.relabel()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "<IndexSecond>", "1970-01-01T00:00:01", "1970-01-01T00:00:31", "1970-01-01T00:00:30", "<datetime64[s]>"], "IndexSecond.rename()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.rename('y')", "<IndexSecond: y>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.roll()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.roll(2)", "<IndexSecond>", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "1517-04-01T00:00:00", "<datetime64[s]>"], "IndexSecond.sample()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.sample(2, seed=0)", "<IndexSecond>", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.sort()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.sort()", "<IndexSecond>", "1517-04-01T00:00:00", "1517-06-30T00:00:00", "1517-12-31T00:00:00", "<datetime64[s]>", ">>> ix.sort(ascending=False)", "<IndexSecond>", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "1517-04-01T00:00:00", "<datetime64[s]>"], "IndexSecond.std()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecond.sum()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecond.tail()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.tail(2)", "<IndexSecond>", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.union()": [">>> ix1 = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix2 = sf.IndexSecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexSecond>", "2022-04-01T00:00:00", "2021-12-31T00:00:00", "2022-06-30T00:00:00", "<datetime64[s]>", ">>> ix1.union(ix2)", "<IndexSecond>", "1517-04-01T00:00:00", "1517-06-30T00:00:00", "1517-12-31T00:00:00", "2021-12-31T00:00:00", "2022-04-01T00:00:00", "2022-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.unique()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecond>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.unique()", "['1620-09-16T00:00:00'                 'NaT' '1620-11-21T00:00:00']"], "IndexSecond.values_at_depth()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.values_at_depth(0)", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecond.var()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecond.__contains__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.__contains__('1517-06-30')", "False"], "IndexSecond.__iter__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-06-30T00:00:00'))", ">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-06-30T00:00:00'))"], "IndexSecond.__reversed__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-04-01T00:00:00'))", ">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-04-01T00:00:00'))"], "IndexSecond.values": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.values", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']", ">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.values", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecond.interface": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecond>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name    group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexSecond Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexSecond Constructor          Construct an Inde...", "from_pandas(value)                   IndexSecond Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexSecond Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexSecond Exporter             Return a complete...", "to_pandas()                          IndexSecond Exporter             Return a Pandas I...", "to_series()                          IndexSecond Exporter             Return a Series w...", "to_visidata()                        IndexSecond Exporter             Open an interacti...", "STATIC                               IndexSecond Attribute            bool(x) -> bool R...", "depth                                IndexSecond Attribute            int([x]) -> integ...", "dtype                                IndexSecond Attribute            Return the dtype ...", "index_types                          IndexSecond Attribute            Return a Series o...", "memory                               IndexSecond Attribute            Return a MemoryDi...", "mloc                                 IndexSecond Attribute            The memory locati...", "name                                 IndexSecond Attribute            A hashable label ...", "names                                IndexSecond Attribute            Provide a suitabl...", "nbytes                               IndexSecond Attribute            Return the total ...", "...                                  ...         ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexSecond Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexSecond Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexSecond Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexSecond Accessor Hashlib", "via_hashlib(include_name, include... IndexSecond Accessor Hashlib", "via_hashlib(include_name, include... IndexSecond Accessor Hashlib", "via_hashlib(include_name, include... IndexSecond Accessor Hashlib", "via_hashlib(include_name, include... IndexSecond Accessor Hashlib", "via_hashlib(include_name, include... IndexSecond Accessor Hashlib", "via_hashlib(include_name, include... IndexSecond Accessor Hashlib", "via_hashlib(include_name, include... IndexSecond Accessor Hashlib", "via_hashlib(include_name, include... IndexSecond Accessor Hashlib", "via_type_clinic.to_hint()            IndexSecond Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexSecond Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexSecond Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexSecond Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexSecond Accessor Type Clinic Return a compact ...", "<<U90>                               <<U11>      <<U27>               <<U83>"], "IndexSecond.__repr__()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> repr(ix)", "<IndexSecond>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecond.__str__()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> str(ix)", "<IndexSecond>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecond.display()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display()", "<IndexSecond>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00"], "IndexSecond.display_tall()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_tall()", "<IndexSecond>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecond.display_wide()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_wide()", "<IndexSecond>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecond.drop.iloc[]": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.drop.iloc[1]", "<IndexSecond>", "1517-04-01T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.drop.iloc[1:]", "<IndexSecond>", "1517-04-01T00:00:00", "<datetime64[s]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexSecond>", "1517-12-31T00:00:00", "<datetime64[s]>"], "IndexSecond.drop.loc[]": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.drop.loc['1517-06-30']", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "<datetime64[s]>", ">>> ix.drop.loc['1517-06-30':]", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "<datetime64[s]>"], "IndexSecond.[]": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix[1]", "1517-12-31T00:00:00", ">>> ix[1:]", "<IndexSecond>", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix[[0, 2]]", "<IndexSecond>", "1517-04-01T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.iloc[]": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.iloc[1]", "1517-12-31T00:00:00", ">>> ix.iloc[1:]", "<IndexSecond>", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.iloc[[0, 2]]", "<IndexSecond>", "1517-04-01T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.loc[]": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.loc['1517-06-30']", "<IndexSecond>", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.loc['1517-06-30':]", "<IndexSecond>", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecond.iter_label()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04-01T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-06-30T00:00:00'))"], "IndexSecond.iter_label().apply()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexSecond.iter_label().apply_iter()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))"], "IndexSecond.iter_label().apply_iter_items()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))"], "IndexSecond.iter_label().apply_pool()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexSecond.__add__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix + 2", "['1517-04-01T00:00:02' '1517-12-31T00:00:02' '1517-06-30T00:00:02']"], "IndexSecond.__and__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecond.__eq__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix == '1517-06-30'", "[False False  True]"], "IndexSecond.__floordiv__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix // '1517-06-30'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecond.__ge__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix >= '1517-06-30'", "[False  True  True]"], "IndexSecond.__gt__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix > '1517-06-30'", "[False  True False]"], "IndexSecond.__le__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix <= '1517-06-30'", "[ True False  True]"], "IndexSecond.__lt__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix < '1517-06-30'", "[ True False False]"], "IndexSecond.__matmul__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexSecond.__mod__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix % '1517-06-30'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecond.__mul__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix * '1517-06-30'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecond.__ne__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix != '1517-06-30'", "[ True  True False]"], "IndexSecond.__or__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecond.__pow__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix ** '1517-06-30'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecond.__radd__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> '1517-06-30' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecond.__rfloordiv__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> '1517-06-30' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecond.__rmatmul__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexSecond.__rmul__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> '1517-06-30' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecond.__rshift__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecond.__rsub__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> '1517-06-30' - ix", "[  90 -184    0]"], "IndexSecond.__rtruediv__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> '1517-06-30' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecond.__sub__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix - 2", "['1517-03-31T23:59:58' '1517-12-30T23:59:58' '1517-06-29T23:59:58']"], "IndexSecond.__truediv__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix / '1517-06-30'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecond.__xor__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecond.__abs__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexSecond.__invert__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecond.__neg__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexSecond.__pos__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexSecond.via_dt.__call__()": [">>> ix = sf.IndexSecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecond>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexSecond.via_dt.year": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexSecond.via_dt.year_month": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexSecond.via_dt.year_quarter": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexSecond.via_dt.month": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexSecond.via_dt.day": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.day", "[ 1 31 30]"], "IndexSecond.via_dt.hour": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexSecond.via_dt.minute": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexSecond.via_dt.second": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexSecond.via_dt.weekday()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.weekday()", "[6 0 5]"], "IndexSecond.via_dt.quarter()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexSecond.via_dt.is_month_end()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.is_month_end()", "[False  True  True]"], "IndexSecond.via_dt.is_month_start()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.is_month_start()", "[ True False False]"], "IndexSecond.via_dt.is_year_end()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.is_year_end()", "[False  True False]"], "IndexSecond.via_dt.is_year_start()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexSecond.via_dt.is_quarter_end()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.is_quarter_end()", "[False  True  True]"], "IndexSecond.via_dt.is_quarter_start()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.is_quarter_start()", "[ True False False]"], "IndexSecond.via_dt.timetuple()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]"], "IndexSecond.via_dt.isoformat()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.isoformat()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecond.via_dt.fromisoformat()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[s]) for operation on string types')"], "IndexSecond.via_dt.strftime()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Sunday | April' 'Monday | December' 'Saturday | June']"], "IndexSecond.via_dt.strptime()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[s]) for operation on string types')"], "IndexSecond.via_dt.strpdate()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[s]) for operation on string types')"], "IndexSecond.via_str.__getitem__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str[-1]", "['0' '0' '0']"], "IndexSecond.via_str.capitalize()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.capitalize()", "['1517-04-01t00:00:00' '1517-12-31t00:00:00' '1517-06-30t00:00:00']"], "IndexSecond.via_str.center()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.center(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexSecond.via_str.contains()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexSecond.via_str.count()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexSecond.via_str.decode()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)", ">>> ix", "<Index>", "b'1517-04-01T00:00:00'", "b'1517-12-31T00:00:00'", "b'1517-06-30T00:00:00'", "<|S38>", ">>> ix.via_str.decode()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecond.via_str.encode()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.encode()", "[b'1517-04-01T00:00:00' b'1517-12-31T00:00:00' b'1517-06-30T00:00:00']"], "IndexSecond.via_str.endswith()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexSecond.via_str.find()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexSecond.via_str.format()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.format('{:-^10}')", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecond.via_str.index()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexSecond.via_str.isalnum()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexSecond.via_str.isalpha()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexSecond.via_str.isdecimal()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexSecond.via_str.isdigit()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexSecond.via_str.islower()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexSecond.via_str.isnumeric()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexSecond.via_str.isspace()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexSecond.via_str.istitle()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.istitle()", "[ True  True  True]"], "IndexSecond.via_str.isupper()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isupper()", "[ True  True  True]"], "IndexSecond.via_str.ljust()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.ljust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexSecond.via_str.len()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.len()", "[19 19 19]"], "IndexSecond.via_str.lower()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.lower()", "['1517-04-01t00:00:00' '1517-12-31t00:00:00' '1517-06-30t00:00:00']"], "IndexSecond.via_str.lstrip()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.lstrip()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecond.via_str.partition()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.partition('X')", "[('1517-04-01T00:00:00', '', '') ('1517-12-31T00:00:00', '', '')", " ('1517-06-30T00:00:00', '', '')]"], "IndexSecond.via_str.replace()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.replace('X', '*')", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecond.via_str.rfind()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexSecond.via_str.rindex()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexSecond.via_str.rjust()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.rjust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexSecond.via_str.rpartition()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04-01T00:00:00') ('', '', '1517-12-31T00:00:00')", " ('', '', '1517-06-30T00:00:00')]"], "IndexSecond.via_str.rsplit()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.rsplit('X')", "[('1517-04-01T00:00:00',) ('1517-12-31T00:00:00',)", " ('1517-06-30T00:00:00',)]"], "IndexSecond.via_str.rstrip()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.rstrip()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecond.via_str.split()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.split('X')", "[('1517-04-01T00:00:00',) ('1517-12-31T00:00:00',)", " ('1517-06-30T00:00:00',)]"], "IndexSecond.via_str.startswith()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexSecond.via_str.strip()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.strip()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecond.via_str.swapcase()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.swapcase()", "['1517-04-01t00:00:00' '1517-12-31t00:00:00' '1517-06-30t00:00:00']"], "IndexSecond.via_str.title()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.title()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecond.via_str.upper()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.upper()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecond.via_str.zfill()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.zfill(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexSecond.via_re().search()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexSecond.via_re().match()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexSecond.via_re().fullmatch()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexSecond.via_re().split()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04-0', 'T00:00:00')", " ('', '5', '7-', '', '-', '', 'T00:00:00')", " ('', '5', '7-06-', '0T00:00:00')]"], "IndexSecond.via_re().findall()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]"], "IndexSecond.via_re().sub()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04-0==T00:00:00' '==5==7-====-====T00:00:00'", " '==5==7-06-==0T00:00:00']"], "IndexSecond.via_re().subn()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04-01T00:00:00', 1) ('==517-12-31T00:00:00', 1)", " ('==517-06-30T00:00:00', 1)]"], "IndexSecond.via_hashlib().to_bytes()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b\"IndexSecond\\x80\\x80e\\xac\\xfc\\xff\\xff\\xff\\x80\\xbb\\xce\\xad\\xfc\\xff\\xff\\xff\\x80'\\xdc\\xac\\xfc\\xff\\xff\\xff\""], "IndexSecond.via_hashlib().md5()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "2dc3867c8313e5d329bac87bbbee8537"], "IndexSecond.via_hashlib().sha256()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "fc548bd5ecc3973f157c4a09d01f6cbdc60a2974b03077ab50e78df59f89b1a6"], "IndexSecond.via_hashlib().sha512()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "95994316eef0295d653db073415295f83be8b0a4c3e2d5b0d19dbadf268abfe312ad176ee4464326616176173130c32607df9cd219e90e4246be6b679b08eff5"], "IndexSecond.via_hashlib().sha3_256()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "472b364469a4e41461e86158ff07eea7c884a54998cb5026398b3377c270a68b"], "IndexSecond.via_hashlib().sha3_512()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "55664c745b17312cfe69b1d2e7d373f3d721456adcf13aff91630fb7a99306b8f8a99a7737e76e73c64bfd4b0cf83bbce38b9292d354f4ae05c1109db1052b7d"], "IndexSecond.via_hashlib().shake_128()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "73c81d6e54a31537"], "IndexSecond.via_hashlib().shake_256()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "cab0dbaceb6a21d6"], "IndexSecond.via_hashlib().blake2b()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "2567aaa25bd7e3d6ecd1e4e5158d02f6254a6cc11b714a071540e3a64c40fb5642261b15457e6a7430c90246896a651d52963536f5f62f5b6422a91c386fc527"], "IndexSecond.via_hashlib().blake2s()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "afa94ecec07495431138fc60abe588cc6e7960820e733009db19b4aba0242778"], "IndexSecond.via_values.apply()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecond.via_values.__array_ufunc__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecond.via_values.__call__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecond.via_type_clinic.to_hint()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexSecond'>"], "IndexSecond.via_type_clinic.check()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexSecond.via_type_clinic.__call__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexSecond.via_type_clinic.__repr__()": [">>> ix = sf.IndexSecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecond>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_type_clinic", "IndexSecond"], "IndexSecondGO.__init__()": [">>> sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.from_labels()": [">>> sf.IndexSecondGO.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.from_pandas()": [">>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> sf.IndexSecondGO.from_pandas(ix)", "<IndexGO>", "1517-04-01", "1517-12-31", "1517-06-30", "<object>"], "IndexSecondGO.to_pandas()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.to_pandas()", "DatetimeIndex(['1517-04-01', '1517-12-31', '1517-06-30'], dtype='datetime64[s]', freq=None)"], "IndexSecondGO.to_series()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04-01T00:00:00", "1        1517-12-31T00:00:00", "2        1517-06-30T00:00:00", "<int64>  <datetime64[s]>"], "IndexSecondGO.STATIC": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.STATIC", "False"], "IndexSecondGO.depth": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.depth", "1"], "IndexSecondGO.dtype": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.dtype", "datetime64[s]"], "IndexSecondGO.index_types": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexSecondGO>", "<object> <object>"], "IndexSecondGO.memory": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.memory", "          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD  RMDu", "Name      16   B     16   B     16  B     16   B     16   B     16   B", "Map       472  B     472  B     472 B     472  B     472  B     472  B", "Labels    136  B     152  B     24  B     136  B     152  B     24   B", "Positions 112  B     128  B     0   B     8.22 KB    152  B     24   B", "Total     1.19 KB    1.22 KB    992 B     9.3  KB    1.24 KB    1016 B"], "IndexSecondGO.name": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.name"], "IndexSecondGO.names": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.names", "('__index0__',)"], "IndexSecondGO.nbytes": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.nbytes", "24"], "IndexSecondGO.ndim": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.ndim", "1"], "IndexSecondGO.positions": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.positions", "[0 1 2]"], "IndexSecondGO.shape": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.shape", "(3,)"], "IndexSecondGO.size": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.size", "3"], "IndexSecondGO.__array__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.__array__()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecondGO.__array_ufunc__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[s]')))"], "IndexSecondGO.__bool__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexSecondGO.__copy__()": [">>> import copy", ">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> copy.copy(ix)", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> copy.deepcopy(ix)", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.__len__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> len(ix)", "3"], "IndexSecondGO.all()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.all()", "True"], "IndexSecondGO.any()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.any()", "True"], "IndexSecondGO.append()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.append('f')", "GrowOnlyInvalid('Cannot perform an in-place grow-only operation due to the class of the columns Index.')", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.astype()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.astype(str)", "<IndexGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<<U38>"], "IndexSecondGO.copy()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.copy()", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.cumprod()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecondGO.cumsum()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecondGO.difference()": [">>> ix1 = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix2 = sf.IndexSecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexSecondGO>", "2022-04-01T00:00:00", "2021-12-31T00:00:00", "2022-06-30T00:00:00", "<datetime64[s]>", ">>> ix1.difference(ix2)", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.dropfalsy()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecondGO>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.dropfalsy()", "<IndexSecondGO>", "1620-09-16T00:00:00", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecondGO.dropna()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecondGO>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.dropna()", "<IndexSecondGO>", "1620-09-16T00:00:00", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecondGO.equals()": [">>> ix1 = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix2 = sf.IndexSecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexSecondGO>", "2022-04-01T00:00:00", "2021-12-31T00:00:00", "2022-06-30T00:00:00", "<datetime64[s]>", ">>> ix1.equals(ix2)", "False"], "IndexSecondGO.extend()": [">>> ix1 = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix2 = sf.IndexSecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexSecondGO>", "2022-04-01T00:00:00", "2021-12-31T00:00:00", "2022-06-30T00:00:00", "<datetime64[s]>", ">>> ix1.extend(ix2)", ">>> ix1", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "2022-04-01T00:00:00", "2021-12-31T00:00:00", "2022-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.fillfalsy()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecondGO>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexSecondGO.fillna()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecondGO>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.fillna(0)", "<IndexSecondGO>", "1620-09-16T00:00:00", "1970-01-01T00:00:00", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecondGO.head()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.head(2)", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "<datetime64[s]>"], "IndexSecondGO.iloc_searchsorted()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexSecondGO.intersection()": [">>> ix1 = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix2 = sf.IndexSecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexSecondGO>", "2022-04-01T00:00:00", "2021-12-31T00:00:00", "2022-06-30T00:00:00", "<datetime64[s]>", ">>> ix1.intersection(ix2)", "<IndexSecondGO>", "<datetime64[s]>"], "IndexSecondGO.isfalsy()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexSecondGO.isin()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.isin(('1517-06-30',))", "[False False False]"], "IndexSecondGO.isna()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isna()", "[False  True False]"], "IndexSecondGO.label_widths_at_depth()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04-01T00:00:00'), 1), (numpy.datetime64('1517-12-31T00:00:00'), 1), (numpy.datetime64('1517-06-30T00:00:00'), 1))"], "IndexSecondGO.level_add()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.level_add('A')", "<IndexHierarchyGO>", "A                  1517-04-01T00:00:00", "A                  1517-12-31T00:00:00", "A                  1517-06-30T00:00:00", "<<U1>              <datetime64[s]>"], "IndexSecondGO.loc_searchsorted()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexSecondGO.loc_to_iloc()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.loc_to_iloc('1517-06-30')", "[2]", ">>> ix.loc_to_iloc(['1517-04-01', '1517-06-30'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12-31', None))", "slice(1, None, None)"], "IndexSecondGO.max()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.max()", "1517-12-31T00:00:00"], "IndexSecondGO.mean()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecondGO.median()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecondGO.min()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.min()", "1517-04-01T00:00:00"], "IndexSecondGO.notfalsy()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexSecondGO.notna()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notna()", "[ True False  True]"], "IndexSecondGO.prod()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecondGO.relabel()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "<IndexSecondGO>", "1970-01-01T00:00:01", "1970-01-01T00:00:31", "1970-01-01T00:00:30", "<datetime64[s]>"], "IndexSecondGO.rename()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.rename('y')", "<IndexSecondGO: y>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.roll()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.roll(2)", "<IndexSecondGO>", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "1517-04-01T00:00:00", "<datetime64[s]>"], "IndexSecondGO.sample()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.sample(2, seed=0)", "<IndexSecondGO>", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.sort()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.sort()", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-06-30T00:00:00", "1517-12-31T00:00:00", "<datetime64[s]>", ">>> ix.sort(ascending=False)", "<IndexSecondGO>", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "1517-04-01T00:00:00", "<datetime64[s]>"], "IndexSecondGO.std()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecondGO.sum()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecondGO.tail()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.tail(2)", "<IndexSecondGO>", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.union()": [">>> ix1 = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix2 = sf.IndexSecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexSecondGO>", "2022-04-01T00:00:00", "2021-12-31T00:00:00", "2022-06-30T00:00:00", "<datetime64[s]>", ">>> ix1.union(ix2)", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-06-30T00:00:00", "1517-12-31T00:00:00", "2021-12-31T00:00:00", "2022-04-01T00:00:00", "2022-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.unique()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecondGO>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.unique()", "['1620-09-16T00:00:00'                 'NaT' '1620-11-21T00:00:00']"], "IndexSecondGO.values_at_depth()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.values_at_depth(0)", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecondGO.var()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[s]'), dtype('<M8[s]')))"], "IndexSecondGO.__contains__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.__contains__('1517-06-30')", "False"], "IndexSecondGO.__iter__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-06-30T00:00:00'))", ">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-06-30T00:00:00'))"], "IndexSecondGO.__reversed__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-04-01T00:00:00'))", ">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-04-01T00:00:00'))"], "IndexSecondGO.values": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.values", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']", ">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.values", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecondGO.interface": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecondGO>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name      group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexSecondGO Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexSecondGO Constructor          Construct an Inde...", "from_pandas(value)                   IndexSecondGO Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexSecondGO Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexSecondGO Exporter             Return a complete...", "to_pandas()                          IndexSecondGO Exporter             Return a Pandas I...", "to_series()                          IndexSecondGO Exporter             Return a Series w...", "to_visidata()                        IndexSecondGO Exporter             Open an interacti...", "STATIC                               IndexSecondGO Attribute            bool(x) -> bool R...", "depth                                IndexSecondGO Attribute            int([x]) -> integ...", "dtype                                IndexSecondGO Attribute            Return the dtype ...", "index_types                          IndexSecondGO Attribute            Return a Series o...", "memory                               IndexSecondGO Attribute            Return a MemoryDi...", "mloc                                 IndexSecondGO Attribute            The memory locati...", "name                                 IndexSecondGO Attribute            A hashable label ...", "names                                IndexSecondGO Attribute            Provide a suitabl...", "nbytes                               IndexSecondGO Attribute            Return the total ...", "...                                  ...           ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexSecondGO Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexSecondGO Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexSecondGO Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexSecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexSecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexSecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexSecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexSecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexSecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexSecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexSecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexSecondGO Accessor Hashlib", "via_type_clinic.to_hint()            IndexSecondGO Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexSecondGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexSecondGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexSecondGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexSecondGO Accessor Type Clinic Return a compact ...", "<<U90>                               <<U13>        <<U27>               <<U83>"], "IndexSecondGO.__repr__()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> repr(ix)", "<IndexSecondGO>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecondGO.__str__()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> str(ix)", "<IndexSecondGO>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecondGO.display()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display()", "<IndexSecondGO>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00"], "IndexSecondGO.display_tall()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_tall()", "<IndexSecondGO>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecondGO.display_wide()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_wide()", "<IndexSecondGO>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>"], "IndexSecondGO.drop.iloc[]": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.drop.iloc[1]", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.drop.iloc[1:]", "<IndexSecondGO>", "1517-04-01T00:00:00", "<datetime64[s]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexSecondGO>", "1517-12-31T00:00:00", "<datetime64[s]>"], "IndexSecondGO.drop.loc[]": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.drop.loc['1517-06-30']", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "<datetime64[s]>", ">>> ix.drop.loc['1517-06-30':]", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "<datetime64[s]>"], "IndexSecondGO.[]": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix[1]", "1517-12-31T00:00:00", ">>> ix[1:]", "<IndexSecondGO>", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix[[0, 2]]", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.iloc[]": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.iloc[1]", "1517-12-31T00:00:00", ">>> ix.iloc[1:]", "<IndexSecondGO>", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.iloc[[0, 2]]", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.loc[]": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.loc['1517-06-30']", "<IndexSecondGO>", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.loc['1517-06-30':]", "<IndexSecondGO>", "1517-06-30T00:00:00", "<datetime64[s]>"], "IndexSecondGO.iter_label()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04-01T00:00:00'), numpy.datetime64('1517-12-31T00:00:00'), numpy.datetime64('1517-06-30T00:00:00'))"], "IndexSecondGO.iter_label().apply()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexSecondGO.iter_label().apply_iter()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))"], "IndexSecondGO.iter_label().apply_iter_items()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))"], "IndexSecondGO.iter_label().apply_pool()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexSecondGO.__add__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix + 2", "['1517-04-01T00:00:02' '1517-12-31T00:00:02' '1517-06-30T00:00:02']"], "IndexSecondGO.__and__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecondGO.__eq__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix == '1517-06-30'", "[False False  True]"], "IndexSecondGO.__floordiv__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix // '1517-06-30'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecondGO.__ge__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix >= '1517-06-30'", "[False  True  True]"], "IndexSecondGO.__gt__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix > '1517-06-30'", "[False  True False]"], "IndexSecondGO.__le__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix <= '1517-06-30'", "[ True False  True]"], "IndexSecondGO.__lt__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix < '1517-06-30'", "[ True False False]"], "IndexSecondGO.__matmul__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexSecondGO.__mod__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix % '1517-06-30'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecondGO.__mul__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix * '1517-06-30'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecondGO.__ne__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix != '1517-06-30'", "[ True  True False]"], "IndexSecondGO.__or__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecondGO.__pow__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix ** '1517-06-30'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecondGO.__radd__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> '1517-06-30' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecondGO.__rfloordiv__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> '1517-06-30' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecondGO.__rmatmul__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexSecondGO.__rmul__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> '1517-06-30' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecondGO.__rshift__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecondGO.__rsub__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> '1517-06-30' - ix", "[  90 -184    0]"], "IndexSecondGO.__rtruediv__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> '1517-06-30' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecondGO.__sub__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix - 2", "['1517-03-31T23:59:58' '1517-12-30T23:59:58' '1517-06-29T23:59:58']"], "IndexSecondGO.__truediv__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix / '1517-06-30'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexSecondGO.__xor__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecondGO.__abs__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexSecondGO.__invert__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecondGO.__neg__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexSecondGO.__pos__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexSecondGO.via_dt.__call__()": [">>> ix = sf.IndexSecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexSecondGO>", "1620-09-16T00:00:00", "NaT", "1620-11-21T00:00:00", "<datetime64[s]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexSecondGO.via_dt.year": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexSecondGO.via_dt.year_month": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexSecondGO.via_dt.year_quarter": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexSecondGO.via_dt.month": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexSecondGO.via_dt.day": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.day", "[ 1 31 30]"], "IndexSecondGO.via_dt.hour": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexSecondGO.via_dt.minute": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexSecondGO.via_dt.second": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexSecondGO.via_dt.weekday()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.weekday()", "[6 0 5]"], "IndexSecondGO.via_dt.quarter()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexSecondGO.via_dt.is_month_end()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.is_month_end()", "[False  True  True]"], "IndexSecondGO.via_dt.is_month_start()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.is_month_start()", "[ True False False]"], "IndexSecondGO.via_dt.is_year_end()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.is_year_end()", "[False  True False]"], "IndexSecondGO.via_dt.is_year_start()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexSecondGO.via_dt.is_quarter_end()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.is_quarter_end()", "[False  True  True]"], "IndexSecondGO.via_dt.is_quarter_start()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.is_quarter_start()", "[ True False False]"], "IndexSecondGO.via_dt.timetuple()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]"], "IndexSecondGO.via_dt.isoformat()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.isoformat()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecondGO.via_dt.fromisoformat()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[s]) for operation on string types')"], "IndexSecondGO.via_dt.strftime()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Sunday | April' 'Monday | December' 'Saturday | June']"], "IndexSecondGO.via_dt.strptime()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[s]) for operation on string types')"], "IndexSecondGO.via_dt.strpdate()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[s]) for operation on string types')"], "IndexSecondGO.via_str.__getitem__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str[-1]", "['0' '0' '0']"], "IndexSecondGO.via_str.capitalize()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.capitalize()", "['1517-04-01t00:00:00' '1517-12-31t00:00:00' '1517-06-30t00:00:00']"], "IndexSecondGO.via_str.center()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.center(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexSecondGO.via_str.contains()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexSecondGO.via_str.count()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexSecondGO.via_str.decode()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)", ">>> ix", "<IndexGO>", "b'1517-04-01T00:00:00'", "b'1517-12-31T00:00:00'", "b'1517-06-30T00:00:00'", "<|S38>", ">>> ix.via_str.decode()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecondGO.via_str.encode()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.encode()", "[b'1517-04-01T00:00:00' b'1517-12-31T00:00:00' b'1517-06-30T00:00:00']"], "IndexSecondGO.via_str.endswith()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexSecondGO.via_str.find()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexSecondGO.via_str.format()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.format('{:-^10}')", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecondGO.via_str.index()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexSecondGO.via_str.isalnum()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexSecondGO.via_str.isalpha()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexSecondGO.via_str.isdecimal()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexSecondGO.via_str.isdigit()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexSecondGO.via_str.islower()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexSecondGO.via_str.isnumeric()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexSecondGO.via_str.isspace()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexSecondGO.via_str.istitle()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.istitle()", "[ True  True  True]"], "IndexSecondGO.via_str.isupper()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.isupper()", "[ True  True  True]"], "IndexSecondGO.via_str.ljust()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.ljust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexSecondGO.via_str.len()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.len()", "[19 19 19]"], "IndexSecondGO.via_str.lower()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.lower()", "['1517-04-01t00:00:00' '1517-12-31t00:00:00' '1517-06-30t00:00:00']"], "IndexSecondGO.via_str.lstrip()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.lstrip()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecondGO.via_str.partition()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.partition('X')", "[('1517-04-01T00:00:00', '', '') ('1517-12-31T00:00:00', '', '')", " ('1517-06-30T00:00:00', '', '')]"], "IndexSecondGO.via_str.replace()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.replace('X', '*')", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecondGO.via_str.rfind()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexSecondGO.via_str.rindex()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexSecondGO.via_str.rjust()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.rjust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexSecondGO.via_str.rpartition()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04-01T00:00:00') ('', '', '1517-12-31T00:00:00')", " ('', '', '1517-06-30T00:00:00')]"], "IndexSecondGO.via_str.rsplit()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.rsplit('X')", "[('1517-04-01T00:00:00',) ('1517-12-31T00:00:00',)", " ('1517-06-30T00:00:00',)]"], "IndexSecondGO.via_str.rstrip()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.rstrip()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecondGO.via_str.split()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.split('X')", "[('1517-04-01T00:00:00',) ('1517-12-31T00:00:00',)", " ('1517-06-30T00:00:00',)]"], "IndexSecondGO.via_str.startswith()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexSecondGO.via_str.strip()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.strip()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecondGO.via_str.swapcase()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.swapcase()", "['1517-04-01t00:00:00' '1517-12-31t00:00:00' '1517-06-30t00:00:00']"], "IndexSecondGO.via_str.title()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.title()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecondGO.via_str.upper()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.upper()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexSecondGO.via_str.zfill()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_str.zfill(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexSecondGO.via_re().search()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexSecondGO.via_re().match()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexSecondGO.via_re().fullmatch()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexSecondGO.via_re().split()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04-0', 'T00:00:00')", " ('', '5', '7-', '', '-', '', 'T00:00:00')", " ('', '5', '7-06-', '0T00:00:00')]"], "IndexSecondGO.via_re().findall()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]"], "IndexSecondGO.via_re().sub()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04-0==T00:00:00' '==5==7-====-====T00:00:00'", " '==5==7-06-==0T00:00:00']"], "IndexSecondGO.via_re().subn()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04-01T00:00:00', 1) ('==517-12-31T00:00:00', 1)", " ('==517-06-30T00:00:00', 1)]"], "IndexSecondGO.via_hashlib().to_bytes()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b\"IndexSecondGO\\x80\\x80e\\xac\\xfc\\xff\\xff\\xff\\x80\\xbb\\xce\\xad\\xfc\\xff\\xff\\xff\\x80'\\xdc\\xac\\xfc\\xff\\xff\\xff\""], "IndexSecondGO.via_hashlib().md5()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "fd9fcaafd727daafa7d8387e0f674019"], "IndexSecondGO.via_hashlib().sha256()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "898b1f70af4d5214e5e6dab71da9b5b2a4156e899bf71a4f4f81c3d49241fa93"], "IndexSecondGO.via_hashlib().sha512()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "13bd604baa40fc6bc477cc640ad913e5539f778968b2a569954b0438d325c4e019d07c9fbe67f80d8f9206112a9e552ea6f158d327df1a2dc52021e12cdb6108"], "IndexSecondGO.via_hashlib().sha3_256()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "63766375d6682ded938446cfb4597784e99383dacbc4b958ea44eb1a99951d5f"], "IndexSecondGO.via_hashlib().sha3_512()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "b1e46fb316fd528f170fb654cb2478655f89611a701b2a43cc9de26670901f520b84b349ed14b361cc97700c34293322fd231df8c4934b3bc6d93ffc0675574b"], "IndexSecondGO.via_hashlib().shake_128()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "122431a25bd532f7"], "IndexSecondGO.via_hashlib().shake_256()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "dc9db63df80e71c4"], "IndexSecondGO.via_hashlib().blake2b()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "90c9773bfa9e99631bc3a23b7a41520180a4d1b0d67ca685043af62340029b0cc20f470761535773c491130169080e34137c1a6f796aaf567c59461420b7f31d"], "IndexSecondGO.via_hashlib().blake2s()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "9fd203fd501bc9d27ac51a65da75d80f0b35557e5ea859d01e29fa6ee4bd9a1b"], "IndexSecondGO.via_values.apply()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecondGO.via_values.__array_ufunc__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecondGO.via_values.__call__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexSecondGO.via_type_clinic.to_hint()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexSecondGO'>"], "IndexSecondGO.via_type_clinic.check()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexSecondGO.via_type_clinic.__call__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexSecondGO.via_type_clinic.__repr__()": [">>> ix = sf.IndexSecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexSecondGO>", "1517-04-01T00:00:00", "1517-12-31T00:00:00", "1517-06-30T00:00:00", "<datetime64[s]>", ">>> ix.via_type_clinic", "IndexSecondGO"], "IndexMillisecond.__init__()": [">>> sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.from_labels()": [">>> sf.IndexMillisecond.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.from_pandas()": [">>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> sf.IndexMillisecond.from_pandas(ix)", "<Index>", "1517-04-01", "1517-12-31", "1517-06-30", "<object>"], "IndexMillisecond.to_pandas()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.to_pandas()", "DatetimeIndex(['1517-04-01', '1517-12-31', '1517-06-30'], dtype='datetime64[ms]', freq=None)"], "IndexMillisecond.to_series()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04-01T00:00:...", "1        1517-12-31T00:00:...", "2        1517-06-30T00:00:...", "<int64>  <datetime64[ms]>"], "IndexMillisecond.STATIC": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.STATIC", "True"], "IndexMillisecond.depth": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.depth", "1"], "IndexMillisecond.dtype": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.dtype", "datetime64[ms]"], "IndexMillisecond.index_types": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexMillisecond>", "<object> <object>"], "IndexMillisecond.memory": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.memory", "          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Name      16  B     16  B     16  B     16   B     16  B     16  B", "Map       472 B     472 B     472 B     472  B     472 B     472 B", "Labels    136 B     152 B     24  B     136  B     152 B     24  B", "Positions 112 B     128 B     0   B     8.22 KB    152 B     24  B", "Total     844 B     876 B     620 B     8.93 KB    900 B     644 B"], "IndexMillisecond.name": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.name"], "IndexMillisecond.names": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.names", "('__index0__',)"], "IndexMillisecond.nbytes": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.nbytes", "24"], "IndexMillisecond.ndim": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.ndim", "1"], "IndexMillisecond.positions": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.positions", "[0 1 2]"], "IndexMillisecond.shape": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.shape", "(3,)"], "IndexMillisecond.size": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.size", "3"], "IndexMillisecond.__array__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.__array__()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecond.__array_ufunc__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[ms]')))"], "IndexMillisecond.__bool__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexMillisecond.__copy__()": [">>> import copy", ">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> copy.copy(ix)", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> copy.deepcopy(ix)", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.__len__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> len(ix)", "3"], "IndexMillisecond.all()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.all()", "True"], "IndexMillisecond.any()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.any()", "True"], "IndexMillisecond.astype()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.astype(str)", "<Index>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<<U42>"], "IndexMillisecond.copy()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.copy()", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.cumprod()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecond.cumsum()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecond.difference()": [">>> ix1 = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix2 = sf.IndexMillisecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMillisecond>", "2022-04-01T00:00:00.000", "2021-12-31T00:00:00.000", "2022-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix1.difference(ix2)", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.dropfalsy()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.dropfalsy()", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.dropna()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.dropna()", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.equals()": [">>> ix1 = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix2 = sf.IndexMillisecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMillisecond>", "2022-04-01T00:00:00.000", "2021-12-31T00:00:00.000", "2022-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix1.equals(ix2)", "False"], "IndexMillisecond.fillfalsy()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexMillisecond.fillna()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.fillna(0)", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "1970-01-01T00:00:00.000", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.head()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.head(2)", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.iloc_searchsorted()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexMillisecond.intersection()": [">>> ix1 = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix2 = sf.IndexMillisecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMillisecond>", "2022-04-01T00:00:00.000", "2021-12-31T00:00:00.000", "2022-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix1.intersection(ix2)", "<IndexMillisecond>", "<datetime64[ms]>"], "IndexMillisecond.isfalsy()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexMillisecond.isin()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.isin(('1517-06-30',))", "[False False False]"], "IndexMillisecond.isna()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isna()", "[False  True False]"], "IndexMillisecond.label_widths_at_depth()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04-01T00:00:00.000'), 1), (numpy.datetime64('1517-12-31T00:00:00.000'), 1), (numpy.datetime64('1517-06-30T00:00:00.000'), 1))"], "IndexMillisecond.level_add()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.level_add('A')", "<IndexHierarchy>", "A                1517-04-01T00:00:...", "A                1517-12-31T00:00:...", "A                1517-06-30T00:00:...", "<<U1>            <datetime64[ms]>"], "IndexMillisecond.loc_searchsorted()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexMillisecond.loc_to_iloc()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.loc_to_iloc('1517-06-30')", "[2]", ">>> ix.loc_to_iloc(['1517-04-01', '1517-06-30'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12-31', None))", "slice(1, None, None)"], "IndexMillisecond.max()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.max()", "1517-12-31T00:00:00.000"], "IndexMillisecond.mean()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecond.median()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecond.min()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.min()", "1517-04-01T00:00:00.000"], "IndexMillisecond.notfalsy()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexMillisecond.notna()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notna()", "[ True False  True]"], "IndexMillisecond.prod()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecond.relabel()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "<IndexMillisecond>", "1970-01-01T00:00:00.001", "1970-01-01T00:00:00.031", "1970-01-01T00:00:00.030", "<datetime64[ms]>"], "IndexMillisecond.rename()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.rename('y')", "<IndexMillisecond: y>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.roll()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.roll(2)", "<IndexMillisecond>", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "1517-04-01T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.sample()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.sample(2, seed=0)", "<IndexMillisecond>", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.sort()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.sort()", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-06-30T00:00:00.000", "1517-12-31T00:00:00.000", "<datetime64[ms]>", ">>> ix.sort(ascending=False)", "<IndexMillisecond>", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "1517-04-01T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.std()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecond.sum()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecond.tail()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.tail(2)", "<IndexMillisecond>", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.union()": [">>> ix1 = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix2 = sf.IndexMillisecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMillisecond>", "2022-04-01T00:00:00.000", "2021-12-31T00:00:00.000", "2022-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix1.union(ix2)", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-06-30T00:00:00.000", "1517-12-31T00:00:00.000", "2021-12-31T00:00:00.000", "2022-04-01T00:00:00.000", "2022-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.unique()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.unique()", "['1620-09-16T00:00:00.000'                     'NaT'", " '1620-11-21T00:00:00.000']"], "IndexMillisecond.values_at_depth()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.values_at_depth(0)", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecond.var()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecond.__contains__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.__contains__('1517-06-30')", "False"], "IndexMillisecond.__iter__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-06-30T00:00:00.000'))", ">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-06-30T00:00:00.000'))"], "IndexMillisecond.__reversed__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-04-01T00:00:00.000'))", ">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-04-01T00:00:00.000'))"], "IndexMillisecond.values": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.values", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']", ">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.values", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecond.interface": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name         group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexMillisecond Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexMillisecond Constructor          Construct an Inde...", "from_pandas(value)                   IndexMillisecond Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexMillisecond Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexMillisecond Exporter             Return a complete...", "to_pandas()                          IndexMillisecond Exporter             Return a Pandas I...", "to_series()                          IndexMillisecond Exporter             Return a Series w...", "to_visidata()                        IndexMillisecond Exporter             Open an interacti...", "STATIC                               IndexMillisecond Attribute            bool(x) -> bool R...", "depth                                IndexMillisecond Attribute            int([x]) -> integ...", "dtype                                IndexMillisecond Attribute            Return the dtype ...", "index_types                          IndexMillisecond Attribute            Return a Series o...", "memory                               IndexMillisecond Attribute            Return a MemoryDi...", "mloc                                 IndexMillisecond Attribute            The memory locati...", "name                                 IndexMillisecond Attribute            A hashable label ...", "names                                IndexMillisecond Attribute            Provide a suitabl...", "nbytes                               IndexMillisecond Attribute            Return the total ...", "...                                  ...              ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexMillisecond Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexMillisecond Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexMillisecond Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexMillisecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecond Accessor Hashlib", "via_type_clinic.to_hint()            IndexMillisecond Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexMillisecond Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexMillisecond Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexMillisecond Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexMillisecond Accessor Type Clinic Return a compact ...", "<<U90>                               <<U16>           <<U27>               <<U83>"], "IndexMillisecond.__repr__()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> repr(ix)", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.__str__()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> str(ix)", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.display()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display()", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000"], "IndexMillisecond.display_tall()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_tall()", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.display_wide()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_wide()", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.drop.iloc[]": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.drop.iloc[1]", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.drop.iloc[1:]", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "<datetime64[ms]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexMillisecond>", "1517-12-31T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.drop.loc[]": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.drop.loc['1517-06-30']", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "<datetime64[ms]>", ">>> ix.drop.loc['1517-06-30':]", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.[]": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix[1]", "1517-12-31T00:00:00.000", ">>> ix[1:]", "<IndexMillisecond>", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix[[0, 2]]", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.iloc[]": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.iloc[1]", "1517-12-31T00:00:00.000", ">>> ix.iloc[1:]", "<IndexMillisecond>", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.iloc[[0, 2]]", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.loc[]": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.loc['1517-06-30']", "<IndexMillisecond>", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.loc['1517-06-30':]", "<IndexMillisecond>", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecond.iter_label()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04-01T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-06-30T00:00:00.000'))"], "IndexMillisecond.iter_label().apply()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexMillisecond.iter_label().apply_iter()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))"], "IndexMillisecond.iter_label().apply_iter_items()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))"], "IndexMillisecond.iter_label().apply_pool()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexMillisecond.__add__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix + 2", "['1517-04-01T00:00:00.002' '1517-12-31T00:00:00.002'", " '1517-06-30T00:00:00.002']"], "IndexMillisecond.__and__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecond.__eq__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix == '1517-06-30'", "[False False  True]"], "IndexMillisecond.__floordiv__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix // '1517-06-30'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecond.__ge__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix >= '1517-06-30'", "[False  True  True]"], "IndexMillisecond.__gt__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix > '1517-06-30'", "[False  True False]"], "IndexMillisecond.__le__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix <= '1517-06-30'", "[ True False  True]"], "IndexMillisecond.__lt__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix < '1517-06-30'", "[ True False False]"], "IndexMillisecond.__matmul__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexMillisecond.__mod__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix % '1517-06-30'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecond.__mul__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix * '1517-06-30'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecond.__ne__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix != '1517-06-30'", "[ True  True False]"], "IndexMillisecond.__or__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecond.__pow__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix ** '1517-06-30'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecond.__radd__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> '1517-06-30' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecond.__rfloordiv__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> '1517-06-30' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecond.__rmatmul__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexMillisecond.__rmul__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> '1517-06-30' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecond.__rshift__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecond.__rsub__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> '1517-06-30' - ix", "[  90 -184    0]"], "IndexMillisecond.__rtruediv__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> '1517-06-30' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecond.__sub__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix - 2", "['1517-03-31T23:59:59.998' '1517-12-30T23:59:59.998'", " '1517-06-29T23:59:59.998']"], "IndexMillisecond.__truediv__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix / '1517-06-30'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecond.__xor__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecond.__abs__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMillisecond.__invert__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecond.__neg__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMillisecond.__pos__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMillisecond.via_dt.__call__()": [">>> ix = sf.IndexMillisecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecond>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexMillisecond.via_dt.year": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexMillisecond.via_dt.year_month": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexMillisecond.via_dt.year_quarter": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexMillisecond.via_dt.month": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexMillisecond.via_dt.day": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.day", "[ 1 31 30]"], "IndexMillisecond.via_dt.hour": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexMillisecond.via_dt.minute": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexMillisecond.via_dt.second": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexMillisecond.via_dt.weekday()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.weekday()", "[6 0 5]"], "IndexMillisecond.via_dt.quarter()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexMillisecond.via_dt.is_month_end()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.is_month_end()", "[False  True  True]"], "IndexMillisecond.via_dt.is_month_start()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.is_month_start()", "[ True False False]"], "IndexMillisecond.via_dt.is_year_end()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.is_year_end()", "[False  True False]"], "IndexMillisecond.via_dt.is_year_start()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexMillisecond.via_dt.is_quarter_end()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.is_quarter_end()", "[False  True  True]"], "IndexMillisecond.via_dt.is_quarter_start()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.is_quarter_start()", "[ True False False]"], "IndexMillisecond.via_dt.timetuple()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]"], "IndexMillisecond.via_dt.isoformat()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.isoformat()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexMillisecond.via_dt.fromisoformat()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[ms]) for operation on string types')"], "IndexMillisecond.via_dt.strftime()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Sunday | April' 'Monday | December' 'Saturday | June']"], "IndexMillisecond.via_dt.strptime()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[ms]) for operation on string types')"], "IndexMillisecond.via_dt.strpdate()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[ms]) for operation on string types')"], "IndexMillisecond.via_str.__getitem__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str[-1]", "['0' '0' '0']"], "IndexMillisecond.via_str.capitalize()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.capitalize()", "['1517-04-01t00:00:00.000' '1517-12-31t00:00:00.000'", " '1517-06-30t00:00:00.000']"], "IndexMillisecond.via_str.center()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.center(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMillisecond.via_str.contains()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexMillisecond.via_str.count()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexMillisecond.via_str.decode()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)", ">>> ix", "<Index>", "b'1517-04-01T00:00:00.000'", "b'1517-12-31T00:00:00.000'", "b'1517-06-30T00:00:00.000'", "<|S42>", ">>> ix.via_str.decode()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecond.via_str.encode()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.encode()", "[b'1517-04-01T00:00:00.000' b'1517-12-31T00:00:00.000'", " b'1517-06-30T00:00:00.000']"], "IndexMillisecond.via_str.endswith()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexMillisecond.via_str.find()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexMillisecond.via_str.format()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.format('{:-^10}')", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecond.via_str.index()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexMillisecond.via_str.isalnum()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexMillisecond.via_str.isalpha()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexMillisecond.via_str.isdecimal()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexMillisecond.via_str.isdigit()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexMillisecond.via_str.islower()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexMillisecond.via_str.isnumeric()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexMillisecond.via_str.isspace()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexMillisecond.via_str.istitle()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.istitle()", "[ True  True  True]"], "IndexMillisecond.via_str.isupper()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isupper()", "[ True  True  True]"], "IndexMillisecond.via_str.ljust()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.ljust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMillisecond.via_str.len()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.len()", "[23 23 23]"], "IndexMillisecond.via_str.lower()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.lower()", "['1517-04-01t00:00:00.000' '1517-12-31t00:00:00.000'", " '1517-06-30t00:00:00.000']"], "IndexMillisecond.via_str.lstrip()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.lstrip()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecond.via_str.partition()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.partition('X')", "[('1517-04-01T00:00:00.000', '', '') ('1517-12-31T00:00:00.000', '', '')", " ('1517-06-30T00:00:00.000', '', '')]"], "IndexMillisecond.via_str.replace()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.replace('X', '*')", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecond.via_str.rfind()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexMillisecond.via_str.rindex()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexMillisecond.via_str.rjust()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.rjust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMillisecond.via_str.rpartition()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04-01T00:00:00.000') ('', '', '1517-12-31T00:00:00.000')", " ('', '', '1517-06-30T00:00:00.000')]"], "IndexMillisecond.via_str.rsplit()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.rsplit('X')", "[('1517-04-01T00:00:00.000',) ('1517-12-31T00:00:00.000',)", " ('1517-06-30T00:00:00.000',)]"], "IndexMillisecond.via_str.rstrip()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.rstrip()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecond.via_str.split()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.split('X')", "[('1517-04-01T00:00:00.000',) ('1517-12-31T00:00:00.000',)", " ('1517-06-30T00:00:00.000',)]"], "IndexMillisecond.via_str.startswith()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexMillisecond.via_str.strip()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.strip()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecond.via_str.swapcase()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.swapcase()", "['1517-04-01t00:00:00.000' '1517-12-31t00:00:00.000'", " '1517-06-30t00:00:00.000']"], "IndexMillisecond.via_str.title()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.title()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecond.via_str.upper()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.upper()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecond.via_str.zfill()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.zfill(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMillisecond.via_re().search()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexMillisecond.via_re().match()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexMillisecond.via_re().fullmatch()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexMillisecond.via_re().split()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04-0', 'T00:00:00.000')", " ('', '5', '7-', '', '-', '', 'T00:00:00.000')", " ('', '5', '7-06-', '0T00:00:00.000')]"], "IndexMillisecond.via_re().findall()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]"], "IndexMillisecond.via_re().sub()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04-0==T00:00:00.000' '==5==7-====-====T00:00:00.000'", " '==5==7-06-==0T00:00:00.000']"], "IndexMillisecond.via_re().subn()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04-01T00:00:00.000', 1) ('==517-12-31T00:00:00.000', 1)", " ('==517-06-30T00:00:00.000', 1)]"], "IndexMillisecond.via_hashlib().to_bytes()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexMillisecond\\x00\\xf4}l\\x01\\xf3\\xff\\xff\\x00l\\x8c\\xef\\x06\\xf3\\xff\\xff\\x00L\\xfa;\\x03\\xf3\\xff\\xff'"], "IndexMillisecond.via_hashlib().md5()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "0f03542be0557170a170367d3970067f"], "IndexMillisecond.via_hashlib().sha256()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "5eb138be10461476ecf3878818cf29bd545c046cf5c7387eff7b9b08a4284e4e"], "IndexMillisecond.via_hashlib().sha512()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "c4e48ff824741afe8dfe0c96dc668037759f83ddd785af3cd239259c4dc902bbc0c698f139f36e5dce89b5e2c7c21e7fa64d821094ef7d23011956da86fd0c9c"], "IndexMillisecond.via_hashlib().sha3_256()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "fb07ee6e9b372ed460cd4a5f9249163c6e10ac23ba043684b3605c96f67201c3"], "IndexMillisecond.via_hashlib().sha3_512()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "228b960a62a4989f1c15fc8d5113f65fe197853869bf326c9894e306e444d2dacfb6f6726be378c5b148d48c86db06a154bf11f05ea3d9005356442abbcb4d34"], "IndexMillisecond.via_hashlib().shake_128()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "8885cc3ee9a8bd27"], "IndexMillisecond.via_hashlib().shake_256()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "cd46b09d5dd385f6"], "IndexMillisecond.via_hashlib().blake2b()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "120a8ca43ad30fb30450a0a69b5466c1830e8313f6a87eed5b426bad6208836be223d6029128e407ed02249e2028c587d22881cfbed5eb414818c038917ef4e6"], "IndexMillisecond.via_hashlib().blake2s()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "7dc9c7ecee5b6eb50d6f5ee093048f44531aca68be2481c174a2e40b59706c98"], "IndexMillisecond.via_values.apply()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecond.via_values.__array_ufunc__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecond.via_values.__call__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecond.via_type_clinic.to_hint()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexMillisecond'>"], "IndexMillisecond.via_type_clinic.check()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexMillisecond.via_type_clinic.__call__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexMillisecond.via_type_clinic.__repr__()": [">>> ix = sf.IndexMillisecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecond>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_type_clinic", "IndexMillisecond"], "IndexMillisecondGO.__init__()": [">>> sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.from_labels()": [">>> sf.IndexMillisecondGO.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.from_pandas()": [">>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> sf.IndexMillisecondGO.from_pandas(ix)", "<IndexGO>", "1517-04-01", "1517-12-31", "1517-06-30", "<object>"], "IndexMillisecondGO.to_pandas()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.to_pandas()", "DatetimeIndex(['1517-04-01', '1517-12-31', '1517-06-30'], dtype='datetime64[ms]', freq=None)"], "IndexMillisecondGO.to_series()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04-01T00:00:...", "1        1517-12-31T00:00:...", "2        1517-06-30T00:00:...", "<int64>  <datetime64[ms]>"], "IndexMillisecondGO.STATIC": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.STATIC", "False"], "IndexMillisecondGO.depth": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.depth", "1"], "IndexMillisecondGO.dtype": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.dtype", "datetime64[ms]"], "IndexMillisecondGO.index_types": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexMillisecondGO>", "<object> <object>"], "IndexMillisecondGO.memory": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.memory", "          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD  RMDu", "Name      16   B     16   B     16  B     16   B     16   B     16   B", "Map       472  B     472  B     472 B     472  B     472  B     472  B", "Labels    136  B     152  B     24  B     136  B     152  B     24   B", "Positions 112  B     128  B     0   B     8.22 KB    152  B     24   B", "Total     1.19 KB    1.22 KB    992 B     9.3  KB    1.24 KB    1016 B"], "IndexMillisecondGO.name": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.name"], "IndexMillisecondGO.names": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.names", "('__index0__',)"], "IndexMillisecondGO.nbytes": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.nbytes", "24"], "IndexMillisecondGO.ndim": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.ndim", "1"], "IndexMillisecondGO.positions": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.positions", "[0 1 2]"], "IndexMillisecondGO.shape": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.shape", "(3,)"], "IndexMillisecondGO.size": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.size", "3"], "IndexMillisecondGO.__array__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.__array__()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecondGO.__array_ufunc__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[ms]')))"], "IndexMillisecondGO.__bool__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexMillisecondGO.__copy__()": [">>> import copy", ">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> copy.copy(ix)", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> copy.deepcopy(ix)", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.__len__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> len(ix)", "3"], "IndexMillisecondGO.all()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.all()", "True"], "IndexMillisecondGO.any()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.any()", "True"], "IndexMillisecondGO.append()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.append('f')", "GrowOnlyInvalid('Cannot perform an in-place grow-only operation due to the class of the columns Index.')", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.astype()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.astype(str)", "<IndexGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<<U42>"], "IndexMillisecondGO.copy()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.copy()", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.cumprod()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecondGO.cumsum()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecondGO.difference()": [">>> ix1 = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix2 = sf.IndexMillisecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMillisecondGO>", "2022-04-01T00:00:00.000", "2021-12-31T00:00:00.000", "2022-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix1.difference(ix2)", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.dropfalsy()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.dropfalsy()", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.dropna()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.dropna()", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.equals()": [">>> ix1 = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix2 = sf.IndexMillisecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMillisecondGO>", "2022-04-01T00:00:00.000", "2021-12-31T00:00:00.000", "2022-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix1.equals(ix2)", "False"], "IndexMillisecondGO.extend()": [">>> ix1 = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix2 = sf.IndexMillisecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMillisecondGO>", "2022-04-01T00:00:00.000", "2021-12-31T00:00:00.000", "2022-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix1.extend(ix2)", ">>> ix1", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "2022-04-01T00:00:00.000", "2021-12-31T00:00:00.000", "2022-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.fillfalsy()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexMillisecondGO.fillna()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.fillna(0)", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "1970-01-01T00:00:00.000", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.head()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.head(2)", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.iloc_searchsorted()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexMillisecondGO.intersection()": [">>> ix1 = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix2 = sf.IndexMillisecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMillisecondGO>", "2022-04-01T00:00:00.000", "2021-12-31T00:00:00.000", "2022-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix1.intersection(ix2)", "<IndexMillisecondGO>", "<datetime64[ms]>"], "IndexMillisecondGO.isfalsy()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexMillisecondGO.isin()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.isin(('1517-06-30',))", "[False False False]"], "IndexMillisecondGO.isna()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isna()", "[False  True False]"], "IndexMillisecondGO.label_widths_at_depth()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04-01T00:00:00.000'), 1), (numpy.datetime64('1517-12-31T00:00:00.000'), 1), (numpy.datetime64('1517-06-30T00:00:00.000'), 1))"], "IndexMillisecondGO.level_add()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.level_add('A')", "<IndexHierarchyGO>", "A                  1517-04-01T00:00:...", "A                  1517-12-31T00:00:...", "A                  1517-06-30T00:00:...", "<<U1>              <datetime64[ms]>"], "IndexMillisecondGO.loc_searchsorted()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexMillisecondGO.loc_to_iloc()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.loc_to_iloc('1517-06-30')", "[2]", ">>> ix.loc_to_iloc(['1517-04-01', '1517-06-30'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12-31', None))", "slice(1, None, None)"], "IndexMillisecondGO.max()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.max()", "1517-12-31T00:00:00.000"], "IndexMillisecondGO.mean()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecondGO.median()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecondGO.min()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.min()", "1517-04-01T00:00:00.000"], "IndexMillisecondGO.notfalsy()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexMillisecondGO.notna()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notna()", "[ True False  True]"], "IndexMillisecondGO.prod()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecondGO.relabel()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "<IndexMillisecondGO>", "1970-01-01T00:00:00.001", "1970-01-01T00:00:00.031", "1970-01-01T00:00:00.030", "<datetime64[ms]>"], "IndexMillisecondGO.rename()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.rename('y')", "<IndexMillisecondGO: y>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.roll()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.roll(2)", "<IndexMillisecondGO>", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "1517-04-01T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.sample()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.sample(2, seed=0)", "<IndexMillisecondGO>", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.sort()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.sort()", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-06-30T00:00:00.000", "1517-12-31T00:00:00.000", "<datetime64[ms]>", ">>> ix.sort(ascending=False)", "<IndexMillisecondGO>", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "1517-04-01T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.std()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecondGO.sum()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecondGO.tail()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.tail(2)", "<IndexMillisecondGO>", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.union()": [">>> ix1 = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix2 = sf.IndexMillisecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMillisecondGO>", "2022-04-01T00:00:00.000", "2021-12-31T00:00:00.000", "2022-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix1.union(ix2)", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-06-30T00:00:00.000", "1517-12-31T00:00:00.000", "2021-12-31T00:00:00.000", "2022-04-01T00:00:00.000", "2022-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.unique()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.unique()", "['1620-09-16T00:00:00.000'                     'NaT'", " '1620-11-21T00:00:00.000']"], "IndexMillisecondGO.values_at_depth()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.values_at_depth(0)", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecondGO.var()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ms]'), dtype('<M8[ms]')))"], "IndexMillisecondGO.__contains__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.__contains__('1517-06-30')", "False"], "IndexMillisecondGO.__iter__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-06-30T00:00:00.000'))", ">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-06-30T00:00:00.000'))"], "IndexMillisecondGO.__reversed__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-04-01T00:00:00.000'))", ">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-04-01T00:00:00.000'))"], "IndexMillisecondGO.values": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.values", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']", ">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.values", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecondGO.interface": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name           group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexMillisecondGO Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexMillisecondGO Constructor          Construct an Inde...", "from_pandas(value)                   IndexMillisecondGO Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexMillisecondGO Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexMillisecondGO Exporter             Return a complete...", "to_pandas()                          IndexMillisecondGO Exporter             Return a Pandas I...", "to_series()                          IndexMillisecondGO Exporter             Return a Series w...", "to_visidata()                        IndexMillisecondGO Exporter             Open an interacti...", "STATIC                               IndexMillisecondGO Attribute            bool(x) -> bool R...", "depth                                IndexMillisecondGO Attribute            int([x]) -> integ...", "dtype                                IndexMillisecondGO Attribute            Return the dtype ...", "index_types                          IndexMillisecondGO Attribute            Return a Series o...", "memory                               IndexMillisecondGO Attribute            Return a MemoryDi...", "mloc                                 IndexMillisecondGO Attribute            The memory locati...", "name                                 IndexMillisecondGO Attribute            A hashable label ...", "names                                IndexMillisecondGO Attribute            Provide a suitabl...", "nbytes                               IndexMillisecondGO Attribute            Return the total ...", "...                                  ...                ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexMillisecondGO Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexMillisecondGO Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexMillisecondGO Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexMillisecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMillisecondGO Accessor Hashlib", "via_type_clinic.to_hint()            IndexMillisecondGO Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexMillisecondGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexMillisecondGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexMillisecondGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexMillisecondGO Accessor Type Clinic Return a compact ...", "<<U90>                               <<U18>             <<U27>               <<U83>"], "IndexMillisecondGO.__repr__()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> repr(ix)", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.__str__()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> str(ix)", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.display()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display()", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000"], "IndexMillisecondGO.display_tall()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_tall()", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.display_wide()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_wide()", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.drop.iloc[]": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.drop.iloc[1]", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.drop.iloc[1:]", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "<datetime64[ms]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexMillisecondGO>", "1517-12-31T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.drop.loc[]": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.drop.loc['1517-06-30']", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "<datetime64[ms]>", ">>> ix.drop.loc['1517-06-30':]", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.[]": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix[1]", "1517-12-31T00:00:00.000", ">>> ix[1:]", "<IndexMillisecondGO>", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix[[0, 2]]", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.iloc[]": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.iloc[1]", "1517-12-31T00:00:00.000", ">>> ix.iloc[1:]", "<IndexMillisecondGO>", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.iloc[[0, 2]]", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.loc[]": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.loc['1517-06-30']", "<IndexMillisecondGO>", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.loc['1517-06-30':]", "<IndexMillisecondGO>", "1517-06-30T00:00:00.000", "<datetime64[ms]>"], "IndexMillisecondGO.iter_label()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04-01T00:00:00.000'), numpy.datetime64('1517-12-31T00:00:00.000'), numpy.datetime64('1517-06-30T00:00:00.000'))"], "IndexMillisecondGO.iter_label().apply()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexMillisecondGO.iter_label().apply_iter()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))"], "IndexMillisecondGO.iter_label().apply_iter_items()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))"], "IndexMillisecondGO.iter_label().apply_pool()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexMillisecondGO.__add__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix + 2", "['1517-04-01T00:00:00.002' '1517-12-31T00:00:00.002'", " '1517-06-30T00:00:00.002']"], "IndexMillisecondGO.__and__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecondGO.__eq__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix == '1517-06-30'", "[False False  True]"], "IndexMillisecondGO.__floordiv__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix // '1517-06-30'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecondGO.__ge__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix >= '1517-06-30'", "[False  True  True]"], "IndexMillisecondGO.__gt__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix > '1517-06-30'", "[False  True False]"], "IndexMillisecondGO.__le__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix <= '1517-06-30'", "[ True False  True]"], "IndexMillisecondGO.__lt__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix < '1517-06-30'", "[ True False False]"], "IndexMillisecondGO.__matmul__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexMillisecondGO.__mod__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix % '1517-06-30'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecondGO.__mul__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix * '1517-06-30'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecondGO.__ne__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix != '1517-06-30'", "[ True  True False]"], "IndexMillisecondGO.__or__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecondGO.__pow__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix ** '1517-06-30'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecondGO.__radd__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> '1517-06-30' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecondGO.__rfloordiv__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> '1517-06-30' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecondGO.__rmatmul__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexMillisecondGO.__rmul__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> '1517-06-30' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecondGO.__rshift__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecondGO.__rsub__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> '1517-06-30' - ix", "[  90 -184    0]"], "IndexMillisecondGO.__rtruediv__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> '1517-06-30' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecondGO.__sub__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix - 2", "['1517-03-31T23:59:59.998' '1517-12-30T23:59:59.998'", " '1517-06-29T23:59:59.998']"], "IndexMillisecondGO.__truediv__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix / '1517-06-30'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMillisecondGO.__xor__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecondGO.__abs__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMillisecondGO.__invert__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecondGO.__neg__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMillisecondGO.__pos__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMillisecondGO.via_dt.__call__()": [">>> ix = sf.IndexMillisecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMillisecondGO>", "1620-09-16T00:00:00.000", "NaT", "1620-11-21T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexMillisecondGO.via_dt.year": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexMillisecondGO.via_dt.year_month": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexMillisecondGO.via_dt.year_quarter": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexMillisecondGO.via_dt.month": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexMillisecondGO.via_dt.day": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.day", "[ 1 31 30]"], "IndexMillisecondGO.via_dt.hour": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexMillisecondGO.via_dt.minute": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexMillisecondGO.via_dt.second": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexMillisecondGO.via_dt.weekday()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.weekday()", "[6 0 5]"], "IndexMillisecondGO.via_dt.quarter()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexMillisecondGO.via_dt.is_month_end()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.is_month_end()", "[False  True  True]"], "IndexMillisecondGO.via_dt.is_month_start()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.is_month_start()", "[ True False False]"], "IndexMillisecondGO.via_dt.is_year_end()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.is_year_end()", "[False  True False]"], "IndexMillisecondGO.via_dt.is_year_start()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexMillisecondGO.via_dt.is_quarter_end()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.is_quarter_end()", "[False  True  True]"], "IndexMillisecondGO.via_dt.is_quarter_start()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.is_quarter_start()", "[ True False False]"], "IndexMillisecondGO.via_dt.timetuple()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]"], "IndexMillisecondGO.via_dt.isoformat()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.isoformat()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexMillisecondGO.via_dt.fromisoformat()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[ms]) for operation on string types')"], "IndexMillisecondGO.via_dt.strftime()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Sunday | April' 'Monday | December' 'Saturday | June']"], "IndexMillisecondGO.via_dt.strptime()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[ms]) for operation on string types')"], "IndexMillisecondGO.via_dt.strpdate()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[ms]) for operation on string types')"], "IndexMillisecondGO.via_str.__getitem__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str[-1]", "['0' '0' '0']"], "IndexMillisecondGO.via_str.capitalize()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.capitalize()", "['1517-04-01t00:00:00.000' '1517-12-31t00:00:00.000'", " '1517-06-30t00:00:00.000']"], "IndexMillisecondGO.via_str.center()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.center(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMillisecondGO.via_str.contains()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexMillisecondGO.via_str.count()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexMillisecondGO.via_str.decode()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)", ">>> ix", "<IndexGO>", "b'1517-04-01T00:00:00.000'", "b'1517-12-31T00:00:00.000'", "b'1517-06-30T00:00:00.000'", "<|S42>", ">>> ix.via_str.decode()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecondGO.via_str.encode()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.encode()", "[b'1517-04-01T00:00:00.000' b'1517-12-31T00:00:00.000'", " b'1517-06-30T00:00:00.000']"], "IndexMillisecondGO.via_str.endswith()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexMillisecondGO.via_str.find()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexMillisecondGO.via_str.format()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.format('{:-^10}')", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecondGO.via_str.index()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexMillisecondGO.via_str.isalnum()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexMillisecondGO.via_str.isalpha()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexMillisecondGO.via_str.isdecimal()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexMillisecondGO.via_str.isdigit()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexMillisecondGO.via_str.islower()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexMillisecondGO.via_str.isnumeric()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexMillisecondGO.via_str.isspace()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexMillisecondGO.via_str.istitle()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.istitle()", "[ True  True  True]"], "IndexMillisecondGO.via_str.isupper()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.isupper()", "[ True  True  True]"], "IndexMillisecondGO.via_str.ljust()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.ljust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMillisecondGO.via_str.len()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.len()", "[23 23 23]"], "IndexMillisecondGO.via_str.lower()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.lower()", "['1517-04-01t00:00:00.000' '1517-12-31t00:00:00.000'", " '1517-06-30t00:00:00.000']"], "IndexMillisecondGO.via_str.lstrip()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.lstrip()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecondGO.via_str.partition()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.partition('X')", "[('1517-04-01T00:00:00.000', '', '') ('1517-12-31T00:00:00.000', '', '')", " ('1517-06-30T00:00:00.000', '', '')]"], "IndexMillisecondGO.via_str.replace()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.replace('X', '*')", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecondGO.via_str.rfind()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexMillisecondGO.via_str.rindex()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexMillisecondGO.via_str.rjust()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.rjust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMillisecondGO.via_str.rpartition()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04-01T00:00:00.000') ('', '', '1517-12-31T00:00:00.000')", " ('', '', '1517-06-30T00:00:00.000')]"], "IndexMillisecondGO.via_str.rsplit()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.rsplit('X')", "[('1517-04-01T00:00:00.000',) ('1517-12-31T00:00:00.000',)", " ('1517-06-30T00:00:00.000',)]"], "IndexMillisecondGO.via_str.rstrip()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.rstrip()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecondGO.via_str.split()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.split('X')", "[('1517-04-01T00:00:00.000',) ('1517-12-31T00:00:00.000',)", " ('1517-06-30T00:00:00.000',)]"], "IndexMillisecondGO.via_str.startswith()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexMillisecondGO.via_str.strip()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.strip()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecondGO.via_str.swapcase()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.swapcase()", "['1517-04-01t00:00:00.000' '1517-12-31t00:00:00.000'", " '1517-06-30t00:00:00.000']"], "IndexMillisecondGO.via_str.title()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.title()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecondGO.via_str.upper()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.upper()", "['1517-04-01T00:00:00.000' '1517-12-31T00:00:00.000'", " '1517-06-30T00:00:00.000']"], "IndexMillisecondGO.via_str.zfill()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_str.zfill(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMillisecondGO.via_re().search()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexMillisecondGO.via_re().match()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexMillisecondGO.via_re().fullmatch()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexMillisecondGO.via_re().split()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04-0', 'T00:00:00.000')", " ('', '5', '7-', '', '-', '', 'T00:00:00.000')", " ('', '5', '7-06-', '0T00:00:00.000')]"], "IndexMillisecondGO.via_re().findall()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]"], "IndexMillisecondGO.via_re().sub()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04-0==T00:00:00.000' '==5==7-====-====T00:00:00.000'", " '==5==7-06-==0T00:00:00.000']"], "IndexMillisecondGO.via_re().subn()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04-01T00:00:00.000', 1) ('==517-12-31T00:00:00.000', 1)", " ('==517-06-30T00:00:00.000', 1)]"], "IndexMillisecondGO.via_hashlib().to_bytes()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexMillisecondGO\\x00\\xf4}l\\x01\\xf3\\xff\\xff\\x00l\\x8c\\xef\\x06\\xf3\\xff\\xff\\x00L\\xfa;\\x03\\xf3\\xff\\xff'"], "IndexMillisecondGO.via_hashlib().md5()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "137656dc790c6e50a26cbd49ab701798"], "IndexMillisecondGO.via_hashlib().sha256()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "7d7b260fa716baf537d91eb61d39a4ac5de62b835148f1b21720b78741b5a3bd"], "IndexMillisecondGO.via_hashlib().sha512()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "1cbe6233fcbe5d13298d942bf23e715df5964276de8f59e0b62b4231e0cbed44100115add7cd962395f014d36c35c4827574c6ae58d7825f527ce3e1f74b1422"], "IndexMillisecondGO.via_hashlib().sha3_256()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "1c738bff3e65091eb5791dc132d9f5a04d1aa1379f9613966b97a6c005b7cda0"], "IndexMillisecondGO.via_hashlib().sha3_512()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "8112d188ad4b4da6428d2ae11d62da412b99e8804daa90e7c4e57a8754f5e110a8a95ddb957ffe98373435b421d3eddc7cfc160c7429b5921349c3024889eb41"], "IndexMillisecondGO.via_hashlib().shake_128()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "1819c8d9b2964cb9"], "IndexMillisecondGO.via_hashlib().shake_256()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "adf9394d2888ad60"], "IndexMillisecondGO.via_hashlib().blake2b()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "186ae1d4d73a1a005f5a51078ee7067a7cbcacf458a851039a6f9f353aead38019cf023ec9cec0ad3b81ceef1d849d8659d5a085ae5e2a459a6a31e8061f5157"], "IndexMillisecondGO.via_hashlib().blake2s()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "f614837ddc3b3497d06273bf094d013588f9f005be39336a850934a70cce776d"], "IndexMillisecondGO.via_values.apply()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecondGO.via_values.__array_ufunc__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecondGO.via_values.__call__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMillisecondGO.via_type_clinic.to_hint()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexMillisecondGO'>"], "IndexMillisecondGO.via_type_clinic.check()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexMillisecondGO.via_type_clinic.__call__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexMillisecondGO.via_type_clinic.__repr__()": [">>> ix = sf.IndexMillisecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMillisecondGO>", "1517-04-01T00:00:00.000", "1517-12-31T00:00:00.000", "1517-06-30T00:00:00.000", "<datetime64[ms]>", ">>> ix.via_type_clinic", "IndexMillisecondGO"], "IndexMicrosecond.__init__()": [">>> sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.from_labels()": [">>> sf.IndexMicrosecond.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.from_pandas()": [">>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> sf.IndexMicrosecond.from_pandas(ix)", "<Index>", "1517-04-01", "1517-12-31", "1517-06-30", "<object>"], "IndexMicrosecond.to_pandas()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.to_pandas()", "DatetimeIndex(['1517-04-01', '1517-12-31', '1517-06-30'], dtype='datetime64[us]', freq=None)"], "IndexMicrosecond.to_series()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04-01T00:00:...", "1        1517-12-31T00:00:...", "2        1517-06-30T00:00:...", "<int64>  <datetime64[us]>"], "IndexMicrosecond.STATIC": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.STATIC", "True"], "IndexMicrosecond.depth": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.depth", "1"], "IndexMicrosecond.dtype": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.dtype", "datetime64[us]"], "IndexMicrosecond.index_types": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexMicrosecond>", "<object> <object>"], "IndexMicrosecond.memory": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.memory", "          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Name      16  B     16  B     16  B     16   B     16  B     16  B", "Map       472 B     472 B     472 B     472  B     472 B     472 B", "Labels    136 B     152 B     24  B     136  B     152 B     24  B", "Positions 112 B     128 B     0   B     8.22 KB    152 B     24  B", "Total     844 B     876 B     620 B     8.93 KB    900 B     644 B"], "IndexMicrosecond.name": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.name"], "IndexMicrosecond.names": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.names", "('__index0__',)"], "IndexMicrosecond.nbytes": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.nbytes", "24"], "IndexMicrosecond.ndim": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.ndim", "1"], "IndexMicrosecond.positions": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.positions", "[0 1 2]"], "IndexMicrosecond.shape": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.shape", "(3,)"], "IndexMicrosecond.size": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.size", "3"], "IndexMicrosecond.__array__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.__array__()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecond.__array_ufunc__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[us]')))"], "IndexMicrosecond.__bool__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexMicrosecond.__copy__()": [">>> import copy", ">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> copy.copy(ix)", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> copy.deepcopy(ix)", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.__len__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> len(ix)", "3"], "IndexMicrosecond.all()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.all()", "True"], "IndexMicrosecond.any()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.any()", "True"], "IndexMicrosecond.astype()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.astype(str)", "<Index>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<<U45>"], "IndexMicrosecond.copy()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.copy()", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.cumprod()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecond.cumsum()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecond.difference()": [">>> ix1 = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix2 = sf.IndexMicrosecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMicrosecond>", "2022-04-01T00:00:00.000000", "2021-12-31T00:00:00.000000", "2022-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix1.difference(ix2)", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.dropfalsy()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.dropfalsy()", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.dropna()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.dropna()", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.equals()": [">>> ix1 = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix2 = sf.IndexMicrosecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMicrosecond>", "2022-04-01T00:00:00.000000", "2021-12-31T00:00:00.000000", "2022-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix1.equals(ix2)", "False"], "IndexMicrosecond.fillfalsy()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexMicrosecond.fillna()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.fillna(0)", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "1970-01-01T00:00:00.000000", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.head()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.head(2)", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.iloc_searchsorted()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexMicrosecond.intersection()": [">>> ix1 = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix2 = sf.IndexMicrosecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMicrosecond>", "2022-04-01T00:00:00.000000", "2021-12-31T00:00:00.000000", "2022-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix1.intersection(ix2)", "<IndexMicrosecond>", "<datetime64[us]>"], "IndexMicrosecond.isfalsy()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexMicrosecond.isin()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.isin(('1517-06-30',))", "[False False False]"], "IndexMicrosecond.isna()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isna()", "[False  True False]"], "IndexMicrosecond.label_widths_at_depth()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04-01T00:00:00.000000'), 1), (numpy.datetime64('1517-12-31T00:00:00.000000'), 1), (numpy.datetime64('1517-06-30T00:00:00.000000'), 1))"], "IndexMicrosecond.level_add()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.level_add('A')", "<IndexHierarchy>", "A                1517-04-01T00:00:...", "A                1517-12-31T00:00:...", "A                1517-06-30T00:00:...", "<<U1>            <datetime64[us]>"], "IndexMicrosecond.loc_searchsorted()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexMicrosecond.loc_to_iloc()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.loc_to_iloc('1517-06-30')", "[2]", ">>> ix.loc_to_iloc(['1517-04-01', '1517-06-30'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12-31', None))", "slice(1, None, None)"], "IndexMicrosecond.max()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.max()", "1517-12-31T00:00:00.000000"], "IndexMicrosecond.mean()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecond.median()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecond.min()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.min()", "1517-04-01T00:00:00.000000"], "IndexMicrosecond.notfalsy()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexMicrosecond.notna()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notna()", "[ True False  True]"], "IndexMicrosecond.prod()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecond.relabel()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "<IndexMicrosecond>", "1970-01-01T00:00:00.000001", "1970-01-01T00:00:00.000031", "1970-01-01T00:00:00.000030", "<datetime64[us]>"], "IndexMicrosecond.rename()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.rename('y')", "<IndexMicrosecond: y>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.roll()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.roll(2)", "<IndexMicrosecond>", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "1517-04-01T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.sample()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.sample(2, seed=0)", "<IndexMicrosecond>", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.sort()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.sort()", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-06-30T00:00:00.000000", "1517-12-31T00:00:00.000000", "<datetime64[us]>", ">>> ix.sort(ascending=False)", "<IndexMicrosecond>", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "1517-04-01T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.std()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecond.sum()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecond.tail()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.tail(2)", "<IndexMicrosecond>", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.union()": [">>> ix1 = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix2 = sf.IndexMicrosecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMicrosecond>", "2022-04-01T00:00:00.000000", "2021-12-31T00:00:00.000000", "2022-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix1.union(ix2)", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-06-30T00:00:00.000000", "1517-12-31T00:00:00.000000", "2021-12-31T00:00:00.000000", "2022-04-01T00:00:00.000000", "2022-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.unique()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.unique()", "['1620-09-16T00:00:00.000000'                        'NaT'", " '1620-11-21T00:00:00.000000']"], "IndexMicrosecond.values_at_depth()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.values_at_depth(0)", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecond.var()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecond.__contains__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.__contains__('1517-06-30')", "False"], "IndexMicrosecond.__iter__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-06-30T00:00:00.000000'))", ">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-06-30T00:00:00.000000'))"], "IndexMicrosecond.__reversed__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-04-01T00:00:00.000000'))", ">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-04-01T00:00:00.000000'))"], "IndexMicrosecond.values": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.values", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']", ">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.values", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecond.interface": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name         group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexMicrosecond Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexMicrosecond Constructor          Construct an Inde...", "from_pandas(value)                   IndexMicrosecond Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexMicrosecond Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexMicrosecond Exporter             Return a complete...", "to_pandas()                          IndexMicrosecond Exporter             Return a Pandas I...", "to_series()                          IndexMicrosecond Exporter             Return a Series w...", "to_visidata()                        IndexMicrosecond Exporter             Open an interacti...", "STATIC                               IndexMicrosecond Attribute            bool(x) -> bool R...", "depth                                IndexMicrosecond Attribute            int([x]) -> integ...", "dtype                                IndexMicrosecond Attribute            Return the dtype ...", "index_types                          IndexMicrosecond Attribute            Return a Series o...", "memory                               IndexMicrosecond Attribute            Return a MemoryDi...", "mloc                                 IndexMicrosecond Attribute            The memory locati...", "name                                 IndexMicrosecond Attribute            A hashable label ...", "names                                IndexMicrosecond Attribute            Provide a suitabl...", "nbytes                               IndexMicrosecond Attribute            Return the total ...", "...                                  ...              ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexMicrosecond Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexMicrosecond Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexMicrosecond Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexMicrosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecond Accessor Hashlib", "via_type_clinic.to_hint()            IndexMicrosecond Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexMicrosecond Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexMicrosecond Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexMicrosecond Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexMicrosecond Accessor Type Clinic Return a compact ...", "<<U90>                               <<U16>           <<U27>               <<U83>"], "IndexMicrosecond.__repr__()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> repr(ix)", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.__str__()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> str(ix)", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.display()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display()", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000"], "IndexMicrosecond.display_tall()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_tall()", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.display_wide()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_wide()", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.drop.iloc[]": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.drop.iloc[1]", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.drop.iloc[1:]", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "<datetime64[us]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexMicrosecond>", "1517-12-31T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.drop.loc[]": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.drop.loc['1517-06-30']", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "<datetime64[us]>", ">>> ix.drop.loc['1517-06-30':]", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.[]": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix[1]", "1517-12-31T00:00:00.000000", ">>> ix[1:]", "<IndexMicrosecond>", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix[[0, 2]]", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.iloc[]": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.iloc[1]", "1517-12-31T00:00:00.000000", ">>> ix.iloc[1:]", "<IndexMicrosecond>", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.iloc[[0, 2]]", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.loc[]": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.loc['1517-06-30']", "<IndexMicrosecond>", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.loc['1517-06-30':]", "<IndexMicrosecond>", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecond.iter_label()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04-01T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-06-30T00:00:00.000000'))"], "IndexMicrosecond.iter_label().apply()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexMicrosecond.iter_label().apply_iter()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))"], "IndexMicrosecond.iter_label().apply_iter_items()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))"], "IndexMicrosecond.iter_label().apply_pool()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexMicrosecond.__add__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix + 2", "['1517-04-01T00:00:00.000002' '1517-12-31T00:00:00.000002'", " '1517-06-30T00:00:00.000002']"], "IndexMicrosecond.__and__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecond.__eq__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix == '1517-06-30'", "[False False  True]"], "IndexMicrosecond.__floordiv__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix // '1517-06-30'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecond.__ge__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix >= '1517-06-30'", "[False  True  True]"], "IndexMicrosecond.__gt__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix > '1517-06-30'", "[False  True False]"], "IndexMicrosecond.__le__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix <= '1517-06-30'", "[ True False  True]"], "IndexMicrosecond.__lt__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix < '1517-06-30'", "[ True False False]"], "IndexMicrosecond.__matmul__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexMicrosecond.__mod__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix % '1517-06-30'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecond.__mul__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix * '1517-06-30'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecond.__ne__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix != '1517-06-30'", "[ True  True False]"], "IndexMicrosecond.__or__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecond.__pow__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix ** '1517-06-30'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecond.__radd__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> '1517-06-30' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecond.__rfloordiv__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> '1517-06-30' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecond.__rmatmul__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexMicrosecond.__rmul__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> '1517-06-30' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecond.__rshift__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecond.__rsub__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> '1517-06-30' - ix", "[  90 -184    0]"], "IndexMicrosecond.__rtruediv__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> '1517-06-30' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecond.__sub__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix - 2", "['1517-03-31T23:59:59.999998' '1517-12-30T23:59:59.999998'", " '1517-06-29T23:59:59.999998']"], "IndexMicrosecond.__truediv__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix / '1517-06-30'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecond.__xor__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecond.__abs__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMicrosecond.__invert__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecond.__neg__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMicrosecond.__pos__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMicrosecond.via_dt.__call__()": [">>> ix = sf.IndexMicrosecond(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecond>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexMicrosecond.via_dt.year": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexMicrosecond.via_dt.year_month": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexMicrosecond.via_dt.year_quarter": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexMicrosecond.via_dt.month": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexMicrosecond.via_dt.day": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.day", "[ 1 31 30]"], "IndexMicrosecond.via_dt.hour": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexMicrosecond.via_dt.minute": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexMicrosecond.via_dt.second": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexMicrosecond.via_dt.weekday()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.weekday()", "[6 0 5]"], "IndexMicrosecond.via_dt.quarter()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexMicrosecond.via_dt.is_month_end()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.is_month_end()", "[False  True  True]"], "IndexMicrosecond.via_dt.is_month_start()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.is_month_start()", "[ True False False]"], "IndexMicrosecond.via_dt.is_year_end()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.is_year_end()", "[False  True False]"], "IndexMicrosecond.via_dt.is_year_start()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexMicrosecond.via_dt.is_quarter_end()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.is_quarter_end()", "[False  True  True]"], "IndexMicrosecond.via_dt.is_quarter_start()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.is_quarter_start()", "[ True False False]"], "IndexMicrosecond.via_dt.timetuple()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]"], "IndexMicrosecond.via_dt.isoformat()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.isoformat()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexMicrosecond.via_dt.fromisoformat()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[us]) for operation on string types')"], "IndexMicrosecond.via_dt.strftime()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Sunday | April' 'Monday | December' 'Saturday | June']"], "IndexMicrosecond.via_dt.strptime()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[us]) for operation on string types')"], "IndexMicrosecond.via_dt.strpdate()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[us]) for operation on string types')"], "IndexMicrosecond.via_str.__getitem__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str[-1]", "['0' '0' '0']"], "IndexMicrosecond.via_str.capitalize()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.capitalize()", "['1517-04-01t00:00:00.000000' '1517-12-31t00:00:00.000000'", " '1517-06-30t00:00:00.000000']"], "IndexMicrosecond.via_str.center()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.center(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMicrosecond.via_str.contains()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexMicrosecond.via_str.count()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexMicrosecond.via_str.decode()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)", ">>> ix", "<Index>", "b'1517-04-01T00:00:00.000000'", "b'1517-12-31T00:00:00.000000'", "b'1517-06-30T00:00:00.000000'", "<|S45>", ">>> ix.via_str.decode()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecond.via_str.encode()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.encode()", "[b'1517-04-01T00:00:00.000000' b'1517-12-31T00:00:00.000000'", " b'1517-06-30T00:00:00.000000']"], "IndexMicrosecond.via_str.endswith()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexMicrosecond.via_str.find()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexMicrosecond.via_str.format()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.format('{:-^10}')", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecond.via_str.index()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexMicrosecond.via_str.isalnum()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexMicrosecond.via_str.isalpha()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexMicrosecond.via_str.isdecimal()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexMicrosecond.via_str.isdigit()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexMicrosecond.via_str.islower()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexMicrosecond.via_str.isnumeric()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexMicrosecond.via_str.isspace()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexMicrosecond.via_str.istitle()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.istitle()", "[ True  True  True]"], "IndexMicrosecond.via_str.isupper()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isupper()", "[ True  True  True]"], "IndexMicrosecond.via_str.ljust()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.ljust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMicrosecond.via_str.len()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.len()", "[26 26 26]"], "IndexMicrosecond.via_str.lower()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.lower()", "['1517-04-01t00:00:00.000000' '1517-12-31t00:00:00.000000'", " '1517-06-30t00:00:00.000000']"], "IndexMicrosecond.via_str.lstrip()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.lstrip()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecond.via_str.partition()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.partition('X')", "[('1517-04-01T00:00:00.000000', '', '')", " ('1517-12-31T00:00:00.000000', '', '')", " ('1517-06-30T00:00:00.000000', '', '')]"], "IndexMicrosecond.via_str.replace()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.replace('X', '*')", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecond.via_str.rfind()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexMicrosecond.via_str.rindex()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexMicrosecond.via_str.rjust()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.rjust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMicrosecond.via_str.rpartition()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04-01T00:00:00.000000')", " ('', '', '1517-12-31T00:00:00.000000')", " ('', '', '1517-06-30T00:00:00.000000')]"], "IndexMicrosecond.via_str.rsplit()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.rsplit('X')", "[('1517-04-01T00:00:00.000000',) ('1517-12-31T00:00:00.000000',)", " ('1517-06-30T00:00:00.000000',)]"], "IndexMicrosecond.via_str.rstrip()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.rstrip()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecond.via_str.split()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.split('X')", "[('1517-04-01T00:00:00.000000',) ('1517-12-31T00:00:00.000000',)", " ('1517-06-30T00:00:00.000000',)]"], "IndexMicrosecond.via_str.startswith()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexMicrosecond.via_str.strip()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.strip()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecond.via_str.swapcase()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.swapcase()", "['1517-04-01t00:00:00.000000' '1517-12-31t00:00:00.000000'", " '1517-06-30t00:00:00.000000']"], "IndexMicrosecond.via_str.title()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.title()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecond.via_str.upper()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.upper()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecond.via_str.zfill()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.zfill(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMicrosecond.via_re().search()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexMicrosecond.via_re().match()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexMicrosecond.via_re().fullmatch()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexMicrosecond.via_re().split()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04-0', 'T00:00:00.000000')", " ('', '5', '7-', '', '-', '', 'T00:00:00.000000')", " ('', '5', '7-06-', '0T00:00:00.000000')]"], "IndexMicrosecond.via_re().findall()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]"], "IndexMicrosecond.via_re().sub()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04-0==T00:00:00.000000' '==5==7-====-====T00:00:00.000000'", " '==5==7-06-==0T00:00:00.000000']"], "IndexMicrosecond.via_re().subn()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04-01T00:00:00.000000', 1) ('==517-12-31T00:00:00.000000', 1)", " ('==517-06-30T00:00:00.000000', 1)]"], "IndexMicrosecond.via_hashlib().to_bytes()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexMicrosecond\\x00 \\x01\\xcc\\x8f=\\xcd\\xff\\x00\\xe0\\x85\\xbc\\x17S\\xcd\\xff\\x00\\xe0\\xb8I\\xa2D\\xcd\\xff'"], "IndexMicrosecond.via_hashlib().md5()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "390781927890f9c5fe0f156c11389cf8"], "IndexMicrosecond.via_hashlib().sha256()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "e9b165338a65df2190543f6658cf423a22a10c6e9199a0f4d063548e4a542f4d"], "IndexMicrosecond.via_hashlib().sha512()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "a53feff570447c2a5aad2f69c05f5c038767a112543053926d7911c8586efacc8ce1ec16fbae02eb18c05e0ffa0804ce0c8cebd67b42266b57212bd15dc6b0ac"], "IndexMicrosecond.via_hashlib().sha3_256()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "6537d43f76e32f0bd4536e125b09814d4b9354480ac57b11f157b0eb645c6230"], "IndexMicrosecond.via_hashlib().sha3_512()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "a00138e17000727a1f77673c454e905a64d2a33c5a381c35d00026ea75960db116bb6383964814f9aa1ab06911b35f4c7f028892ccd0f6e51e3872e163fd1eb9"], "IndexMicrosecond.via_hashlib().shake_128()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "31383327980dc871"], "IndexMicrosecond.via_hashlib().shake_256()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "2ecd78136ed39c4f"], "IndexMicrosecond.via_hashlib().blake2b()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "67afaf9e49e9146ceb7d41e5f38ac551f0b82ce50f15e44746e06a1663d25bad752ccf6752d590a1318e63a653e1ac74815e32a877893be3db8d47858f64692c"], "IndexMicrosecond.via_hashlib().blake2s()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "00708e40079c86b3bcb29fab77ea0bb1dc0640889bcdb3ccd3e4d037457af654"], "IndexMicrosecond.via_values.apply()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecond.via_values.__array_ufunc__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecond.via_values.__call__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecond.via_type_clinic.to_hint()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexMicrosecond'>"], "IndexMicrosecond.via_type_clinic.check()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexMicrosecond.via_type_clinic.__call__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexMicrosecond.via_type_clinic.__repr__()": [">>> ix = sf.IndexMicrosecond(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecond>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_type_clinic", "IndexMicrosecond"], "IndexMicrosecondGO.__init__()": [">>> sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.from_labels()": [">>> sf.IndexMicrosecondGO.from_labels(('1517-04-01', '1517-12-31', '1517-06-30'))", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.from_pandas()": [">>> ix = pd.Index(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> sf.IndexMicrosecondGO.from_pandas(ix)", "<IndexGO>", "1517-04-01", "1517-12-31", "1517-06-30", "<object>"], "IndexMicrosecondGO.to_pandas()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.to_pandas()", "DatetimeIndex(['1517-04-01', '1517-12-31', '1517-06-30'], dtype='datetime64[us]', freq=None)"], "IndexMicrosecondGO.to_series()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1517-04-01T00:00:...", "1        1517-12-31T00:00:...", "2        1517-06-30T00:00:...", "<int64>  <datetime64[us]>"], "IndexMicrosecondGO.STATIC": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.STATIC", "False"], "IndexMicrosecondGO.depth": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.depth", "1"], "IndexMicrosecondGO.dtype": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.dtype", "datetime64[us]"], "IndexMicrosecondGO.index_types": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexMicrosecondGO>", "<object> <object>"], "IndexMicrosecondGO.memory": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.memory", "          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD  RMDu", "Name      16   B     16   B     16  B     16   B     16   B     16   B", "Map       472  B     472  B     472 B     472  B     472  B     472  B", "Labels    136  B     152  B     24  B     136  B     152  B     24   B", "Positions 112  B     128  B     0   B     8.22 KB    152  B     24   B", "Total     1.19 KB    1.22 KB    992 B     9.3  KB    1.24 KB    1016 B"], "IndexMicrosecondGO.name": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.name"], "IndexMicrosecondGO.names": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.names", "('__index0__',)"], "IndexMicrosecondGO.nbytes": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.nbytes", "24"], "IndexMicrosecondGO.ndim": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.ndim", "1"], "IndexMicrosecondGO.positions": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.positions", "[0 1 2]"], "IndexMicrosecondGO.shape": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.shape", "(3,)"], "IndexMicrosecondGO.size": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix.size", "3"], "IndexMicrosecondGO.__array__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.__array__()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecondGO.__array_ufunc__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[us]')))"], "IndexMicrosecondGO.__bool__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexMicrosecondGO.__copy__()": [">>> import copy", ">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> copy.copy(ix)", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> copy.deepcopy(ix)", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.__len__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> len(ix)", "3"], "IndexMicrosecondGO.all()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.all()", "True"], "IndexMicrosecondGO.any()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.any()", "True"], "IndexMicrosecondGO.append()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.append('f')", "GrowOnlyInvalid('Cannot perform an in-place grow-only operation due to the class of the columns Index.')", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.astype()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.astype(str)", "<IndexGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<<U45>"], "IndexMicrosecondGO.copy()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.copy()", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.cumprod()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecondGO.cumsum()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecondGO.difference()": [">>> ix1 = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix2 = sf.IndexMicrosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMicrosecondGO>", "2022-04-01T00:00:00.000000", "2021-12-31T00:00:00.000000", "2022-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix1.difference(ix2)", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.dropfalsy()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.dropfalsy()", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.dropna()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.dropna()", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.equals()": [">>> ix1 = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix2 = sf.IndexMicrosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMicrosecondGO>", "2022-04-01T00:00:00.000000", "2021-12-31T00:00:00.000000", "2022-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix1.equals(ix2)", "False"], "IndexMicrosecondGO.extend()": [">>> ix1 = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix2 = sf.IndexMicrosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMicrosecondGO>", "2022-04-01T00:00:00.000000", "2021-12-31T00:00:00.000000", "2022-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix1.extend(ix2)", ">>> ix1", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "2022-04-01T00:00:00.000000", "2021-12-31T00:00:00.000000", "2022-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.fillfalsy()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexMicrosecondGO.fillna()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.fillna(0)", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "1970-01-01T00:00:00.000000", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.head()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.head(2)", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.iloc_searchsorted()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexMicrosecondGO.intersection()": [">>> ix1 = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix2 = sf.IndexMicrosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMicrosecondGO>", "2022-04-01T00:00:00.000000", "2021-12-31T00:00:00.000000", "2022-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix1.intersection(ix2)", "<IndexMicrosecondGO>", "<datetime64[us]>"], "IndexMicrosecondGO.isfalsy()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexMicrosecondGO.isin()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.isin(('1517-06-30',))", "[False False False]"], "IndexMicrosecondGO.isna()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.isna()", "[False  True False]"], "IndexMicrosecondGO.label_widths_at_depth()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1517-04-01T00:00:00.000000'), 1), (numpy.datetime64('1517-12-31T00:00:00.000000'), 1), (numpy.datetime64('1517-06-30T00:00:00.000000'), 1))"], "IndexMicrosecondGO.level_add()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.level_add('A')", "<IndexHierarchyGO>", "A                  1517-04-01T00:00:...", "A                  1517-12-31T00:00:...", "A                  1517-06-30T00:00:...", "<<U1>              <datetime64[us]>"], "IndexMicrosecondGO.loc_searchsorted()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexMicrosecondGO.loc_to_iloc()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.loc_to_iloc('1517-06-30')", "[2]", ">>> ix.loc_to_iloc(['1517-04-01', '1517-06-30'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1517-12-31', None))", "slice(1, None, None)"], "IndexMicrosecondGO.max()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.max()", "1517-12-31T00:00:00.000000"], "IndexMicrosecondGO.mean()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecondGO.median()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecondGO.min()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.min()", "1517-04-01T00:00:00.000000"], "IndexMicrosecondGO.notfalsy()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexMicrosecondGO.notna()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.notna()", "[ True False  True]"], "IndexMicrosecondGO.prod()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecondGO.relabel()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "<IndexMicrosecondGO>", "1970-01-01T00:00:00.000001", "1970-01-01T00:00:00.000031", "1970-01-01T00:00:00.000030", "<datetime64[us]>"], "IndexMicrosecondGO.rename()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.rename('y')", "<IndexMicrosecondGO: y>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.roll()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.roll(2)", "<IndexMicrosecondGO>", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "1517-04-01T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.sample()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.sample(2, seed=0)", "<IndexMicrosecondGO>", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.sort()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.sort()", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-06-30T00:00:00.000000", "1517-12-31T00:00:00.000000", "<datetime64[us]>", ">>> ix.sort(ascending=False)", "<IndexMicrosecondGO>", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "1517-04-01T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.std()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecondGO.sum()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecondGO.tail()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.tail(2)", "<IndexMicrosecondGO>", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.union()": [">>> ix1 = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix1", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix2 = sf.IndexMicrosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexMicrosecondGO>", "2022-04-01T00:00:00.000000", "2021-12-31T00:00:00.000000", "2022-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix1.union(ix2)", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-06-30T00:00:00.000000", "1517-12-31T00:00:00.000000", "2021-12-31T00:00:00.000000", "2022-04-01T00:00:00.000000", "2022-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.unique()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.unique()", "['1620-09-16T00:00:00.000000'                        'NaT'", " '1620-11-21T00:00:00.000000']"], "IndexMicrosecondGO.values_at_depth()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.values_at_depth(0)", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecondGO.var()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[us]'), dtype('<M8[us]')))"], "IndexMicrosecondGO.__contains__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.__contains__('1517-06-30')", "False"], "IndexMicrosecondGO.__iter__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-06-30T00:00:00.000000'))", ">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1517-04-01T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-06-30T00:00:00.000000'))"], "IndexMicrosecondGO.__reversed__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-04-01T00:00:00.000000'))", ">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1517-06-30T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-04-01T00:00:00.000000'))"], "IndexMicrosecondGO.values": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.values", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']", ">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.values", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecondGO.interface": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name           group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexMicrosecondGO Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexMicrosecondGO Constructor          Construct an Inde...", "from_pandas(value)                   IndexMicrosecondGO Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexMicrosecondGO Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexMicrosecondGO Exporter             Return a complete...", "to_pandas()                          IndexMicrosecondGO Exporter             Return a Pandas I...", "to_series()                          IndexMicrosecondGO Exporter             Return a Series w...", "to_visidata()                        IndexMicrosecondGO Exporter             Open an interacti...", "STATIC                               IndexMicrosecondGO Attribute            bool(x) -> bool R...", "depth                                IndexMicrosecondGO Attribute            int([x]) -> integ...", "dtype                                IndexMicrosecondGO Attribute            Return the dtype ...", "index_types                          IndexMicrosecondGO Attribute            Return a Series o...", "memory                               IndexMicrosecondGO Attribute            Return a MemoryDi...", "mloc                                 IndexMicrosecondGO Attribute            The memory locati...", "name                                 IndexMicrosecondGO Attribute            A hashable label ...", "names                                IndexMicrosecondGO Attribute            Provide a suitabl...", "nbytes                               IndexMicrosecondGO Attribute            Return the total ...", "...                                  ...                ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexMicrosecondGO Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexMicrosecondGO Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexMicrosecondGO Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexMicrosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexMicrosecondGO Accessor Hashlib", "via_type_clinic.to_hint()            IndexMicrosecondGO Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexMicrosecondGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexMicrosecondGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexMicrosecondGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexMicrosecondGO Accessor Type Clinic Return a compact ...", "<<U90>                               <<U18>             <<U27>               <<U83>"], "IndexMicrosecondGO.__repr__()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> repr(ix)", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.__str__()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> str(ix)", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.display()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display()", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000"], "IndexMicrosecondGO.display_tall()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_tall()", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.display_wide()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix.display_wide()", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.drop.iloc[]": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.drop.iloc[1]", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.drop.iloc[1:]", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "<datetime64[us]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexMicrosecondGO>", "1517-12-31T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.drop.loc[]": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.drop.loc['1517-06-30']", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "<datetime64[us]>", ">>> ix.drop.loc['1517-06-30':]", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.[]": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix[1]", "1517-12-31T00:00:00.000000", ">>> ix[1:]", "<IndexMicrosecondGO>", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix[[0, 2]]", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.iloc[]": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.iloc[1]", "1517-12-31T00:00:00.000000", ">>> ix.iloc[1:]", "<IndexMicrosecondGO>", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.iloc[[0, 2]]", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.loc[]": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.loc['1517-06-30']", "<IndexMicrosecondGO>", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.loc['1517-06-30':]", "<IndexMicrosecondGO>", "1517-06-30T00:00:00.000000", "<datetime64[us]>"], "IndexMicrosecondGO.iter_label()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1517-04-01T00:00:00.000000'), numpy.datetime64('1517-12-31T00:00:00.000000'), numpy.datetime64('1517-06-30T00:00:00.000000'))"], "IndexMicrosecondGO.iter_label().apply()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1517 1517 1517]"], "IndexMicrosecondGO.iter_label().apply_iter()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1517, 4, 1, 0, 0), datetime.datetime(1517, 12, 31, 0, 0), datetime.datetime(1517, 6, 30, 0, 0))"], "IndexMicrosecondGO.iter_label().apply_iter_items()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1517, 4, 1, 0, 0)), (1, datetime.datetime(1517, 12, 31, 0, 0)), (2, datetime.datetime(1517, 6, 30, 0, 0)))"], "IndexMicrosecondGO.iter_label().apply_pool()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 4 12  6]"], "IndexMicrosecondGO.__add__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix + 2", "['1517-04-01T00:00:00.000002' '1517-12-31T00:00:00.000002'", " '1517-06-30T00:00:00.000002']"], "IndexMicrosecondGO.__and__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecondGO.__eq__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix == '1517-06-30'", "[False False  True]"], "IndexMicrosecondGO.__floordiv__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix // '1517-06-30'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecondGO.__ge__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix >= '1517-06-30'", "[False  True  True]"], "IndexMicrosecondGO.__gt__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix > '1517-06-30'", "[False  True False]"], "IndexMicrosecondGO.__le__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix <= '1517-06-30'", "[ True False  True]"], "IndexMicrosecondGO.__lt__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix < '1517-06-30'", "[ True False False]"], "IndexMicrosecondGO.__matmul__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexMicrosecondGO.__mod__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix % '1517-06-30'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecondGO.__mul__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix * '1517-06-30'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecondGO.__ne__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix != '1517-06-30'", "[ True  True False]"], "IndexMicrosecondGO.__or__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecondGO.__pow__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix ** '1517-06-30'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecondGO.__radd__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> '1517-06-30' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecondGO.__rfloordiv__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> '1517-06-30' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecondGO.__rmatmul__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexMicrosecondGO.__rmul__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> '1517-06-30' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecondGO.__rshift__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecondGO.__rsub__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> '1517-06-30' - ix", "[  90 -184    0]"], "IndexMicrosecondGO.__rtruediv__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> '1517-06-30' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecondGO.__sub__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix - 2", "['1517-03-31T23:59:59.999998' '1517-12-30T23:59:59.999998'", " '1517-06-29T23:59:59.999998']"], "IndexMicrosecondGO.__truediv__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix / '1517-06-30'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexMicrosecondGO.__xor__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecondGO.__abs__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMicrosecondGO.__invert__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecondGO.__neg__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMicrosecondGO.__pos__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexMicrosecondGO.via_dt.__call__()": [">>> ix = sf.IndexMicrosecondGO(('1620-09-16', 'NaT', '1620-11-21'))", ">>> ix", "<IndexMicrosecondGO>", "1620-09-16T00:00:00.000000", "NaT", "1620-11-21T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt(fill_value=-1).year", "[1620   -1 1620]"], "IndexMicrosecondGO.via_dt.year": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.year", "[1517 1517 1517]"], "IndexMicrosecondGO.via_dt.year_month": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.year_month", "['1517-04' '1517-12' '1517-06']"], "IndexMicrosecondGO.via_dt.year_quarter": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.year_quarter", "['1517-Q2' '1517-Q4' '1517-Q2']"], "IndexMicrosecondGO.via_dt.month": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.month", "[ 4 12  6]"], "IndexMicrosecondGO.via_dt.day": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.day", "[ 1 31 30]"], "IndexMicrosecondGO.via_dt.hour": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexMicrosecondGO.via_dt.minute": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexMicrosecondGO.via_dt.second": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexMicrosecondGO.via_dt.weekday()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.weekday()", "[6 0 5]"], "IndexMicrosecondGO.via_dt.quarter()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.quarter()", "[2 4 2]"], "IndexMicrosecondGO.via_dt.is_month_end()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.is_month_end()", "[False  True  True]"], "IndexMicrosecondGO.via_dt.is_month_start()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.is_month_start()", "[ True False False]"], "IndexMicrosecondGO.via_dt.is_year_end()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.is_year_end()", "[False  True False]"], "IndexMicrosecondGO.via_dt.is_year_start()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexMicrosecondGO.via_dt.is_quarter_end()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.is_quarter_end()", "[False  True  True]"], "IndexMicrosecondGO.via_dt.is_quarter_start()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.is_quarter_start()", "[ True False False]"], "IndexMicrosecondGO.via_dt.timetuple()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.timetuple()", "[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)", " time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)]"], "IndexMicrosecondGO.via_dt.isoformat()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.isoformat()", "['1517-04-01T00:00:00' '1517-12-31T00:00:00' '1517-06-30T00:00:00']"], "IndexMicrosecondGO.via_dt.fromisoformat()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[us]) for operation on string types')"], "IndexMicrosecondGO.via_dt.strftime()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "['Sunday | April' 'Monday | December' 'Saturday | June']"], "IndexMicrosecondGO.via_dt.strptime()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[us]) for operation on string types')"], "IndexMicrosecondGO.via_dt.strpdate()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[us]) for operation on string types')"], "IndexMicrosecondGO.via_str.__getitem__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str[-1]", "['0' '0' '0']"], "IndexMicrosecondGO.via_str.capitalize()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.capitalize()", "['1517-04-01t00:00:00.000000' '1517-12-31t00:00:00.000000'", " '1517-06-30t00:00:00.000000']"], "IndexMicrosecondGO.via_str.center()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.center(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMicrosecondGO.via_str.contains()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexMicrosecondGO.via_str.count()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexMicrosecondGO.via_str.decode()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30')).astype(bytes)", ">>> ix", "<IndexGO>", "b'1517-04-01T00:00:00.000000'", "b'1517-12-31T00:00:00.000000'", "b'1517-06-30T00:00:00.000000'", "<|S45>", ">>> ix.via_str.decode()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecondGO.via_str.encode()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.encode()", "[b'1517-04-01T00:00:00.000000' b'1517-12-31T00:00:00.000000'", " b'1517-06-30T00:00:00.000000']"], "IndexMicrosecondGO.via_str.endswith()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexMicrosecondGO.via_str.find()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexMicrosecondGO.via_str.format()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.format('{:-^10}')", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecondGO.via_str.index()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexMicrosecondGO.via_str.isalnum()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexMicrosecondGO.via_str.isalpha()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexMicrosecondGO.via_str.isdecimal()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexMicrosecondGO.via_str.isdigit()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexMicrosecondGO.via_str.islower()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexMicrosecondGO.via_str.isnumeric()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexMicrosecondGO.via_str.isspace()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexMicrosecondGO.via_str.istitle()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.istitle()", "[ True  True  True]"], "IndexMicrosecondGO.via_str.isupper()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.isupper()", "[ True  True  True]"], "IndexMicrosecondGO.via_str.ljust()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.ljust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMicrosecondGO.via_str.len()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.len()", "[26 26 26]"], "IndexMicrosecondGO.via_str.lower()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.lower()", "['1517-04-01t00:00:00.000000' '1517-12-31t00:00:00.000000'", " '1517-06-30t00:00:00.000000']"], "IndexMicrosecondGO.via_str.lstrip()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.lstrip()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecondGO.via_str.partition()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.partition('X')", "[('1517-04-01T00:00:00.000000', '', '')", " ('1517-12-31T00:00:00.000000', '', '')", " ('1517-06-30T00:00:00.000000', '', '')]"], "IndexMicrosecondGO.via_str.replace()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.replace('X', '*')", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecondGO.via_str.rfind()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexMicrosecondGO.via_str.rindex()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexMicrosecondGO.via_str.rjust()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.rjust(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMicrosecondGO.via_str.rpartition()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1517-04-01T00:00:00.000000')", " ('', '', '1517-12-31T00:00:00.000000')", " ('', '', '1517-06-30T00:00:00.000000')]"], "IndexMicrosecondGO.via_str.rsplit()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.rsplit('X')", "[('1517-04-01T00:00:00.000000',) ('1517-12-31T00:00:00.000000',)", " ('1517-06-30T00:00:00.000000',)]"], "IndexMicrosecondGO.via_str.rstrip()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.rstrip()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecondGO.via_str.split()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.split('X')", "[('1517-04-01T00:00:00.000000',) ('1517-12-31T00:00:00.000000',)", " ('1517-06-30T00:00:00.000000',)]"], "IndexMicrosecondGO.via_str.startswith()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexMicrosecondGO.via_str.strip()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.strip()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecondGO.via_str.swapcase()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.swapcase()", "['1517-04-01t00:00:00.000000' '1517-12-31t00:00:00.000000'", " '1517-06-30t00:00:00.000000']"], "IndexMicrosecondGO.via_str.title()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.title()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecondGO.via_str.upper()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.upper()", "['1517-04-01T00:00:00.000000' '1517-12-31T00:00:00.000000'", " '1517-06-30T00:00:00.000000']"], "IndexMicrosecondGO.via_str.zfill()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_str.zfill(8)", "['1517-04-' '1517-12-' '1517-06-']"], "IndexMicrosecondGO.via_re().search()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexMicrosecondGO.via_re().match()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexMicrosecondGO.via_re().fullmatch()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexMicrosecondGO.via_re().split()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('[X123]').split()", "[('', '5', '7-04-0', 'T00:00:00.000000')", " ('', '5', '7-', '', '-', '', 'T00:00:00.000000')", " ('', '5', '7-06-', '0T00:00:00.000000')]"], "IndexMicrosecondGO.via_re().findall()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('[X123]').findall()", "[('1', '1', '1') ('1', '1', '1', '2', '3', '1') ('1', '1', '3')]"], "IndexMicrosecondGO.via_re().sub()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('[X123]').sub('==')", "['==5==7-04-0==T00:00:00.000000' '==5==7-====-====T00:00:00.000000'", " '==5==7-06-==0T00:00:00.000000']"], "IndexMicrosecondGO.via_re().subn()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==517-04-01T00:00:00.000000', 1) ('==517-12-31T00:00:00.000000', 1)", " ('==517-06-30T00:00:00.000000', 1)]"], "IndexMicrosecondGO.via_hashlib().to_bytes()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexMicrosecondGO\\x00 \\x01\\xcc\\x8f=\\xcd\\xff\\x00\\xe0\\x85\\xbc\\x17S\\xcd\\xff\\x00\\xe0\\xb8I\\xa2D\\xcd\\xff'"], "IndexMicrosecondGO.via_hashlib().md5()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "80cb1062135a7b4a59e40613febfec66"], "IndexMicrosecondGO.via_hashlib().sha256()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "2d34218b220b62a49bb8675986964134b776d96b4ae260a8642b4bacaa22f6f5"], "IndexMicrosecondGO.via_hashlib().sha512()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "7f7fedef738f8c89ea322b893ad8fdb4c75a6fd958be9449dce89f8cdc9ab58a0f28309140ddfb6d95c83e18889f016ffb98d4a386c2288760f9def63c8237f3"], "IndexMicrosecondGO.via_hashlib().sha3_256()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "520070aeb3d175972eee0925d43db42e125ad215c99fa4a7cfe7bdc75a116a9b"], "IndexMicrosecondGO.via_hashlib().sha3_512()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "0dc0447f1ac08a66143ae353946f49e8bc680dcbdf6fb754ce9115b003f76ca4b11ea824138458d7786be9d7130035eefb8c17782533bba09012a0ec7e4fa90c"], "IndexMicrosecondGO.via_hashlib().shake_128()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "6a0f8c658be41a9d"], "IndexMicrosecondGO.via_hashlib().shake_256()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "e307203d63d868e0"], "IndexMicrosecondGO.via_hashlib().blake2b()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "7b9a5d83fffd740535ef9545019b701411b878ffa143bb34b06645b4288669eab7adbc48f331e7a068eb2d2a1ba645a184cdd53af84ae403eb44e84d59649116"], "IndexMicrosecondGO.via_hashlib().blake2s()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "372108e0bc86c31d3ce00d6be13ef8d9f7e4447e0b5716a5dbd3f49e1d5dbb42"], "IndexMicrosecondGO.via_values.apply()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecondGO.via_values.__array_ufunc__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecondGO.via_values.__call__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexMicrosecondGO.via_type_clinic.to_hint()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexMicrosecondGO'>"], "IndexMicrosecondGO.via_type_clinic.check()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexMicrosecondGO.via_type_clinic.__call__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexMicrosecondGO.via_type_clinic.__repr__()": [">>> ix = sf.IndexMicrosecondGO(('1517-04-01', '1517-12-31', '1517-06-30'))", ">>> ix", "<IndexMicrosecondGO>", "1517-04-01T00:00:00.000000", "1517-12-31T00:00:00.000000", "1517-06-30T00:00:00.000000", "<datetime64[us]>", ">>> ix.via_type_clinic", "IndexMicrosecondGO"], "IndexNanosecond.__init__()": [">>> sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.from_labels()": [">>> sf.IndexNanosecond.from_labels(('1789-05-05', '1789-12-31', '1799-11-09'))", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.from_pandas()": [">>> ix = pd.Index(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> sf.IndexNanosecond.from_pandas(ix)", "<Index>", "1789-05-05", "1789-12-31", "1799-11-09", "<object>"], "IndexNanosecond.to_pandas()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.to_pandas()", "DatetimeIndex(['1789-05-05', '1789-12-31', '1799-11-09'], dtype='datetime64[ns]', freq=None)"], "IndexNanosecond.to_series()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1789-05-05T00:00:...", "1        1789-12-31T00:00:...", "2        1799-11-09T00:00:...", "<int64>  <datetime64[ns]>"], "IndexNanosecond.STATIC": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.STATIC", "True"], "IndexNanosecond.depth": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.depth", "1"], "IndexNanosecond.dtype": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.dtype", "datetime64[ns]"], "IndexNanosecond.index_types": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexNanosecond>", "<object> <object>"], "IndexNanosecond.memory": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.memory", "          L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Name      16  B     16  B     16  B     16   B     16  B     16  B", "Map       472 B     472 B     472 B     472  B     472 B     472 B", "Labels    136 B     152 B     24  B     136  B     152 B     24  B", "Positions 112 B     128 B     0   B     8.22 KB    152 B     24  B", "Total     844 B     876 B     620 B     8.93 KB    900 B     644 B"], "IndexNanosecond.name": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.name"], "IndexNanosecond.names": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.names", "('__index0__',)"], "IndexNanosecond.nbytes": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.nbytes", "24"], "IndexNanosecond.ndim": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.ndim", "1"], "IndexNanosecond.positions": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.positions", "[0 1 2]"], "IndexNanosecond.shape": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.shape", "(3,)"], "IndexNanosecond.size": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.size", "3"], "IndexNanosecond.__array__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.__array__()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecond.__array_ufunc__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[ns]')))"], "IndexNanosecond.__bool__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexNanosecond.__copy__()": [">>> import copy", ">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> copy.copy(ix)", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> copy.deepcopy(ix)", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.__len__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> len(ix)", "3"], "IndexNanosecond.all()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.all()", "True"], "IndexNanosecond.any()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.any()", "True"], "IndexNanosecond.astype()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.astype(str)", "<Index>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<<U48>"], "IndexNanosecond.copy()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.copy()", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.cumprod()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecond.cumsum()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecond.difference()": [">>> ix1 = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix1", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix2 = sf.IndexNanosecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexNanosecond>", "2022-04-01T00:00:00.000000000", "2021-12-31T00:00:00.000000000", "2022-06-30T00:00:00.000000000", "<datetime64[ns]>", ">>> ix1.difference(ix2)", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.dropfalsy()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.dropfalsy()", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.dropna()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.dropna()", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.equals()": [">>> ix1 = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix1", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix2 = sf.IndexNanosecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexNanosecond>", "2022-04-01T00:00:00.000000000", "2021-12-31T00:00:00.000000000", "2022-06-30T00:00:00.000000000", "<datetime64[ns]>", ">>> ix1.equals(ix2)", "False"], "IndexNanosecond.fillfalsy()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexNanosecond.fillna()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.fillna(0)", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1970-01-01T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.head()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.head(2)", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.iloc_searchsorted()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexNanosecond.intersection()": [">>> ix1 = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix1", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix2 = sf.IndexNanosecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexNanosecond>", "2022-04-01T00:00:00.000000000", "2021-12-31T00:00:00.000000000", "2022-06-30T00:00:00.000000000", "<datetime64[ns]>", ">>> ix1.intersection(ix2)", "<IndexNanosecond>", "<datetime64[ns]>"], "IndexNanosecond.isfalsy()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexNanosecond.isin()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.isin(('1789-05-05',))", "[False False False]"], "IndexNanosecond.isna()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.isna()", "[False  True False]"], "IndexNanosecond.label_widths_at_depth()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1789-05-05T00:00:00.000000000'), 1), (numpy.datetime64('1789-12-31T00:00:00.000000000'), 1), (numpy.datetime64('1799-11-09T00:00:00.000000000'), 1))"], "IndexNanosecond.level_add()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.level_add('A')", "<IndexHierarchy>", "A                1789-05-05T00:00:...", "A                1789-12-31T00:00:...", "A                1799-11-09T00:00:...", "<<U1>            <datetime64[ns]>"], "IndexNanosecond.loc_searchsorted()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexNanosecond.loc_to_iloc()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.loc_to_iloc('1799-11-09')", "[2]", ">>> ix.loc_to_iloc(['1789-05-05', '1799-11-09'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1789-12-31', None))", "slice(1, None, None)"], "IndexNanosecond.max()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.max()", "1799-11-09T00:00:00.000000000"], "IndexNanosecond.mean()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecond.median()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecond.min()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.min()", "1789-05-05T00:00:00.000000000"], "IndexNanosecond.notfalsy()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexNanosecond.notna()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.notna()", "[ True False  True]"], "IndexNanosecond.prod()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecond.relabel()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "<IndexNanosecond>", "1970-01-01T00:00:00.000000005", "1970-01-01T00:00:00.000000031", "1970-01-01T00:00:00.000000009", "<datetime64[ns]>"], "IndexNanosecond.rename()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.rename('y')", "<IndexNanosecond: y>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.roll()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.roll(2)", "<IndexNanosecond>", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "1789-05-05T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.sample()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.sample(2, seed=0)", "<IndexNanosecond>", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.sort()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.sort()", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.sort(ascending=False)", "<IndexNanosecond>", "1799-11-09T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1789-05-05T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.std()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecond.sum()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecond.tail()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.tail(2)", "<IndexNanosecond>", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.union()": [">>> ix1 = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix1", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix2 = sf.IndexNanosecond(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexNanosecond>", "2022-04-01T00:00:00.000000000", "2021-12-31T00:00:00.000000000", "2022-06-30T00:00:00.000000000", "<datetime64[ns]>", ">>> ix1.union(ix2)", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "2021-12-31T00:00:00.000000000", "2022-04-01T00:00:00.000000000", "2022-06-30T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.unique()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.unique()", "['1789-05-05T00:00:00.000000000'                           'NaT'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecond.values_at_depth()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.values_at_depth(0)", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecond.var()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecond.__contains__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.__contains__('1789-05-05')", "False"], "IndexNanosecond.__iter__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1789-05-05T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1799-11-09T00:00:00.000000000'))", ">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1789-05-05T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1799-11-09T00:00:00.000000000'))"], "IndexNanosecond.__reversed__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1799-11-09T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1789-05-05T00:00:00.000000000'))", ">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1799-11-09T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1789-05-05T00:00:00.000000000'))"], "IndexNanosecond.values": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.values", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']", ">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.values", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecond.interface": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name        group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexNanosecond Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexNanosecond Constructor          Construct an Inde...", "from_pandas(value)                   IndexNanosecond Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexNanosecond Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexNanosecond Exporter             Return a complete...", "to_pandas()                          IndexNanosecond Exporter             Return a Pandas I...", "to_series()                          IndexNanosecond Exporter             Return a Series w...", "to_visidata()                        IndexNanosecond Exporter             Open an interacti...", "STATIC                               IndexNanosecond Attribute            bool(x) -> bool R...", "depth                                IndexNanosecond Attribute            int([x]) -> integ...", "dtype                                IndexNanosecond Attribute            Return the dtype ...", "index_types                          IndexNanosecond Attribute            Return a Series o...", "memory                               IndexNanosecond Attribute            Return a MemoryDi...", "mloc                                 IndexNanosecond Attribute            The memory locati...", "name                                 IndexNanosecond Attribute            A hashable label ...", "names                                IndexNanosecond Attribute            Provide a suitabl...", "nbytes                               IndexNanosecond Attribute            Return the total ...", "...                                  ...             ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexNanosecond Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexNanosecond Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexNanosecond Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexNanosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecond Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecond Accessor Hashlib", "via_type_clinic.to_hint()            IndexNanosecond Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexNanosecond Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexNanosecond Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexNanosecond Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexNanosecond Accessor Type Clinic Return a compact ...", "<<U90>                               <<U15>          <<U27>               <<U83>"], "IndexNanosecond.__repr__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> repr(ix)", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.__str__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> str(ix)", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.display()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.display()", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000"], "IndexNanosecond.display_tall()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.display_tall()", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.display_wide()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.display_wide()", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.drop.iloc[]": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.drop.iloc[1]", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.drop.iloc[1:]", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexNanosecond>", "1789-12-31T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.drop.loc[]": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.drop.loc['1789-05-05']", "<IndexNanosecond>", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.drop.loc['1789-05-05':]", "<IndexNanosecond>", "<datetime64[ns]>"], "IndexNanosecond.[]": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix[1]", "1789-12-31T00:00:00.000000000", ">>> ix[1:]", "<IndexNanosecond>", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix[[0, 2]]", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.iloc[]": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.iloc[1]", "1789-12-31T00:00:00.000000000", ">>> ix.iloc[1:]", "<IndexNanosecond>", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.iloc[[0, 2]]", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.loc[]": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.loc['1789-05-05']", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.loc['1789-05-05':]", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecond.iter_label()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1789-05-05T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1799-11-09T00:00:00.000000000'))"], "IndexNanosecond.iter_label().apply()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1789 1789 1799]"], "IndexNanosecond.iter_label().apply_iter()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1789, 5, 5, 0, 0), datetime.datetime(1789, 12, 31, 0, 0), datetime.datetime(1799, 11, 9, 0, 0))"], "IndexNanosecond.iter_label().apply_iter_items()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1789, 5, 5, 0, 0)), (1, datetime.datetime(1789, 12, 31, 0, 0)), (2, datetime.datetime(1799, 11, 9, 0, 0)))"], "IndexNanosecond.iter_label().apply_pool()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 5 12 11]"], "IndexNanosecond.__add__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix + 2", "['1789-05-05T00:00:00.000000002' '1789-12-31T00:00:00.000000002'", " '1799-11-09T00:00:00.000000002']"], "IndexNanosecond.__and__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecond.__eq__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix == '1789-05-05'", "[ True False False]"], "IndexNanosecond.__floordiv__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix // '1789-05-05'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecond.__ge__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix >= '1789-05-05'", "[ True  True  True]"], "IndexNanosecond.__gt__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix > '1789-05-05'", "[False  True  True]"], "IndexNanosecond.__le__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix <= '1789-05-05'", "[ True False False]"], "IndexNanosecond.__lt__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix < '1789-05-05'", "[False False False]"], "IndexNanosecond.__matmul__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexNanosecond.__mod__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix % '1789-05-05'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecond.__mul__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix * '1789-05-05'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecond.__ne__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix != '1789-05-05'", "[False  True  True]"], "IndexNanosecond.__or__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecond.__pow__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix ** '1789-05-05'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecond.__radd__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> '1789-05-05' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecond.__rfloordiv__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> '1789-05-05' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecond.__rmatmul__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexNanosecond.__rmul__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> '1789-05-05' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecond.__rshift__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecond.__rsub__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> '1789-05-05' - ix", "[    0  -240 -3840]"], "IndexNanosecond.__rtruediv__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> '1789-05-05' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecond.__sub__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix - 2", "['1789-05-04T23:59:59.999999998' '1789-12-30T23:59:59.999999998'", " '1799-11-08T23:59:59.999999998']"], "IndexNanosecond.__truediv__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix / '1789-05-05'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecond.__xor__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecond.__abs__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexNanosecond.__invert__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecond.__neg__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexNanosecond.__pos__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexNanosecond.via_dt.__call__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt(fill_value=-1).year", "[1789   -1 1799]"], "IndexNanosecond.via_dt.year": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.year", "[1789 1789 1799]"], "IndexNanosecond.via_dt.year_month": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.year_month", "['1789-05' '1789-12' '1799-11']"], "IndexNanosecond.via_dt.year_quarter": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.year_quarter", "['1789-Q2' '1789-Q4' '1799-Q4']"], "IndexNanosecond.via_dt.month": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.month", "[ 5 12 11]"], "IndexNanosecond.via_dt.day": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.day", "[ 5 31  9]"], "IndexNanosecond.via_dt.hour": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexNanosecond.via_dt.minute": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexNanosecond.via_dt.second": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexNanosecond.via_dt.weekday()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.weekday()", "[1 3 5]"], "IndexNanosecond.via_dt.quarter()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.quarter()", "[2 4 4]"], "IndexNanosecond.via_dt.is_month_end()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.is_month_end()", "[False  True False]"], "IndexNanosecond.via_dt.is_month_start()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.is_month_start()", "[False False False]"], "IndexNanosecond.via_dt.is_year_end()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.is_year_end()", "[False  True False]"], "IndexNanosecond.via_dt.is_year_start()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexNanosecond.via_dt.is_quarter_end()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.is_quarter_end()", "[False  True False]"], "IndexNanosecond.via_dt.is_quarter_start()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.is_quarter_start()", "[False False False]"], "IndexNanosecond.via_dt.timetuple()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.timetuple()", "RuntimeError('invalid dtype (datetime64[ns]) for date operation')"], "IndexNanosecond.via_dt.isoformat()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.isoformat()", "RuntimeError('invalid dtype (datetime64[ns]) for date operation')"], "IndexNanosecond.via_dt.fromisoformat()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[ns]) for operation on string types')"], "IndexNanosecond.via_dt.strftime()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "RuntimeError('invalid dtype (datetime64[ns]) for date operation')"], "IndexNanosecond.via_dt.strptime()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[ns]) for operation on string types')"], "IndexNanosecond.via_dt.strpdate()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[ns]) for operation on string types')"], "IndexNanosecond.via_str.__getitem__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str[-1]", "['0' '0' '0']"], "IndexNanosecond.via_str.capitalize()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.capitalize()", "['1789-05-05t00:00:00.000000000' '1789-12-31t00:00:00.000000000'", " '1799-11-09t00:00:00.000000000']"], "IndexNanosecond.via_str.center()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.center(8)", "['1789-05-' '1789-12-' '1799-11-']"], "IndexNanosecond.via_str.contains()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexNanosecond.via_str.count()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexNanosecond.via_str.decode()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09')).astype(bytes)", ">>> ix", "<Index>", "b'1789-05-05T00:00:00.000000000'", "b'1789-12-31T00:00:00.000000000'", "b'1799-11-09T00:00:00.000000000'", "<|S48>", ">>> ix.via_str.decode()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecond.via_str.encode()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.encode()", "[b'1789-05-05T00:00:00.000000000' b'1789-12-31T00:00:00.000000000'", " b'1799-11-09T00:00:00.000000000']"], "IndexNanosecond.via_str.endswith()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexNanosecond.via_str.find()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexNanosecond.via_str.format()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.format('{:-^10}')", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecond.via_str.index()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexNanosecond.via_str.isalnum()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexNanosecond.via_str.isalpha()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexNanosecond.via_str.isdecimal()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexNanosecond.via_str.isdigit()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexNanosecond.via_str.islower()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexNanosecond.via_str.isnumeric()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexNanosecond.via_str.isspace()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexNanosecond.via_str.istitle()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.istitle()", "[ True  True  True]"], "IndexNanosecond.via_str.isupper()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isupper()", "[ True  True  True]"], "IndexNanosecond.via_str.ljust()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.ljust(8)", "['1789-05-' '1789-12-' '1799-11-']"], "IndexNanosecond.via_str.len()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.len()", "[29 29 29]"], "IndexNanosecond.via_str.lower()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.lower()", "['1789-05-05t00:00:00.000000000' '1789-12-31t00:00:00.000000000'", " '1799-11-09t00:00:00.000000000']"], "IndexNanosecond.via_str.lstrip()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.lstrip()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecond.via_str.partition()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.partition('X')", "[('1789-05-05T00:00:00.000000000', '', '')", " ('1789-12-31T00:00:00.000000000', '', '')", " ('1799-11-09T00:00:00.000000000', '', '')]"], "IndexNanosecond.via_str.replace()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.replace('X', '*')", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecond.via_str.rfind()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexNanosecond.via_str.rindex()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexNanosecond.via_str.rjust()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.rjust(8)", "['1789-05-' '1789-12-' '1799-11-']"], "IndexNanosecond.via_str.rpartition()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1789-05-05T00:00:00.000000000')", " ('', '', '1789-12-31T00:00:00.000000000')", " ('', '', '1799-11-09T00:00:00.000000000')]"], "IndexNanosecond.via_str.rsplit()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.rsplit('X')", "[('1789-05-05T00:00:00.000000000',) ('1789-12-31T00:00:00.000000000',)", " ('1799-11-09T00:00:00.000000000',)]"], "IndexNanosecond.via_str.rstrip()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.rstrip()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecond.via_str.split()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.split('X')", "[('1789-05-05T00:00:00.000000000',) ('1789-12-31T00:00:00.000000000',)", " ('1799-11-09T00:00:00.000000000',)]"], "IndexNanosecond.via_str.startswith()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexNanosecond.via_str.strip()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.strip()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecond.via_str.swapcase()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.swapcase()", "['1789-05-05t00:00:00.000000000' '1789-12-31t00:00:00.000000000'", " '1799-11-09t00:00:00.000000000']"], "IndexNanosecond.via_str.title()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.title()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecond.via_str.upper()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.upper()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecond.via_str.zfill()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.zfill(8)", "['1789-05-' '1789-12-' '1799-11-']"], "IndexNanosecond.via_re().search()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexNanosecond.via_re().match()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexNanosecond.via_re().fullmatch()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexNanosecond.via_re().split()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('[X123]').split()", "[('', '789-05-05T00:00:00.000000000')", " ('', '789-', '', '-', '', 'T00:00:00.000000000')", " ('', '799-', '', '-09T00:00:00.000000000')]"], "IndexNanosecond.via_re().findall()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('[X123]').findall()", "[('1',) ('1', '1', '2', '3', '1') ('1', '1', '1')]"], "IndexNanosecond.via_re().sub()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('[X123]').sub('==')", "['==789-05-05T00:00:00.000000000' '==789-====-====T00:00:00.000000000'", " '==799-====-09T00:00:00.000000000']"], "IndexNanosecond.via_re().subn()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==789-05-05T00:00:00.000000000', 1)", " ('==789-12-31T00:00:00.000000000', 1)", " ('==799-11-09T00:00:00.000000000', 1)]"], "IndexNanosecond.via_hashlib().to_bytes()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexNanosecond\\x00\\x00\\xc0\\xb5\\xb2\\xea\\xe1\\xb0\\x00\\x00\\xd0\\xef\\xfa\\x95+\\xb1\\x00\\x00\\xc0V6\\x9f|\\xb5'"], "IndexNanosecond.via_hashlib().md5()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "2b68df8c1b6545b0ac7e5145d49db39b"], "IndexNanosecond.via_hashlib().sha256()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "938160554b2f00a7131f9829ee83aa2f22dc327770f513ae1b5f089d03a0a9a9"], "IndexNanosecond.via_hashlib().sha512()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "736d0d26af55194bbdc7c775037453e6484206fac9fcaf1976d2b04b3f835648c8b3f31932dcddf80af8d40e105662a5dd59b57ecd27b656d5972156d28cf418"], "IndexNanosecond.via_hashlib().sha3_256()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "00a45a1fa0d497966a1f4a7b73bc34839440af82c0aab4cee2f1cbd1519a63a4"], "IndexNanosecond.via_hashlib().sha3_512()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "a0d8c9c1b3399c3e7a902c6ae833c582df05978acb3633b72157a7bf62ee3705c7d05b5dc4f12b43947e09778c16cd4f078eb3f63492b7213c113f9fef87b0b0"], "IndexNanosecond.via_hashlib().shake_128()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "38f268fb23440bcc"], "IndexNanosecond.via_hashlib().shake_256()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "44c0579c64194cdd"], "IndexNanosecond.via_hashlib().blake2b()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "b44f98ae1388480a84eac68fbf5f5b88b9577cad1f545771c067e71a7215b47cf6c5070778fc797e20a8f8b87014eb15cbb05fc79409ff0175ffe7408f2047a3"], "IndexNanosecond.via_hashlib().blake2s()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "29b969d47a75dffe5a33879200f86cadad31d61beb404af781fe65f68ed5cb68"], "IndexNanosecond.via_values.apply()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecond.via_values.__array_ufunc__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecond.via_values.__call__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecond.via_type_clinic.to_hint()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexNanosecond'>"], "IndexNanosecond.via_type_clinic.check()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexNanosecond.via_type_clinic.__call__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexNanosecond.via_type_clinic.__repr__()": [">>> ix = sf.IndexNanosecond(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecond>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_type_clinic", "IndexNanosecond"], "IndexNanosecondGO.__init__()": [">>> sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.from_labels()": [">>> sf.IndexNanosecondGO.from_labels(('1789-05-05', '1789-12-31', '1799-11-09'))", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.from_pandas()": [">>> ix = pd.Index(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> sf.IndexNanosecondGO.from_pandas(ix)", "<IndexGO>", "1789-05-05", "1789-12-31", "1799-11-09", "<object>"], "IndexNanosecondGO.to_pandas()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.to_pandas()", "DatetimeIndex(['1789-05-05', '1789-12-31', '1799-11-09'], dtype='datetime64[ns]', freq=None)"], "IndexNanosecondGO.to_series()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.to_series()", "<Series>", "<Index>", "0        1789-05-05T00:00:...", "1        1789-12-31T00:00:...", "2        1799-11-09T00:00:...", "<int64>  <datetime64[ns]>"], "IndexNanosecondGO.STATIC": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.STATIC", "False"], "IndexNanosecondGO.depth": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.depth", "1"], "IndexNanosecondGO.dtype": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.dtype", "datetime64[ns]"], "IndexNanosecondGO.index_types": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.index_types", "<Series>", "<Index>", "None     <IndexNanosecondGO>", "<object> <object>"], "IndexNanosecondGO.memory": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.memory", "          L    Lu    LM   LMu   LMD LMDu  R    Ru    RM   RMu   RMD RMDu", "Name      16   B     16   B     16  B     16   B     16   B     16  B", "Map       472  B     472  B     472 B     472  B     472  B     472 B", "Labels    136  B     152  B     24  B     136  B     152  B     24  B", "Positions 112  B     128  B     0   B     8.22 KB    152  B     24  B", "Total     1.15 KB    1.18 KB    956 B     9.26 KB    1.21 KB    980 B"], "IndexNanosecondGO.name": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.name"], "IndexNanosecondGO.names": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.names", "('__index0__',)"], "IndexNanosecondGO.nbytes": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.nbytes", "24"], "IndexNanosecondGO.ndim": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.ndim", "1"], "IndexNanosecondGO.positions": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.positions", "[0 1 2]"], "IndexNanosecondGO.shape": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.shape", "(3,)"], "IndexNanosecondGO.size": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix.size", "3"], "IndexNanosecondGO.__array__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.__array__()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.__array_ufunc__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> np.array((0, 1, 0)) * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('int64'), dtype('<M8[ns]')))"], "IndexNanosecondGO.__bool__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> bool(ix)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexNanosecondGO.__copy__()": [">>> import copy", ">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> copy.copy(ix)", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.__deepcopy__()": [">>> import copy", ">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> copy.deepcopy(ix)", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.__len__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> len(ix)", "3"], "IndexNanosecondGO.all()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.all()", "True"], "IndexNanosecondGO.any()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.any()", "True"], "IndexNanosecondGO.append()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.append('f')", "GrowOnlyInvalid('Cannot perform an in-place grow-only operation due to the class of the columns Index.')", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.astype()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.astype(str)", "<IndexGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<<U48>"], "IndexNanosecondGO.copy()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.copy()", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.cumprod()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.cumprod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecondGO.cumsum()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.cumsum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecondGO.difference()": [">>> ix1 = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix1", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix2 = sf.IndexNanosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexNanosecondGO>", "2022-04-01T00:00:00.000000000", "2021-12-31T00:00:00.000000000", "2022-06-30T00:00:00.000000000", "<datetime64[ns]>", ">>> ix1.difference(ix2)", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.dropfalsy()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.dropfalsy()", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.dropna()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.dropna()", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.equals()": [">>> ix1 = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix1", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix2 = sf.IndexNanosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexNanosecondGO>", "2022-04-01T00:00:00.000000000", "2021-12-31T00:00:00.000000000", "2022-06-30T00:00:00.000000000", "<datetime64[ns]>", ">>> ix1.equals(ix2)", "False"], "IndexNanosecondGO.extend()": [">>> ix1 = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix1", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix2 = sf.IndexNanosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexNanosecondGO>", "2022-04-01T00:00:00.000000000", "2021-12-31T00:00:00.000000000", "2022-06-30T00:00:00.000000000", "<datetime64[ns]>", ">>> ix1.extend(ix2)", ">>> ix1", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "2022-04-01T00:00:00.000000000", "2021-12-31T00:00:00.000000000", "2022-06-30T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.fillfalsy()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.fillfalsy('A')", "ValueError('Error parsing datetime string \"A\" at position 0')"], "IndexNanosecondGO.fillna()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.fillna(0)", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1970-01-01T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.head()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.head(2)", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.iloc_searchsorted()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.iloc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexNanosecondGO.intersection()": [">>> ix1 = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix1", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix2 = sf.IndexNanosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexNanosecondGO>", "2022-04-01T00:00:00.000000000", "2021-12-31T00:00:00.000000000", "2022-06-30T00:00:00.000000000", "<datetime64[ns]>", ">>> ix1.intersection(ix2)", "<IndexNanosecondGO>", "<datetime64[ns]>"], "IndexNanosecondGO.isfalsy()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.isfalsy()", "[False  True False]"], "IndexNanosecondGO.isin()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.isin(('1789-05-05',))", "[False False False]"], "IndexNanosecondGO.isna()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.isna()", "[False  True False]"], "IndexNanosecondGO.label_widths_at_depth()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.label_widths_at_depth(0))", "((numpy.datetime64('1789-05-05T00:00:00.000000000'), 1), (numpy.datetime64('1789-12-31T00:00:00.000000000'), 1), (numpy.datetime64('1799-11-09T00:00:00.000000000'), 1))"], "IndexNanosecondGO.level_add()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.level_add('A')", "<IndexHierarchyGO>", "A                  1789-05-05T00:00:...", "A                  1789-12-31T00:00:...", "A                  1799-11-09T00:00:...", "<<U1>              <datetime64[ns]>"], "IndexNanosecondGO.loc_searchsorted()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.loc_searchsorted('c')", "ValueError('Error parsing datetime string \"c\" at position 0')"], "IndexNanosecondGO.loc_to_iloc()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.loc_to_iloc('1799-11-09')", "[2]", ">>> ix.loc_to_iloc(['1789-05-05', '1799-11-09'])", "[0 2]", ">>> ix.loc_to_iloc(slice('1789-12-31', None))", "slice(1, None, None)"], "IndexNanosecondGO.max()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.max()", "1799-11-09T00:00:00.000000000"], "IndexNanosecondGO.mean()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.mean()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecondGO.median()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.median()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecondGO.min()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.min()", "1789-05-05T00:00:00.000000000"], "IndexNanosecondGO.notfalsy()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.notfalsy()", "[ True False  True]"], "IndexNanosecondGO.notna()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.notna()", "[ True False  True]"], "IndexNanosecondGO.prod()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.prod()", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecondGO.relabel()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.relabel(lambda l: l.astype('<M8[ms]').astype(object).day)", "<IndexNanosecondGO>", "1970-01-01T00:00:00.000000005", "1970-01-01T00:00:00.000000031", "1970-01-01T00:00:00.000000009", "<datetime64[ns]>"], "IndexNanosecondGO.rename()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.rename('y')", "<IndexNanosecondGO: y>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.roll()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.roll(2)", "<IndexNanosecondGO>", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "1789-05-05T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.sample()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.sample(2, seed=0)", "<IndexNanosecondGO>", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.sort()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.sort()", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.sort(ascending=False)", "<IndexNanosecondGO>", "1799-11-09T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1789-05-05T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.std()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.std()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecondGO.sum()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.sum()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecondGO.tail()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.tail(2)", "<IndexNanosecondGO>", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.union()": [">>> ix1 = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix1", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix2 = sf.IndexNanosecondGO(('2022-04-01', '2021-12-31', '2022-06-30'))", ">>> ix2", "<IndexNanosecondGO>", "2022-04-01T00:00:00.000000000", "2021-12-31T00:00:00.000000000", "2022-06-30T00:00:00.000000000", "<datetime64[ns]>", ">>> ix1.union(ix2)", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "2021-12-31T00:00:00.000000000", "2022-04-01T00:00:00.000000000", "2022-06-30T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.unique()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.unique()", "['1789-05-05T00:00:00.000000000'                           'NaT'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.values_at_depth()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.values_at_depth(0)", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.var()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.var()", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[ns]'), dtype('<M8[ns]')))"], "IndexNanosecondGO.__contains__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.__contains__('a')", "False", ">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.__contains__('1789-05-05')", "False"], "IndexNanosecondGO.__iter__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1789-05-05T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1799-11-09T00:00:00.000000000'))", ">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.__iter__())", "(numpy.datetime64('1789-05-05T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1799-11-09T00:00:00.000000000'))"], "IndexNanosecondGO.__reversed__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1799-11-09T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1789-05-05T00:00:00.000000000'))", ">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.__reversed__())", "(numpy.datetime64('1799-11-09T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1789-05-05T00:00:00.000000000'))"], "IndexNanosecondGO.values": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.values", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']", ">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.values", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.interface": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.interface", "<Frame>", "<Index>                              cls_name          group                doc                  <<U18>", "<Index: signature>", "__init__(labels, *, loc_is_iloc, ... IndexNanosecondGO Constructor          Initializer. Args...", "from_labels(labels, *, name)         IndexNanosecondGO Constructor          Construct an Inde...", "from_pandas(value)                   IndexNanosecondGO Constructor          Given a Pandas in...", "to_html(config, style_config)        IndexNanosecondGO Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexNanosecondGO Exporter             Return a complete...", "to_pandas()                          IndexNanosecondGO Exporter             Return a Pandas I...", "to_series()                          IndexNanosecondGO Exporter             Return a Series w...", "to_visidata()                        IndexNanosecondGO Exporter             Open an interacti...", "STATIC                               IndexNanosecondGO Attribute            bool(x) -> bool R...", "depth                                IndexNanosecondGO Attribute            int([x]) -> integ...", "dtype                                IndexNanosecondGO Attribute            Return the dtype ...", "index_types                          IndexNanosecondGO Attribute            Return a Series o...", "memory                               IndexNanosecondGO Attribute            Return a MemoryDi...", "mloc                                 IndexNanosecondGO Attribute            The memory locati...", "name                                 IndexNanosecondGO Attribute            A hashable label ...", "names                                IndexNanosecondGO Attribute            Provide a suitabl...", "nbytes                               IndexNanosecondGO Attribute            Return the total ...", "...                                  ...               ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexNanosecondGO Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexNanosecondGO Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexNanosecondGO Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexNanosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecondGO Accessor Hashlib", "via_hashlib(include_name, include... IndexNanosecondGO Accessor Hashlib", "via_type_clinic.to_hint()            IndexNanosecondGO Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexNanosecondGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexNanosecondGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexNanosecondGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexNanosecondGO Accessor Type Clinic Return a compact ...", "<<U90>                               <<U17>            <<U27>               <<U83>"], "IndexNanosecondGO.__repr__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> repr(ix)", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.__str__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> str(ix)", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.display()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.display()", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.display(sf.DisplayConfig(type_show=False))", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000"], "IndexNanosecondGO.display_tall()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.display_tall()", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.display_wide()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix.display_wide()", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.drop.iloc[]": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.drop.iloc[1]", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.drop.iloc[1:]", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.drop.iloc[[0, 2]]", "<IndexNanosecondGO>", "1789-12-31T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.drop.loc[]": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.drop.loc['1789-05-05']", "<IndexNanosecondGO>", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.drop.loc['1789-05-05':]", "<IndexNanosecondGO>", "<datetime64[ns]>"], "IndexNanosecondGO.[]": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix[1]", "1789-12-31T00:00:00.000000000", ">>> ix[1:]", "<IndexNanosecondGO>", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix[[0, 2]]", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.iloc[]": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.iloc[1]", "1789-12-31T00:00:00.000000000", ">>> ix.iloc[1:]", "<IndexNanosecondGO>", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.iloc[[0, 2]]", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.loc[]": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.loc['1789-05-05']", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.loc['1789-05-05':]", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>"], "IndexNanosecondGO.iter_label()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.iter_label())", "(numpy.datetime64('1789-05-05T00:00:00.000000000'), numpy.datetime64('1789-12-31T00:00:00.000000000'), numpy.datetime64('1799-11-09T00:00:00.000000000'))"], "IndexNanosecondGO.iter_label().apply()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.iter_label().apply(lambda l: l.astype('<M8[ms]').astype(object).year)", "[1789 1789 1799]"], "IndexNanosecondGO.iter_label().apply_iter()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.iter_label().apply_iter(lambda l: l.astype('<M8[ms]').astype(object)))", "(datetime.datetime(1789, 5, 5, 0, 0), datetime.datetime(1789, 12, 31, 0, 0), datetime.datetime(1799, 11, 9, 0, 0))"], "IndexNanosecondGO.iter_label().apply_iter_items()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> tuple(ix.iter_label().apply_iter_items(lambda l: l.astype('<M8[ms]').astype(object)))", "((0, datetime.datetime(1789, 5, 5, 0, 0)), (1, datetime.datetime(1789, 12, 31, 0, 0)), (2, datetime.datetime(1799, 11, 9, 0, 0)))"], "IndexNanosecondGO.iter_label().apply_pool()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.iter_label().apply_pool(lambda l: l.astype('<M8[ms]').astype(object).month, use_threads=True)", "[ 5 12 11]"], "IndexNanosecondGO.__add__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix + 2", "['1789-05-05T00:00:00.000000002' '1789-12-31T00:00:00.000000002'", " '1799-11-09T00:00:00.000000002']"], "IndexNanosecondGO.__and__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix & True", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix & (False, True)", "TypeError(\"ufunc 'bitwise_and' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecondGO.__eq__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix == '1789-05-05'", "[ True False False]"], "IndexNanosecondGO.__floordiv__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix // '1789-05-05'", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecondGO.__ge__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix >= '1789-05-05'", "[ True  True  True]"], "IndexNanosecondGO.__gt__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix > '1789-05-05'", "[False  True  True]"], "IndexNanosecondGO.__le__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix <= '1789-05-05'", "[ True False False]"], "IndexNanosecondGO.__lt__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix < '1789-05-05'", "[False False False]"], "IndexNanosecondGO.__matmul__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexNanosecondGO.__mod__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix % '1789-05-05'", "UFuncTypeError(<ufunc 'remainder'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecondGO.__mul__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix * '1789-05-05'", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecondGO.__ne__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix != '1789-05-05'", "[False  True  True]"], "IndexNanosecondGO.__or__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix | True", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix | (False, True)", "TypeError(\"ufunc 'bitwise_or' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecondGO.__pow__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix ** '1789-05-05'", "TypeError(\"ufunc 'power' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecondGO.__radd__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> '1789-05-05' + ix", "UFuncTypeError(<ufunc 'add'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecondGO.__rfloordiv__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> '1789-05-05' // ix", "UFuncTypeError(<ufunc 'floor_divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecondGO.__rmatmul__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix @ (3, 0, 4, 0)", "NotImplementedError('matrix multiplication not supported')"], "IndexNanosecondGO.__rmul__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> '1789-05-05' * ix", "UFuncTypeError(<ufunc 'multiply'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecondGO.__rshift__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix >> 1", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecondGO.__rsub__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> '1789-05-05' - ix", "[    0  -240 -3840]"], "IndexNanosecondGO.__rtruediv__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> '1789-05-05' / ix", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecondGO.__sub__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix - 2", "['1789-05-04T23:59:59.999999998' '1789-12-30T23:59:59.999999998'", " '1799-11-08T23:59:59.999999998']"], "IndexNanosecondGO.__truediv__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix / '1789-05-05'", "UFuncTypeError(<ufunc 'divide'>, (dtype('<M8[D]'), dtype('<M8[D]')))"], "IndexNanosecondGO.__xor__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix ^ True", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")", ">>> ix ^ (False, True)", "TypeError(\"ufunc 'bitwise_xor' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecondGO.__abs__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> abs(ix)", "UFuncTypeError(<ufunc 'absolute'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexNanosecondGO.__invert__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ~ix", "TypeError(\"ufunc 'invert' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecondGO.__neg__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> -ix", "UFuncTypeError(<ufunc 'negative'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexNanosecondGO.__pos__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> +ix", "UFuncTypeError(<ufunc 'positive'>, (<class 'numpy.dtypes.DateTime64DType'>, None))"], "IndexNanosecondGO.via_dt.__call__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', 'NaT', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "NaT", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt(fill_value=-1).year", "[1789   -1 1799]"], "IndexNanosecondGO.via_dt.year": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.year", "[1789 1789 1799]"], "IndexNanosecondGO.via_dt.year_month": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.year_month", "['1789-05' '1789-12' '1799-11']"], "IndexNanosecondGO.via_dt.year_quarter": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.year_quarter", "['1789-Q2' '1789-Q4' '1799-Q4']"], "IndexNanosecondGO.via_dt.month": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.month", "[ 5 12 11]"], "IndexNanosecondGO.via_dt.day": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.day", "[ 5 31  9]"], "IndexNanosecondGO.via_dt.hour": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.hour", "[0 0 0]"], "IndexNanosecondGO.via_dt.minute": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.minute", "[0 0 0]"], "IndexNanosecondGO.via_dt.second": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.second", "[0 0 0]"], "IndexNanosecondGO.via_dt.weekday()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.weekday()", "[1 3 5]"], "IndexNanosecondGO.via_dt.quarter()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.quarter()", "[2 4 4]"], "IndexNanosecondGO.via_dt.is_month_end()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.is_month_end()", "[False  True False]"], "IndexNanosecondGO.via_dt.is_month_start()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.is_month_start()", "[False False False]"], "IndexNanosecondGO.via_dt.is_year_end()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.is_year_end()", "[False  True False]"], "IndexNanosecondGO.via_dt.is_year_start()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.is_year_start()", "[False False False]"], "IndexNanosecondGO.via_dt.is_quarter_end()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.is_quarter_end()", "[False  True False]"], "IndexNanosecondGO.via_dt.is_quarter_start()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.is_quarter_start()", "[False False False]"], "IndexNanosecondGO.via_dt.timetuple()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.timetuple()", "RuntimeError('invalid dtype (datetime64[ns]) for date operation')"], "IndexNanosecondGO.via_dt.isoformat()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.isoformat()", "RuntimeError('invalid dtype (datetime64[ns]) for date operation')"], "IndexNanosecondGO.via_dt.fromisoformat()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.fromisoformat()", "RuntimeError('invalid dtype (datetime64[ns]) for operation on string types')"], "IndexNanosecondGO.via_dt.strftime()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.strftime(\"%A | %B\")", "RuntimeError('invalid dtype (datetime64[ns]) for date operation')"], "IndexNanosecondGO.via_dt.strptime()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.strptime(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[ns]) for operation on string types')"], "IndexNanosecondGO.via_dt.strpdate()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_dt.strpdate(\"%m/%d/%Y\")", "RuntimeError('invalid dtype (datetime64[ns]) for operation on string types')"], "IndexNanosecondGO.via_str.__getitem__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str[-1]", "['0' '0' '0']"], "IndexNanosecondGO.via_str.capitalize()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.capitalize()", "['1789-05-05t00:00:00.000000000' '1789-12-31t00:00:00.000000000'", " '1799-11-09t00:00:00.000000000']"], "IndexNanosecondGO.via_str.center()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.center(8)", "['1789-05-' '1789-12-' '1799-11-']"], "IndexNanosecondGO.via_str.contains()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.contains('X')", "[False False False]"], "IndexNanosecondGO.via_str.count()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.count('X')", "[0 0 0]"], "IndexNanosecondGO.via_str.decode()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09')).astype(bytes)", ">>> ix", "<IndexGO>", "b'1789-05-05T00:00:00.000000000'", "b'1789-12-31T00:00:00.000000000'", "b'1799-11-09T00:00:00.000000000'", "<|S48>", ">>> ix.via_str.decode()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.via_str.encode()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.encode()", "[b'1789-05-05T00:00:00.000000000' b'1789-12-31T00:00:00.000000000'", " b'1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.via_str.endswith()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.endswith(' ')", "[False False False]"], "IndexNanosecondGO.via_str.find()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.find('X')", "[-1 -1 -1]"], "IndexNanosecondGO.via_str.format()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.format('{:-^10}')", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.via_str.index()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.index('X')", "ValueError('substring not found')"], "IndexNanosecondGO.via_str.isalnum()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isalnum()", "[False False False]"], "IndexNanosecondGO.via_str.isalpha()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isalpha()", "[False False False]"], "IndexNanosecondGO.via_str.isdecimal()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isdecimal()", "[False False False]"], "IndexNanosecondGO.via_str.isdigit()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isdigit()", "[False False False]"], "IndexNanosecondGO.via_str.islower()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.islower()", "[False False False]"], "IndexNanosecondGO.via_str.isnumeric()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isnumeric()", "[False False False]"], "IndexNanosecondGO.via_str.isspace()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isspace()", "[False False False]"], "IndexNanosecondGO.via_str.istitle()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.istitle()", "[ True  True  True]"], "IndexNanosecondGO.via_str.isupper()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.isupper()", "[ True  True  True]"], "IndexNanosecondGO.via_str.ljust()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.ljust(8)", "['1789-05-' '1789-12-' '1799-11-']"], "IndexNanosecondGO.via_str.len()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.len()", "[29 29 29]"], "IndexNanosecondGO.via_str.lower()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.lower()", "['1789-05-05t00:00:00.000000000' '1789-12-31t00:00:00.000000000'", " '1799-11-09t00:00:00.000000000']"], "IndexNanosecondGO.via_str.lstrip()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.lstrip()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.via_str.partition()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.partition('X')", "[('1789-05-05T00:00:00.000000000', '', '')", " ('1789-12-31T00:00:00.000000000', '', '')", " ('1799-11-09T00:00:00.000000000', '', '')]"], "IndexNanosecondGO.via_str.replace()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.replace('X', '*')", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.via_str.rfind()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.rfind('X')", "[-1 -1 -1]"], "IndexNanosecondGO.via_str.rindex()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.rindex('X')", "ValueError('substring not found')"], "IndexNanosecondGO.via_str.rjust()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.rjust(8)", "['1789-05-' '1789-12-' '1799-11-']"], "IndexNanosecondGO.via_str.rpartition()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.rpartition('X')", "[('', '', '1789-05-05T00:00:00.000000000')", " ('', '', '1789-12-31T00:00:00.000000000')", " ('', '', '1799-11-09T00:00:00.000000000')]"], "IndexNanosecondGO.via_str.rsplit()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.rsplit('X')", "[('1789-05-05T00:00:00.000000000',) ('1789-12-31T00:00:00.000000000',)", " ('1799-11-09T00:00:00.000000000',)]"], "IndexNanosecondGO.via_str.rstrip()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.rstrip()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.via_str.split()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.split('X')", "[('1789-05-05T00:00:00.000000000',) ('1789-12-31T00:00:00.000000000',)", " ('1799-11-09T00:00:00.000000000',)]"], "IndexNanosecondGO.via_str.startswith()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.startswith('X')", "[False False False]"], "IndexNanosecondGO.via_str.strip()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.strip()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.via_str.swapcase()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.swapcase()", "['1789-05-05t00:00:00.000000000' '1789-12-31t00:00:00.000000000'", " '1799-11-09t00:00:00.000000000']"], "IndexNanosecondGO.via_str.title()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.title()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.via_str.upper()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.upper()", "['1789-05-05T00:00:00.000000000' '1789-12-31T00:00:00.000000000'", " '1799-11-09T00:00:00.000000000']"], "IndexNanosecondGO.via_str.zfill()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_str.zfill(8)", "['1789-05-' '1789-12-' '1799-11-']"], "IndexNanosecondGO.via_re().search()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('[X123]').search()", "[ True  True  True]"], "IndexNanosecondGO.via_re().match()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('[X123]').match()", "[ True  True  True]"], "IndexNanosecondGO.via_re().fullmatch()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('123').fullmatch()", "[False False False]"], "IndexNanosecondGO.via_re().split()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('[X123]').split()", "[('', '789-05-05T00:00:00.000000000')", " ('', '789-', '', '-', '', 'T00:00:00.000000000')", " ('', '799-', '', '-09T00:00:00.000000000')]"], "IndexNanosecondGO.via_re().findall()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('[X123]').findall()", "[('1',) ('1', '1', '2', '3', '1') ('1', '1', '1')]"], "IndexNanosecondGO.via_re().sub()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('[X123]').sub('==')", "['==789-05-05T00:00:00.000000000' '==789-====-====T00:00:00.000000000'", " '==799-====-09T00:00:00.000000000']"], "IndexNanosecondGO.via_re().subn()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_re('[X123]').subn('==', 1)", "[('==789-05-05T00:00:00.000000000', 1)", " ('==789-12-31T00:00:00.000000000', 1)", " ('==799-11-09T00:00:00.000000000', 1)]"], "IndexNanosecondGO.via_hashlib().to_bytes()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).to_bytes()", "b'IndexNanosecondGO\\x00\\x00\\xc0\\xb5\\xb2\\xea\\xe1\\xb0\\x00\\x00\\xd0\\xef\\xfa\\x95+\\xb1\\x00\\x00\\xc0V6\\x9f|\\xb5'"], "IndexNanosecondGO.via_hashlib().md5()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).md5().hexdigest()", "348a23bc7a3fd28397f1a6425c016d7c"], "IndexNanosecondGO.via_hashlib().sha256()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).sha256().hexdigest()", "c79e3093fd30c4bbc09ab88b5e4731bb1b0a5d665d51871d38a2fe24f04ee373"], "IndexNanosecondGO.via_hashlib().sha512()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).sha512().hexdigest()", "5020da989270523055e58c49880881d1b6152d72743fe8293a1e27aad5b10b0939eef7237939ed30fcd6efa2961d6165db121493f12aa4bf22eb5b96ff4d975a"], "IndexNanosecondGO.via_hashlib().sha3_256()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).sha3_256().hexdigest()", "0952702991c05aa2f015fb27fc41a581a6a3aff94cee45f440f5dcabd8b2f151"], "IndexNanosecondGO.via_hashlib().sha3_512()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).sha3_512().hexdigest()", "b846b721e36a7da766013c99e3603419b1f5fef351953f5796135ade2bf21f1196a06251b31fd962156b33121bdb9150de14b8ffb7f7d716e6b278893fff0a0a"], "IndexNanosecondGO.via_hashlib().shake_128()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).shake_128().hexdigest(8)", "674cfa071db56ac0"], "IndexNanosecondGO.via_hashlib().shake_256()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).shake_256().hexdigest(8)", "ef122ce515e6fc9b"], "IndexNanosecondGO.via_hashlib().blake2b()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).blake2b().hexdigest()", "e58ce11c808141d2621b2be1d25e6465973d6a9541bea5fde7f5dfd7b59aec9d3b878879f119961ae27e4534560f6b5bd8594fbb690572c9facc0fb254fab6bf"], "IndexNanosecondGO.via_hashlib().blake2s()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_hashlib(include_name=False).blake2s().hexdigest()", "08eb5f0375298809ebe6c572eb9041654607576cff3b32c6bbe4da463ca517d1"], "IndexNanosecondGO.via_values.apply()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_values.apply(np.sin)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecondGO.via_values.__array_ufunc__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> np.sin(ix.via_values)", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecondGO.via_values.__call__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> np.sin(ix.via_values(unify_blocks=True))", "TypeError(\"ufunc 'sin' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexNanosecondGO.via_type_clinic.to_hint()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_type_clinic.to_hint()", "<class 'static_frame.core.index_datetime.IndexNanosecondGO'>"], "IndexNanosecondGO.via_type_clinic.check()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_type_clinic.check(sf.Index[np.str_])", "ClinicError('\\nIn Index[str_]\\n\u2514\u2500\u2500 Expected str_, provided datetime64 invalid')"], "IndexNanosecondGO.via_type_clinic.__call__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> cr = ix.via_type_clinic(sf.Index[np.str_])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Index[str_]", "\u2514\u2500\u2500 Expected str_, provided datetime64 invalid"], "IndexNanosecondGO.via_type_clinic.__repr__()": [">>> ix = sf.IndexNanosecondGO(('1789-05-05', '1789-12-31', '1799-11-09'))", ">>> ix", "<IndexNanosecondGO>", "1789-05-05T00:00:00.000000000", "1789-12-31T00:00:00.000000000", "1799-11-09T00:00:00.000000000", "<datetime64[ns]>", ">>> ix.via_type_clinic", "IndexNanosecondGO"], "IndexHierarchy.__init__()": [">>> a = np.array([[0, 0, 1, 1], [0, 1, 0, 1]])", ">>> a.flags.writeable = False", ">>> sf.IndexHierarchy((sf.Index(('a', 'b')), sf.Index((1024, 2048))), indexers=a)", "<IndexHierarchy>", "a                1024", "a                2048", "b                1024", "b                2048", "<<U1>            <int64>"], "IndexHierarchy.from_index_items()": [">>> ix1 = sf.Index(('a', 'b', 'c'), name='x')", ">>> ix1", "<Index: x>", "a", "b", "c", "<<U1>", ">>> ix2 = sf.Index((1024, 2048, 4096), name='y')", ">>> ix2", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ih1 = sf.IndexHierarchy.from_index_items(((ix1.name, ix1), (ix2.name, ix2)), name='ih1')", ">>> ih1", "<IndexHierarchy: ih1>", "x                     a", "x                     b", "x                     c", "y                     1024", "y                     2048", "y                     4096", "<<U1>                 <object>", ">>> ih2 = sf.IndexHierarchy.from_index_items(((ix2.name, ix2), (ix1.name, ix1)), name='ih2')", ">>> ih2", "<IndexHierarchy: ih2>", "y                     1024", "y                     2048", "y                     4096", "x                     a", "x                     b", "x                     c", "<<U1>                 <object>", ">>> sf.IndexHierarchy.from_index_items(((ih1.name, ih1), (ih2.name, ih2)))", "<IndexHierarchy>", "ih1              x     a", "ih1              x     b", "ih1              x     c", "ih1              y     1024", "ih1              y     2048", "ih1              y     4096", "ih2              y     1024", "ih2              y     2048", "ih2              y     4096", "ih2              x     a", "ih2              x     b", "ih2              x     c", "<<U3>            <<U1> <object>"], "IndexHierarchy.from_labels()": [">>> sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>"], "IndexHierarchy.from_labels_delimited()": [">>> sf.IndexHierarchy.from_labels_delimited((\"'a'|1024|False\", \"'b'|1024|True\", \"'b'|2048|False\"), delimiter='|')", "<IndexHierarchy>", "a                1024    False", "b                1024    True", "b                2048    False", "<<U1>            <int64> <bool>"], "IndexHierarchy.from_names()": [">>> sf.IndexHierarchy.from_names(('x', 'y', 'z'))", "<IndexHierarchy: ('x', 'y', 'z')>", "<float64>                         <float64> <float64>"], "IndexHierarchy.from_pandas()": [">>> mi = pd.MultiIndex.from_product((('a', 'b'), (1024, 2048)))", ">>> sf.IndexHierarchy.from_pandas(mi)", "<IndexHierarchy>", "a                1024", "a                2048", "b                1024", "b                2048", "<object>         <int64>"], "IndexHierarchy.from_product()": [">>> sf.IndexHierarchy.from_product(('a', 'b'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", "<IndexHierarchy: x>", "a                   1517-04-01", "a                   1620-11-21", "b                   1517-04-01", "b                   1620-11-21", "<<U1>               <datetime64[D]>"], "IndexHierarchy.from_tree()": [">>> sf.IndexHierarchy.from_tree({'a': {1024: (False, True), 2048: (True,)}})", "<IndexHierarchy>", "a                1024    False", "a                1024    True", "a                2048    True", "<<U1>            <int64> <bool>"], "IndexHierarchy.from_values_per_depth()": [">>> sf.IndexHierarchy.from_values_per_depth((('a', 'a', 'b', 'b'), (0, 1, 0, 1)))", "<IndexHierarchy>", "a                0", "a                1", "b                0", "b                1", "<<U1>            <int64>", ">>> sf.IndexHierarchy.from_values_per_depth((range(0, 12, 2), range(6)))", "<IndexHierarchy>", "0                0", "2                1", "4                2", "6                3", "8                4", "10               5", "<int64>          <int64>"], "IndexHierarchy.to_frame()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.to_frame()", "<Frame>", "<Index> 0     1       2      <int64>", "<Index>", "0       a     1024    True", "1       a     2048    True", "2       a     2048    False", "3       b     1024    True", "<int64> <<U1> <int64> <bool>"], "IndexHierarchy.to_frame_go()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.to_frame_go()", "<FrameGO>", "<IndexGO> 0     1       2      <int64>", "<Index>", "0         a     1024    True", "1         a     2048    True", "2         a     2048    False", "3         b     1024    True", "<int64>   <<U1> <int64> <bool>"], "IndexHierarchy.to_pandas()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.to_pandas()", "MultiIndex([('a', 1024,  True),", "            ('a', 2048,  True),", "            ('a', 2048, False),", "            ('b', 1024,  True)],", "           name='x')"], "IndexHierarchy.to_tree()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.to_tree()", "{'a': {1024: <Index>", "True", "<bool>, 2048: <Index>", "True", "False", "<bool>}, 'b': {1024: <Index>", "True", "<bool>}}"], "IndexHierarchy.STATIC": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.STATIC", "True"], "IndexHierarchy.depth": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.depth", "3"], "IndexHierarchy.dtypes": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.dtypes", "<Series>", "<Index>", "x        <U1", "y        int64", "z        datetime64[D]", "<<U1>    <object>"], "IndexHierarchy.index_types": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.index_types", "<Series>", "<Index>", "x        <Index>", "y        <Index>", "z        <IndexDate>", "<<U1>    <object>"], "IndexHierarchy.memory": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.memory", "         L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu", "Name     214  B     214  B     214  B     214   B     214  B     214  B", "Indices  2.38 KB    2.47 KB    1.72 KB    10.49 KB    2.54 KB    1.79 KB", "Indexers 200  B     200  B     72   B     200   B     200  B     72   B", "Blocks   740  B     788  B     404  B     740   B     788  B     404  B", "Values   16   B     16   B     16   B     16    B     16   B     16   B", "Total    4.31 KB    4.47 KB    3.09 KB    12.42 KB    4.53 KB    3.16 KB"], "IndexHierarchy.name": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.name", "('x', 'y', 'z')"], "IndexHierarchy.names": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.names", "('x', 'y', 'z')"], "IndexHierarchy.nbytes": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.nbytes", "741"], "IndexHierarchy.ndim": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.ndim", "2"], "IndexHierarchy.positions": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.positions", "[0 1 2]"], "IndexHierarchy.shape": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.shape", "(3, 3)"], "IndexHierarchy.size": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.size", "9"], "IndexHierarchy.__array__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.__array__()", "[[    0  1024    32]", " [    1 -2048    32]", " [    1  1024    32]]"], "IndexHierarchy.__array_ufunc__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> np.array((0, 1, 0)) * ih", "[[    0  1024     0]", " [    0 -2048     0]", " [    0  1024     0]]"], "IndexHierarchy.__bool__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> bool(ih)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexHierarchy.__copy__()": [">>> import copy", ">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> copy.copy(ih)", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>"], "IndexHierarchy.__deepcopy__()": [">>> import copy", ">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> copy.deepcopy(ih)", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>"], "IndexHierarchy.__len__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> len(ih)", "3"], "IndexHierarchy.all()": [">>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "False                             True   True", "True                              True   True", "False                             True   False", "<bool>                            <bool> <bool>", ">>> ih.all()", "NotImplementedError('<function ufunc_all at 0x7fe90598a3e0> for IndexHierarchy is not defined; convert to `Frame`.')"], "IndexHierarchy.any()": [">>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "False                             True   True", "True                              True   True", "False                             True   False", "<bool>                            <bool> <bool>", ">>> ih.any()", "NotImplementedError('<function ufunc_any at 0x7fe90598a480> for IndexHierarchy is not defined; convert to `Frame`.')"], "IndexHierarchy.astype[]()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>", ">>> ih.astype[1](bool)", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 True   1517-04-01", "a                                 True   1789-12-31", "b                                 False  1620-11-21", "<<U1>                             <bool> <datetime64[D]>"], "IndexHierarchy.astype()": [">>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "False                             True   True", "True                              True   True", "False                             True   False", "<bool>                            <bool> <bool>", ">>> ih.astype(str)", "<IndexHierarchy: ('x', 'y', 'z')>", "False                             True  True", "True                              True  True", "False                             True  False", "<<U5>                             <<U5> <<U5>"], "IndexHierarchy.copy()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.copy()", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>"], "IndexHierarchy.cumprod()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.cumprod()", "NotImplementedError('<function cumprod at 0x7fe921ddb1a0> for IndexHierarchy is not defined; convert to `Frame`.')"], "IndexHierarchy.cumsum()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.cumsum()", "NotImplementedError('<function cumsum at 0x7fe921ddaa20> for IndexHierarchy is not defined; convert to `Frame`.')"], "IndexHierarchy.difference()": [">>> ih1 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih1", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "<<U1>               <int64> <bool>", ">>> ih2 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')", ">>> ih2", "<IndexHierarchy: y>", "a                   1024    True", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih1.difference(ih2)", "<IndexHierarchy>", "a                2048    False", "a                2048    True", "<<U1>            <int64> <bool>"], "IndexHierarchy.dropfalsy()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('', 0, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024    True", "                    0       False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.dropfalsy()", "<IndexHierarchy: x>", "a                   1024    True", "b                   1024    True", "<<U1>               <int64> <bool>"], "IndexHierarchy.dropna()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.dropna()", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          2048.0", "<float64>                    <float64>"], "IndexHierarchy.equals()": [">>> ih1 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih1", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "<<U1>               <int64> <bool>", ">>> ih2 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')", ">>> ih2", "<IndexHierarchy: y>", "a                   1024    True", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih1.equals(ih2)", "False"], "IndexHierarchy.fillfalsy()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('', 0, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024    True", "                    0       False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.fillfalsy(-1)", "<IndexHierarchy: x>", "a                   1024    True", "-1                  -1      -1", "b                   1024    True", "<object>            <int64> <object>"], "IndexHierarchy.fillna()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.fillna(0)", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          2048.0", "0.0                          0.0", "<float64>                    <float64>"], "IndexHierarchy.flat()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>", ">>> ih.flat().display_wide()", "<Index: ('x', 'y', 'z')>", "('a', 1024, numpy.datetime64('1517-04-01'))", "('a', 2048, numpy.datetime64('1789-12-31'))", "('b', 0, numpy.datetime64('1620-11-21'))", "<object>"], "IndexHierarchy.head()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchy: x>", "a                   1517-04-01", "a                   1620-11-21", "b                   1517-04-01", "b                   1620-11-21", "c                   1517-04-01", "c                   1620-11-21", "<<U1>               <datetime64[D]>", ">>> ih.head(2)", "<IndexHierarchy: x>", "a                   1517-04-01", "a                   1620-11-21", "<<U1>               <datetime64[D]>"], "IndexHierarchy.iloc_searchsorted()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchy: x>", "a                   1517-04-01", "a                   1620-11-21", "b                   1517-04-01", "b                   1620-11-21", "c                   1517-04-01", "c                   1620-11-21", "<<U1>               <datetime64[D]>", ">>> ih.iloc_searchsorted(('b', np.datetime64('1620-11-21')))", "3"], "IndexHierarchy.index_at_depth()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>", ">>> ih.index_at_depth(0)", "<Index>", "a", "b", "<<U1>", ">>> ih.index_at_depth([2, 0])", "(<IndexDate>", "1517-04-01", "1789-12-31", "1620-11-21", "<datetime64[D]>, <Index>", "a", "b", "<<U1>)"], "IndexHierarchy.indexer_at_depth()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>", ">>> ih.indexer_at_depth(0)", "[0 0 1]", ">>> ih.indexer_at_depth([2, 0])", "[[0 1 2]", " [0 0 1]]"], "IndexHierarchy.intersection()": [">>> ih1 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih1", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "<<U1>               <int64> <bool>", ">>> ih2 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')", ">>> ih2", "<IndexHierarchy: y>", "a                   1024    True", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih1.intersection(ih2)", "<IndexHierarchy>", "a                1024    True", "<<U1>            <int64> <bool>"], "IndexHierarchy.isfalsy()": [">>> ih = sf.IndexHierarchy.from_labels((('b', np.nan, True), ('', 4096, None), ('c', 0, False)), name='y')", ">>> ih.isfalsy()", "[[False  True False]", " [ True False  True]", " [False  True  True]]"], "IndexHierarchy.isin()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchy: x>", "a                   1517-04-01", "a                   1620-11-21", "b                   1517-04-01", "b                   1620-11-21", "c                   1517-04-01", "c                   1620-11-21", "<<U1>               <datetime64[D]>", ">>> ih.isin((('c', np.datetime64('1517-04-01')), ('a', np.datetime64('1620-11-21'))))", "[False  True False False  True False]"], "IndexHierarchy.isna()": [">>> ih = sf.IndexHierarchy.from_labels((('b', np.nan, True), ('', 4096, None), ('c', 0, False)), name='y')", ">>> ih.isna()", "[[False  True False]", " [False False  True]", " [False False False]]"], "IndexHierarchy.label_widths_at_depth()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> tuple(ih.label_widths_at_depth(0))", "(('a', 3), ('b', 1))", ">>> tuple(ih.label_widths_at_depth(1))", "((1024, 1), (2048, 2), (1024, 1))", ">>> tuple(ih.label_widths_at_depth(2))", "((True, 2), (False, 1), (True, 1))"], "IndexHierarchy.level_add()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.level_add('A')", "<IndexHierarchy: ('x', 'y')>", "A                            0.0       1024.0", "A                            1.0       2048.0", "A                            nan       nan", "<<U1>                        <float64> <float64>"], "IndexHierarchy.level_drop()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>", ">>> ih.level_drop()", "<IndexHierarchy: ('y', 'z')>", "1024                         1517-04-01", "2048                         1789-12-31", "0                            1620-11-21", "<int64>                      <datetime64[D]>"], "IndexHierarchy.loc_searchsorted()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchy: x>", "a                   1517-04-01", "a                   1620-11-21", "b                   1517-04-01", "b                   1620-11-21", "c                   1517-04-01", "c                   1620-11-21", "<<U1>               <datetime64[D]>", ">>> ih.loc_searchsorted(('b', np.datetime64('1620-11-21')))", "('b', numpy.datetime64('1620-11-21'))"], "IndexHierarchy.loc_to_iloc()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.loc_to_iloc(('b', 1024, True))", "3", ">>> ih.loc_to_iloc([('a', 1024, True), ('b', 1024, True)])", "[0, 3]", ">>> ih.loc_to_iloc(slice(('a', 2048, False), None))", "slice(2, None, None)"], "IndexHierarchy.max()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.max()", "[   1 1024   32]"], "IndexHierarchy.mean()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.mean()", "NotImplementedError('<function mean at 0x7fe921ddb740> for IndexHierarchy is not defined; convert to `Frame`.')"], "IndexHierarchy.median()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.median()", "NotImplementedError('<function median at 0x7fe9218434c0> for IndexHierarchy is not defined; convert to `Frame`.')"], "IndexHierarchy.min()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.min()", "[   0 1024   32]"], "IndexHierarchy.notfalsy()": [">>> ih = sf.IndexHierarchy.from_labels((('b', np.nan, True), ('', 4096, None), ('c', 0, False)), name='y')", ">>> ih.notfalsy()", "[[ True False  True]", " [False  True False]", " [ True False False]]"], "IndexHierarchy.notna()": [">>> ih = sf.IndexHierarchy.from_labels((('b', np.nan, True), ('', 4096, None), ('c', 0, False)), name='y')", ">>> ih.notna()", "[[ True False  True]", " [ True  True False]", " [ True  True  True]]"], "IndexHierarchy.prod()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.prod()", "NotImplementedError('<function prod at 0x7fe921ddb060> for IndexHierarchy is not defined; convert to `Frame`.')"], "IndexHierarchy.rehierarch()": [">>> ih = sf.IndexHierarchy.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchy: x>", "b                   1024    True", "a                   1024    True", "a                   2048    True", "a                   2048    False", "<<U1>               <int64> <bool>", ">>> ih.rehierarch([2, 0, 1])", "<IndexHierarchy>", "True             b     1024", "True             a     1024", "True             a     2048", "False            a     2048", "<bool>           <<U1> <int64>"], "IndexHierarchy.relabel()": [">>> ih = sf.IndexHierarchy.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchy: x>", "b                   1024    True", "a                   1024    True", "a                   2048    True", "a                   2048    False", "<<U1>               <int64> <bool>", ">>> ih.relabel(lambda l: (l[0], l[1], str(l[2])[0]))", "<IndexHierarchy: x>", "b                   1024    T", "a                   1024    T", "a                   2048    T", "a                   2048    F", "<<U1>               <int64> <<U1>"], "IndexHierarchy.relabel_at_depth()": [">>> ih = sf.IndexHierarchy.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchy: x>", "b                   1024    True", "a                   1024    True", "a                   2048    True", "a                   2048    False", "<<U1>               <int64> <bool>", ">>> ih.relabel_at_depth(lambda l: str(l)[0], depth_level=[1, 2])", "<IndexHierarchy: x>", "b                   1     T", "a                   1     T", "a                   2     T", "a                   2     F", "<<U1>               <<U1> <<U1>"], "IndexHierarchy.rename()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.rename('y')", "<IndexHierarchy: y>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>"], "IndexHierarchy.roll()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchy: x>", "a                   1517-04-01", "a                   1620-11-21", "b                   1517-04-01", "b                   1620-11-21", "c                   1517-04-01", "c                   1620-11-21", "<<U1>               <datetime64[D]>", ">>> ih.roll(2)", "<IndexHierarchy: x>", "c                   1517-04-01", "c                   1620-11-21", "a                   1517-04-01", "a                   1620-11-21", "b                   1517-04-01", "b                   1620-11-21", "<<U1>               <datetime64[D]>"], "IndexHierarchy.sample()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchy: x>", "a                   1517-04-01", "a                   1620-11-21", "b                   1517-04-01", "b                   1620-11-21", "c                   1517-04-01", "c                   1620-11-21", "<<U1>               <datetime64[D]>", ">>> ih.sample(2, seed=0)", "<IndexHierarchy: x>", "b                   1517-04-01", "c                   1620-11-21", "<<U1>               <datetime64[D]>"], "IndexHierarchy.sort()": [">>> ih = sf.IndexHierarchy.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchy: x>", "b                   1024    True", "a                   1024    True", "a                   2048    True", "a                   2048    False", "<<U1>               <int64> <bool>", ">>> ih.sort()", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    False", "a                   2048    True", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.sort(ascending=False)", "<IndexHierarchy: x>", "b                   1024    True", "a                   2048    True", "a                   2048    False", "a                   1024    True", "<<U1>               <int64> <bool>"], "IndexHierarchy.std()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.std()", "NotImplementedError('functools.partial(<function std at 0x7fe921a5f930>, ddof=0) for IndexHierarchy is not defined; convert to `Frame`.')"], "IndexHierarchy.sum()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.sum()", "NotImplementedError('<function sum at 0x7fe921dda660> for IndexHierarchy is not defined; convert to `Frame`.')"], "IndexHierarchy.tail()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchy: x>", "a                   1517-04-01", "a                   1620-11-21", "b                   1517-04-01", "b                   1620-11-21", "c                   1517-04-01", "c                   1620-11-21", "<<U1>               <datetime64[D]>", ">>> ih.tail(2)", "<IndexHierarchy: x>", "c                   1517-04-01", "c                   1620-11-21", "<<U1>               <datetime64[D]>"], "IndexHierarchy.union()": [">>> ih1 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih1", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "<<U1>               <int64> <bool>", ">>> ih2 = sf.IndexHierarchy.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')", ">>> ih2", "<IndexHierarchy: y>", "a                   1024    True", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih1.union(ih2)", "<IndexHierarchy>", "a                2048    False", "a                1024    True", "b                1024    True", "a                2048    True", "<<U1>            <int64> <bool>"], "IndexHierarchy.unique()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.unique()", "[ 0.  1. nan]"], "IndexHierarchy.values_at_depth()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>", ">>> ih.values_at_depth(0)", "['a' 'a' 'b']", ">>> ih.values_at_depth(2)", "['1517-04-01' '1789-12-31' '1620-11-21']"], "IndexHierarchy.var()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.var()", "NotImplementedError('functools.partial(<function var at 0x7fe921a5fbb0>, ddof=0) for IndexHierarchy is not defined; convert to `Frame`.')"], "IndexHierarchy.__contains__()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>", ">>> ih.__contains__('a')", "RuntimeError('Invalid key length for a; must be length 3.')"], "IndexHierarchy.__iter__()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>", ">>> tuple(ih.__iter__())", "(('a', 1024, numpy.datetime64('1517-04-01')), ('a', 2048, numpy.datetime64('1789-12-31')), ('b', 0, numpy.datetime64('1620-11-21')))"], "IndexHierarchy.__reversed__()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>", ">>> tuple(ih.__reversed__())", "(('b', 0, datetime.date(1620, 11, 21)), ('a', 2048, datetime.date(1789, 12, 31)), ('a', 1024, datetime.date(1517, 4, 1)))"], "IndexHierarchy.values": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>", ">>> ih.values", "[['a' 1024 datetime.date(1517, 4, 1)]", " ['a' 2048 datetime.date(1789, 12, 31)]", " ['b' 0 datetime.date(1620, 11, 21)]]"], "IndexHierarchy.interface": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>", ">>> ih.interface", "<Frame>", "<Index>                              cls_name       group                doc                  <<U18>", "<Index: signature>", "__init__(indices, *, indexers, na... IndexHierarchy Constructor          Initializer. Args...", "from_index_items(items, *, index_... IndexHierarchy Constructor          Given an iterable...", "from_labels(labels, *, name, reor... IndexHierarchy Constructor          Construct an Inde...", "from_labels_delimited(labels, *, ... IndexHierarchy Constructor          Construct an Inde...", "from_names(names)                    IndexHierarchy Constructor          Construct a zero-...", "from_pandas(value)                   IndexHierarchy Constructor          Given a Pandas in...", "from_product(*, name, index_const... IndexHierarchy Constructor          Given groups of i...", "from_tree(tree, *, name, index_co... IndexHierarchy Constructor          Convert into a In...", "from_values_per_depth(values, *, ... IndexHierarchy Constructor          Construct an Inde...", "to_frame()                           IndexHierarchy Exporter             Return Frame vers...", "to_frame_go()                        IndexHierarchy Exporter             Return a FrameGO ...", "to_html(config, style_config)        IndexHierarchy Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexHierarchy Exporter             Return a complete...", "to_pandas()                          IndexHierarchy Exporter             Return a Pandas M...", "to_tree()                            IndexHierarchy Exporter             Returns the tree ...", "to_visidata()                        IndexHierarchy Exporter             Open an interacti...", "STATIC                               IndexHierarchy Attribute            bool(x) -> bool R...", "...                                  ...            ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexHierarchy Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexHierarchy Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexHierarchy Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexHierarchy Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchy Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchy Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchy Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchy Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchy Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchy Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchy Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchy Accessor Hashlib", "via_type_clinic.to_hint()            IndexHierarchy Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexHierarchy Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexHierarchy Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexHierarchy Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexHierarchy Accessor Type Clinic Return a compact ...", "<<U90>                               <<U14>         <<U27>               <<U83>"], "IndexHierarchy.__repr__()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> repr(ih)", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>"], "IndexHierarchy.__str__()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> str(ih)", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>"], "IndexHierarchy.display()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.display()", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>", ">>> ih.display(sf.DisplayConfig(type_show=False))", "a 1024 1517-04-01", "a 2048 1789-12-31", "b 0    1620-11-21"], "IndexHierarchy.display_tall()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.display_tall()", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>"], "IndexHierarchy.display_wide()": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.display_wide()", "<IndexHierarchy: ('x', 'y', 'z')>", "a                                 1024    1517-04-01", "a                                 2048    1789-12-31", "b                                 0       1620-11-21", "<<U1>                             <int64> <datetime64[D]>"], "IndexHierarchy.[]": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih[2]", "('a', 2048, False)", ">>> ih[2:]", "<IndexHierarchy: x>", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih[[0, 3]]", "<IndexHierarchy: x>", "a                   1024    True", "b                   1024    True", "<<U1>               <int64> <bool>"], "IndexHierarchy.iloc[]": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.iloc[2]", "('a', 2048, False)", ">>> ih.iloc[2:]", "<IndexHierarchy: x>", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.iloc[[0, 3]]", "<IndexHierarchy: x>", "a                   1024    True", "b                   1024    True", "<<U1>               <int64> <bool>"], "IndexHierarchy.loc[]": [">>> ih = sf.IndexHierarchy.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024    True", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.loc[('a', 2048, True)]", "('a', 2048, True)", ">>> ih.loc[('a', 2048, True):]", "<IndexHierarchy: x>", "a                   2048    True", "a                   2048    False", "b                   1024    True", "<<U1>               <int64> <bool>", ">>> ih.loc[[('a', 2048, True), ('b', 1024, True)]]", "<IndexHierarchy: x>", "a                   2048    True", "b                   1024    True", "<<U1>               <int64> <bool>"], "IndexHierarchy.iter_label()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024", "a                   4096", "a                   2048", "b                   1024", "b                   4096", "b                   2048", "c                   1024", "c                   4096", "c                   2048", "<<U1>               <int64>", ">>> tuple(ih.iter_label())", "(('a', 1024), ('a', 4096), ('a', 2048), ('b', 1024), ('b', 4096), ('b', 2048), ('c', 1024), ('c', 4096), ('c', 2048))"], "IndexHierarchy.iter_label().apply()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024", "a                   4096", "a                   2048", "b                   1024", "b                   4096", "b                   2048", "c                   1024", "c                   4096", "c                   2048", "<<U1>               <int64>", ">>> ih.iter_label().apply(lambda l: (l[0].upper(), l[1]))", "[('A', 1024) ('A', 4096) ('A', 2048) ('B', 1024) ('B', 4096) ('B', 2048)", " ('C', 1024) ('C', 4096) ('C', 2048)]"], "IndexHierarchy.iter_label().apply_iter()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024", "a                   4096", "a                   2048", "b                   1024", "b                   4096", "b                   2048", "c                   1024", "c                   4096", "c                   2048", "<<U1>               <int64>", ">>> tuple(ih.iter_label().apply_iter(lambda l: (l[0].upper(), l[1])))", "(('A', 1024), ('A', 4096), ('A', 2048), ('B', 1024), ('B', 4096), ('B', 2048), ('C', 1024), ('C', 4096), ('C', 2048))"], "IndexHierarchy.iter_label().apply_iter_items()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024", "a                   4096", "a                   2048", "b                   1024", "b                   4096", "b                   2048", "c                   1024", "c                   4096", "c                   2048", "<<U1>               <int64>", ">>> tuple(ih.iter_label().apply_iter_items(lambda l: (l[0].upper(), l[1])))", "((0, ('A', 1024)), (1, ('A', 4096)), (2, ('A', 2048)), (3, ('B', 1024)), (4, ('B', 4096)), (5, ('B', 2048)), (6, ('C', 1024)), (7, ('C', 4096)), (8, ('C', 2048)))"], "IndexHierarchy.iter_label().apply_pool()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024", "a                   4096", "a                   2048", "b                   1024", "b                   4096", "b                   2048", "c                   1024", "c                   4096", "c                   2048", "<<U1>               <int64>", ">>> ih.iter_label().apply_pool(lambda l: (l[0].upper(), l[1]), use_threads=True)", "[('A', 1024) ('A', 4096) ('A', 2048) ('B', 1024) ('B', 4096) ('B', 2048)", " ('C', 1024) ('C', 4096) ('C', 2048)]"], "IndexHierarchy.__add__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih + 8", "[[    8  1032    40]", " [    9 -2040    40]", " [    9  1032    40]]"], "IndexHierarchy.__and__()": [">>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "False                             True   True", "True                              True   True", "False                             True   False", "<bool>                            <bool> <bool>", ">>> ih & True", "[[False  True  True]", " [ True  True  True]", " [False  True False]]", ">>> ih & (False, True, True)", "[[False  True  True]", " [False  True  True]", " [False  True False]]"], "IndexHierarchy.__eq__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih == 8", "[[False False False]", " [False False False]", " [False False False]]"], "IndexHierarchy.__floordiv__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih // 8", "[[   0  128    4]", " [   0 -256    4]", " [   0  128    4]]"], "IndexHierarchy.__ge__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih >= 8", "[[False  True  True]", " [False False  True]", " [False  True  True]]"], "IndexHierarchy.__gt__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih > 8", "[[False  True  True]", " [False False  True]", " [False  True  True]]"], "IndexHierarchy.__le__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih <= 8", "[[ True False False]", " [ True  True False]", " [ True False False]]"], "IndexHierarchy.__lt__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih < 8", "[[ True False False]", " [ True  True False]", " [ True False False]]"], "IndexHierarchy.__matmul__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih @ (3, 0, 4)", "[128 131 131]"], "IndexHierarchy.__mod__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih % 8", "[[0 0 0]", " [1 0 0]", " [1 0 0]]"], "IndexHierarchy.__mul__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih * 8", "[[     0   8192    256]", " [     8 -16384    256]", " [     8   8192    256]]"], "IndexHierarchy.__ne__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih != 8", "[[ True  True  True]", " [ True  True  True]", " [ True  True  True]]"], "IndexHierarchy.__or__()": [">>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "False                             True   True", "True                              True   True", "False                             True   False", "<bool>                            <bool> <bool>", ">>> ih | True", "[[ True  True  True]", " [ True  True  True]", " [ True  True  True]]", ">>> ih | (False, True, True)", "[[False  True  True]", " [ True  True  True]", " [False  True  True]]"], "IndexHierarchy.__pow__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih ** 8", "[[            0             0 1099511627776]", " [            1             0 1099511627776]", " [            1             0 1099511627776]]"], "IndexHierarchy.__radd__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> 8 + ih", "[[    8  1032    40]", " [    9 -2040    40]", " [    9  1032    40]]"], "IndexHierarchy.__rfloordiv__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> 8 // ih", "[[ 0  0  0]", " [ 8 -1  0]", " [ 8  0  0]]"], "IndexHierarchy.__rmatmul__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih @ (3, 0, 4)", "[128 131 131]"], "IndexHierarchy.__rmul__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> 8 * ih", "[[     0   8192    256]", " [     8 -16384    256]", " [     8   8192    256]]"], "IndexHierarchy.__rshift__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih >> 1", "[[    0   512    16]", " [    0 -1024    16]", " [    0   512    16]]"], "IndexHierarchy.__rsub__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> 8 - ih", "[[    8 -1016   -24]", " [    7  2056   -24]", " [    7 -1016   -24]]"], "IndexHierarchy.__rtruediv__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> 8 / ih", "[[         inf  7.81250e-03  2.50000e-01]", " [ 8.00000e+00 -3.90625e-03  2.50000e-01]", " [ 8.00000e+00  7.81250e-03  2.50000e-01]]"], "IndexHierarchy.__sub__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih - 8", "[[   -8  1016    24]", " [   -7 -2056    24]", " [   -7  1016    24]]"], "IndexHierarchy.__truediv__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih / 8", "[[ 0.00e+00  1.28e+02  4.00e+00]", " [ 1.25e-01 -2.56e+02  4.00e+00]", " [ 1.25e-01  1.28e+02  4.00e+00]]"], "IndexHierarchy.__xor__()": [">>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "False                             True   True", "True                              True   True", "False                             True   False", "<bool>                            <bool> <bool>", ">>> ih ^ True", "[[ True False False]", " [False False False]", " [ True False  True]]", ">>> ih ^ (False, True, True)", "[[False False False]", " [ True False False]", " [False False  True]]"], "IndexHierarchy.__abs__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> abs(ih)", "[[   0 1024   32]", " [   1 2048   32]", " [   1 1024   32]]"], "IndexHierarchy.__invert__()": [">>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "False                             True   True", "True                              True   True", "False                             True   False", "<bool>                            <bool> <bool>", ">>> ~ih", "[[ True False False]", " [False False False]", " [ True False  True]]"], "IndexHierarchy.__neg__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> -ih", "[[    0 -1024   -32]", " [   -1  2048   -32]", " [   -1 -1024   -32]]"], "IndexHierarchy.__pos__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> +ih", "[[    0  1024    32]", " [    1 -2048    32]", " [    1  1024    32]]"], "IndexHierarchy.via_dt.__call__()": [">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', 'nat'), ('nat', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       NaT", "NaT              2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt(fill_value=-1).month", "[[ 4  4]", " [12 -1]", " [-1  6]]"], "IndexHierarchy.via_dt.year": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.year", "[[1517 2022]", " [1517 2021]", " [1517 2022]]"], "IndexHierarchy.via_dt.year_month": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.year_month", "[['1517-04' '2022-04']", " ['1517-12' '2021-12']", " ['1517-06' '2022-06']]"], "IndexHierarchy.via_dt.year_quarter": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.year_quarter", "[['1517-Q2' '2022-Q2']", " ['1517-Q4' '2021-Q4']", " ['1517-Q2' '2022-Q2']]"], "IndexHierarchy.via_dt.month": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.month", "[[ 4  4]", " [12 12]", " [ 6  6]]"], "IndexHierarchy.via_dt.day": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.day", "[[ 1  1]", " [31 31]", " [30 30]]"], "IndexHierarchy.via_dt.hour": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.hour", "[[0 0]", " [0 0]", " [0 0]]"], "IndexHierarchy.via_dt.minute": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.minute", "[[0 0]", " [0 0]", " [0 0]]"], "IndexHierarchy.via_dt.second": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.second", "[[0 0]", " [0 0]", " [0 0]]"], "IndexHierarchy.via_dt.weekday()": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.weekday()", "[[6 4]", " [0 4]", " [5 3]]"], "IndexHierarchy.via_dt.quarter()": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.quarter()", "[[2 2]", " [4 4]", " [2 2]]"], "IndexHierarchy.via_dt.is_month_end()": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.is_month_end()", "[[False False]", " [ True  True]", " [ True  True]]"], "IndexHierarchy.via_dt.is_month_start()": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.is_month_start()", "[[ True  True]", " [False False]", " [False False]]"], "IndexHierarchy.via_dt.is_year_end()": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.is_year_end()", "[[False False]", " [ True  True]", " [False False]]"], "IndexHierarchy.via_dt.is_year_start()": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.is_year_start()", "[[False False]", " [False False]", " [False False]]"], "IndexHierarchy.via_dt.is_quarter_end()": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.is_quarter_end()", "[[False False]", " [ True  True]", " [ True  True]]"], "IndexHierarchy.via_dt.is_quarter_start()": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.is_quarter_start()", "[[ True  True]", " [False False]", " [False False]]"], "IndexHierarchy.via_dt.timetuple()": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.timetuple()", "[[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", "  time.struct_time(tm_year=2022, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=91, tm_isdst=-1)]", " [time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)", "  time.struct_time(tm_year=2021, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=365, tm_isdst=-1)]", " [time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)", "  time.struct_time(tm_year=2022, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=181, tm_isdst=-1)]]"], "IndexHierarchy.via_dt.isoformat()": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<datetime64[D]>  <datetime64[D]>", ">>> ih.via_dt.isoformat()", "[['1517-04-01' '2022-04-01']", " ['1517-12-31' '2021-12-31']", " ['1517-06-30' '2022-06-30']]"], "IndexHierarchy.via_dt.fromisoformat()": [">>> ih = sf.IndexHierarchy.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')))", ">>> ih", "<IndexHierarchy>", "1517-04-01       2022-04-01", "1517-12-31       2021-12-31", "1517-06-30       2022-06-30", "<<U10>           <<U10>", ">>> ih.via_dt.fromisoformat()", "[[datetime.date(1517, 4, 1) datetime.date(2022, 4, 1)]", " [datetime.date(1517, 12, 31) datetime.date(2021, 12, 31)]", " [datetime.date(1517, 6, 30) datetime.date(2022, 6, 30)]]"], "IndexHierarchy.via_dt.strftime()": [">>> import datetime", ">>> ih = sf.IndexHierarchy.from_labels(((datetime.datetime(1517, 1, 1), datetime.datetime(2022, 4, 1, 8, 30, 59)), (datetime.datetime(1517, 4, 1), datetime.datetime(2022, 12, 31, 8, 30, 59))))", ">>> ih", "<IndexHierarchy>", "1517-01-01 00:00:00 2022-04-01 08:30:59", "1517-04-01 00:00:00 2022-12-31 08:30:59", "<object>            <object>", ">>> ih.via_dt.strftime(\"%A | %B\")", "[['Monday | January' 'Friday | April']", " ['Sunday | April' 'Saturday | December']]"], "IndexHierarchy.via_dt.strptime()": [">>> ih = sf.IndexHierarchy.from_labels((('4/1/1517', '4/1/2022'), ('12/31/1517', '12/31/2021'), ('6/30/1517', '6/30/2022')))", ">>> ih", "<IndexHierarchy>", "4/1/1517         4/1/2022", "12/31/1517       12/31/2021", "6/30/1517        6/30/2022", "<<U10>           <<U10>", ">>> ih.via_dt.strptime(\"%m/%d/%Y\")", "[[datetime.datetime(1517, 4, 1, 0, 0) datetime.datetime(2022, 4, 1, 0, 0)]", " [datetime.datetime(1517, 12, 31, 0, 0)", "  datetime.datetime(2021, 12, 31, 0, 0)]", " [datetime.datetime(1517, 6, 30, 0, 0)", "  datetime.datetime(2022, 6, 30, 0, 0)]]"], "IndexHierarchy.via_dt.strpdate()": [">>> ih = sf.IndexHierarchy.from_labels((('4/1/1517', '4/1/2022'), ('12/31/1517', '12/31/2021'), ('6/30/1517', '6/30/2022')))", ">>> ih", "<IndexHierarchy>", "4/1/1517         4/1/2022", "12/31/1517       12/31/2021", "6/30/1517        6/30/2022", "<<U10>           <<U10>", ">>> ih.via_dt.strpdate(\"%m/%d/%Y\")", "[[datetime.date(1517, 4, 1) datetime.date(2022, 4, 1)]", " [datetime.date(1517, 12, 31) datetime.date(2021, 12, 31)]", " [datetime.date(1517, 6, 30) datetime.date(2022, 6, 30)]]"], "IndexHierarchy.via_str.__getitem__()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str[-1]", "[[' ' '7']", " ['Z' '7']", " ['3' '7']", " [' ' '1']]"], "IndexHierarchy.via_str.capitalize()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.capitalize()", "[['Qrs ' '4/1/1517']", " ['Xyz' '12/31/1517']", " ['123' '6/30/1517']", " [' wx ' '12/31/2021']]"], "IndexHierarchy.via_str.center()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.center(8)", "[['  qrs   ' '4/1/1517']", " ['  XYZ   ' '12/31/15']", " ['  123   ' '6/30/151']", " ['   wX   ' '12/31/20']]"], "IndexHierarchy.via_str.contains()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.contains('X')", "[[False False]", " [ True False]", " [False False]", " [ True False]]"], "IndexHierarchy.via_str.count()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.count('X')", "[[0 0]", " [1 0]", " [0 0]", " [1 0]]"], "IndexHierarchy.via_str.decode()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021'))).astype(bytes)", ">>> ih", "<IndexHierarchy>", "b'qrs '          b'4/1/1517'", "b'XYZ'           b'12/31/1517'", "b'123'           b'6/30/1517'", "b' wX '          b'12/31/2021'", "<|S4>            <|S10>", ">>> ih.via_str.decode()", "[['qrs ' '4/1/1517']", " ['XYZ' '12/31/1517']", " ['123' '6/30/1517']", " [' wX ' '12/31/2021']]"], "IndexHierarchy.via_str.encode()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.encode()", "[[b'qrs ' b'4/1/1517']", " [b'XYZ' b'12/31/1517']", " [b'123' b'6/30/1517']", " [b' wX ' b'12/31/2021']]"], "IndexHierarchy.via_str.endswith()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.endswith(' ')", "[[ True False]", " [False False]", " [False False]", " [ True False]]"], "IndexHierarchy.via_str.find()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.find('X')", "[[-1 -1]", " [ 0 -1]", " [-1 -1]", " [ 2 -1]]"], "IndexHierarchy.via_str.format()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.format('{:-^10}')", "[['---qrs ---' '-4/1/1517-']", " ['---XYZ----' '12/31/1517']", " ['---123----' '6/30/1517-']", " ['--- wX ---' '12/31/2021']]"], "IndexHierarchy.via_str.index()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.index('X')", "ValueError('substring not found')"], "IndexHierarchy.via_str.isalnum()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.isalnum()", "[[False False]", " [ True False]", " [ True False]", " [False False]]"], "IndexHierarchy.via_str.isalpha()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.isalpha()", "[[False False]", " [ True False]", " [False False]", " [False False]]"], "IndexHierarchy.via_str.isdecimal()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.isdecimal()", "[[False False]", " [False False]", " [ True False]", " [False False]]"], "IndexHierarchy.via_str.isdigit()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.isdigit()", "[[False False]", " [False False]", " [ True False]", " [False False]]"], "IndexHierarchy.via_str.islower()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.islower()", "[[ True False]", " [False False]", " [False False]", " [False False]]"], "IndexHierarchy.via_str.isnumeric()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.isnumeric()", "[[False False]", " [False False]", " [ True False]", " [False False]]"], "IndexHierarchy.via_str.isspace()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.isspace()", "[[False False]", " [False False]", " [False False]", " [False False]]"], "IndexHierarchy.via_str.istitle()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.istitle()", "[[False False]", " [False False]", " [False False]", " [False False]]"], "IndexHierarchy.via_str.isupper()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.isupper()", "[[False False]", " [ True False]", " [False False]", " [False False]]"], "IndexHierarchy.via_str.ljust()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.ljust(8)", "[['qrs     ' '4/1/1517']", " ['XYZ     ' '12/31/15']", " ['123     ' '6/30/151']", " [' wX     ' '12/31/20']]"], "IndexHierarchy.via_str.len()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.len()", "[[ 4  8]", " [ 3 10]", " [ 3  9]", " [ 4 10]]"], "IndexHierarchy.via_str.lower()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.lower()", "[['qrs ' '4/1/1517']", " ['xyz' '12/31/1517']", " ['123' '6/30/1517']", " [' wx ' '12/31/2021']]"], "IndexHierarchy.via_str.lstrip()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.lstrip()", "[['qrs ' '4/1/1517']", " ['XYZ' '12/31/1517']", " ['123' '6/30/1517']", " ['wX ' '12/31/2021']]"], "IndexHierarchy.via_str.partition()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.partition('X')", "[[('qrs ', '', '') ('4/1/1517', '', '')]", " [('', 'X', 'YZ') ('12/31/1517', '', '')]", " [('123', '', '') ('6/30/1517', '', '')]", " [(' w', 'X', ' ') ('12/31/2021', '', '')]]"], "IndexHierarchy.via_str.replace()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.replace('X', '*')", "[['qrs ' '4/1/1517']", " ['*YZ' '12/31/1517']", " ['123' '6/30/1517']", " [' w* ' '12/31/2021']]"], "IndexHierarchy.via_str.rfind()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.rfind('X')", "[[-1 -1]", " [ 0 -1]", " [-1 -1]", " [ 2 -1]]"], "IndexHierarchy.via_str.rindex()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.rindex('X')", "ValueError('substring not found')"], "IndexHierarchy.via_str.rjust()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.rjust(8)", "[['    qrs ' '4/1/1517']", " ['     XYZ' '12/31/15']", " ['     123' '6/30/151']", " ['     wX ' '12/31/20']]"], "IndexHierarchy.via_str.rpartition()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.rpartition('X')", "[[('', '', 'qrs ') ('', '', '4/1/1517')]", " [('', 'X', 'YZ') ('', '', '12/31/1517')]", " [('', '', '123') ('', '', '6/30/1517')]", " [(' w', 'X', ' ') ('', '', '12/31/2021')]]"], "IndexHierarchy.via_str.rsplit()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.rsplit('X')", "[[('qrs ',) ('4/1/1517',)]", " [('', 'YZ') ('12/31/1517',)]", " [('123',) ('6/30/1517',)]", " [(' w', ' ') ('12/31/2021',)]]"], "IndexHierarchy.via_str.rstrip()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.rstrip()", "[['qrs' '4/1/1517']", " ['XYZ' '12/31/1517']", " ['123' '6/30/1517']", " [' wX' '12/31/2021']]"], "IndexHierarchy.via_str.split()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.split('X')", "[[('qrs ',) ('4/1/1517',)]", " [('', 'YZ') ('12/31/1517',)]", " [('123',) ('6/30/1517',)]", " [(' w', ' ') ('12/31/2021',)]]"], "IndexHierarchy.via_str.startswith()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.startswith('X')", "[[False False]", " [ True False]", " [False False]", " [False False]]"], "IndexHierarchy.via_str.strip()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.strip()", "[['qrs' '4/1/1517']", " ['XYZ' '12/31/1517']", " ['123' '6/30/1517']", " ['wX' '12/31/2021']]"], "IndexHierarchy.via_str.swapcase()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.swapcase()", "[['QRS ' '4/1/1517']", " ['xyz' '12/31/1517']", " ['123' '6/30/1517']", " [' Wx ' '12/31/2021']]"], "IndexHierarchy.via_str.title()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.title()", "[['Qrs ' '4/1/1517']", " ['Xyz' '12/31/1517']", " ['123' '6/30/1517']", " [' Wx ' '12/31/2021']]"], "IndexHierarchy.via_str.upper()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.upper()", "[['QRS ' '4/1/1517']", " ['XYZ' '12/31/1517']", " ['123' '6/30/1517']", " [' WX ' '12/31/2021']]"], "IndexHierarchy.via_str.zfill()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_str.zfill(8)", "[['0000qrs ' '4/1/1517']", " ['00000XYZ' '12/31/15']", " ['00000123' '6/30/151']", " ['0000 wX ' '12/31/20']]"], "IndexHierarchy.via_T.via_fill_value()": [">>> "], "IndexHierarchy.via_T.__add__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T + (0, 1, 1, -1)", "[[0.000e+00 1.024e+03]", " [2.000e+00       nan]", " [1.100e+01 2.049e+03]", " [      nan       nan]]"], "IndexHierarchy.via_T.__sub__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T - (0, 1, 1, -1)", "[[   0. 1024.]", " [   0.   nan]", " [   9. 2047.]", " [  nan   nan]]"], "IndexHierarchy.via_T.__mul__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T * (0, 1, 1, -1)", "[[0.000e+00 0.000e+00]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchy.via_T.__truediv__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T / (0, 1, 1, -1)", "[[      nan       inf]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchy.via_T.__floordiv__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T // (0, 1, 1, -1)", "[[      nan       inf]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchy.via_T.__mod__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T % (0, 1, 1, -1)", "[[nan nan]", " [ 0. nan]", " [ 0.  0.]", " [nan nan]]"], "IndexHierarchy.via_T.__pow__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T ** (0, 1, 1, -1)", "[[1.000e+00 1.000e+00]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchy.via_T.__lshift__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0", "q        -2", "r        3", "s        1", "<<U1>    <int64>", ">>> ih.via_T << (1, 2, 1, 2)", "TypeError(\"ufunc 'left_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHierarchy.via_T.__rshift__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0", "q        -2", "r        3", "s        1", "<<U1>    <int64>", ">>> ih.via_T >> (1, 2, 1, 2)", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHierarchy.via_T.__and__()": [">>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "False                             True   True", "True                              True   True", "False                             True   False", "<bool>                            <bool> <bool>", ">>> ih.via_T & (True, False, True)", "[[False  True  True]", " [False False False]", " [False  True False]]"], "IndexHierarchy.via_T.__xor__()": [">>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "False                             True   True", "True                              True   True", "False                             True   False", "<bool>                            <bool> <bool>", ">>> ih.via_T ^ (True, False, True)", "[[ True False False]", " [ True  True  True]", " [ True False  True]]"], "IndexHierarchy.via_T.__or__()": [">>> ih = sf.IndexHierarchy.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "False                             True   True", "True                              True   True", "False                             True   False", "<bool>                            <bool> <bool>", ">>> ih.via_T | (True, False, True)", "[[ True  True  True]", " [ True  True  True]", " [ True  True  True]]"], "IndexHierarchy.via_T.__lt__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T < (0, 1, 1, -1)", "[[False False]", " [False False]", " [False False]", " [False False]]"], "IndexHierarchy.via_T.__le__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T <= (0, 1, 1, -1)", "[[ True False]", " [ True False]", " [False False]", " [False False]]"], "IndexHierarchy.via_T.__eq__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T == (0, 1, 1, -1)", "[[ True False]", " [ True False]", " [False False]", " [False False]]"], "IndexHierarchy.via_T.__ne__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T != (0, 1, 1, -1)", "[[False  True]", " [False  True]", " [ True  True]", " [ True  True]]"], "IndexHierarchy.via_T.__gt__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T > (0, 1, 1, -1)", "[[False  True]", " [False False]", " [ True  True]", " [False False]]"], "IndexHierarchy.via_T.__ge__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T >= (0, 1, 1, -1)", "[[ True  True]", " [ True False]", " [ True  True]", " [False False]]"], "IndexHierarchy.via_T.__radd__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T + (0, 1, 1, -1)", "[[0.000e+00 1.024e+03]", " [2.000e+00       nan]", " [1.100e+01 2.049e+03]", " [      nan       nan]]"], "IndexHierarchy.via_T.__rsub__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T - (0, 1, 1, -1)", "[[   0. 1024.]", " [   0.   nan]", " [   9. 2047.]", " [  nan   nan]]"], "IndexHierarchy.via_T.__rmul__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T * (0, 1, 1, -1)", "[[0.000e+00 0.000e+00]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchy.via_T.__rtruediv__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T / (0, 1, 1, -1)", "[[      nan       inf]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchy.via_T.__rfloordiv__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchy: ('x', 'y')>", "0.0                          1024.0", "1.0                          nan", "10.0                         2048.0", "nan                          nan", "<float64>                    <float64>", ">>> ih.via_T // (0, 1, 1, -1)", "[[      nan       inf]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchy.via_re().search()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_re('[X123]').search()", "[[False  True]", " [ True  True]", " [ True  True]", " [ True  True]]"], "IndexHierarchy.via_re().match()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_re('[X123]').match()", "[[False False]", " [ True  True]", " [ True False]", " [False  True]]"], "IndexHierarchy.via_re().fullmatch()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_re('123').fullmatch()", "[[False False]", " [False False]", " [ True False]", " [False False]]"], "IndexHierarchy.via_re().split()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_re('[X123]').split()", "[[('qrs ',) ('4/', '/', '5', '7')]", " [('', 'YZ') ('', '', '/', '', '/', '5', '7')]", " [('', '', '', '') ('6/', '0/', '5', '7')]", " [(' w', ' ') ('', '', '/', '', '/', '0', '', '')]]"], "IndexHierarchy.via_re().findall()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_re('[X123]').findall()", "[[() ('1', '1', '1')]", " [('X',) ('1', '2', '3', '1', '1', '1')]", " [('1', '2', '3') ('3', '1', '1')]", " [('X',) ('1', '2', '3', '1', '2', '2', '1')]]"], "IndexHierarchy.via_re().sub()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_re('[X123]').sub('==')", "[['qrs ' '4/==/==5==7']", " ['==YZ' '====/====/==5==7']", " ['======' '6/==0/==5==7']", " [' w== ' '====/====/==0====']]"], "IndexHierarchy.via_re().subn()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_re('[X123]').subn('==', 1)", "[[('qrs ', 0) ('4/==/1517', 1)]", " [('==YZ', 1) ('==2/31/1517', 1)]", " [('==23', 1) ('6/==0/1517', 1)]", " [(' w== ', 1) ('==2/31/2021', 1)]]"], "IndexHierarchy.via_hashlib().to_bytes()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_hashlib(include_name=False).to_bytes()", "b'IndexHierarchyq\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x004\\x00\\x00\\x00/\\x00\\x00\\x001\\x00\\x00\\x00/\\x00\\x00\\x001\\x00\\x00\\x005\\x00\\x00\\x001\\x00\\x00\\x007\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x00/\\x00\\x00\\x003\\x00\\x00\\x001\\x00\\x00\\x00/\\x00\\x00\\x001\\x00\\x00\\x005\\x00\\x00\\x001\\x00\\x00\\x007\\x00\\x00\\x006\\x00\\x00\\x00/\\x00\\x00\\x003\\x00\\x00\\x000\\x00\\x00\\x00/\\x00\\x00\\x001\\x00\\x00\\x005\\x00\\x00\\x001\\x00\\x00\\x007\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x00/\\x00\\x00\\x003\\x00\\x00\\x001\\x00\\x00\\x00/\\x00\\x00\\x002\\x00\\x00\\x000\\x00\\x00\\x002\\x00\\x00\\x001\\x00\\x00\\x00'"], "IndexHierarchy.via_hashlib().md5()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_hashlib(include_name=False).md5().hexdigest()", "ea4d79d3e4665a7f173f6abca84291cc"], "IndexHierarchy.via_hashlib().sha256()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_hashlib(include_name=False).sha256().hexdigest()", "7c2b43eb27a01bf4fb9433da462cb4eb06f3eb2a6df7f6bd5df5eba18901c5fe"], "IndexHierarchy.via_hashlib().sha512()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_hashlib(include_name=False).sha512().hexdigest()", "c0b5dc28bac78e89575c427933aa7113d9cb3407afebb68f13e474a57eca8aeaf1a51f825b32f3761e0116e40f2cf294377be5987ec81ae7318cef7a5a2cb99b"], "IndexHierarchy.via_hashlib().sha3_256()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_hashlib(include_name=False).sha3_256().hexdigest()", "5e329acf2ff56641d4c05257d2359c218c1fa61209c799f95753a62e35203d2e"], "IndexHierarchy.via_hashlib().sha3_512()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_hashlib(include_name=False).sha3_512().hexdigest()", "c726e5c7fa754abbdf1b0d015a733f889492c0b67f45d55853ec8279a6b085176398decaa5d261fabdf0b953b5758465d62343ec051592857d0154300d0cbff9"], "IndexHierarchy.via_hashlib().shake_128()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_hashlib(include_name=False).shake_128().hexdigest(8)", "99f4f5edd8c93119"], "IndexHierarchy.via_hashlib().shake_256()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_hashlib(include_name=False).shake_256().hexdigest(8)", "3db6812d495360fc"], "IndexHierarchy.via_hashlib().blake2b()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_hashlib(include_name=False).blake2b().hexdigest()", "63b5cec375f5f9f5e78a5a674beac88d9403504931ada840d6d01bac06e40e9b3a5a1836308cd7af6bd897ba986dfa3ed6e0145bb29700cf5a2ba4168399bfc7"], "IndexHierarchy.via_hashlib().blake2s()": [">>> ih = sf.IndexHierarchy.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchy>", "qrs              4/1/1517", "XYZ              12/31/1517", "123              6/30/1517", " wX              12/31/2021", "<<U4>            <<U10>", ">>> ih.via_hashlib(include_name=False).blake2s().hexdigest()", "a38f57c3e6ed069f207faeafbc6572ccf46dc23961c033d49785b2c8e4ce59c1"], "IndexHierarchy.via_values.apply()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> ih.via_values.apply(np.sin)", "<IndexHierarchy: ('x', 'y', 'z')>", "0.0                               -0.15853338004399595 0.5514266812416906", "0.8414709848078965                0.31305701279012343  0.5514266812416906", "0.8414709848078965                -0.15853338004399595 0.5514266812416906", "<float64>                         <float64>            <float64>"], "IndexHierarchy.via_values.__array_ufunc__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> np.sin(ih.via_values)", "<IndexHierarchy: ('x', 'y', 'z')>", "0.0                               -0.15853338004399595 0.5514266812416906", "0.8414709848078965                0.31305701279012343  0.5514266812416906", "0.8414709848078965                -0.15853338004399595 0.5514266812416906", "<float64>                         <float64>            <float64>"], "IndexHierarchy.via_values.__call__()": [">>> ih = sf.IndexHierarchy.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchy: ('x', 'y', 'z')>", "0                                 1024    32", "1                                 -2048   32", "1                                 1024    32", "<int64>                           <int64> <int64>", ">>> np.sin(ih.via_values(unify_blocks=True))", "<IndexHierarchy: ('x', 'y', 'z')>", "0.0                               -0.15853338004399595 0.5514266812416906", "0.8414709848078965                0.31305701279012343  0.5514266812416906", "0.8414709848078965                -0.15853338004399595 0.5514266812416906", "<float64>                         <float64>            <float64>"], "IndexHierarchy.via_type_clinic.to_hint()": [">>> ih = sf.IndexHierarchy.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchy: x>", "b                   1024    True", "a                   1024    True", "a                   2048    True", "a                   2048    False", "<<U1>               <int64> <bool>", ">>> ih.via_type_clinic.to_hint()", "static_frame.core.index_hierarchy.IndexHierarchy[static_frame.core.index.Index[numpy.str_], static_frame.core.index.Index[numpy.int64], static_frame.core.index.Index[numpy.bool_]]"], "IndexHierarchy.via_type_clinic.check()": [">>> ih = sf.IndexHierarchy.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchy: x>", "b                   1024    True", "a                   1024    True", "a                   2048    True", "a                   2048    False", "<<U1>               <int64> <bool>", ">>> ih.via_type_clinic.check(sf.IndexHierarchy[sf.Index[np.str_], sf.Index[np.bool_]])", "ClinicError('\\nIn IndexHierarchy[Index[str_], Index[bool_]]\\n\u2514\u2500\u2500 Expected IndexHierarchy has 2 depth, provided IndexHierarchy has 3 depth')"], "IndexHierarchy.via_type_clinic.__call__()": [">>> ih = sf.IndexHierarchy.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchy: x>", "b                   1024    True", "a                   1024    True", "a                   2048    True", "a                   2048    False", "<<U1>               <int64> <bool>", ">>> cr = ih.via_type_clinic(sf.IndexHierarchy[sf.Index[np.str_], sf.Index[np.bool_]])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In IndexHierarchy[Index[str_], Index[bool_]]", "\u2514\u2500\u2500 Expected IndexHierarchy has 2 depth, provided IndexHierarchy has 3 depth"], "IndexHierarchy.via_type_clinic.__repr__()": [">>> ih = sf.IndexHierarchy.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchy: x>", "b                   1024    True", "a                   1024    True", "a                   2048    True", "a                   2048    False", "<<U1>               <int64> <bool>", ">>> ih.via_type_clinic", "IndexHierarchy[Index[str_], Index[int64], Index[bool_]]"], "IndexHierarchyGO.__init__()": [">>> a = np.array([[0, 0, 1, 1], [0, 1, 0, 1]])", ">>> a.flags.writeable = False", ">>> sf.IndexHierarchyGO((sf.Index(('a', 'b')), sf.Index((1024, 2048))), indexers=a)", "<IndexHierarchyGO>", "a                  1024", "a                  2048", "b                  1024", "b                  2048", "<<U1>              <int64>"], "IndexHierarchyGO.from_index_items()": [">>> ix1 = sf.Index(('a', 'b', 'c'), name='x')", ">>> ix1", "<Index: x>", "a", "b", "c", "<<U1>", ">>> ix2 = sf.Index((1024, 2048, 4096), name='y')", ">>> ix2", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> ih1 = sf.IndexHierarchyGO.from_index_items(((ix1.name, ix1), (ix2.name, ix2)), name='ih1')", ">>> ih1", "<IndexHierarchyGO: ih1>", "x                       a", "x                       b", "x                       c", "y                       1024", "y                       2048", "y                       4096", "<<U1>                   <object>", ">>> ih2 = sf.IndexHierarchyGO.from_index_items(((ix2.name, ix2), (ix1.name, ix1)), name='ih2')", ">>> ih2", "<IndexHierarchyGO: ih2>", "y                       1024", "y                       2048", "y                       4096", "x                       a", "x                       b", "x                       c", "<<U1>                   <object>", ">>> sf.IndexHierarchyGO.from_index_items(((ih1.name, ih1), (ih2.name, ih2)))", "<IndexHierarchyGO>", "ih1                x     a", "ih1                x     b", "ih1                x     c", "ih1                y     1024", "ih1                y     2048", "ih1                y     4096", "ih2                y     1024", "ih2                y     2048", "ih2                y     4096", "ih2                x     a", "ih2                x     b", "ih2                x     c", "<<U3>              <<U1> <object>"], "IndexHierarchyGO.from_labels()": [">>> sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>"], "IndexHierarchyGO.from_labels_delimited()": [">>> sf.IndexHierarchyGO.from_labels_delimited((\"'a'|1024|False\", \"'b'|1024|True\", \"'b'|2048|False\"), delimiter='|')", "<IndexHierarchyGO>", "a                  1024    False", "b                  1024    True", "b                  2048    False", "<<U1>              <int64> <bool>"], "IndexHierarchyGO.from_names()": [">>> sf.IndexHierarchyGO.from_names(('x', 'y', 'z'))", "<IndexHierarchyGO: ('x', 'y', 'z')>", "<float64>                           <float64> <float64>"], "IndexHierarchyGO.from_pandas()": [">>> mi = pd.MultiIndex.from_product((('a', 'b'), (1024, 2048)))", ">>> sf.IndexHierarchyGO.from_pandas(mi)", "<IndexHierarchyGO>", "a                  1024", "a                  2048", "b                  1024", "b                  2048", "<object>           <int64>"], "IndexHierarchyGO.from_product()": [">>> sf.IndexHierarchyGO.from_product(('a', 'b'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", "<IndexHierarchyGO: x>", "a                     1517-04-01", "a                     1620-11-21", "b                     1517-04-01", "b                     1620-11-21", "<<U1>                 <datetime64[D]>"], "IndexHierarchyGO.from_tree()": [">>> sf.IndexHierarchyGO.from_tree({'a': {1024: (False, True), 2048: (True,)}})", "<IndexHierarchyGO>", "a                  1024    False", "a                  1024    True", "a                  2048    True", "<<U1>              <int64> <bool>"], "IndexHierarchyGO.from_values_per_depth()": [">>> sf.IndexHierarchyGO.from_values_per_depth((('a', 'a', 'b', 'b'), (0, 1, 0, 1)))", "<IndexHierarchyGO>", "a                  0", "a                  1", "b                  0", "b                  1", "<<U1>              <int64>", ">>> sf.IndexHierarchyGO.from_values_per_depth((range(0, 12, 2), range(6)))", "<IndexHierarchyGO>", "0                  0", "2                  1", "4                  2", "6                  3", "8                  4", "10                 5", "<int64>            <int64>"], "IndexHierarchyGO.to_frame()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.to_frame()", "<Frame>", "<Index> 0     1       2      <int64>", "<Index>", "0       a     1024    True", "1       a     2048    True", "2       a     2048    False", "3       b     1024    True", "<int64> <<U1> <int64> <bool>"], "IndexHierarchyGO.to_frame_go()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.to_frame_go()", "<FrameGO>", "<IndexGO> 0     1       2      <int64>", "<Index>", "0         a     1024    True", "1         a     2048    True", "2         a     2048    False", "3         b     1024    True", "<int64>   <<U1> <int64> <bool>"], "IndexHierarchyGO.to_pandas()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.to_pandas()", "MultiIndex([('a', 1024,  True),", "            ('a', 2048,  True),", "            ('a', 2048, False),", "            ('b', 1024,  True)],", "           name='x')"], "IndexHierarchyGO.to_tree()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.to_tree()", "{'a': {1024: <IndexGO>", "True", "<bool>, 2048: <IndexGO>", "True", "False", "<bool>}, 'b': {1024: <IndexGO>", "True", "<bool>}}"], "IndexHierarchyGO.STATIC": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.STATIC", "False"], "IndexHierarchyGO.depth": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.depth", "3"], "IndexHierarchyGO.dtypes": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.dtypes", "<Series>", "<Index>", "x        <U1", "y        int64", "z        datetime64[D]", "<<U1>    <object>"], "IndexHierarchyGO.index_types": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.index_types", "<Series>", "<Index>", "x        <IndexGO>", "y        <IndexGO>", "z        <IndexDateGO>", "<<U1>    <object>"], "IndexHierarchyGO.memory": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.memory", "         L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu", "Name     214  B     214  B     214  B     214   B     214  B     214  B", "Indices  3.25 KB    3.34 KB    2.59 KB    11.36 KB    3.4  KB    2.65 KB", "Indexers 200  B     200  B     72   B     200   B     200  B     72   B", "Blocks   740  B     788  B     404  B     740   B     788  B     404  B", "Values   16   B     16   B     16   B     16    B     16   B     16   B", "Total    5.2  KB    5.36 KB    3.98 KB    13.31 KB    5.42 KB    4.05 KB"], "IndexHierarchyGO.name": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.name", "('x', 'y', 'z')"], "IndexHierarchyGO.names": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.names", "('x', 'y', 'z')"], "IndexHierarchyGO.nbytes": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.nbytes", "741"], "IndexHierarchyGO.ndim": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.ndim", "2"], "IndexHierarchyGO.positions": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.positions", "[0 1 2]"], "IndexHierarchyGO.shape": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.shape", "(3, 3)"], "IndexHierarchyGO.size": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.size", "9"], "IndexHierarchyGO.__array__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.__array__()", "[[    0  1024    32]", " [    1 -2048    32]", " [    1  1024    32]]"], "IndexHierarchyGO.__array_ufunc__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> np.array((0, 1, 0)) * ih", "[[    0  1024     0]", " [    0 -2048     0]", " [    0  1024     0]]"], "IndexHierarchyGO.__bool__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> bool(ih)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "IndexHierarchyGO.__copy__()": [">>> import copy", ">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> copy.copy(ih)", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>"], "IndexHierarchyGO.__deepcopy__()": [">>> import copy", ">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> copy.deepcopy(ih)", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>"], "IndexHierarchyGO.__len__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> len(ih)", "3"], "IndexHierarchyGO.all()": [">>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "False                               True   True", "True                                True   True", "False                               True   False", "<bool>                              <bool> <bool>", ">>> ih.all()", "NotImplementedError('<function ufunc_all at 0x7fe90598a3e0> for IndexHierarchyGO is not defined; convert to `Frame`.')"], "IndexHierarchyGO.any()": [">>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "False                               True   True", "True                                True   True", "False                               True   False", "<bool>                              <bool> <bool>", ">>> ih.any()", "NotImplementedError('<function ufunc_any at 0x7fe90598a480> for IndexHierarchyGO is not defined; convert to `Frame`.')"], "IndexHierarchyGO.append()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.append(('b', 4096, True))", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "b                     4096    True", "<<U1>                 <int64> <bool>"], "IndexHierarchyGO.astype[]()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>", ">>> ih.astype[1](bool)", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   True   1517-04-01", "a                                   True   1789-12-31", "b                                   False  1620-11-21", "<<U1>                               <bool> <datetime64[D]>"], "IndexHierarchyGO.astype()": [">>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "False                               True   True", "True                                True   True", "False                               True   False", "<bool>                              <bool> <bool>", ">>> ih.astype(str)", "<IndexHierarchyGO: ('x', 'y', 'z')>", "False                               True  True", "True                                True  True", "False                               True  False", "<<U5>                               <<U5> <<U5>"], "IndexHierarchyGO.copy()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.copy()", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>"], "IndexHierarchyGO.cumprod()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.cumprod()", "NotImplementedError('<function cumprod at 0x7fe921ddb1a0> for IndexHierarchyGO is not defined; convert to `Frame`.')"], "IndexHierarchyGO.cumsum()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.cumsum()", "NotImplementedError('<function cumsum at 0x7fe921ddaa20> for IndexHierarchyGO is not defined; convert to `Frame`.')"], "IndexHierarchyGO.difference()": [">>> ih1 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih1", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "<<U1>                 <int64> <bool>", ">>> ih2 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')", ">>> ih2", "<IndexHierarchyGO: y>", "a                     1024    True", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih1.difference(ih2)", "<IndexHierarchy>", "a                2048    False", "a                2048    True", "<<U1>            <int64> <bool>"], "IndexHierarchyGO.dropfalsy()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('', 0, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "                      0       False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.dropfalsy()", "<IndexHierarchyGO: x>", "a                     1024    True", "b                     1024    True", "<<U1>                 <int64> <bool>"], "IndexHierarchyGO.dropna()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.dropna()", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            2048.0", "<float64>                      <float64>"], "IndexHierarchyGO.equals()": [">>> ih1 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih1", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "<<U1>                 <int64> <bool>", ">>> ih2 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')", ">>> ih2", "<IndexHierarchyGO: y>", "a                     1024    True", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih1.equals(ih2)", "False"], "IndexHierarchyGO.extend()": [">>> ih1 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih1", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih2 = sf.IndexHierarchyGO.from_labels((('b', 2048, True), ('c', 4096, True), ('c', 1024, True)), name='y')", ">>> ih2", "<IndexHierarchyGO: y>", "b                     2048    True", "c                     4096    True", "c                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih1.extend(ih2)", ">>> ih1", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "b                     2048    True", "c                     4096    True", "c                     1024    True", "<<U1>                 <int64> <bool>"], "IndexHierarchyGO.fillfalsy()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('', 0, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "                      0       False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.fillfalsy(-1)", "<IndexHierarchyGO: x>", "a                     1024    True", "-1                    -1      -1", "b                     1024    True", "<object>              <int64> <object>"], "IndexHierarchyGO.fillna()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.fillna(0)", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            2048.0", "0.0                            0.0", "<float64>                      <float64>"], "IndexHierarchyGO.flat()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>", ">>> ih.flat().display_wide()", "<IndexGO: ('x', 'y', 'z')>", "('a', 1024, numpy.datetime64('1517-04-01'))", "('a', 2048, numpy.datetime64('1789-12-31'))", "('b', 0, numpy.datetime64('1620-11-21'))", "<object>"], "IndexHierarchyGO.head()": [">>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchyGO: x>", "a                     1517-04-01", "a                     1620-11-21", "b                     1517-04-01", "b                     1620-11-21", "c                     1517-04-01", "c                     1620-11-21", "<<U1>                 <datetime64[D]>", ">>> ih.head(2)", "<IndexHierarchyGO: x>", "a                     1517-04-01", "a                     1620-11-21", "<<U1>                 <datetime64[D]>"], "IndexHierarchyGO.iloc_searchsorted()": [">>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchyGO: x>", "a                     1517-04-01", "a                     1620-11-21", "b                     1517-04-01", "b                     1620-11-21", "c                     1517-04-01", "c                     1620-11-21", "<<U1>                 <datetime64[D]>", ">>> ih.iloc_searchsorted(('b', np.datetime64('1620-11-21')))", "3"], "IndexHierarchyGO.index_at_depth()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>", ">>> ih.index_at_depth(0)", "<IndexGO>", "a", "b", "<<U1>", ">>> ih.index_at_depth([2, 0])", "(<IndexDateGO>", "1517-04-01", "1789-12-31", "1620-11-21", "<datetime64[D]>, <IndexGO>", "a", "b", "<<U1>)"], "IndexHierarchyGO.indexer_at_depth()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>", ">>> ih.indexer_at_depth(0)", "[0 0 1]", ">>> ih.indexer_at_depth([2, 0])", "[[0 1 2]", " [0 0 1]]"], "IndexHierarchyGO.intersection()": [">>> ih1 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih1", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "<<U1>                 <int64> <bool>", ">>> ih2 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')", ">>> ih2", "<IndexHierarchyGO: y>", "a                     1024    True", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih1.intersection(ih2)", "<IndexHierarchy>", "a                1024    True", "<<U1>            <int64> <bool>"], "IndexHierarchyGO.isfalsy()": [">>> ih = sf.IndexHierarchyGO.from_labels((('b', np.nan, True), ('', 4096, None), ('c', 0, False)), name='y')", ">>> ih.isfalsy()", "[[False  True False]", " [ True False  True]", " [False  True  True]]"], "IndexHierarchyGO.isin()": [">>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchyGO: x>", "a                     1517-04-01", "a                     1620-11-21", "b                     1517-04-01", "b                     1620-11-21", "c                     1517-04-01", "c                     1620-11-21", "<<U1>                 <datetime64[D]>", ">>> ih.isin((('c', np.datetime64('1517-04-01')), ('a', np.datetime64('1620-11-21'))))", "[False  True False False  True False]"], "IndexHierarchyGO.isna()": [">>> ih = sf.IndexHierarchyGO.from_labels((('b', np.nan, True), ('', 4096, None), ('c', 0, False)), name='y')", ">>> ih.isna()", "[[False  True False]", " [False False  True]", " [False False False]]"], "IndexHierarchyGO.label_widths_at_depth()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> tuple(ih.label_widths_at_depth(0))", "(('a', 3), ('b', 1))", ">>> tuple(ih.label_widths_at_depth(1))", "((1024, 1), (2048, 2), (1024, 1))", ">>> tuple(ih.label_widths_at_depth(2))", "((True, 2), (False, 1), (True, 1))"], "IndexHierarchyGO.level_add()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.level_add('A')", "<IndexHierarchyGO: ('x', 'y')>", "A                              0.0       1024.0", "A                              1.0       2048.0", "A                              nan       nan", "<<U1>                          <float64> <float64>"], "IndexHierarchyGO.level_drop()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>", ">>> ih.level_drop()", "<IndexHierarchyGO: ('y', 'z')>", "1024                           1517-04-01", "2048                           1789-12-31", "0                              1620-11-21", "<int64>                        <datetime64[D]>"], "IndexHierarchyGO.loc_searchsorted()": [">>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchyGO: x>", "a                     1517-04-01", "a                     1620-11-21", "b                     1517-04-01", "b                     1620-11-21", "c                     1517-04-01", "c                     1620-11-21", "<<U1>                 <datetime64[D]>", ">>> ih.loc_searchsorted(('b', np.datetime64('1620-11-21')))", "('b', numpy.datetime64('1620-11-21'))"], "IndexHierarchyGO.loc_to_iloc()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.loc_to_iloc(('b', 1024, True))", "3", ">>> ih.loc_to_iloc([('a', 1024, True), ('b', 1024, True)])", "[0, 3]", ">>> ih.loc_to_iloc(slice(('a', 2048, False), None))", "slice(2, None, None)"], "IndexHierarchyGO.max()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.max()", "[   1 1024   32]"], "IndexHierarchyGO.mean()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.mean()", "NotImplementedError('<function mean at 0x7fe921ddb740> for IndexHierarchyGO is not defined; convert to `Frame`.')"], "IndexHierarchyGO.median()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.median()", "NotImplementedError('<function median at 0x7fe9218434c0> for IndexHierarchyGO is not defined; convert to `Frame`.')"], "IndexHierarchyGO.min()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.min()", "[   0 1024   32]"], "IndexHierarchyGO.notfalsy()": [">>> ih = sf.IndexHierarchyGO.from_labels((('b', np.nan, True), ('', 4096, None), ('c', 0, False)), name='y')", ">>> ih.notfalsy()", "[[ True False  True]", " [False  True False]", " [ True False False]]"], "IndexHierarchyGO.notna()": [">>> ih = sf.IndexHierarchyGO.from_labels((('b', np.nan, True), ('', 4096, None), ('c', 0, False)), name='y')", ">>> ih.notna()", "[[ True False  True]", " [ True  True False]", " [ True  True  True]]"], "IndexHierarchyGO.prod()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.prod()", "NotImplementedError('<function prod at 0x7fe921ddb060> for IndexHierarchyGO is not defined; convert to `Frame`.')"], "IndexHierarchyGO.rehierarch()": [">>> ih = sf.IndexHierarchyGO.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "b                     1024    True", "a                     1024    True", "a                     2048    True", "a                     2048    False", "<<U1>                 <int64> <bool>", ">>> ih.rehierarch([2, 0, 1])", "<IndexHierarchyGO>", "True               b     1024", "True               a     1024", "True               a     2048", "False              a     2048", "<bool>             <<U1> <int64>"], "IndexHierarchyGO.relabel()": [">>> ih = sf.IndexHierarchyGO.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "b                     1024    True", "a                     1024    True", "a                     2048    True", "a                     2048    False", "<<U1>                 <int64> <bool>", ">>> ih.relabel(lambda l: (l[0], l[1], str(l[2])[0]))", "<IndexHierarchyGO: x>", "b                     1024    T", "a                     1024    T", "a                     2048    T", "a                     2048    F", "<<U1>                 <int64> <<U1>"], "IndexHierarchyGO.relabel_at_depth()": [">>> ih = sf.IndexHierarchyGO.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "b                     1024    True", "a                     1024    True", "a                     2048    True", "a                     2048    False", "<<U1>                 <int64> <bool>", ">>> ih.relabel_at_depth(lambda l: str(l)[0], depth_level=[1, 2])", "<IndexHierarchyGO: x>", "b                     1     T", "a                     1     T", "a                     2     T", "a                     2     F", "<<U1>                 <<U1> <<U1>"], "IndexHierarchyGO.rename()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.rename('y')", "<IndexHierarchyGO: y>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>"], "IndexHierarchyGO.roll()": [">>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchyGO: x>", "a                     1517-04-01", "a                     1620-11-21", "b                     1517-04-01", "b                     1620-11-21", "c                     1517-04-01", "c                     1620-11-21", "<<U1>                 <datetime64[D]>", ">>> ih.roll(2)", "<IndexHierarchyGO: x>", "c                     1517-04-01", "c                     1620-11-21", "a                     1517-04-01", "a                     1620-11-21", "b                     1517-04-01", "b                     1620-11-21", "<<U1>                 <datetime64[D]>"], "IndexHierarchyGO.sample()": [">>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchyGO: x>", "a                     1517-04-01", "a                     1620-11-21", "b                     1517-04-01", "b                     1620-11-21", "c                     1517-04-01", "c                     1620-11-21", "<<U1>                 <datetime64[D]>", ">>> ih.sample(2, seed=0)", "<IndexHierarchyGO: x>", "b                     1517-04-01", "c                     1620-11-21", "<<U1>                 <datetime64[D]>"], "IndexHierarchyGO.sort()": [">>> ih = sf.IndexHierarchyGO.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "b                     1024    True", "a                     1024    True", "a                     2048    True", "a                     2048    False", "<<U1>                 <int64> <bool>", ">>> ih.sort()", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    False", "a                     2048    True", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.sort(ascending=False)", "<IndexHierarchyGO: x>", "b                     1024    True", "a                     2048    True", "a                     2048    False", "a                     1024    True", "<<U1>                 <int64> <bool>"], "IndexHierarchyGO.std()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.std()", "NotImplementedError('functools.partial(<function std at 0x7fe921a5f930>, ddof=0) for IndexHierarchyGO is not defined; convert to `Frame`.')"], "IndexHierarchyGO.sum()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.sum()", "NotImplementedError('<function sum at 0x7fe921dda660> for IndexHierarchyGO is not defined; convert to `Frame`.')"], "IndexHierarchyGO.tail()": [">>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), ('1517-04-01', '1620-11-21'), name='x', index_constructors=(sf.Index, sf.IndexDate))", ">>> ih", "<IndexHierarchyGO: x>", "a                     1517-04-01", "a                     1620-11-21", "b                     1517-04-01", "b                     1620-11-21", "c                     1517-04-01", "c                     1620-11-21", "<<U1>                 <datetime64[D]>", ">>> ih.tail(2)", "<IndexHierarchyGO: x>", "c                     1517-04-01", "c                     1620-11-21", "<<U1>                 <datetime64[D]>"], "IndexHierarchyGO.union()": [">>> ih1 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih1", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "<<U1>                 <int64> <bool>", ">>> ih2 = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('b', 1024, True)), name='y')", ">>> ih2", "<IndexHierarchyGO: y>", "a                     1024    True", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih1.union(ih2)", "<IndexHierarchy>", "a                2048    False", "a                1024    True", "b                1024    True", "a                2048    True", "<<U1>            <int64> <bool>"], "IndexHierarchyGO.unique()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.unique()", "[ 0.  1. nan]"], "IndexHierarchyGO.values_at_depth()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>", ">>> ih.values_at_depth(0)", "['a' 'a' 'b']", ">>> ih.values_at_depth(2)", "['1517-04-01' '1789-12-31' '1620-11-21']"], "IndexHierarchyGO.var()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.var()", "NotImplementedError('functools.partial(<function var at 0x7fe921a5fbb0>, ddof=0) for IndexHierarchyGO is not defined; convert to `Frame`.')"], "IndexHierarchyGO.__contains__()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>", ">>> ih.__contains__('a')", "RuntimeError('Invalid key length for a; must be length 3.')"], "IndexHierarchyGO.__iter__()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>", ">>> tuple(ih.__iter__())", "(('a', 1024, numpy.datetime64('1517-04-01')), ('a', 2048, numpy.datetime64('1789-12-31')), ('b', 0, numpy.datetime64('1620-11-21')))"], "IndexHierarchyGO.__reversed__()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>", ">>> tuple(ih.__reversed__())", "(('b', 0, datetime.date(1620, 11, 21)), ('a', 2048, datetime.date(1789, 12, 31)), ('a', 1024, datetime.date(1517, 4, 1)))"], "IndexHierarchyGO.values": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>", ">>> ih.values", "[['a' 1024 datetime.date(1517, 4, 1)]", " ['a' 2048 datetime.date(1789, 12, 31)]", " ['b' 0 datetime.date(1620, 11, 21)]]"], "IndexHierarchyGO.interface": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>", ">>> ih.interface", "<Frame>", "<Index>                              cls_name         group                doc                  <<U18>", "<Index: signature>", "__init__(indices, *, indexers, na... IndexHierarchyGO Constructor          Initializer. Args...", "from_index_items(items, *, index_... IndexHierarchyGO Constructor          Given an iterable...", "from_labels(labels, *, name, reor... IndexHierarchyGO Constructor          Construct an Inde...", "from_labels_delimited(labels, *, ... IndexHierarchyGO Constructor          Construct an Inde...", "from_names(names)                    IndexHierarchyGO Constructor          Construct a zero-...", "from_pandas(value)                   IndexHierarchyGO Constructor          Given a Pandas in...", "from_product(*, name, index_const... IndexHierarchyGO Constructor          Given groups of i...", "from_tree(tree, *, name, index_co... IndexHierarchyGO Constructor          Convert into a In...", "from_values_per_depth(values, *, ... IndexHierarchyGO Constructor          Construct an Inde...", "to_frame()                           IndexHierarchyGO Exporter             Return Frame vers...", "to_frame_go()                        IndexHierarchyGO Exporter             Return a FrameGO ...", "to_html(config, style_config)        IndexHierarchyGO Exporter             Return an HTML ta...", "to_html_datatables(fp, *, show, c... IndexHierarchyGO Exporter             Return a complete...", "to_pandas()                          IndexHierarchyGO Exporter             Return a Pandas M...", "to_tree()                            IndexHierarchyGO Exporter             Returns the tree ...", "to_visidata()                        IndexHierarchyGO Exporter             Open an interacti...", "STATIC                               IndexHierarchyGO Attribute            bool(x) -> bool R...", "...                                  ...              ...                  ...", "via_re(pattern, flags).sub(repl, ... IndexHierarchyGO Accessor Regular ... Return the string...", "via_re(pattern, flags).subn(repl,... IndexHierarchyGO Accessor Regular ... Perform the same ...", "via_hashlib(include_name, include... IndexHierarchyGO Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... IndexHierarchyGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchyGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchyGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchyGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchyGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchyGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchyGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchyGO Accessor Hashlib", "via_hashlib(include_name, include... IndexHierarchyGO Accessor Hashlib", "via_type_clinic.to_hint()            IndexHierarchyGO Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... IndexHierarchyGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... IndexHierarchyGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... IndexHierarchyGO Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           IndexHierarchyGO Accessor Type Clinic Return a compact ...", "<<U90>                               <<U16>           <<U27>               <<U83>"], "IndexHierarchyGO.__repr__()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> repr(ih)", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>"], "IndexHierarchyGO.__str__()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> str(ih)", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>"], "IndexHierarchyGO.display()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.display()", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>", ">>> ih.display(sf.DisplayConfig(type_show=False))", "a 1024 1517-04-01", "a 2048 1789-12-31", "b 0    1620-11-21"], "IndexHierarchyGO.display_tall()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.display_tall()", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>"], "IndexHierarchyGO.display_wide()": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, '1517-04-01'), ('a', 2048, '1789-12-31'), ('b', 0, '1620-11-21')), index_constructors=(sf.Index, sf.Index, sf.IndexDate), name=('x', 'y', 'z'))", ">>> ih.display_wide()", "<IndexHierarchyGO: ('x', 'y', 'z')>", "a                                   1024    1517-04-01", "a                                   2048    1789-12-31", "b                                   0       1620-11-21", "<<U1>                               <int64> <datetime64[D]>"], "IndexHierarchyGO.[]": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih[2]", "('a', 2048, False)", ">>> ih[2:]", "<IndexHierarchyGO: x>", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih[[0, 3]]", "<IndexHierarchyGO: x>", "a                     1024    True", "b                     1024    True", "<<U1>                 <int64> <bool>"], "IndexHierarchyGO.iloc[]": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.iloc[2]", "('a', 2048, False)", ">>> ih.iloc[2:]", "<IndexHierarchyGO: x>", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.iloc[[0, 3]]", "<IndexHierarchyGO: x>", "a                     1024    True", "b                     1024    True", "<<U1>                 <int64> <bool>"], "IndexHierarchyGO.loc[]": [">>> ih = sf.IndexHierarchyGO.from_labels((('a', 1024, True), ('a', 2048, True), ('a', 2048, False), ('b', 1024, True)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024    True", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.loc[('a', 2048, True)]", "('a', 2048, True)", ">>> ih.loc[('a', 2048, True):]", "<IndexHierarchyGO: x>", "a                     2048    True", "a                     2048    False", "b                     1024    True", "<<U1>                 <int64> <bool>", ">>> ih.loc[[('a', 2048, True), ('b', 1024, True)]]", "<IndexHierarchyGO: x>", "a                     2048    True", "b                     1024    True", "<<U1>                 <int64> <bool>"], "IndexHierarchyGO.iter_label()": [">>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024", "a                     4096", "a                     2048", "b                     1024", "b                     4096", "b                     2048", "c                     1024", "c                     4096", "c                     2048", "<<U1>                 <int64>", ">>> tuple(ih.iter_label())", "(('a', 1024), ('a', 4096), ('a', 2048), ('b', 1024), ('b', 4096), ('b', 2048), ('c', 1024), ('c', 4096), ('c', 2048))"], "IndexHierarchyGO.iter_label().apply()": [">>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024", "a                     4096", "a                     2048", "b                     1024", "b                     4096", "b                     2048", "c                     1024", "c                     4096", "c                     2048", "<<U1>                 <int64>", ">>> ih.iter_label().apply(lambda l: (l[0].upper(), l[1]))", "[('A', 1024) ('A', 4096) ('A', 2048) ('B', 1024) ('B', 4096) ('B', 2048)", " ('C', 1024) ('C', 4096) ('C', 2048)]"], "IndexHierarchyGO.iter_label().apply_iter()": [">>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024", "a                     4096", "a                     2048", "b                     1024", "b                     4096", "b                     2048", "c                     1024", "c                     4096", "c                     2048", "<<U1>                 <int64>", ">>> tuple(ih.iter_label().apply_iter(lambda l: (l[0].upper(), l[1])))", "(('A', 1024), ('A', 4096), ('A', 2048), ('B', 1024), ('B', 4096), ('B', 2048), ('C', 1024), ('C', 4096), ('C', 2048))"], "IndexHierarchyGO.iter_label().apply_iter_items()": [">>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024", "a                     4096", "a                     2048", "b                     1024", "b                     4096", "b                     2048", "c                     1024", "c                     4096", "c                     2048", "<<U1>                 <int64>", ">>> tuple(ih.iter_label().apply_iter_items(lambda l: (l[0].upper(), l[1])))", "((0, ('A', 1024)), (1, ('A', 4096)), (2, ('A', 2048)), (3, ('B', 1024)), (4, ('B', 4096)), (5, ('B', 2048)), (6, ('C', 1024)), (7, ('C', 4096)), (8, ('C', 2048)))"], "IndexHierarchyGO.iter_label().apply_pool()": [">>> ih = sf.IndexHierarchyGO.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "a                     1024", "a                     4096", "a                     2048", "b                     1024", "b                     4096", "b                     2048", "c                     1024", "c                     4096", "c                     2048", "<<U1>                 <int64>", ">>> ih.iter_label().apply_pool(lambda l: (l[0].upper(), l[1]), use_threads=True)", "[('A', 1024) ('A', 4096) ('A', 2048) ('B', 1024) ('B', 4096) ('B', 2048)", " ('C', 1024) ('C', 4096) ('C', 2048)]"], "IndexHierarchyGO.__add__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih + 8", "[[    8  1032    40]", " [    9 -2040    40]", " [    9  1032    40]]"], "IndexHierarchyGO.__and__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "False                               True   True", "True                                True   True", "False                               True   False", "<bool>                              <bool> <bool>", ">>> ih & True", "[[False  True  True]", " [ True  True  True]", " [False  True False]]", ">>> ih & (False, True, True)", "[[False  True  True]", " [False  True  True]", " [False  True False]]"], "IndexHierarchyGO.__eq__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih == 8", "[[False False False]", " [False False False]", " [False False False]]"], "IndexHierarchyGO.__floordiv__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih // 8", "[[   0  128    4]", " [   0 -256    4]", " [   0  128    4]]"], "IndexHierarchyGO.__ge__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih >= 8", "[[False  True  True]", " [False False  True]", " [False  True  True]]"], "IndexHierarchyGO.__gt__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih > 8", "[[False  True  True]", " [False False  True]", " [False  True  True]]"], "IndexHierarchyGO.__le__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih <= 8", "[[ True False False]", " [ True  True False]", " [ True False False]]"], "IndexHierarchyGO.__lt__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih < 8", "[[ True False False]", " [ True  True False]", " [ True False False]]"], "IndexHierarchyGO.__matmul__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih @ (3, 0, 4)", "[128 131 131]"], "IndexHierarchyGO.__mod__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih % 8", "[[0 0 0]", " [1 0 0]", " [1 0 0]]"], "IndexHierarchyGO.__mul__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih * 8", "[[     0   8192    256]", " [     8 -16384    256]", " [     8   8192    256]]"], "IndexHierarchyGO.__ne__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih != 8", "[[ True  True  True]", " [ True  True  True]", " [ True  True  True]]"], "IndexHierarchyGO.__or__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "False                               True   True", "True                                True   True", "False                               True   False", "<bool>                              <bool> <bool>", ">>> ih | True", "[[ True  True  True]", " [ True  True  True]", " [ True  True  True]]", ">>> ih | (False, True, True)", "[[False  True  True]", " [ True  True  True]", " [False  True  True]]"], "IndexHierarchyGO.__pow__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih ** 8", "[[            0             0 1099511627776]", " [            1             0 1099511627776]", " [            1             0 1099511627776]]"], "IndexHierarchyGO.__radd__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> 8 + ih", "[[    8  1032    40]", " [    9 -2040    40]", " [    9  1032    40]]"], "IndexHierarchyGO.__rfloordiv__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> 8 // ih", "[[ 0  0  0]", " [ 8 -1  0]", " [ 8  0  0]]"], "IndexHierarchyGO.__rmatmul__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih @ (3, 0, 4)", "[128 131 131]"], "IndexHierarchyGO.__rmul__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> 8 * ih", "[[     0   8192    256]", " [     8 -16384    256]", " [     8   8192    256]]"], "IndexHierarchyGO.__rshift__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih >> 1", "[[    0   512    16]", " [    0 -1024    16]", " [    0   512    16]]"], "IndexHierarchyGO.__rsub__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> 8 - ih", "[[    8 -1016   -24]", " [    7  2056   -24]", " [    7 -1016   -24]]"], "IndexHierarchyGO.__rtruediv__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> 8 / ih", "[[         inf  7.81250e-03  2.50000e-01]", " [ 8.00000e+00 -3.90625e-03  2.50000e-01]", " [ 8.00000e+00  7.81250e-03  2.50000e-01]]"], "IndexHierarchyGO.__sub__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih - 8", "[[   -8  1016    24]", " [   -7 -2056    24]", " [   -7  1016    24]]"], "IndexHierarchyGO.__truediv__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih / 8", "[[ 0.00e+00  1.28e+02  4.00e+00]", " [ 1.25e-01 -2.56e+02  4.00e+00]", " [ 1.25e-01  1.28e+02  4.00e+00]]"], "IndexHierarchyGO.__xor__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "False                               True   True", "True                                True   True", "False                               True   False", "<bool>                              <bool> <bool>", ">>> ih ^ True", "[[ True False False]", " [False False False]", " [ True False  True]]", ">>> ih ^ (False, True, True)", "[[False False False]", " [ True False False]", " [False False  True]]"], "IndexHierarchyGO.__abs__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> abs(ih)", "[[   0 1024   32]", " [   1 2048   32]", " [   1 1024   32]]"], "IndexHierarchyGO.__invert__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "False                               True   True", "True                                True   True", "False                               True   False", "<bool>                              <bool> <bool>", ">>> ~ih", "[[ True False False]", " [False False False]", " [ True False  True]]"], "IndexHierarchyGO.__neg__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> -ih", "[[    0 -1024   -32]", " [   -1  2048   -32]", " [   -1 -1024   -32]]"], "IndexHierarchyGO.__pos__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> +ih", "[[    0  1024    32]", " [    1 -2048    32]", " [    1  1024    32]]"], "IndexHierarchyGO.via_dt.__call__()": [">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', 'nat'), ('nat', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         NaT", "NaT                2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt(fill_value=-1).month", "[[ 4  4]", " [12 -1]", " [-1  6]]"], "IndexHierarchyGO.via_dt.year": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.year", "[[1517 2022]", " [1517 2021]", " [1517 2022]]"], "IndexHierarchyGO.via_dt.year_month": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.year_month", "[['1517-04' '2022-04']", " ['1517-12' '2021-12']", " ['1517-06' '2022-06']]"], "IndexHierarchyGO.via_dt.year_quarter": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.year_quarter", "[['1517-Q2' '2022-Q2']", " ['1517-Q4' '2021-Q4']", " ['1517-Q2' '2022-Q2']]"], "IndexHierarchyGO.via_dt.month": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.month", "[[ 4  4]", " [12 12]", " [ 6  6]]"], "IndexHierarchyGO.via_dt.day": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.day", "[[ 1  1]", " [31 31]", " [30 30]]"], "IndexHierarchyGO.via_dt.hour": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.hour", "[[0 0]", " [0 0]", " [0 0]]"], "IndexHierarchyGO.via_dt.minute": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.minute", "[[0 0]", " [0 0]", " [0 0]]"], "IndexHierarchyGO.via_dt.second": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.second", "[[0 0]", " [0 0]", " [0 0]]"], "IndexHierarchyGO.via_dt.weekday()": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.weekday()", "[[6 4]", " [0 4]", " [5 3]]"], "IndexHierarchyGO.via_dt.quarter()": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.quarter()", "[[2 2]", " [4 4]", " [2 2]]"], "IndexHierarchyGO.via_dt.is_month_end()": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.is_month_end()", "[[False False]", " [ True  True]", " [ True  True]]"], "IndexHierarchyGO.via_dt.is_month_start()": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.is_month_start()", "[[ True  True]", " [False False]", " [False False]]"], "IndexHierarchyGO.via_dt.is_year_end()": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.is_year_end()", "[[False False]", " [ True  True]", " [False False]]"], "IndexHierarchyGO.via_dt.is_year_start()": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.is_year_start()", "[[False False]", " [False False]", " [False False]]"], "IndexHierarchyGO.via_dt.is_quarter_end()": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.is_quarter_end()", "[[False False]", " [ True  True]", " [ True  True]]"], "IndexHierarchyGO.via_dt.is_quarter_start()": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.is_quarter_start()", "[[ True  True]", " [False False]", " [False False]]"], "IndexHierarchyGO.via_dt.timetuple()": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.timetuple()", "[[time.struct_time(tm_year=1517, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=91, tm_isdst=-1)", "  time.struct_time(tm_year=2022, tm_mon=4, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=91, tm_isdst=-1)]", " [time.struct_time(tm_year=1517, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=0, tm_yday=365, tm_isdst=-1)", "  time.struct_time(tm_year=2021, tm_mon=12, tm_mday=31, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=4, tm_yday=365, tm_isdst=-1)]", " [time.struct_time(tm_year=1517, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=181, tm_isdst=-1)", "  time.struct_time(tm_year=2022, tm_mon=6, tm_mday=30, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=181, tm_isdst=-1)]]"], "IndexHierarchyGO.via_dt.isoformat()": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')), index_constructors=sf.IndexDate)", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<datetime64[D]>    <datetime64[D]>", ">>> ih.via_dt.isoformat()", "[['1517-04-01' '2022-04-01']", " ['1517-12-31' '2021-12-31']", " ['1517-06-30' '2022-06-30']]"], "IndexHierarchyGO.via_dt.fromisoformat()": [">>> ih = sf.IndexHierarchyGO.from_labels((('1517-04-01', '2022-04-01'), ('1517-12-31', '2021-12-31'), ('1517-06-30', '2022-06-30')))", ">>> ih", "<IndexHierarchyGO>", "1517-04-01         2022-04-01", "1517-12-31         2021-12-31", "1517-06-30         2022-06-30", "<<U10>             <<U10>", ">>> ih.via_dt.fromisoformat()", "[[datetime.date(1517, 4, 1) datetime.date(2022, 4, 1)]", " [datetime.date(1517, 12, 31) datetime.date(2021, 12, 31)]", " [datetime.date(1517, 6, 30) datetime.date(2022, 6, 30)]]"], "IndexHierarchyGO.via_dt.strftime()": [">>> import datetime", ">>> ih = sf.IndexHierarchyGO.from_labels(((datetime.datetime(1517, 1, 1), datetime.datetime(2022, 4, 1, 8, 30, 59)), (datetime.datetime(1517, 4, 1), datetime.datetime(2022, 12, 31, 8, 30, 59))))", ">>> ih", "<IndexHierarchyGO>", "1517-01-01 00:00:00 2022-04-01 08:30:59", "1517-04-01 00:00:00 2022-12-31 08:30:59", "<object>            <object>", ">>> ih.via_dt.strftime(\"%A | %B\")", "[['Monday | January' 'Friday | April']", " ['Sunday | April' 'Saturday | December']]"], "IndexHierarchyGO.via_dt.strptime()": [">>> ih = sf.IndexHierarchyGO.from_labels((('4/1/1517', '4/1/2022'), ('12/31/1517', '12/31/2021'), ('6/30/1517', '6/30/2022')))", ">>> ih", "<IndexHierarchyGO>", "4/1/1517           4/1/2022", "12/31/1517         12/31/2021", "6/30/1517          6/30/2022", "<<U10>             <<U10>", ">>> ih.via_dt.strptime(\"%m/%d/%Y\")", "[[datetime.datetime(1517, 4, 1, 0, 0) datetime.datetime(2022, 4, 1, 0, 0)]", " [datetime.datetime(1517, 12, 31, 0, 0)", "  datetime.datetime(2021, 12, 31, 0, 0)]", " [datetime.datetime(1517, 6, 30, 0, 0)", "  datetime.datetime(2022, 6, 30, 0, 0)]]"], "IndexHierarchyGO.via_dt.strpdate()": [">>> ih = sf.IndexHierarchyGO.from_labels((('4/1/1517', '4/1/2022'), ('12/31/1517', '12/31/2021'), ('6/30/1517', '6/30/2022')))", ">>> ih", "<IndexHierarchyGO>", "4/1/1517           4/1/2022", "12/31/1517         12/31/2021", "6/30/1517          6/30/2022", "<<U10>             <<U10>", ">>> ih.via_dt.strpdate(\"%m/%d/%Y\")", "[[datetime.date(1517, 4, 1) datetime.date(2022, 4, 1)]", " [datetime.date(1517, 12, 31) datetime.date(2021, 12, 31)]", " [datetime.date(1517, 6, 30) datetime.date(2022, 6, 30)]]"], "IndexHierarchyGO.via_str.__getitem__()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str[-1]", "[[' ' '7']", " ['Z' '7']", " ['3' '7']", " [' ' '1']]"], "IndexHierarchyGO.via_str.capitalize()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.capitalize()", "[['Qrs ' '4/1/1517']", " ['Xyz' '12/31/1517']", " ['123' '6/30/1517']", " [' wx ' '12/31/2021']]"], "IndexHierarchyGO.via_str.center()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.center(8)", "[['  qrs   ' '4/1/1517']", " ['  XYZ   ' '12/31/15']", " ['  123   ' '6/30/151']", " ['   wX   ' '12/31/20']]"], "IndexHierarchyGO.via_str.contains()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.contains('X')", "[[False False]", " [ True False]", " [False False]", " [ True False]]"], "IndexHierarchyGO.via_str.count()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.count('X')", "[[0 0]", " [1 0]", " [0 0]", " [1 0]]"], "IndexHierarchyGO.via_str.decode()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021'))).astype(bytes)", ">>> ih", "<IndexHierarchyGO>", "b'qrs '            b'4/1/1517'", "b'XYZ'             b'12/31/1517'", "b'123'             b'6/30/1517'", "b' wX '            b'12/31/2021'", "<|S4>              <|S10>", ">>> ih.via_str.decode()", "[['qrs ' '4/1/1517']", " ['XYZ' '12/31/1517']", " ['123' '6/30/1517']", " [' wX ' '12/31/2021']]"], "IndexHierarchyGO.via_str.encode()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.encode()", "[[b'qrs ' b'4/1/1517']", " [b'XYZ' b'12/31/1517']", " [b'123' b'6/30/1517']", " [b' wX ' b'12/31/2021']]"], "IndexHierarchyGO.via_str.endswith()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.endswith(' ')", "[[ True False]", " [False False]", " [False False]", " [ True False]]"], "IndexHierarchyGO.via_str.find()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.find('X')", "[[-1 -1]", " [ 0 -1]", " [-1 -1]", " [ 2 -1]]"], "IndexHierarchyGO.via_str.format()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.format('{:-^10}')", "[['---qrs ---' '-4/1/1517-']", " ['---XYZ----' '12/31/1517']", " ['---123----' '6/30/1517-']", " ['--- wX ---' '12/31/2021']]"], "IndexHierarchyGO.via_str.index()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.index('X')", "ValueError('substring not found')"], "IndexHierarchyGO.via_str.isalnum()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.isalnum()", "[[False False]", " [ True False]", " [ True False]", " [False False]]"], "IndexHierarchyGO.via_str.isalpha()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.isalpha()", "[[False False]", " [ True False]", " [False False]", " [False False]]"], "IndexHierarchyGO.via_str.isdecimal()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.isdecimal()", "[[False False]", " [False False]", " [ True False]", " [False False]]"], "IndexHierarchyGO.via_str.isdigit()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.isdigit()", "[[False False]", " [False False]", " [ True False]", " [False False]]"], "IndexHierarchyGO.via_str.islower()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.islower()", "[[ True False]", " [False False]", " [False False]", " [False False]]"], "IndexHierarchyGO.via_str.isnumeric()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.isnumeric()", "[[False False]", " [False False]", " [ True False]", " [False False]]"], "IndexHierarchyGO.via_str.isspace()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.isspace()", "[[False False]", " [False False]", " [False False]", " [False False]]"], "IndexHierarchyGO.via_str.istitle()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.istitle()", "[[False False]", " [False False]", " [False False]", " [False False]]"], "IndexHierarchyGO.via_str.isupper()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.isupper()", "[[False False]", " [ True False]", " [False False]", " [False False]]"], "IndexHierarchyGO.via_str.ljust()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.ljust(8)", "[['qrs     ' '4/1/1517']", " ['XYZ     ' '12/31/15']", " ['123     ' '6/30/151']", " [' wX     ' '12/31/20']]"], "IndexHierarchyGO.via_str.len()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.len()", "[[ 4  8]", " [ 3 10]", " [ 3  9]", " [ 4 10]]"], "IndexHierarchyGO.via_str.lower()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.lower()", "[['qrs ' '4/1/1517']", " ['xyz' '12/31/1517']", " ['123' '6/30/1517']", " [' wx ' '12/31/2021']]"], "IndexHierarchyGO.via_str.lstrip()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.lstrip()", "[['qrs ' '4/1/1517']", " ['XYZ' '12/31/1517']", " ['123' '6/30/1517']", " ['wX ' '12/31/2021']]"], "IndexHierarchyGO.via_str.partition()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.partition('X')", "[[('qrs ', '', '') ('4/1/1517', '', '')]", " [('', 'X', 'YZ') ('12/31/1517', '', '')]", " [('123', '', '') ('6/30/1517', '', '')]", " [(' w', 'X', ' ') ('12/31/2021', '', '')]]"], "IndexHierarchyGO.via_str.replace()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.replace('X', '*')", "[['qrs ' '4/1/1517']", " ['*YZ' '12/31/1517']", " ['123' '6/30/1517']", " [' w* ' '12/31/2021']]"], "IndexHierarchyGO.via_str.rfind()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.rfind('X')", "[[-1 -1]", " [ 0 -1]", " [-1 -1]", " [ 2 -1]]"], "IndexHierarchyGO.via_str.rindex()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.rindex('X')", "ValueError('substring not found')"], "IndexHierarchyGO.via_str.rjust()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.rjust(8)", "[['    qrs ' '4/1/1517']", " ['     XYZ' '12/31/15']", " ['     123' '6/30/151']", " ['     wX ' '12/31/20']]"], "IndexHierarchyGO.via_str.rpartition()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.rpartition('X')", "[[('', '', 'qrs ') ('', '', '4/1/1517')]", " [('', 'X', 'YZ') ('', '', '12/31/1517')]", " [('', '', '123') ('', '', '6/30/1517')]", " [(' w', 'X', ' ') ('', '', '12/31/2021')]]"], "IndexHierarchyGO.via_str.rsplit()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.rsplit('X')", "[[('qrs ',) ('4/1/1517',)]", " [('', 'YZ') ('12/31/1517',)]", " [('123',) ('6/30/1517',)]", " [(' w', ' ') ('12/31/2021',)]]"], "IndexHierarchyGO.via_str.rstrip()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.rstrip()", "[['qrs' '4/1/1517']", " ['XYZ' '12/31/1517']", " ['123' '6/30/1517']", " [' wX' '12/31/2021']]"], "IndexHierarchyGO.via_str.split()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.split('X')", "[[('qrs ',) ('4/1/1517',)]", " [('', 'YZ') ('12/31/1517',)]", " [('123',) ('6/30/1517',)]", " [(' w', ' ') ('12/31/2021',)]]"], "IndexHierarchyGO.via_str.startswith()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.startswith('X')", "[[False False]", " [ True False]", " [False False]", " [False False]]"], "IndexHierarchyGO.via_str.strip()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.strip()", "[['qrs' '4/1/1517']", " ['XYZ' '12/31/1517']", " ['123' '6/30/1517']", " ['wX' '12/31/2021']]"], "IndexHierarchyGO.via_str.swapcase()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.swapcase()", "[['QRS ' '4/1/1517']", " ['xyz' '12/31/1517']", " ['123' '6/30/1517']", " [' Wx ' '12/31/2021']]"], "IndexHierarchyGO.via_str.title()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.title()", "[['Qrs ' '4/1/1517']", " ['Xyz' '12/31/1517']", " ['123' '6/30/1517']", " [' Wx ' '12/31/2021']]"], "IndexHierarchyGO.via_str.upper()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.upper()", "[['QRS ' '4/1/1517']", " ['XYZ' '12/31/1517']", " ['123' '6/30/1517']", " [' WX ' '12/31/2021']]"], "IndexHierarchyGO.via_str.zfill()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_str.zfill(8)", "[['0000qrs ' '4/1/1517']", " ['00000XYZ' '12/31/15']", " ['00000123' '6/30/151']", " ['0000 wX ' '12/31/20']]"], "IndexHierarchyGO.via_T.via_fill_value()": [">>> "], "IndexHierarchyGO.via_T.__add__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T + (0, 1, 1, -1)", "[[0.000e+00 1.024e+03]", " [2.000e+00       nan]", " [1.100e+01 2.049e+03]", " [      nan       nan]]"], "IndexHierarchyGO.via_T.__sub__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T - (0, 1, 1, -1)", "[[   0. 1024.]", " [   0.   nan]", " [   9. 2047.]", " [  nan   nan]]"], "IndexHierarchyGO.via_T.__mul__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T * (0, 1, 1, -1)", "[[0.000e+00 0.000e+00]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchyGO.via_T.__truediv__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T / (0, 1, 1, -1)", "[[      nan       inf]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchyGO.via_T.__floordiv__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T // (0, 1, 1, -1)", "[[      nan       inf]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchyGO.via_T.__mod__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T % (0, 1, 1, -1)", "[[nan nan]", " [ 0. nan]", " [ 0.  0.]", " [nan nan]]"], "IndexHierarchyGO.via_T.__pow__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T ** (0, 1, 1, -1)", "[[1.000e+00 1.000e+00]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchyGO.via_T.__lshift__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0", "q        -2", "r        3", "s        1", "<<U1>    <int64>", ">>> ih.via_T << (1, 2, 1, 2)", "TypeError(\"ufunc 'left_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHierarchyGO.via_T.__rshift__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))", ">>> s", "<Series>", "<Index>", "p        0", "q        -2", "r        3", "s        1", "<<U1>    <int64>", ">>> ih.via_T >> (1, 2, 1, 2)", "TypeError(\"ufunc 'right_shift' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''\")"], "IndexHierarchyGO.via_T.__and__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "False                               True   True", "True                                True   True", "False                               True   False", "<bool>                              <bool> <bool>", ">>> ih.via_T & (True, False, True)", "[[False  True  True]", " [False False False]", " [False  True False]]"], "IndexHierarchyGO.via_T.__xor__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "False                               True   True", "True                                True   True", "False                               True   False", "<bool>                              <bool> <bool>", ">>> ih.via_T ^ (True, False, True)", "[[ True False False]", " [ True  True  True]", " [ True False  True]]"], "IndexHierarchyGO.via_T.__or__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((False, True, True), (True, True, True), (False, True, False)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "False                               True   True", "True                                True   True", "False                               True   False", "<bool>                              <bool> <bool>", ">>> ih.via_T | (True, False, True)", "[[ True  True  True]", " [ True  True  True]", " [ True  True  True]]"], "IndexHierarchyGO.via_T.__lt__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T < (0, 1, 1, -1)", "[[False False]", " [False False]", " [False False]", " [False False]]"], "IndexHierarchyGO.via_T.__le__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T <= (0, 1, 1, -1)", "[[ True False]", " [ True False]", " [False False]", " [False False]]"], "IndexHierarchyGO.via_T.__eq__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T == (0, 1, 1, -1)", "[[ True False]", " [ True False]", " [False False]", " [False False]]"], "IndexHierarchyGO.via_T.__ne__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T != (0, 1, 1, -1)", "[[False  True]", " [False  True]", " [ True  True]", " [ True  True]]"], "IndexHierarchyGO.via_T.__gt__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T > (0, 1, 1, -1)", "[[False  True]", " [False False]", " [ True  True]", " [False False]]"], "IndexHierarchyGO.via_T.__ge__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T >= (0, 1, 1, -1)", "[[ True  True]", " [ True False]", " [ True  True]", " [False False]]"], "IndexHierarchyGO.via_T.__radd__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T + (0, 1, 1, -1)", "[[0.000e+00 1.024e+03]", " [2.000e+00       nan]", " [1.100e+01 2.049e+03]", " [      nan       nan]]"], "IndexHierarchyGO.via_T.__rsub__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T - (0, 1, 1, -1)", "[[   0. 1024.]", " [   0.   nan]", " [   9. 2047.]", " [  nan   nan]]"], "IndexHierarchyGO.via_T.__rmul__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T * (0, 1, 1, -1)", "[[0.000e+00 0.000e+00]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchyGO.via_T.__rtruediv__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T / (0, 1, 1, -1)", "[[      nan       inf]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchyGO.via_T.__rfloordiv__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024), (1, np.nan), (10, 2048), (np.nan, np.nan)), name=('x', 'y'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y')>", "0.0                            1024.0", "1.0                            nan", "10.0                           2048.0", "nan                            nan", "<float64>                      <float64>", ">>> ih.via_T // (0, 1, 1, -1)", "[[      nan       inf]", " [1.000e+00       nan]", " [1.000e+01 2.048e+03]", " [      nan       nan]]"], "IndexHierarchyGO.via_re().search()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_re('[X123]').search()", "[[False  True]", " [ True  True]", " [ True  True]", " [ True  True]]"], "IndexHierarchyGO.via_re().match()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_re('[X123]').match()", "[[False False]", " [ True  True]", " [ True False]", " [False  True]]"], "IndexHierarchyGO.via_re().fullmatch()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_re('123').fullmatch()", "[[False False]", " [False False]", " [ True False]", " [False False]]"], "IndexHierarchyGO.via_re().split()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_re('[X123]').split()", "[[('qrs ',) ('4/', '/', '5', '7')]", " [('', 'YZ') ('', '', '/', '', '/', '5', '7')]", " [('', '', '', '') ('6/', '0/', '5', '7')]", " [(' w', ' ') ('', '', '/', '', '/', '0', '', '')]]"], "IndexHierarchyGO.via_re().findall()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_re('[X123]').findall()", "[[() ('1', '1', '1')]", " [('X',) ('1', '2', '3', '1', '1', '1')]", " [('1', '2', '3') ('3', '1', '1')]", " [('X',) ('1', '2', '3', '1', '2', '2', '1')]]"], "IndexHierarchyGO.via_re().sub()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_re('[X123]').sub('==')", "[['qrs ' '4/==/==5==7']", " ['==YZ' '====/====/==5==7']", " ['======' '6/==0/==5==7']", " [' w== ' '====/====/==0====']]"], "IndexHierarchyGO.via_re().subn()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_re('[X123]').subn('==', 1)", "[[('qrs ', 0) ('4/==/1517', 1)]", " [('==YZ', 1) ('==2/31/1517', 1)]", " [('==23', 1) ('6/==0/1517', 1)]", " [(' w== ', 1) ('==2/31/2021', 1)]]"], "IndexHierarchyGO.via_hashlib().to_bytes()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_hashlib(include_name=False).to_bytes()", "b'IndexHierarchyGOq\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00 \\x00\\x00\\x00w\\x00\\x00\\x00X\\x00\\x00\\x00 \\x00\\x00\\x004\\x00\\x00\\x00/\\x00\\x00\\x001\\x00\\x00\\x00/\\x00\\x00\\x001\\x00\\x00\\x005\\x00\\x00\\x001\\x00\\x00\\x007\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x00/\\x00\\x00\\x003\\x00\\x00\\x001\\x00\\x00\\x00/\\x00\\x00\\x001\\x00\\x00\\x005\\x00\\x00\\x001\\x00\\x00\\x007\\x00\\x00\\x006\\x00\\x00\\x00/\\x00\\x00\\x003\\x00\\x00\\x000\\x00\\x00\\x00/\\x00\\x00\\x001\\x00\\x00\\x005\\x00\\x00\\x001\\x00\\x00\\x007\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x00/\\x00\\x00\\x003\\x00\\x00\\x001\\x00\\x00\\x00/\\x00\\x00\\x002\\x00\\x00\\x000\\x00\\x00\\x002\\x00\\x00\\x001\\x00\\x00\\x00'"], "IndexHierarchyGO.via_hashlib().md5()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_hashlib(include_name=False).md5().hexdigest()", "e4e20abad75da85a45b363cddc7c51d0"], "IndexHierarchyGO.via_hashlib().sha256()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_hashlib(include_name=False).sha256().hexdigest()", "c42f6d222a3dbae61b3ea80969c311ba869997b73fb3f6023e615567fd0a33b9"], "IndexHierarchyGO.via_hashlib().sha512()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_hashlib(include_name=False).sha512().hexdigest()", "ba3b13d827b3005a0c03b3fd05478009d09c18ebe84c1be4d5745c566d6af9c52ee8f4151992eb39b8fc64acb0160eb942827d5a980abcd5f7efdd975d7b4e75"], "IndexHierarchyGO.via_hashlib().sha3_256()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_hashlib(include_name=False).sha3_256().hexdigest()", "149201c31f5f0f4e308ee014a3255cb28a56b01b8620514edfdccebaba057c76"], "IndexHierarchyGO.via_hashlib().sha3_512()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_hashlib(include_name=False).sha3_512().hexdigest()", "120efcb630288be19e03a286f990ed20d4f3e124cf7d61a263e464a5d3faa9420c93f06b5d32ac49473d3c3c5d069a6c727f604b8a56cf1a34cd81b7e4226692"], "IndexHierarchyGO.via_hashlib().shake_128()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_hashlib(include_name=False).shake_128().hexdigest(8)", "41ce9c0472bb2984"], "IndexHierarchyGO.via_hashlib().shake_256()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_hashlib(include_name=False).shake_256().hexdigest(8)", "82a3ac86fbfacf2c"], "IndexHierarchyGO.via_hashlib().blake2b()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_hashlib(include_name=False).blake2b().hexdigest()", "9debec1361c7e9cde3af56498bbc2fd027617f41898738367b7a7d81d14f06d9909f28d459acc2ba4ee1ccc718700fe3291249012660611c0f8f9a6749752cd4"], "IndexHierarchyGO.via_hashlib().blake2s()": [">>> ih = sf.IndexHierarchyGO.from_labels((('qrs ', '4/1/1517'), ('XYZ', '12/31/1517'), ('123', '6/30/1517'), (' wX ', '12/31/2021')))", ">>> ih", "<IndexHierarchyGO>", "qrs                4/1/1517", "XYZ                12/31/1517", "123                6/30/1517", " wX                12/31/2021", "<<U4>              <<U10>", ">>> ih.via_hashlib(include_name=False).blake2s().hexdigest()", "4c66ea773e42a20b858a41ef1d954427a1b407c40a0f126dd3864b0e1f2cb8bc"], "IndexHierarchyGO.via_values.apply()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> ih.via_values.apply(np.sin)", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0.0                                 -0.15853338004399595 0.5514266812416906", "0.8414709848078965                  0.31305701279012343  0.5514266812416906", "0.8414709848078965                  -0.15853338004399595 0.5514266812416906", "<float64>                           <float64>            <float64>"], "IndexHierarchyGO.via_values.__array_ufunc__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> np.sin(ih.via_values)", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0.0                                 -0.15853338004399595 0.5514266812416906", "0.8414709848078965                  0.31305701279012343  0.5514266812416906", "0.8414709848078965                  -0.15853338004399595 0.5514266812416906", "<float64>                           <float64>            <float64>"], "IndexHierarchyGO.via_values.__call__()": [">>> ih = sf.IndexHierarchyGO.from_labels(((0, 1024, 32), (1, -2048, 32), (1, 1024, 32)), name=('x', 'y', 'z'))", ">>> ih", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0                                   1024    32", "1                                   -2048   32", "1                                   1024    32", "<int64>                             <int64> <int64>", ">>> np.sin(ih.via_values(unify_blocks=True))", "<IndexHierarchyGO: ('x', 'y', 'z')>", "0.0                                 -0.15853338004399595 0.5514266812416906", "0.8414709848078965                  0.31305701279012343  0.5514266812416906", "0.8414709848078965                  -0.15853338004399595 0.5514266812416906", "<float64>                           <float64>            <float64>"], "IndexHierarchyGO.via_type_clinic.to_hint()": [">>> ih = sf.IndexHierarchyGO.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "b                     1024    True", "a                     1024    True", "a                     2048    True", "a                     2048    False", "<<U1>                 <int64> <bool>", ">>> ih.via_type_clinic.to_hint()", "static_frame.core.index_hierarchy.IndexHierarchyGO[static_frame.core.index.IndexGO[numpy.str_], static_frame.core.index.IndexGO[numpy.int64], static_frame.core.index.IndexGO[numpy.bool_]]"], "IndexHierarchyGO.via_type_clinic.check()": [">>> ih = sf.IndexHierarchyGO.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "b                     1024    True", "a                     1024    True", "a                     2048    True", "a                     2048    False", "<<U1>                 <int64> <bool>", ">>> ih.via_type_clinic.check(sf.IndexHierarchy[sf.Index[np.str_], sf.Index[np.bool_]])", "ClinicError('\\nIn IndexHierarchy[Index[str_], Index[bool_]]\\n\u2514\u2500\u2500 Expected IndexHierarchy has 2 depth, provided IndexHierarchy has 3 depth')"], "IndexHierarchyGO.via_type_clinic.__call__()": [">>> ih = sf.IndexHierarchyGO.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "b                     1024    True", "a                     1024    True", "a                     2048    True", "a                     2048    False", "<<U1>                 <int64> <bool>", ">>> cr = ih.via_type_clinic(sf.IndexHierarchy[sf.Index[np.str_], sf.Index[np.bool_]])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In IndexHierarchy[Index[str_], Index[bool_]]", "\u2514\u2500\u2500 Expected IndexHierarchy has 2 depth, provided IndexHierarchy has 3 depth"], "IndexHierarchyGO.via_type_clinic.__repr__()": [">>> ih = sf.IndexHierarchyGO.from_labels((('b', 1024, True), ('a', 1024, True), ('a', 2048, True), ('a', 2048, False)), name='x')", ">>> ih", "<IndexHierarchyGO: x>", "b                     1024    True", "a                     1024    True", "a                     2048    True", "a                     2048    False", "<<U1>                 <int64> <bool>", ">>> ih.via_type_clinic", "IndexHierarchyGO[IndexGO[str_], IndexGO[int64], IndexGO[bool_]]"], "Bus.__init__()": [">>> sf.Bus((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), index=('a', 'b'))", "<Bus>", "<Index>", "a       Frame", "b       Frame", "<<U1>   <object>"], "Bus.from_concat()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> b2", "<Bus: j>", "<Index>", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> sf.Bus.from_concat((b1, b2))", "<Bus>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>"], "Bus.from_dict()": [">>> sf.Bus.from_dict(dict(j=sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), k=sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')))", "<Bus>", "<Index>", "j       Frame", "k       Frame", "<<U1>   <object>"], "Bus.from_duckdb()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.to_duckdb('/tmp/b.duckdb')", ">>> sf.Bus.from_duckdb('/tmp/b.duckdb')", "<Bus>", "<Index>", "v       <FrameDeferred>", "w       <FrameDeferred>", "x       <FrameDeferred>", "y       <FrameDeferred>", "<<U1>   <object>"], "Bus.from_frames()": [">>> sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>"], "Bus.from_hdf5()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_hdf5('/tmp/b.hdf5')", ">>> sf.Bus.from_hdf5('/tmp/b.hdf5')", "<Bus>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "<<U1>   <object>"], "Bus.from_items()": [">>> sf.Bus.from_items((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'))))", "<Bus>", "<Index>", "i       Frame", "j       Frame", "<<U1>   <object>"], "Bus.from_series()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f2 = sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')", ">>> s = sf.Series((f1, f2), index=(f1.name, f2.name))", ">>> sf.Bus.from_series(s)", "<Bus>", "<Index>", "x       Frame", "y       Frame", "<<U1>   <object>"], "Bus.from_sqlite()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_sqlite('/tmp/b.sqlite')", ">>> sf.Bus.from_sqlite('/tmp/b.sqlite')", "<Bus>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "<<U1>   <object>"], "Bus.from_xlsx()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_xlsx('/tmp/b.xlsx')", ">>> sf.Bus.from_xlsx('/tmp/b.xlsx')", "<Bus>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "<<U1>   <object>"], "Bus.from_zip_csv()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_zip_csv('/tmp/b.zip')", ">>> sf.Bus.from_zip_csv('/tmp/b.zip')", "<Bus>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "<<U1>   <object>"], "Bus.from_zip_npy()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_zip_npy('/tmp/b.zip')", ">>> sf.Bus.from_zip_npy('/tmp/b.zip')", "<Bus>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "<<U1>   <object>"], "Bus.from_zip_npz()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_zip_npz('/tmp/b.zip')", ">>> sf.Bus.from_zip_npz('/tmp/b.zip')", "<Bus>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "<<U1>   <object>"], "Bus.from_zip_parquet()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_zip_parquet('/tmp/b.zip')", ">>> sf.Bus.from_zip_parquet('/tmp/b.zip')", "<Bus>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "<<U1>   <object>"], "Bus.from_zip_pickle()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_zip_pickle('/tmp/b.zip')", ">>> sf.Bus.from_zip_pickle('/tmp/b.zip')", "<Bus>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "<<U1>   <object>"], "Bus.from_zip_tsv()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_zip_tsv('/tmp/b.zip')", ">>> sf.Bus.from_zip_tsv('/tmp/b.zip')", "<Bus>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "<<U1>   <object>"], "Bus.to_duckdb()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.to_duckdb('/tmp/b.duckdb')"], "Bus.to_hdf5()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_hdf5('/tmp/b.hdf5')"], "Bus.to_series()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_series()", "<Series: i>", "<Index>", "x           Frame", "y           Frame", "<<U1>       <object>"], "Bus.to_sqlite()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_sqlite('/tmp/b.sqlite')"], "Bus.to_xlsx()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_xlsx('/tmp/b.xlsx')"], "Bus.to_zip_csv()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_zip_csv('/tmp/b.zip')"], "Bus.to_zip_npy()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_zip_npy('/tmp/b.zip')"], "Bus.to_zip_npz()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_zip_npz('/tmp/b.zip')"], "Bus.to_zip_parquet()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_zip_parquet('/tmp/b.zip')"], "Bus.to_zip_pickle()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_zip_pickle('/tmp/b.zip')"], "Bus.to_zip_tsv()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.to_zip_tsv('/tmp/b.zip')"], "Bus.STATIC": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.STATIC", "False"], "Bus.dtype": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.dtype", "object"], "Bus.dtypes": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.dtypes", "<Frame>", "<Index> a        b        c        d        <<U1>", "<Index>", "x       int64    int64    None     None", "y       None     None     bool     bool", "<<U1>   <object> <object> <object> <object>"], "Bus.index": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.index", "<Index>", "x", "y", "<<U1>"], "Bus.inventory": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1.to_zip_npz(\"/tmp/b.zip\")", ">>> b2 = sf.Bus.from_zip_npz(\"/tmp/b.zip\")", ">>> b2.inventory", "<Frame>", "<Index>  path       last_modified        size  <<U13>", "<Index>", "None     /tmp/b.zip 2025-03-25T20:55:... 965 B", "<object> <<U10>     <<U32>               <<U5>"], "Bus.memory": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.memory", "      L    Lu    LM   LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu", "Total 5.72 KB    1.65 KB    1.15 KB    13.83 KB    1.67 KB    1.17 KB"], "Bus.name": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.name", "i"], "Bus.nbytes": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.nbytes", "54"], "Bus.ndim": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.ndim", "1"], "Bus.shape": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.shape", "(2,)"], "Bus.shapes": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.shapes", "<Series: shape>", "<Index>", "x               (3, 2)", "y               (3, 2)", "<<U1>           <object>"], "Bus.size": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.size", "2"], "Bus.status": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1.to_zip_npz(\"/tmp/b.zip\")", ">>> b2 = sf.Bus.from_zip_npz(\"/tmp/b.zip\")", ">>> b2.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>"], "Bus.__bool__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> bool(b)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "Bus.__len__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> len(b)", "2"], "Bus.equals()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> b2", "<Bus: j>", "<Index>", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b1.equals(b2)", "False"], "Bus.head()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.head(2)", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>"], "Bus.persist[]": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b1.to_zip_npz('/tmp/b.zip')", ">>> b2 = sf.Bus.from_zip_npz('/tmp/b.zip')", ">>> b2.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>", ">>> b2.persist['y']", ">>> b2.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       True   6.0       6.0       (3, 2)", "<<U1>   <bool> <float64> <float64> <object>"], "Bus.persist.iloc[]": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b1.to_zip_npz('/tmp/b.zip')", ">>> b2 = sf.Bus.from_zip_npz('/tmp/b.zip')", ">>> b2.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>", ">>> b2.persist.iloc[0]", ">>> b2.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       True   6.0       48.0      (3, 2)", "y       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>"], "Bus.persist.loc[]": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b1.to_zip_npz('/tmp/b.zip')", ">>> b2 = sf.Bus.from_zip_npz('/tmp/b.zip')", ">>> b2.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>", ">>> b2.persist.loc['y']", ">>> b2.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       True   6.0       6.0       (3, 2)", "<<U1>   <bool> <float64> <float64> <object>"], "Bus.persist()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b1.to_zip_npz('/tmp/b.zip')", ">>> b2 = sf.Bus.from_zip_npz('/tmp/b.zip')", ">>> b2.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>", ">>> b2.persist()", ">>> b2.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       True   6.0       48.0      (3, 2)", "y       True   6.0       6.0       (3, 2)", "<<U1>   <bool> <float64> <float64> <object>"], "Bus.rehierarch()": [">>> b = sf.Bus.from_items(((('i', 1024), sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), (('j', 4096), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), (('j', 2048), sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))), index_constructor=sf.IndexHierarchy.from_labels)", ">>> b", "<Bus>", "<IndexHierarchy>", "i                1024    Frame", "j                4096    Frame", "j                2048    Frame", "<<U1>            <int64> <object>", ">>> b.rehierarch((1, 0))", "<Bus>", "<IndexHierarchy>", "1024             i     Frame", "4096             j     Frame", "2048             j     Frame", "<int64>          <<U1> <object>"], "Bus.reindex()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.reindex(('y', 'z'), fill_value=sf.Frame()).status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "y       True   6.0       6.0       (3, 2)", "z       True   0.0       0.0       (0, 0)", "<<U1>   <bool> <float64> <float64> <object>"], "Bus.relabel()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.relabel(('A', 'B'))", "<Bus: i>", "<Index>", "A        Frame", "B        Frame", "<<U1>    <object>", ">>> b.relabel(dict(x='A'))", "<Bus: i>", "<Index>", "A        Frame", "y        Frame", "<<U1>    <object>", ">>> b.relabel(lambda l: f'+{l.upper()}+')", "<Bus: i>", "<Index>", "+X+      Frame", "+Y+      Frame", "<<U3>    <object>"], "Bus.relabel_flat()": [">>> b = sf.Bus.from_items(((('i', 1024), sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), (('j', 4096), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), (('j', 2048), sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))), index_constructor=sf.IndexHierarchy.from_labels)", ">>> b", "<Bus>", "<IndexHierarchy>", "i                1024    Frame", "j                4096    Frame", "j                2048    Frame", "<<U1>            <int64> <object>", ">>> b.relabel_flat()", "<Bus>", "<Index>", "('i', 1024) Frame", "('j', 4096) Frame", "('j', 2048) Frame", "<object>    <object>"], "Bus.relabel_level_add()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.relabel_level_add(2048)", "<Bus: i>", "<IndexHierarchy>", "2048             x     Frame", "2048             y     Frame", "<int64>          <<U1> <object>"], "Bus.relabel_level_drop()": [">>> b = sf.Bus.from_items(((('i', 1024), sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), (('j', 4096), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), (('j', 2048), sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))), index_constructor=sf.IndexHierarchy.from_labels)", ">>> b", "<Bus>", "<IndexHierarchy>", "i                1024    Frame", "j                4096    Frame", "j                2048    Frame", "<<U1>            <int64> <object>", ">>> b.relabel_level_drop()", "<Bus>", "<Index>", "1024    Frame", "4096    Frame", "2048    Frame", "<int64> <object>"], "Bus.rename()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.rename('j')", "<Bus: j>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>"], "Bus.roll()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.roll(2)", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>"], "Bus.shift()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.shift(2, fill_value=sf.Frame()).status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       True   0.0       0.0       (0, 0)", "y       True   0.0       0.0       (0, 0)", "v       True   6.0       48.0      (3, 2)", "w       True   6.0       6.0       (3, 2)", "<<U1>   <bool> <float64> <float64> <object>"], "Bus.sort_index()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.sort_index()", "<Bus: k>", "<Index>", "v        Frame", "w        Frame", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.sort_index(ascending=False)", "<Bus: k>", "<Index>", "y        Frame", "x        Frame", "w        Frame", "v        Frame", "<<U1>    <object>"], "Bus.sort_values()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.sort_values(key=lambda s:s.iter_element().apply(lambda f: f.nbytes))", "<Bus: k>", "<Index>", "y        Frame", "w        Frame", "x        Frame", "v        Frame", "<<U1>    <object>", ">>> b.sort_values(key=lambda s:s.iter_element().apply(lambda f: f.nbytes), ascending=False)", "<Bus: k>", "<Index>", "v        Frame", "x        Frame", "w        Frame", "y        Frame", "<<U1>    <object>"], "Bus.tail()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.tail(2)", "<Bus: k>", "<Index>", "v        Frame", "w        Frame", "<<U1>    <object>"], "Bus.unpersist()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b1.to_zip_npz('/tmp/b.zip')", ">>> b2 = sf.Bus.from_zip_npz('/tmp/b.zip')", ">>> b2", "<Bus>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "<<U1>   <object>", ">>> tuple(b2.values)", "(<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>, <Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>)", ">>> b2", "<Bus>", "<Index>", "x       Frame", "y       Frame", "<<U1>   <object>", ">>> b2.unpersist()", ">>> b2", "<Bus>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "<<U1>   <object>"], "Bus.__contains__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.__contains__('a')", "False"], "Bus.__iter__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> tuple(b.__iter__())", "('x', 'y')"], "Bus.__reversed__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> tuple(b.__reversed__())", "('y', 'x')"], "Bus.get()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.get('a')", ">>> b.get('z', -1)", "-1"], "Bus.items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> tuple(b.items())", "(('x', <Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>), ('y', <Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>))"], "Bus.keys()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.keys()", "<Index>", "x", "y", "<<U1>"], "Bus.values": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.values", "[<Frame: x>", " <Index>    a       b       <<U1>", " <Index>", " p          0       1", " q          2       3", " r          4       5", " <<U1>      <int64> <int64>       <Frame: y>", "                                  <Index>    c      d      <<U1>", "                                  <Index>", "                                  p          False  True", "                                  q          False  True", "                                  r          False  True", "                                  <<U1>      <bool> <bool>      ]"], "Bus.interface": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.interface", "<Frame>", "<Index>                              cls_name group                doc                  <<U18>", "<Index: signature>", "__init__(frames, *, index, index_... Bus      Constructor          Default Bus const...", "from_concat(containers, *, index,... Bus      Constructor          Concatenate multi...", "from_dict(mapping, *, name, index... Bus      Constructor          Bus construction ...", "from_duckdb(fp, *, config, max_pe... Bus      Constructor          Given a file path...", "from_frames(frames, *, index_cons... Bus      Constructor          Return a Bus from...", "from_hdf5(fp, *, config, max_pers... Bus      Constructor          Given a file path...", "from_items(pairs, *, config, name... Bus      Constructor          Return a Bus from...", "from_series(series, *, store, con... Bus      Constructor          Create a Bus from...", "from_sqlite(fp, *, config, max_pe... Bus      Constructor          Given a file path...", "from_xlsx(fp, *, config, max_pers... Bus      Constructor          Given a file path...", "from_zip_csv(fp, *, config, max_p... Bus      Constructor          Given a file path...", "from_zip_npy(fp, *, config, max_p... Bus      Constructor          Given a file path...", "from_zip_npz(fp, *, config, max_p... Bus      Constructor          Given a file path...", "from_zip_parquet(fp, *, config, m... Bus      Constructor          Given a file path...", "from_zip_pickle(fp, *, config, ma... Bus      Constructor          Given a file path...", "from_zip_tsv(fp, *, config, max_p... Bus      Constructor          Given a file path...", "to_duckdb(fp, *, config)             Bus      Exporter             Write the complet...", "...                                  ...      ...                  ...", "iter_element_items().reduce.from_... Bus      Iterator", "iter_element_items().reduce.from_... Bus      Iterator", "via_hashlib(include_name, include... Bus      Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... Bus      Accessor Hashlib", "via_hashlib(include_name, include... Bus      Accessor Hashlib", "via_hashlib(include_name, include... Bus      Accessor Hashlib", "via_hashlib(include_name, include... Bus      Accessor Hashlib", "via_hashlib(include_name, include... Bus      Accessor Hashlib", "via_hashlib(include_name, include... Bus      Accessor Hashlib", "via_hashlib(include_name, include... Bus      Accessor Hashlib", "via_hashlib(include_name, include... Bus      Accessor Hashlib", "via_hashlib(include_name, include... Bus      Accessor Hashlib", "via_type_clinic.to_hint()            Bus      Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... Bus      Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... Bus      Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... Bus      Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           Bus      Accessor Type Clinic Return a compact ...", "<<U124>                              <<U3>    <<U20>               <<U83>"], "Bus.__repr__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> repr(b)", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>"], "Bus.__str__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> str(b)", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>"], "Bus.display()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.display()", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.display(sf.DisplayConfig(type_show=False))", "x Frame", "y Frame"], "Bus.display_tall()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.display_tall()", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>"], "Bus.display_wide()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b.display_wide()", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>"], "Bus.drop[]": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.drop['x']", "<Bus: k>", "<Index>", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.drop['v':]", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.drop[['w', 'y']]", "<Bus: k>", "<Index>", "x        Frame", "v        Frame", "<<U1>    <object>"], "Bus.drop.iloc[]": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.drop.iloc[1]", "<Bus: k>", "<Index>", "x        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.drop.iloc[1:]", "<Bus: k>", "<Index>", "x        Frame", "<<U1>    <object>", ">>> b.drop.iloc[[0, 3]]", "<Bus: k>", "<Index>", "y        Frame", "v        Frame", "<<U1>    <object>"], "Bus.drop.loc[]": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.drop.loc['w']", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "<<U1>    <object>", ">>> b.drop.loc['v':]", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.drop.loc[['v', 'x']]", "<Bus: k>", "<Index>", "y        Frame", "w        Frame", "<<U1>    <object>"], "Bus.[]": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b['w']", "<Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>", ">>> b['v':]", "<Bus: k>", "<Index>", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b[['v', 'x']]", "<Bus: k>", "<Index>", "v        Frame", "x        Frame", "<<U1>    <object>"], "Bus.iloc[]": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.iloc[1]", "<Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>", ">>> b.iloc[1:]", "<Bus: k>", "<Index>", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.iloc[[0, 3]]", "<Bus: k>", "<Index>", "x        Frame", "w        Frame", "<<U1>    <object>"], "Bus.loc[]": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.loc['w']", "<Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>", ">>> b.loc['v':]", "<Bus: k>", "<Index>", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.loc[['v', 'x']]", "<Bus: k>", "<Index>", "v        Frame", "x        Frame", "<<U1>    <object>"], "Bus.iter_element()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element())", "(<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>, <Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>, <Frame: v>", "<Index>    a       b       <<U1>", "<Index>", "p          40      41", "q          42      43", "r          44      45", "<<U1>      <int64> <int64>, <Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>)"], "Bus.iter_element().apply()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.iter_element().apply(lambda f: f.shape)", "<Series>", "<Index>", "x        (3, 2)", "y        (3, 2)", "v        (3, 2)", "w        (3, 2)", "<<U1>    <object>"], "Bus.iter_element().apply_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().apply_iter(lambda f: f.nbytes))", "(48, 6, 48, 6)"], "Bus.iter_element().apply_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().apply_iter_items(lambda f: f.nbytes))", "(('x', 48), ('y', 6), ('v', 48), ('w', 6))"], "Bus.iter_element().apply_pool()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> def func(f): return f.sum().sum()", ">>> b.iter_element().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "x        15", "y        3", "v        255", "w        4", "<<U1>    <int64>"], "Bus.iter_element().reduce.from_func().keys()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_func(lambda f: f.iloc[1:]).keys())", "('x', 'y', 'v', 'w')"], "Bus.iter_element().reduce.from_func().__iter__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_func(lambda f: f.iloc[1:]).__iter__())", "('x', 'y', 'v', 'w')"], "Bus.iter_element().reduce.from_func().items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_func(lambda f: f.iloc[1:]).items())", "(('x', <Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>), ('y', <Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>), ('v', <Frame: v>", "<Index>    a       b       <<U1>", "<Index>", "q          42      43", "r          44      45", "<<U1>      <int64> <int64>), ('w', <Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>))"], "Bus.iter_element().reduce.from_func().values()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_func(lambda f: f.iloc[1:]).values())", "(<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>, <Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>, <Frame: v>", "<Index>    a       b       <<U1>", "<Index>", "q          42      43", "r          44      45", "<<U1>      <int64> <int64>, <Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>)"], "Bus.iter_element().reduce.from_func().to_frame()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.iter_element().reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "ErrorInitFrame('Index names after vertical concatenation are not unique; supply an index argument or IndexAutoFactory.')"], "Bus.iter_element().reduce.from_map_func().keys()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_map_func(np.min).keys())", "('x', 'y', 'v', 'w')"], "Bus.iter_element().reduce.from_map_func().__iter__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_map_func(np.min).__iter__())", "('x', 'y', 'v', 'w')"], "Bus.iter_element().reduce.from_map_func().items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_map_func(np.min).items())", "(('x', <Series: x>", "<Index>", "a           0", "b           1", "<<U1>       <int64>), ('y', <Series: y>", "<Index>", "c           False", "d           True", "<<U1>       <bool>), ('v', <Series: v>", "<Index>", "a           40", "b           41", "<<U1>       <int64>), ('w', <Series: w>", "<Index>", "c           False", "d           False", "<<U1>       <bool>))"], "Bus.iter_element().reduce.from_map_func().values()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_map_func(np.min).values())", "(<Series: x>", "<Index>", "a           0", "b           1", "<<U1>       <int64>, <Series: y>", "<Index>", "c           False", "d           True", "<<U1>       <bool>, <Series: v>", "<Index>", "a           40", "b           41", "<<U1>       <int64>, <Series: w>", "<Index>", "c           False", "d           False", "<<U1>       <bool>)"], "Bus.iter_element().reduce.from_map_func().to_frame()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.iter_element().reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index> a         b         c        d        <<U1>", "<Index>", "x       0.0       1.0       nan      nan", "y       nan       nan       False    True", "v       40.0      41.0      nan      nan", "w       nan       nan       False    False", "<<U1>   <float64> <float64> <object> <object>"], "Bus.iter_element().reduce.from_label_map().keys()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_label_map({'b': np.min, 'a': np.max}).keys())", "('x', 'y', 'v', 'w')"], "Bus.iter_element().reduce.from_label_map().__iter__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_label_map({'b': np.min, 'a': np.max}).__iter__())", "('x', 'y', 'v', 'w')"], "Bus.iter_element().reduce.from_label_map().items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_label_map({'b': np.min, 'a': np.max}).items())", "(('x', <Series: x>", "<Index>", "b           1", "a           4", "<<U1>       <int64>), ('y', <Series: y>", "<Index>", "b           nan", "a           nan", "<<U1>       <float64>), ('v', <Series: v>", "<Index>", "b           41", "a           44", "<<U1>       <int64>), ('w', <Series: w>", "<Index>", "b           nan", "a           nan", "<<U1>       <float64>))"], "Bus.iter_element().reduce.from_label_map().values()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_label_map({'b': np.min, 'a': np.max}).values())", "(<Series: x>", "<Index>", "b           1", "a           4", "<<U1>       <int64>, <Series: y>", "<Index>", "b           nan", "a           nan", "<<U1>       <float64>, <Series: v>", "<Index>", "b           41", "a           44", "<<U1>       <int64>, <Series: w>", "<Index>", "b           nan", "a           nan", "<<U1>       <float64>)"], "Bus.iter_element().reduce.from_label_map().to_frame()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.iter_element().reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index> b         a         <<U1>", "<Index>", "x       1.0       4.0", "y       nan       nan", "v       41.0      44.0", "w       nan       nan", "<<U1>   <float64> <float64>"], "Bus.iter_element().reduce.from_label_pair_map().keys()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).keys())", "('x', 'y', 'v', 'w')"], "Bus.iter_element().reduce.from_label_pair_map().__iter__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).__iter__())", "('x', 'y', 'v', 'w')"], "Bus.iter_element().reduce.from_label_pair_map().items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).items())", "(('x', <Series: x>", "<Index>", "b-min       1", "b-max       5", "<<U5>       <int64>), ('y', <Series: y>", "<Index>", "b-min       nan", "b-max       nan", "<<U5>       <float64>), ('v', <Series: v>", "<Index>", "b-min       41", "b-max       45", "<<U5>       <int64>), ('w', <Series: w>", "<Index>", "b-min       nan", "b-max       nan", "<<U5>       <float64>))"], "Bus.iter_element().reduce.from_label_pair_map().values()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element().reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).values())", "(<Series: x>", "<Index>", "b-min       1", "b-max       5", "<<U5>       <int64>, <Series: y>", "<Index>", "b-min       nan", "b-max       nan", "<<U5>       <float64>, <Series: v>", "<Index>", "b-min       41", "b-max       45", "<<U5>       <int64>, <Series: w>", "<Index>", "b-min       nan", "b-max       nan", "<<U5>       <float64>)"], "Bus.iter_element().reduce.from_label_pair_map().to_frame()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.iter_element().reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index> b-min     b-max     <<U5>", "<Index>", "x       1.0       5.0", "y       nan       nan", "v       41.0      45.0", "w       nan       nan", "<<U1>   <float64> <float64>"], "Bus.iter_element_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items())", "(('x', <Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>), ('y', <Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>), ('v', <Frame: v>", "<Index>    a       b       <<U1>", "<Index>", "p          40      41", "q          42      43", "r          44      45", "<<U1>      <int64> <int64>), ('w', <Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>))"], "Bus.iter_element_items().apply()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.iter_element_items().apply(lambda l, f: f.size if l != 'v' else 0)", "<Series>", "<Index>", "x        6", "y        6", "v        0", "w        6", "<<U1>    <int64>"], "Bus.iter_element_items().apply_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().apply_iter(lambda l, f: f.shape if l != 'x' else 0))", "(0, (3, 2), (3, 2), (3, 2))"], "Bus.iter_element_items().apply_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().apply_iter_items(lambda l, f: f.shape if l != 'x' else 0))", "(('x', 0), ('y', (3, 2)), ('v', (3, 2)), ('w', (3, 2)))"], "Bus.iter_element_items().apply_pool()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> def func(pair): return pair[1].sum().sum() if pair[0] != 'v' else -1", ">>> b.iter_element_items().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "x        15", "y        3", "v        -1", "w        4", "<<U1>    <int64>"], "Bus.iter_element_items().reduce.from_func().keys()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_func(lambda l, f: f.iloc[1:]).keys())", "('x', 'y', 'v', 'w')"], "Bus.iter_element_items().reduce.from_func().__iter__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_func(lambda l, f: f.iloc[1:]).__iter__())", "('x', 'y', 'v', 'w')"], "Bus.iter_element_items().reduce.from_func().items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_func(lambda l, f: f.iloc[1:]).items())", "(('x', <Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>), ('y', <Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>), ('v', <Frame: v>", "<Index>    a       b       <<U1>", "<Index>", "q          42      43", "r          44      45", "<<U1>      <int64> <int64>), ('w', <Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>))"], "Bus.iter_element_items().reduce.from_func().values()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_func(lambda l, f: f.iloc[1:]).values())", "(<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>, <Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>, <Frame: v>", "<Index>    a       b       <<U1>", "<Index>", "q          42      43", "r          44      45", "<<U1>      <int64> <int64>, <Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>)"], "Bus.iter_element_items().reduce.from_func().to_frame()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.iter_element_items().reduce.from_func(lambda l, f: f.iloc[1:]).to_frame()", "ErrorInitFrame('Index names after vertical concatenation are not unique; supply an index argument or IndexAutoFactory.')"], "Bus.iter_element_items().reduce.from_map_func().keys()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_map_func(lambda l, s: np.min(s)).keys())", "('x', 'y', 'v', 'w')"], "Bus.iter_element_items().reduce.from_map_func().__iter__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_map_func(lambda l, s: np.min(s)).__iter__())", "('x', 'y', 'v', 'w')"], "Bus.iter_element_items().reduce.from_map_func().items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_map_func(lambda l, s: np.min(s)).items())", "TypeError('ReduceDispatchUnaligned.from_map_func.<locals>.func_derived() takes 1 positional argument but 2 were given')"], "Bus.iter_element_items().reduce.from_map_func().values()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_map_func(lambda l, s: np.min(s)).values())", "TypeError('ReduceDispatchUnaligned.from_map_func.<locals>.func_derived() takes 1 positional argument but 2 were given')"], "Bus.iter_element_items().reduce.from_map_func().to_frame()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.iter_element_items().reduce.from_map_func(lambda l, s: np.min(s)).to_frame()", "TypeError('ReduceDispatchUnaligned.from_map_func.<locals>.func_derived() takes 1 positional argument but 2 were given')"], "Bus.iter_element_items().reduce.from_label_map().keys()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).keys())", "('x', 'y', 'v', 'w')"], "Bus.iter_element_items().reduce.from_label_map().__iter__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).__iter__())", "('x', 'y', 'v', 'w')"], "Bus.iter_element_items().reduce.from_label_map().items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).items())", "(('x', <Series: x>", "<Index>", "b           1", "a           4", "<<U1>       <int64>), ('y', <Series: y>", "<Index>", "b           nan", "a           nan", "<<U1>       <float64>), ('v', <Series: v>", "<Index>", "b           41", "a           44", "<<U1>       <int64>), ('w', <Series: w>", "<Index>", "b           nan", "a           nan", "<<U1>       <float64>))"], "Bus.iter_element_items().reduce.from_label_map().values()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).values())", "(<Series: x>", "<Index>", "b           1", "a           4", "<<U1>       <int64>, <Series: y>", "<Index>", "b           nan", "a           nan", "<<U1>       <float64>, <Series: v>", "<Index>", "b           41", "a           44", "<<U1>       <int64>, <Series: w>", "<Index>", "b           nan", "a           nan", "<<U1>       <float64>)"], "Bus.iter_element_items().reduce.from_label_map().to_frame()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.iter_element_items().reduce.from_label_map({'b': lambda l, s: np.min(s), 'a': lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b         a         <<U1>", "<Index>", "x       1.0       4.0", "y       nan       nan", "v       41.0      44.0", "w       nan       nan", "<<U1>   <float64> <float64>"], "Bus.iter_element_items().reduce.from_label_pair_map().keys()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).keys())", "('x', 'y', 'v', 'w')"], "Bus.iter_element_items().reduce.from_label_pair_map().__iter__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).__iter__())", "('x', 'y', 'v', 'w')"], "Bus.iter_element_items().reduce.from_label_pair_map().items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).items())", "(('x', <Series: x>", "<Index>", "b-min       1", "b-max       5", "<<U5>       <int64>), ('y', <Series: y>", "<Index>", "b-min       nan", "b-max       nan", "<<U5>       <float64>), ('v', <Series: v>", "<Index>", "b-min       41", "b-max       45", "<<U5>       <int64>), ('w', <Series: w>", "<Index>", "b-min       nan", "b-max       nan", "<<U5>       <float64>))"], "Bus.iter_element_items().reduce.from_label_pair_map().values()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> tuple(b.iter_element_items().reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).values())", "(<Series: x>", "<Index>", "b-min       1", "b-max       5", "<<U5>       <int64>, <Series: y>", "<Index>", "b-min       nan", "b-max       nan", "<<U5>       <float64>, <Series: v>", "<Index>", "b-min       41", "b-max       45", "<<U5>       <int64>, <Series: w>", "<Index>", "b-min       nan", "b-max       nan", "<<U5>       <float64>)"], "Bus.iter_element_items().reduce.from_label_pair_map().to_frame()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b.iter_element_items().reduce.from_label_pair_map({('b', 'b-min'): lambda l, s: np.min(s), ('b', 'b-max'): lambda l, s: np.max(s)}).to_frame()", "<Frame>", "<Index> b-min     b-max     <<U5>", "<Index>", "x       1.0       5.0", "y       nan       nan", "v       41.0      45.0", "w       nan       nan", "<<U1>   <float64> <float64>"], "Bus.via_hashlib().to_bytes()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_hashlib(include_name=False).to_bytes()", "b'BusIndexx\\x00\\x00\\x00y\\x00\\x00\\x00FrameIndexp\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00Indexa\\x00\\x00\\x00b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00FrameIndexp\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00Indexc\\x00\\x00\\x00d\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x01\\x01'"], "Bus.via_hashlib().md5()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_hashlib(include_name=False).md5().hexdigest()", "9479fbfd2ed693d15de2ef08eb481d7e"], "Bus.via_hashlib().sha256()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_hashlib(include_name=False).sha256().hexdigest()", "8bd3452b81d9b1238020227ff432a85da57611d1970b21c99815206837b70bef"], "Bus.via_hashlib().sha512()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_hashlib(include_name=False).sha512().hexdigest()", "49522cf3627869f435b292ac0e0a59c2631a1062086db5a28f75e5788f3899517ae759f2f423d633203dbd2e0428108773225d38d33d17d9d2427ab48340e8d0"], "Bus.via_hashlib().sha3_256()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_hashlib(include_name=False).sha3_256().hexdigest()", "1d4baec1e848d5ff2c59b13dea8ae35b4c58318f843e63b613c13833bc86292a"], "Bus.via_hashlib().sha3_512()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_hashlib(include_name=False).sha3_512().hexdigest()", "7e2a68f333a32d7f4c1b9415045b139f8fc7ff0a2af54f601fdaa042908a97293bc117def78c217148f70c66ebf0159c902c7ece42cb0f386cec925fb7939523"], "Bus.via_hashlib().shake_128()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_hashlib(include_name=False).shake_128().hexdigest(8)", "426a8470515bf557"], "Bus.via_hashlib().shake_256()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_hashlib(include_name=False).shake_256().hexdigest(8)", "4e9bb60a28c99c04"], "Bus.via_hashlib().blake2b()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_hashlib(include_name=False).blake2b().hexdigest()", "c68cc4d9227be6e3268f0ffbca58095fe0eb5bab64a86b95bc4238b6917d4958b6c043ec9583db268209284aab6c0434b37c284587ee120d9ead7594c1c286ba"], "Bus.via_hashlib().blake2s()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_hashlib(include_name=False).blake2s().hexdigest()", "fa228e6f239bc0e8968286bdc1c82749dec3605e8e6e86a731e6c0e8a5e2a2ac"], "Bus.via_type_clinic.to_hint()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_type_clinic.to_hint()", "static_frame.core.bus.Bus[static_frame.core.index.Index[numpy.str_]]"], "Bus.via_type_clinic.check()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_type_clinic.check(sf.Bus[sf.Index[np.int64]])", "ClinicError('\\nIn Bus[Index[int64]]\\n\u2514\u2500\u2500 Index[int64]\\n    \u2514\u2500\u2500 Expected int64, provided str_ invalid')"], "Bus.via_type_clinic.__call__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> cr = b.via_type_clinic(sf.Bus[sf.Index[np.int64]])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Bus[Index[int64]]", "\u2514\u2500\u2500 Index[int64]", "    \u2514\u2500\u2500 Expected int64, provided str_ invalid"], "Bus.via_type_clinic.__repr__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b.via_type_clinic", "Bus[Index[str_]]"], "Yarn.__init__()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> b2", "<Bus: j>", "<Index>", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> sf.Yarn((b1, b2), index=('2020-01', '2020-02', '2020-03', '2020-04'), index_constructor=sf.IndexYearMonth)", "<Yarn>", "<IndexYearMonth>", "2020-01          Frame", "2020-02          Frame", "2020-03          Frame", "2020-04          Frame", "<datetime64[M]>  <object>"], "Yarn.from_buses()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> b2", "<Bus: j>", "<Index>", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> sf.Yarn.from_buses((b1, b2), retain_labels=True)", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> sf.Yarn.from_buses((b1, b2), retain_labels=False)", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>"], "Yarn.from_concat()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1", "<Bus: i>", "<Index>", "x        Frame", "y        Frame", "<<U1>    <object>", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> b2", "<Bus: j>", "<Index>", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> b3 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> b3", "<Bus: k>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>", ">>> y1 = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y1", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y2 = sf.Yarn.from_buses((b3,), retain_labels=True)", ">>> y2", "<Yarn>", "<IndexHierarchy>", "k                x     Frame", "k                y     Frame", "k                v     Frame", "k                w     Frame", "<<U1>            <<U1> <object>", ">>> sf.Yarn.from_concat((y1, y2))", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "k                x     Frame", "k                y     Frame", "k                v     Frame", "k                w     Frame", "<<U1>            <<U1> <object>"], "Yarn.to_duckdb()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.to_duckdb('/tmp/y.duckdb')"], "Yarn.to_hdf5()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.to_hdf5('/tmp/y.hdf5')"], "Yarn.to_series()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.to_series()", "<Series>", "<Index>", "x        Frame", "y        Frame", "v        Frame", "w        Frame", "<<U1>    <object>"], "Yarn.to_sqlite()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.to_sqlite('/tmp/y.sqlite')"], "Yarn.to_xlsx()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.to_xlsx('/tmp/y.xlsx')"], "Yarn.to_zip_csv()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.to_zip_csv('/tmp/y.zip', config=sf.StoreConfig(label_encoder=str))"], "Yarn.to_zip_npy()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.to_zip_npy('/tmp/y.zip', config=sf.StoreConfig(label_encoder=str))"], "Yarn.to_zip_npz()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.to_zip_npz('/tmp/y.zip', config=sf.StoreConfig(label_encoder=str))"], "Yarn.to_zip_parquet()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.to_zip_parquet('/tmp/y.zip', config=sf.StoreConfig(label_encoder=str))"], "Yarn.to_zip_pickle()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.to_zip_pickle('/tmp/y.zip', config=sf.StoreConfig(label_encoder=str))"], "Yarn.to_zip_tsv()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.to_zip_tsv('/tmp/y.zip', config=sf.StoreConfig(label_encoder=str))"], "Yarn.STATIC": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.STATIC", "True"], "Yarn.dtype": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.dtype", "object"], "Yarn.dtypes": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.dtypes", "<Frame>", "<Index>                a        b        c        d        <<U1>", "<IndexHierarchy>", "i                x     int64    int64    None     None", "i                y     None     None     bool     bool", "j                v     int64    int64    None     None", "j                w     None     None     bool     bool", "<<U1>            <<U1> <object> <object> <object> <object>"], "Yarn.index": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.index", "<IndexHierarchy>", "i                x", "i                y", "j                v", "j                w", "<<U1>            <<U1>"], "Yarn.inventory": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.inventory", "<Frame>", "<Index> path  last_modified size  <<U13>", "<Index>", "i", "j", "<<U1>   <<U1> <<U1>         <<U1>"], "Yarn.memory": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.memory", "      L     Lu    LM   LMu   LMD  LMDu  R     Ru    RM  RMu   RMD  RMDu", "Total 18.04 KB    7.28 KB    5.03 KB    26.15 KB    7.4 KB    5.15 KB"], "Yarn.name": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.name"], "Yarn.nbytes": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.nbytes", "108"], "Yarn.ndim": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.ndim", "1"], "Yarn.shape": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.shape", "(4,)"], "Yarn.shapes": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.shapes", "<Series: shape>", "<IndexHierarchy>", "i                x     (3, 2)", "i                y     (3, 2)", "j                v     (3, 2)", "j                w     (3, 2)", "<<U1>            <<U1> <object>"], "Yarn.size": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.size", "4"], "Yarn.status": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.status", "<Frame>", "<Index>                loaded size      nbytes    shape    <<U6>", "<IndexHierarchy>", "i                x     True   6.0       48.0      (3, 2)", "i                y     True   6.0       6.0       (3, 2)", "j                v     True   6.0       48.0      (3, 2)", "j                w     True   6.0       6.0       (3, 2)", "<<U1>            <<U1> <bool> <float64> <float64> <object>"], "Yarn.__bool__()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> bool(y)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "Yarn.__len__()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> len(y)", "4"], "Yarn.equals()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> b3 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='k')", ">>> y1 = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y1", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y2 = sf.Yarn.from_buses((b3,), retain_labels=False)", ">>> y2", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y1.equals(y2)", "True"], "Yarn.head()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.head(2)", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "<<U1>   <object>"], "Yarn.persist[]": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1.to_zip_npz('/tmp/b1.zip')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> b2.to_zip_npz('/tmp/b2.zip')", ">>> b1 = sf.Bus.from_zip_npz('/tmp/b1.zip').rename('a')", ">>> b1", "<Bus: a>", "<Index>", "x        <FrameDeferred>", "y        <FrameDeferred>", "<<U1>    <object>", ">>> b2 = sf.Bus.from_zip_npz('/tmp/b2.zip').rename('b')", ">>> b2", "<Bus: b>", "<Index>", "v        <FrameDeferred>", "w        <FrameDeferred>", "<<U1>    <object>", ">>> y1 = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y1.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       False  nan       nan       None", "v       False  nan       nan       None", "w       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>", ">>> y1.persist['y']", ">>> y1.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       True   6.0       6.0       (3, 2)", "v       False  nan       nan       None", "w       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>"], "Yarn.persist.iloc[]": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1.to_zip_npz('/tmp/b1.zip')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> b2.to_zip_npz('/tmp/b2.zip')", ">>> b1 = sf.Bus.from_zip_npz('/tmp/b1.zip').rename('a')", ">>> b1", "<Bus: a>", "<Index>", "x        <FrameDeferred>", "y        <FrameDeferred>", "<<U1>    <object>", ">>> b2 = sf.Bus.from_zip_npz('/tmp/b2.zip').rename('b')", ">>> b2", "<Bus: b>", "<Index>", "v        <FrameDeferred>", "w        <FrameDeferred>", "<<U1>    <object>", ">>> y1 = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y1.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       False  nan       nan       None", "v       False  nan       nan       None", "w       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>", ">>> y1.persist.iloc[-1]", ">>> y1.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       False  nan       nan       None", "v       False  nan       nan       None", "w       True   6.0       6.0       (3, 2)", "<<U1>   <bool> <float64> <float64> <object>"], "Yarn.persist.loc[]": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1.to_zip_npz('/tmp/b1.zip')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> b2.to_zip_npz('/tmp/b2.zip')", ">>> b1 = sf.Bus.from_zip_npz('/tmp/b1.zip').rename('a')", ">>> b1", "<Bus: a>", "<Index>", "x        <FrameDeferred>", "y        <FrameDeferred>", "<<U1>    <object>", ">>> b2 = sf.Bus.from_zip_npz('/tmp/b2.zip').rename('b')", ">>> b2", "<Bus: b>", "<Index>", "v        <FrameDeferred>", "w        <FrameDeferred>", "<<U1>    <object>", ">>> y1 = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y1.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       False  nan       nan       None", "v       False  nan       nan       None", "w       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>", ">>> y1.persist.loc['y']", ">>> y1.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       True   6.0       6.0       (3, 2)", "v       False  nan       nan       None", "w       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>"], "Yarn.persist()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1.to_zip_npz('/tmp/b1.zip')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> b2.to_zip_npz('/tmp/b2.zip')", ">>> b1 = sf.Bus.from_zip_npz('/tmp/b1.zip').rename('a')", ">>> b1", "<Bus: a>", "<Index>", "x        <FrameDeferred>", "y        <FrameDeferred>", "<<U1>    <object>", ">>> b2 = sf.Bus.from_zip_npz('/tmp/b2.zip').rename('b')", ">>> b2", "<Bus: b>", "<Index>", "v        <FrameDeferred>", "w        <FrameDeferred>", "<<U1>    <object>", ">>> y1 = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y1.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "y       False  nan       nan       None", "v       False  nan       nan       None", "w       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>", ">>> y1.persist()", ">>> y1.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       True   6.0       48.0      (3, 2)", "y       True   6.0       6.0       (3, 2)", "v       True   6.0       48.0      (3, 2)", "w       True   6.0       6.0       (3, 2)", "<<U1>   <bool> <float64> <float64> <object>"], "Yarn.rehierarch()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.rehierarch((1, 0))", "<Yarn>", "<IndexHierarchy>", "x                i     Frame", "y                i     Frame", "v                j     Frame", "w                j     Frame", "<<U1>            <<U1> <object>"], "Yarn.reindex()": [">>> y1 = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=False)", ">>> y1", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y1.reindex(('y', 'x', 'v'))", "<Yarn>", "<Index>", "y       Frame", "x       Frame", "v       Frame", "<<U1>   <object>"], "Yarn.relabel()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.relabel(('A', 'B', 'C', 'D'))", "<Yarn>", "<Index>", "A       Frame", "B       Frame", "C       Frame", "D       Frame", "<<U1>   <object>", ">>> y.relabel({('j', 'v'):('A', 'x')})", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "A                x     Frame", "j                w     Frame", "<<U1>            <<U1> <object>"], "Yarn.relabel_flat()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.relabel_flat()", "<Yarn>", "<Index>", "('i', 'x') Frame", "('i', 'y') Frame", "('j', 'v') Frame", "('j', 'w') Frame", "<object>   <object>"], "Yarn.relabel_level_add()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.relabel_level_add('A')", "<Yarn>", "<IndexHierarchy>", "A                i     x     Frame", "A                i     y     Frame", "A                j     v     Frame", "A                j     w     Frame", "<<U1>            <<U1> <<U1> <object>"], "Yarn.relabel_level_drop()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.relabel_level_drop()", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>"], "Yarn.rename()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.rename('j')", "<Yarn: j>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>"], "Yarn.roll()": [">>> y1 = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=False)", ">>> y1", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y1.roll(1)", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y1.roll(1, include_index=True)", "<Yarn>", "<Index>", "w       Frame", "x       Frame", "y       Frame", "v       Frame", "<<U1>   <object>"], "Yarn.shift()": [">>> y1 = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=False)", ">>> y1", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y1.shift(1, fill_value=None)", "NotImplementedError('A `Yarn` cannot be shifted as newly created missing values cannot be filled without replacing stored `Bus`.')"], "Yarn.sort_index()": [">>> y1 = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=False)", ">>> y1", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y2 = y1.sort_index()", ">>> y2", "<Yarn>", "<Index>", "v       Frame", "w       Frame", "x       Frame", "y       Frame", "<<U1>   <object>"], "Yarn.sort_values()": [">>> y1 = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=False)", ">>> y1", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y1.sort_values(key=lambda y: np.array([f.size for f in y.iter_element()]))", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>"], "Yarn.tail()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.tail(2)", "<Yarn>", "<Index>", "v       Frame", "w       Frame", "<<U1>   <object>"], "Yarn.unpersist()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b1.to_zip_npz('/tmp/b1.zip')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> b2.to_zip_npz('/tmp/b2.zip')", ">>> b1 = sf.Bus.from_zip_npz('/tmp/b1.zip').rename('a')", ">>> b1", "<Bus: a>", "<Index>", "x        <FrameDeferred>", "y        <FrameDeferred>", "<<U1>    <object>", ">>> b2 = sf.Bus.from_zip_npz('/tmp/b2.zip').rename('b')", ">>> b2", "<Bus: b>", "<Index>", "v        <FrameDeferred>", "w        <FrameDeferred>", "<<U1>    <object>", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "v       <FrameDeferred>", "w       <FrameDeferred>", "<<U1>   <object>", ">>> tuple(y.values)", "(<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>, <Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>, <Frame: v>", "<Index>    a       b       <<U1>", "<Index>", "p          40      41", "q          42      43", "r          44      45", "<<U1>      <int64> <int64>, <Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.unpersist()", ">>> y", "<Yarn>", "<Index>", "x       <FrameDeferred>", "y       <FrameDeferred>", "v       <FrameDeferred>", "w       <FrameDeferred>", "<<U1>   <object>"], "Yarn.__contains__()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.__contains__('a')", "RuntimeError('Invalid key length for a; must be length 2.')"], "Yarn.__iter__()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> tuple(y.__iter__())", "(('i', 'x'), ('i', 'y'), ('j', 'v'), ('j', 'w'))"], "Yarn.__reversed__()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> tuple(y.__reversed__())", "(('j', 'w'), ('j', 'v'), ('i', 'y'), ('i', 'x'))"], "Yarn.get()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.get('a')", "RuntimeError('Invalid key length for a; must be length 2.')", ">>> y.get('z', -1)", "RuntimeError('Invalid key length for z; must be length 2.')"], "Yarn.items()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> tuple(y.items())", "((('i', 'x'), <Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>), (('i', 'y'), <Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>), (('j', 'v'), <Frame: v>", "<Index>    a       b       <<U1>", "<Index>", "p          40      41", "q          42      43", "r          44      45", "<<U1>      <int64> <int64>), (('j', 'w'), <Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>))"], "Yarn.keys()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.keys()", "<IndexHierarchy>", "i                x", "i                y", "j                v", "j                w", "<<U1>            <<U1>"], "Yarn.values": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.values", "[<Frame: x>", " <Index>    a       b       <<U1>", " <Index>", " p          0       1", " q          2       3", " r          4       5", " <<U1>      <int64> <int64>       <Frame: y>", "                                  <Index>    c      d      <<U1>", "                                  <Index>", "                                  p          False  True", "                                  q          False  True", "                                  r          False  True", "                                  <<U1>      <bool> <bool>", " <Frame: v>", " <Index>    a       b       <<U1>", " <Index>", " p          40      41", " q          42      43", " r          44      45", " <<U1>      <int64> <int64>       <Frame: w>", "                                  <Index>    c      d      <<U1>", "                                  <Index>", "                                  p          False  True", "                                  q          True   False", "                                  r          True   True", "                                  <<U1>      <bool> <bool>      ]"], "Yarn.interface": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.interface", "<Frame>", "<Index>                              cls_name group                doc                  <<U18>", "<Index: signature>", "__init__(series, *, index, index_... Yarn     Constructor          Args: series: An ...", "from_buses(buses, *, name, retain... Yarn     Constructor          Return a Yarn fro...", "from_concat(containers, *, index,... Yarn     Constructor          Concatenate multi...", "to_duckdb(fp, *, config)             Yarn     Exporter             Write the complet...", "to_hdf5(fp, *, config)               Yarn     Exporter             Write the complet...", "to_series()                          Yarn     Exporter             Return a Series w...", "to_sqlite(fp, *, config)             Yarn     Exporter             Write the complet...", "to_visidata()                        Yarn     Exporter             Open an interacti...", "to_xlsx(fp, *, config)               Yarn     Exporter             Write the complet...", "to_zip_csv(fp, *, config, compres... Yarn     Exporter             Write the complet...", "to_zip_npy(fp, *, config, compres... Yarn     Exporter             Write the complet...", "to_zip_npz(fp, *, config, compres... Yarn     Exporter             Write the complet...", "to_zip_parquet(fp, *, config, com... Yarn     Exporter             Write the complet...", "to_zip_pickle(fp, *, config, comp... Yarn     Exporter             Write the complet...", "to_zip_tsv(fp, *, config, compres... Yarn     Exporter             Write the complet...", "STATIC                               Yarn     Attribute            bool(x) -> bool R...", "dtype                                Yarn     Attribute            Return the dtype ...", "...                                  ...      ...                  ...", "iter_element_items().apply_iter_i... Yarn     Iterator             Apply a function ...", "iter_element_items().apply_pool(f... Yarn     Iterator             Apply a function ...", "via_hashlib(include_name, include... Yarn     Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... Yarn     Accessor Hashlib", "via_hashlib(include_name, include... Yarn     Accessor Hashlib", "via_hashlib(include_name, include... Yarn     Accessor Hashlib", "via_hashlib(include_name, include... Yarn     Accessor Hashlib", "via_hashlib(include_name, include... Yarn     Accessor Hashlib", "via_hashlib(include_name, include... Yarn     Accessor Hashlib", "via_hashlib(include_name, include... Yarn     Accessor Hashlib", "via_hashlib(include_name, include... Yarn     Accessor Hashlib", "via_hashlib(include_name, include... Yarn     Accessor Hashlib", "via_type_clinic.to_hint()            Yarn     Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... Yarn     Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... Yarn     Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... Yarn     Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           Yarn     Accessor Type Clinic Return a compact ...", "<<U90>                               <<U4>    <<U20>               <<U83>"], "Yarn.__repr__()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> repr(y)", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>"], "Yarn.__str__()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> str(y)", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>"], "Yarn.display()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.display()", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.display(sf.DisplayConfig(type_show=False))", "i x Frame", "i y Frame", "j v Frame", "j w Frame"], "Yarn.display_tall()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.display_tall()", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>"], "Yarn.display_wide()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y.display_wide()", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>"], "Yarn.drop[]": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.drop['x']", "<Yarn>", "<Index>", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.drop['v':]", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "<<U1>   <object>", ">>> y.drop[['w', 'y']]", "<Yarn>", "<Index>", "x       Frame", "v       Frame", "<<U1>   <object>"], "Yarn.drop.iloc[]": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.drop.iloc[1]", "<Yarn>", "<Index>", "x       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.drop.iloc[1:]", "<Yarn>", "<Index>", "x       Frame", "<<U1>   <object>", ">>> y.drop.iloc[[0, 3]]", "<Yarn>", "<Index>", "y       Frame", "v       Frame", "<<U1>   <object>"], "Yarn.drop.loc[]": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.drop.loc['w']", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "<<U1>   <object>", ">>> y.drop.loc['v':]", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "<<U1>   <object>", ">>> y.drop.loc[['v', 'x']]", "<Yarn>", "<Index>", "y       Frame", "w       Frame", "<<U1>   <object>"], "Yarn.[]": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y['w']", "<Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>", ">>> y['v':]", "<Yarn>", "<Index>", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y[['v', 'x']]", "<Yarn>", "<Index>", "v       Frame", "x       Frame", "<<U1>   <object>"], "Yarn.iloc[]": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.iloc[1]", "<Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>", ">>> y.iloc[1:]", "<Yarn>", "<Index>", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.iloc[[0, 3]]", "<Yarn>", "<Index>", "x       Frame", "w       Frame", "<<U1>   <object>"], "Yarn.loc[]": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.loc['w']", "<Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>", ">>> y.loc['v':]", "<Yarn>", "<Index>", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.loc[['v', 'x']]", "<Yarn>", "<Index>", "v       Frame", "x       Frame", "<<U1>   <object>"], "Yarn.iter_element()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> tuple(y.iter_element())", "(<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>, <Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>, <Frame: v>", "<Index>    a       b       <<U1>", "<Index>", "p          40      41", "q          42      43", "r          44      45", "<<U1>      <int64> <int64>, <Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>)"], "Yarn.iter_element().apply()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.iter_element().apply(lambda f: f.shape)", "<Series>", "<Index>", "x        (3, 2)", "y        (3, 2)", "v        (3, 2)", "w        (3, 2)", "<<U1>    <object>"], "Yarn.iter_element().apply_iter()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> tuple(y.iter_element().apply_iter(lambda f: f.nbytes))", "(48, 6, 48, 6)"], "Yarn.iter_element().apply_iter_items()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> tuple(y.iter_element().apply_iter_items(lambda f: f.nbytes))", "(('x', 48), ('y', 6), ('v', 48), ('w', 6))"], "Yarn.iter_element().apply_pool()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> def func(f): return f.sum().sum()", ">>> y.iter_element().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "x        15", "y        3", "v        255", "w        4", "<<U1>    <int64>"], "Yarn.iter_element_items()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> tuple(y.iter_element_items())", "(('x', <Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>), ('y', <Frame: y>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          False  True", "r          False  True", "<<U1>      <bool> <bool>), ('v', <Frame: v>", "<Index>    a       b       <<U1>", "<Index>", "p          40      41", "q          42      43", "r          44      45", "<<U1>      <int64> <int64>), ('w', <Frame: w>", "<Index>    c      d      <<U1>", "<Index>", "p          False  True", "q          True   False", "r          True   True", "<<U1>      <bool> <bool>))"], "Yarn.iter_element_items().apply()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> y.iter_element_items().apply(lambda l, f: f.size if l != 'v' else 0)", "<Series>", "<Index>", "x        6", "y        6", "v        0", "w        6", "<<U1>    <int64>"], "Yarn.iter_element_items().apply_iter()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> tuple(y.iter_element_items().apply_iter(lambda l, f: f.shape if l != 'x' else 0))", "(0, (3, 2), (3, 2), (3, 2))"], "Yarn.iter_element_items().apply_iter_items()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> tuple(y.iter_element_items().apply_iter_items(lambda l, f: f.shape if l != 'x' else 0))", "(('x', 0), ('y', (3, 2)), ('v', (3, 2)), ('w', (3, 2)))"], "Yarn.iter_element_items().apply_pool()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i')", ">>> b2 = sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')", ">>> y = sf.Yarn.from_buses((b1, b2), retain_labels=False)", ">>> y", "<Yarn>", "<Index>", "x       Frame", "y       Frame", "v       Frame", "w       Frame", "<<U1>   <object>", ">>> def func(pair): return pair[1].sum().sum() if pair[0] != 'v' else -1", ">>> y.iter_element_items().apply_pool(func, use_threads=True)", "<Series>", "<Index>", "x        15", "y        3", "v        -1", "w        4", "<<U1>    <int64>"], "Yarn.via_hashlib().to_bytes()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_hashlib(include_name=False).to_bytes()", "b'YarnIndexHierarchyi\\x00\\x00\\x00i\\x00\\x00\\x00j\\x00\\x00\\x00j\\x00\\x00\\x00x\\x00\\x00\\x00y\\x00\\x00\\x00v\\x00\\x00\\x00w\\x00\\x00\\x00FrameIndexp\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00Indexa\\x00\\x00\\x00b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00FrameIndexp\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00Indexc\\x00\\x00\\x00d\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x01\\x01FrameIndexp\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00Indexa\\x00\\x00\\x00b\\x00\\x00\\x00(\\x00\\x00\\x00\\x00\\x00\\x00\\x00*\\x00\\x00\\x00\\x00\\x00\\x00\\x00,\\x00\\x00\\x00\\x00\\x00\\x00\\x00)\\x00\\x00\\x00\\x00\\x00\\x00\\x00+\\x00\\x00\\x00\\x00\\x00\\x00\\x00-\\x00\\x00\\x00\\x00\\x00\\x00\\x00FrameIndexp\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00Indexc\\x00\\x00\\x00d\\x00\\x00\\x00\\x00\\x01\\x01\\x01\\x00\\x01'"], "Yarn.via_hashlib().md5()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_hashlib(include_name=False).md5().hexdigest()", "dbd84f20d9fc3de36fa3956413a5352b"], "Yarn.via_hashlib().sha256()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_hashlib(include_name=False).sha256().hexdigest()", "b4d4605a723e1ab9e9333eb4a258292f3c89c4c8c02c148e6480c79e54184ad2"], "Yarn.via_hashlib().sha512()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_hashlib(include_name=False).sha512().hexdigest()", "d31e8f384689cadc1f14b18b7f3fd3eb91f1bb933b3826ad3cec4f43d0cc743985bd406a97cbf7f24b50f7d154c30bb0a400860a3ce3ba4a452be14ec8f2dac3"], "Yarn.via_hashlib().sha3_256()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_hashlib(include_name=False).sha3_256().hexdigest()", "4a2b94fae32e3aa223d7f55aab981380690b859d9835a5d463d927fc3b0e22d5"], "Yarn.via_hashlib().sha3_512()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_hashlib(include_name=False).sha3_512().hexdigest()", "6562658e9d2d6182205d6982c5b0ea005e5470b85e06071c0713b22390dd87d3a10c6d8a437615b4f3e431cc6162d6a9e44dce6568e564b6fad5fe597208b8eb"], "Yarn.via_hashlib().shake_128()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_hashlib(include_name=False).shake_128().hexdigest(8)", "4b26ae91c224cf43"], "Yarn.via_hashlib().shake_256()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_hashlib(include_name=False).shake_256().hexdigest(8)", "e1dd392f568d3e58"], "Yarn.via_hashlib().blake2b()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_hashlib(include_name=False).blake2b().hexdigest()", "fcfa23bb62037fb084fb0de6cd75c3b0223b580c0e777b265551874b38f99a222040f8e148d651e6319f1d35ad4a55d0839a4825175bc13a6ed38809b297d342"], "Yarn.via_hashlib().blake2s()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_hashlib(include_name=False).blake2s().hexdigest()", "7109826fdf713998da43abfd837073c8447a2d4ff5958a136d85c6e39ec016eb"], "Yarn.via_type_clinic.to_hint()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_type_clinic.to_hint()", "static_frame.core.yarn.Yarn[static_frame.core.index_hierarchy.IndexHierarchy[static_frame.core.index.Index[numpy.str_], static_frame.core.index.Index[numpy.str_]]]"], "Yarn.via_type_clinic.check()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_type_clinic.check(sf.Yarn[sf.Index[np.int64]])", "ClinicError('\\nIn Yarn[Index[int64]]\\n\u2514\u2500\u2500 Expected Index, provided IndexHierarchy invalid')"], "Yarn.via_type_clinic.__call__()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> cr = y.via_type_clinic(sf.Yarn[sf.Index[np.int64]])", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "In Yarn[Index[int64]]", "\u2514\u2500\u2500 Expected Index, provided IndexHierarchy invalid"], "Yarn.via_type_clinic.__repr__()": [">>> y = sf.Yarn.from_buses((sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), name='i'), sf.Bus.from_frames((sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'), sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w')), name='j')), retain_labels=True)", ">>> y", "<Yarn>", "<IndexHierarchy>", "i                x     Frame", "i                y     Frame", "j                v     Frame", "j                w     Frame", "<<U1>            <<U1> <object>", ">>> y.via_type_clinic", "Yarn[IndexHierarchy[Index[str_], Index[str_]]]"], "Batch.__init__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "i                r     4       5", "j                p     40      41", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.from_duckdb()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_duckdb('/tmp/f.duckdb')", ">>> bt2 = sf.Batch.from_duckdb('/tmp/f.duckdb', config=sf.StoreConfig(index_depth=1))", ">>> bt2.to_frame()", "<Frame>", "<Index>                   a       b       <<U1>", "<IndexHierarchy>", "i                p        0       1", "i                q        2       3", "i                r        4       5", "j                p        40      41", "j                q        42      43", "j                r        44      45", "<<U1>            <object> <int64> <int64>"], "Batch.from_frames()": [">>> bt = sf.Batch.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')))", ">>> bt", "<Batch max_workers=None>", ">>> bt.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.from_hdf5()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_hdf5('/tmp/f.hdf5')", ">>> bt2 = sf.Batch.from_hdf5('/tmp/f.hdf5', config=sf.StoreConfig(index_depth=1))", ">>> bt2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "i                r     4       5", "j                p     40      41", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.from_sqlite()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_sqlite('/tmp/f.sqlite')", ">>> bt2 = sf.Batch.from_sqlite('/tmp/f.sqlite', config=sf.StoreConfig(index_depth=1))", ">>> bt2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "i                r     4       5", "j                p     40      41", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.from_xlsx()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_xlsx('/tmp/f.xlsx')", ">>> bt2 = sf.Batch.from_xlsx('/tmp/f.xlsx', config=sf.StoreConfig(index_depth=1))", ">>> bt2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "i                r     4       5", "j                p     40      41", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.from_zip_csv()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_zip_csv('/tmp/f.zip')", ">>> bt2 = sf.Batch.from_zip_csv('/tmp/f.zip', config=sf.StoreConfig(index_depth=1))", ">>> bt2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "i                r     4       5", "j                p     40      41", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.from_zip_npy()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_zip_npy('/tmp/f.zip')", ">>> bt2 = sf.Batch.from_zip_npy('/tmp/f.zip')", ">>> bt2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "i                r     4       5", "j                p     40      41", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.from_zip_npz()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_zip_npz('/tmp/f.zip')", ">>> bt2 = sf.Batch.from_zip_npz('/tmp/f.zip')", ">>> bt2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "i                r     4       5", "j                p     40      41", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.from_zip_parquet()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_zip_parquet('/tmp/f.zip')", ">>> bt2 = sf.Batch.from_zip_parquet('/tmp/f.zip', config=sf.StoreConfig(index_depth=1))", ">>> bt2.to_frame()", "<Frame>", "<Index>                   a       b       <<U1>", "<IndexHierarchy>", "i                p        0       1", "i                q        2       3", "i                r        4       5", "j                p        40      41", "j                q        42      43", "j                r        44      45", "<<U1>            <object> <int64> <int64>"], "Batch.from_zip_pickle()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_zip_pickle('/tmp/f.zip')", ">>> bt2 = sf.Batch.from_zip_pickle('/tmp/f.zip')", ">>> bt2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "i                r     4       5", "j                p     40      41", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.from_zip_tsv()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_zip_tsv('/tmp/f.zip')", ">>> bt2 = sf.Batch.from_zip_tsv('/tmp/f.zip', config=sf.StoreConfig(index_depth=1))", ">>> bt2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "i                r     4       5", "j                p     40      41", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.to_bus()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_bus()", "<Bus>", "<Index>", "i       Frame", "j       Frame", "<<U1>   <object>"], "Batch.to_duckdb()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_duckdb('/tmp/f.duckdb')"], "Batch.to_frame()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "i                r     4       5", "j                p     40      41", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.to_hdf5()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_hdf5('/tmp/f.h5')"], "Batch.to_series()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_series()", "<Series>", "<Index>", "i        Frame", "j        Frame", "<<U1>    <object>"], "Batch.to_sqlite()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_sqlite('/tmp/f.sqlite')"], "Batch.to_xlsx()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_xlsx('/tmp/f.xlsx')"], "Batch.to_zip_csv()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_zip_csv('/tmp/f.zip')"], "Batch.to_zip_npy()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_zip_npy('/tmp/f.zip')"], "Batch.to_zip_npz()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_zip_npz('/tmp/f.zip')"], "Batch.to_zip_parquet()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_zip_parquet('/tmp/f.zip')"], "Batch.to_zip_pickle()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_zip_pickle('/tmp/f.zip')"], "Batch.to_zip_tsv()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt1.to_zip_tsv('/tmp/f.zip')"], "Batch.STATIC": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.STATIC", "True"], "Batch.T": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.T", "<Batch max_workers=None>"], "Batch.memory": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.memory", "      L    Lu    LM  LMu   LMD  LMDu  R     Ru    RM   RMu   RMD  RMDu", "Total 4.98 KB    5.1 KB    3.85 KB    13.09 KB    5.18 KB    3.93 KB"], "Batch.name": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.name"], "Batch.shapes": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.shapes", "<Series: shape>", "<Index>", "i               (3, 2)", "j               (3, 2)", "<<U1>           <object>"], "Batch.via_container": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.via_container", "<Batch max_workers=None>"], "Batch.__array__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> tuple(bt.__array__())", "(<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>, <Frame: v>", "<Index>    a       b       <<U1>", "<Index>", "p          40      41", "q          42      43", "r          44      45", "<<U1>      <int64> <int64>)"], "Batch.__array_ufunc__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (np.array((0.5, 0)) * bt).to_frame()", "<Frame>", "<Index>                a         b         <<U1>", "<IndexHierarchy>", "i                p     0.0       0.0", "i                q     1.0       0.0", "i                r     2.0       0.0", "j                p     20.0      0.0", "j                q     21.0      0.0", "j                r     22.0      0.0", "<<U1>            <<U1> <float64> <float64>"], "Batch.__bool__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bool(bt)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "Batch.__round__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))", ">>> round(bt, 2).to_frame()", "<Frame>", "<Index>                a         b         <<U1>", "<IndexHierarchy>", "i                p     40.0      41.0", "i                q     42.0      43.0", "i                r     44.0      45.0", "j                p     33.33     33.67", "j                q     34.0      34.33", "j                r     34.67     35.0", "<<U1>            <<U1> <float64> <float64>"], "Batch.all()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> bt.all().to_frame()", "<Frame>", "<Index> c      d      <<U1>", "<Index>", "i       False  True", "j       False  False", "<<U1>   <bool> <bool>"], "Batch.any()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> bt.any().to_frame()", "<Frame>", "<Index> c      d      <<U1>", "<Index>", "i       False  True", "j       True   True", "<<U1>   <bool> <bool>"], "Batch.apply()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> bt.apply(lambda f: f.iter_element().apply(lambda e: '+' if e else '-')).to_frame()", "<Frame>", "<Index>                c     d     <<U1>", "<IndexHierarchy>", "i                p     -     +", "i                q     -     +", "i                r     -     +", "j                p     -     +", "j                q     +     -", "j                r     +     +", "<<U1>            <<U1> <<U1> <<U1>"], "Batch.apply_except()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.apply_except(lambda f: f + 100, Exception).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     100     101", "i                q     102     103", "i                r     104     105", "<<U1>            <<U1> <int64> <int64>"], "Batch.apply_items()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.apply_items(lambda l, f: f * 100 if l == 'j' else f * 0.001).to_frame()", "<Frame>", "<Index>                a         b         <<U1>", "<IndexHierarchy>", "i                p     0.0       0.001", "i                q     0.002     0.003", "i                r     0.004     0.005", "j                p     4000.0    4100.0", "j                q     4200.0    4300.0", "j                r     4400.0    4500.0", "<<U1>            <<U1> <float64> <float64>"], "Batch.apply_items_except()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.apply_items_except(lambda l, f: f * 100 if l == 'j' else f * 0.001, Exception).to_frame()", "<Frame>", "<Index>                a         b         <<U1>", "<IndexHierarchy>", "i                p     0.0       0.001", "i                q     0.002     0.003", "i                r     0.004     0.005", "<<U1>            <<U1> <float64> <float64>"], "Batch.astype[]()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.astype['a'](str).to_frame()", "<Frame>", "<Index>                a      b       <<U1>", "<IndexHierarchy>", "i                p     0      1", "i                q     2      3", "i                r     4      5", "j                p     40     41", "j                q     42     43", "j                r     44     45", "<<U1>            <<U1> <<U21> <int64>"], "Batch.astype()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.astype(str).to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     0      1", "i                q     2      3", "i                r     4      5", "j                p     40     41", "j                q     42     43", "j                r     44     45", "<<U1>            <<U1> <<U21> <<U21>"], "Batch.clip()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.clip(lower=3, upper=41).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     3       3", "i                q     3       3", "i                r     4       5", "j                p     40      41", "j                q     41      41", "j                r     41      41", "<<U1>            <<U1> <int64> <int64>"], "Batch.corr()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))", ">>> bt.corr().to_frame()", "<Frame>", "<Index>                a         b         <<U1>", "<IndexHierarchy>", "i                a     1.0       1.0", "i                b     1.0       1.0", "j                a     1.0       1.0", "j                b     1.0       1.0", "<<U1>            <<U1> <float64> <float64>"], "Batch.count()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.count(skipna=True).to_frame()", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "i       3       3", "j       3       3", "<<U1>   <int64> <int64>", ">>> bt.count(unique=True).to_frame()", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "i       3       3", "j       3       3", "<<U1>   <int64> <int64>"], "Batch.cov()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))", ">>> bt.cov().to_frame()", "<Frame>", "<Index>                a                   b                   <<U1>", "<IndexHierarchy>", "i                a     4.0                 4.0", "i                b     4.0                 4.0", "j                a     0.4444444444444413  0.44444444444444364", "j                b     0.44444444444444364 0.44444444444444603", "<<U1>            <<U1> <float64>           <float64>"], "Batch.cumprod()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))", ">>> bt.cumprod().to_frame()", "<Frame>", "<Index>                a                  b                  <<U1>", "<IndexHierarchy>", "i                p     40.0               41.0", "i                q     1680.0             1763.0", "i                r     73920.0            79335.0", "j                p     33.333333333333336 33.666666666666664", "j                q     1133.3333333333335 1155.888888888889", "j                r     39288.88888888889  40456.11111111111", "<<U1>            <<U1> <float64>          <float64>"], "Batch.cumsum()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))", ">>> bt.cumsum().to_frame()", "<Frame>", "<Index>                a                  b                  <<U1>", "<IndexHierarchy>", "i                p     40.0               41.0", "i                q     82.0               84.0", "i                r     126.0              129.0", "j                p     33.333333333333336 33.666666666666664", "j                q     67.33333333333334  68.0", "j                r     102.0              103.0", "<<U1>            <<U1> <float64>          <float64>"], "Batch.drop_duplicated()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> bt.drop_duplicated().to_frame()", "<Frame>", "<Index>                c      d      <<U1>", "<IndexHierarchy>", "j                p     False  True", "j                q     True   False", "j                r     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.dropfalsy()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.dropfalsy(condition=np.any, axis=0).to_frame()", "<Frame>", "<Index>                   a         b        c          <<U1>", "<IndexHierarchy>", "i                q        2.0       3        nan", "i                r        4.0       5        nan", "j                0        10.0      qrs      1517-01-01", "j                1        2.0       XYZ      1517-04-01", "j                3        2.0       123      1517-04-01", "<<U1>            <object> <float64> <object> <object>"], "Batch.dropna()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> bt.dropna().to_frame()", "<Frame>", "<Index>                c      d      <<U1>", "<IndexHierarchy>", "i                p     False  True", "i                q     False  True", "i                r     False  True", "j                p     False  True", "j                q     True   False", "j                r     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.duplicated()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> bt.duplicated().to_frame()", "<Frame>", "<Index> p      q      r      <<U1>", "<Index>", "i       True   True   True", "j       False  False  False", "<<U1>   <bool> <bool> <bool>"], "Batch.equals()": [">>> bt1 = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt2 = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))", ">>> bt1.equals(bt2)", "NotImplementedError()"], "Batch.fillfalsy()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.fillfalsy([-1, '', np.nan]).to_frame()", "<Frame>", "<Index>                   a         b        c          <<U1>", "<IndexHierarchy>", "i                p        -1.0      1        nan", "i                q        2.0       3        nan", "i                r        4.0       5        nan", "j                0        10.0      qrs      1517-01-01", "j                1        2.0       XYZ      1517-04-01", "j                2        -1.0               nan", "j                3        2.0       123      1517-04-01", "<<U1>            <object> <float64> <object> <object>"], "Batch.fillfalsy_backward()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.fillfalsy_backward().to_frame()", "<Frame>", "<Index>                  a         b         c         <<U1>", "<IndexHierarchy>", "i                0       10.0      8.0       1.0", "i                1       2.0       3.0       nan", "i                2       nan       8.0       nan", "i                3       nan       nan       nan", "j                0       10.0      8.0       1.0", "j                1       10.0      8.0       1.0", "j                2       10.0      3.0       1.0", "j                3       2.0       8.0       1.0", "<<U1>            <int64> <float64> <float64> <float64>"], "Batch.fillfalsy_forward()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.fillfalsy_forward().to_frame()", "<Frame>", "<Index>                  a         b         c         <<U1>", "<IndexHierarchy>", "i                0       10.0      8.0       1.0", "i                1       2.0       3.0       1.0", "i                2       2.0       8.0       1.0", "i                3       2.0       8.0       1.0", "j                0       nan       nan       nan", "j                1       nan       8.0       nan", "j                2       10.0      3.0       nan", "j                3       2.0       8.0       1.0", "<<U1>            <int64> <float64> <float64> <float64>"], "Batch.fillfalsy_leading()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.fillfalsy_leading(-1).to_frame()", "<Frame>", "<Index>                  a         b         c         <<U1>", "<IndexHierarchy>", "i                0       10.0      8.0       1.0", "i                1       2.0       3.0       nan", "i                2       nan       8.0       nan", "i                3       nan       nan       nan", "j                0       -1.0      -1.0      -1.0", "j                1       -1.0      8.0       -1.0", "j                2       10.0      3.0       -1.0", "j                3       2.0       8.0       1.0", "<<U1>            <int64> <float64> <float64> <float64>"], "Batch.fillfalsy_trailing()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.fillfalsy_trailing(-1).to_frame()", "<Frame>", "<Index>                  a         b         c         <<U1>", "<IndexHierarchy>", "i                0       10.0      8.0       1.0", "i                1       2.0       3.0       -1.0", "i                2       -1.0      8.0       -1.0", "i                3       -1.0      -1.0      -1.0", "j                0       nan       nan       nan", "j                1       nan       8.0       nan", "j                2       10.0      3.0       nan", "j                3       2.0       8.0       1.0", "<<U1>            <int64> <float64> <float64> <float64>"], "Batch.fillna()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.fillna(-1).to_frame()", "<Frame>", "<Index>                   a         b        c          <<U1>", "<IndexHierarchy>", "i                p        0.0       1        nan", "i                q        2.0       3        nan", "i                r        4.0       5        nan", "j                0        10.0      qrs      1517-01-01", "j                1        2.0       XYZ      1517-04-01", "j                2        -1.0               -1", "j                3        2.0       123      1517-04-01", "<<U1>            <object> <float64> <object> <object>"], "Batch.fillna_backward()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.fillna_backward().to_frame()", "<Frame>", "<Index>                  a         b         c         <<U1>", "<IndexHierarchy>", "i                0       10.0      8.0       1.0", "i                1       2.0       3.0       nan", "i                2       nan       8.0       nan", "i                3       nan       nan       nan", "j                0       10.0      8.0       1.0", "j                1       10.0      8.0       1.0", "j                2       10.0      3.0       1.0", "j                3       2.0       8.0       1.0", "<<U1>            <int64> <float64> <float64> <float64>"], "Batch.fillna_forward()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.fillna_forward().to_frame()", "<Frame>", "<Index>                  a         b         c         <<U1>", "<IndexHierarchy>", "i                0       10.0      8.0       1.0", "i                1       2.0       3.0       1.0", "i                2       2.0       8.0       1.0", "i                3       2.0       8.0       1.0", "j                0       nan       nan       nan", "j                1       nan       8.0       nan", "j                2       10.0      3.0       nan", "j                3       2.0       8.0       1.0", "<<U1>            <int64> <float64> <float64> <float64>"], "Batch.fillna_leading()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.fillna_leading(-1).to_frame()", "<Frame>", "<Index>                  a         b         c         <<U1>", "<IndexHierarchy>", "i                0       10.0      8.0       1.0", "i                1       2.0       3.0       nan", "i                2       nan       8.0       nan", "i                3       nan       nan       nan", "j                0       -1.0      -1.0      -1.0", "j                1       -1.0      8.0       -1.0", "j                2       10.0      3.0       -1.0", "j                3       2.0       8.0       1.0", "<<U1>            <int64> <float64> <float64> <float64>"], "Batch.fillna_trailing()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.fillna_trailing(-1).to_frame()", "<Frame>", "<Index>                  a         b         c         <<U1>", "<IndexHierarchy>", "i                0       10.0      8.0       1.0", "i                1       2.0       3.0       -1.0", "i                2       -1.0      8.0       -1.0", "i                3       -1.0      -1.0      -1.0", "j                0       nan       nan       nan", "j                1       nan       8.0       nan", "j                2       10.0      3.0       nan", "j                3       2.0       8.0       1.0", "<<U1>            <int64> <float64> <float64> <float64>"], "Batch.head()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.head(2).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "j                p     40      41", "j                q     42      43", "<<U1>            <<U1> <int64> <int64>"], "Batch.iloc_max()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.iloc_max().to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "i       0       0       0", "j       2       1       3", "<<U1>   <int64> <int64> <int64>"], "Batch.iloc_min()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.iloc_min().to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "i       1       1       0", "j       3       2       3", "<<U1>   <int64> <int64> <int64>"], "Batch.isfalsy()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.isfalsy().to_frame(fill_value=False)", "<Frame>", "<Index>                   a      b      c      <<U1>", "<IndexHierarchy>", "i                p        True   False  False", "i                q        False  False  False", "i                r        False  False  False", "j                0        False  False  False", "j                1        False  False  False", "j                2        True   True   True", "j                3        False  False  False", "<<U1>            <object> <bool> <bool> <bool>"], "Batch.isin()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.isin((3, 10)).to_frame()", "<Frame>", "<Index>                  a      b      c      <<U1>", "<IndexHierarchy>", "i                0       True   False  False", "i                1       False  True   False", "i                2       False  False  False", "i                3       False  False  False", "j                0       False  False  False", "j                1       False  False  False", "j                2       True   True   False", "j                3       False  False  False", "<<U1>            <int64> <bool> <bool> <bool>"], "Batch.isna()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.isna().to_frame()", "<Frame>", "<Index>                  a      b      c      <<U1>", "<IndexHierarchy>", "i                0       False  False  False", "i                1       False  False  True", "i                2       True   False  True", "i                3       True   True   True", "j                0       True   True   True", "j                1       True   False  True", "j                2       False  False  True", "j                3       False  False  False", "<<U1>            <int64> <bool> <bool> <bool>"], "Batch.loc_max()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.loc_max().to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "i       0       0       0", "j       2       1       3", "<<U1>   <int64> <int64> <int64>"], "Batch.loc_min()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.loc_min().to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "i       1       1       0", "j       3       2       3", "<<U1>   <int64> <int64> <int64>"], "Batch.max()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.max().to_frame()", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "i       4       5", "j       44      45", "<<U1>   <int64> <int64>"], "Batch.mean()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.mean().to_frame()", "<Frame>", "<Index> a         b         <<U1>", "<Index>", "i       2.0       3.0", "j       42.0      43.0", "<<U1>   <float64> <float64>"], "Batch.median()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.median().to_frame()", "<Frame>", "<Index> a         b         <<U1>", "<Index>", "i       2.0       3.0", "j       42.0      43.0", "<<U1>   <float64> <float64>"], "Batch.min()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.min().to_frame()", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "i       0       1", "j       40      41", "<<U1>   <int64> <int64>"], "Batch.notfalsy()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.notfalsy().to_frame(fill_value=False)", "<Frame>", "<Index>                   a      b      c      <<U1>", "<IndexHierarchy>", "i                p        False  True   False", "i                q        True   True   False", "i                r        True   True   False", "j                0        True   True   True", "j                1        True   True   True", "j                2        False  False  False", "j                3        True   True   True", "<<U1>            <object> <bool> <bool> <bool>"], "Batch.notna()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, np.nan, np.nan), (8, 3, 8, np.nan), (1, np.nan, np.nan, np.nan)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((np.nan, np.nan, 10, 2), (np.nan, 8, 3, 8), (np.nan, np.nan, np.nan, 1)), columns=('a', 'b', 'c'), name='y'))))", ">>> bt.notna().to_frame()", "<Frame>", "<Index>                  a      b      c      <<U1>", "<IndexHierarchy>", "i                0       True   True   True", "i                1       True   True   False", "i                2       False  True   False", "i                3       False  False  False", "j                0       False  False  False", "j                1       False  True   False", "j                2       True   True   False", "j                3       True   True   True", "<<U1>            <int64> <bool> <bool> <bool>"], "Batch.prod()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.prod().to_frame()", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "i       0       15", "j       73920   79335", "<<U1>   <int64> <int64>"], "Batch.rank_dense()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))", ">>> bt.rank_dense().to_frame()", "<Frame>", "<Index>                  a       b       c       <<U1>", "<IndexHierarchy>", "i                0       3       0       0", "i                1       1       2       1", "i                2       2       1       0", "i                3       0       2       1", "j                0       0       2       0", "j                1       0       1       0", "j                2       2       0       0", "j                3       1       1       1", "<<U1>            <int64> <int64> <int64> <int64>"], "Batch.rank_max()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))", ">>> bt.rank_max().to_frame()", "<Frame>", "<Index>                  a       b       c       <<U1>", "<IndexHierarchy>", "i                0       3       0       1", "i                1       1       3       3", "i                2       2       1       1", "i                3       0       3       3", "j                0       1       3       2", "j                1       1       2       2", "j                2       3       0       2", "j                3       2       2       3", "<<U1>            <int64> <int64> <int64> <int64>"], "Batch.rank_mean()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))", ">>> bt.rank_mean().to_frame()", "<Frame>", "<Index>                  a         b         c         <<U1>", "<IndexHierarchy>", "i                0       3.0       0.0       0.5", "i                1       1.0       2.5       2.5", "i                2       2.0       1.0       0.5", "i                3       0.0       2.5       2.5", "j                0       0.5       3.0       1.0", "j                1       0.5       1.5       1.0", "j                2       3.0       0.0       1.0", "j                3       2.0       1.5       3.0", "<<U1>            <int64> <float64> <float64> <float64>"], "Batch.rank_min()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))", ">>> bt.rank_min().to_frame()", "<Frame>", "<Index>                  a       b       c       <<U1>", "<IndexHierarchy>", "i                0       3       0       0", "i                1       1       2       2", "i                2       2       1       0", "i                3       0       2       2", "j                0       0       3       0", "j                1       0       1       0", "j                2       3       0       0", "j                3       2       1       3", "<<U1>            <int64> <int64> <int64> <int64>"], "Batch.rank_ordinal()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))", ">>> bt.rank_ordinal().to_frame()", "<Frame>", "<Index>                  a       b       c       <<U1>", "<IndexHierarchy>", "i                0       3       0       0", "i                1       1       2       2", "i                2       2       1       1", "i                3       0       3       3", "j                0       0       3       0", "j                1       1       1       1", "j                2       3       0       2", "j                3       2       2       3", "<<U1>            <int64> <int64> <int64> <int64>"], "Batch.reindex()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.reindex(('q', 'p', 'a'), fill_value=sf.FillValueAuto).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                q     2       3", "i                p     0       1", "i                a     0       0", "j                q     42      43", "j                p     40      41", "j                a     0       0", "<<U1>            <<U1> <int64> <int64>"], "Batch.relabel()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.relabel({'q':'x', 'p':'y', 0:'x', 1:'y'}).to_frame()", "<Frame>", "<Index>                   a         b        c          <<U1>", "<IndexHierarchy>", "i                y        0.0       1        nan", "i                x        2.0       3        nan", "i                r        4.0       5        nan", "j                x        10.0      qrs      1517-01-01", "j                y        2.0       XYZ      1517-04-01", "j                2        nan                None", "j                3        2.0       123      1517-04-01", "<<U1>            <object> <float64> <object> <object>", ">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.relabel(lambda l: f'+{str(l).upper()}+').to_frame()", "<Frame>", "<Index>                a         b        c          <<U1>", "<IndexHierarchy>", "i                +P+   0.0       1        nan", "i                +Q+   2.0       3        nan", "i                +R+   4.0       5        nan", "j                +0+   10.0      qrs      1517-01-01", "j                +1+   2.0       XYZ      1517-04-01", "j                +2+   nan                None", "j                +3+   2.0       123      1517-04-01", "<<U1>            <<U3> <float64> <object> <object>"], "Batch.relabel_flat()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.relabel_flat(index=True).to_frame()", "<Frame>", "<Index>                   a       b      c               <<U1>", "<IndexHierarchy>", "i                (0, 'p') 10      False  1517-01-01", "i                (0, 'q') 2       True   1517-04-01", "i                (1, 'p') 8       True   1517-12-31", "i                (1, 'q') 3       False  1517-06-30", "j                (0, 'p') 23      True   2022-01-01", "j                (0, 'q') 83      True   2023-04-01", "j                (1, 'p') 19      False  2022-12-31", "j                (1, 'q') 87      False  2024-06-30", "<<U1>            <object> <int64> <bool> <datetime64[D]>"], "Batch.relabel_level_add()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> tuple(bt.relabel_level_add('I').values)", "(<Frame: x>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "I                p     0       1", "I                q     2       3", "I                r     4       5", "<<U1>            <<U1> <int64> <int64>, <Frame: v>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "I                p     40      41", "I                q     42      43", "I                r     44      45", "<<U1>            <<U1> <int64> <int64>)"], "Batch.relabel_level_drop()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.iloc[:2].relabel_level_drop(1).to_frame()", "<Frame>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "i                p     10      False  1517-01-01", "i                q     2       True   1517-04-01", "j                p     23      True   2022-01-01", "j                q     83      True   2023-04-01", "<<U1>            <<U1> <int64> <bool> <datetime64[D]>"], "Batch.relabel_shift_in()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> tuple(bt.relabel_shift_in('a').values)", "(<Frame: x>", "<Index>                                            b      c               <<U1>", "<IndexHierarchy: ('__index0__', '...", "0                                    p     10      False  1517-01-01", "0                                    q     2       True   1517-04-01", "1                                    p     8       True   1517-12-31", "1                                    q     3       False  1517-06-30", "<int64>                              <<U1> <int64> <bool> <datetime64[D]>, <Frame: x>", "<Index>                                            b      c               <<U1>", "<IndexHierarchy: ('__index0__', '...", "0                                    p     23      True   2022-01-01", "0                                    q     83      True   2023-04-01", "1                                    p     19      False  2022-12-31", "1                                    q     87      False  2024-06-30", "<int64>                              <<U1> <int64> <bool> <datetime64[D]>)"], "Batch.rename()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.rename('y').to_bus()", "<Bus>", "<Index>", "i       Frame", "j       Frame", "<<U1>   <object>"], "Batch.roll()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.roll(1, include_index=True).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                r     4       5", "i                p     0       1", "i                q     2       3", "j                r     44      45", "j                p     40      41", "j                q     42      43", "<<U1>            <<U1> <int64> <int64>"], "Batch.sample()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.sample(2, 2, seed=0).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                q     2       3", "i                r     4       5", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.shift()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.shift(1, fill_value=sf.FillValueAuto).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       0", "i                q     0       1", "i                r     2       3", "j                p     0       0", "j                q     40      41", "j                r     42      43", "<<U1>            <<U1> <int64> <int64>"], "Batch.sort_columns()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.sort_columns(ascending=False).to_frame()", "<Frame>", "<Index>                b       a       <<U1>", "<IndexHierarchy>", "i                p     1       0", "i                q     3       2", "i                r     5       4", "j                p     41      40", "j                q     43      42", "j                r     45      44", "<<U1>            <<U1> <int64> <int64>"], "Batch.sort_index()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.sort_index(ascending=False).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                r     4       5", "i                q     2       3", "i                p     0       1", "j                r     44      45", "j                q     42      43", "j                p     40      41", "<<U1>            <<U1> <int64> <int64>"], "Batch.sort_values()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.sort_values('a', ascending=False).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                r     4       5", "i                q     2       3", "i                p     0       1", "j                r     44      45", "j                q     42      43", "j                p     40      41", "<<U1>            <<U1> <int64> <int64>"], "Batch.std()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.std().to_frame()", "<Frame>", "<Index> a                 b                 <<U1>", "<Index>", "i       1.632993161855452 1.632993161855452", "j       1.632993161855452 1.632993161855452", "<<U1>   <float64>         <float64>"], "Batch.sum()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.sum().to_frame()", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "i       6       9", "j       126     129", "<<U1>   <int64> <int64>"], "Batch.tail()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.tail(2).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                q     2       3", "i                r     4       5", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.transpose()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.transpose().to_frame()", "<Frame>", "<Index>                p       q       r       <<U1>", "<IndexHierarchy>", "i                a     0       2       4", "i                b     1       3       5", "j                a     40      42      44", "j                b     41      43      45", "<<U1>            <<U1> <int64> <int64> <int64>"], "Batch.unique()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> bt.unique().to_frame()", "<Frame>", "<Index> 0      1      <int64>", "<Index>", "i       False  True", "j       False  True", "<<U1>   <bool> <bool>"], "Batch.unset_index()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.rename(index=('d', 'e')).unset_index().to_frame()", "<Frame>", "<Index>                  d       e     a       b      c               <<U1>", "<IndexHierarchy>", "i                0       0       p     10      False  1517-01-01", "i                1       0       q     2       True   1517-04-01", "i                2       1       p     8       True   1517-12-31", "i                3       1       q     3       False  1517-06-30", "j                0       0       p     23      True   2022-01-01", "j                1       0       q     83      True   2023-04-01", "j                2       1       p     19      False  2022-12-31", "j                3       1       q     87      False  2024-06-30", "<<U1>            <int64> <int64> <<U1> <int64> <bool> <datetime64[D]>"], "Batch.var()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.var().to_frame()", "<Frame>", "<Index> a                  b                  <<U1>", "<Index>", "i       2.6666666666666665 2.6666666666666665", "j       2.6666666666666665 2.6666666666666665", "<<U1>   <float64>          <float64>"], "Batch.__iter__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> tuple(bt.__iter__())", "('i', 'j')"], "Batch.items()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> tuple(bt.items())", "(('i', <Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>), ('j', <Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     23      True   2022-01-01", "0                q     83      True   2023-04-01", "1                p     19      False  2022-12-31", "1                q     87      False  2024-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>))"], "Batch.keys()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> tuple(bt.keys())", "('i', 'j')"], "Batch.values": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> tuple(bt.values)", "(<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>, <Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     23      True   2022-01-01", "0                q     83      True   2023-04-01", "1                p     19      False  2022-12-31", "1                q     87      False  2024-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>)"], "Batch.interface": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.interface", "<Frame>", "<Index>                              cls_name group                doc                  <<U18>", "<Index: signature>", "__init__(items, *, name, config, ... Batch    Constructor          Default construct...", "from_duckdb(fp, *, config, max_wo... Batch    Constructor          Given a file path...", "from_frames(frames, *, name, conf... Batch    Constructor          Return a Batch fr...", "from_hdf5(fp, *, config, max_work... Batch    Constructor          Given a file path...", "from_sqlite(fp, *, config, max_wo... Batch    Constructor          Given a file path...", "from_xlsx(fp, *, config, max_work... Batch    Constructor          Given a file path...", "from_zip_csv(fp, *, config, max_w... Batch    Constructor          Given a file path...", "from_zip_npy(fp, *, config, max_w... Batch    Constructor          Given a file path...", "from_zip_npz(fp, *, config, max_w... Batch    Constructor          Given a file path...", "from_zip_parquet(fp, *, config, m... Batch    Constructor          Given a file path...", "from_zip_pickle(fp, *, config, ma... Batch    Constructor          Given a file path...", "from_zip_tsv(fp, *, config, max_w... Batch    Constructor          Given a file path...", "to_bus(*, index_constructor)         Batch    Exporter             Realize the Batch...", "to_duckdb(fp, *, config)             Batch    Exporter             Write the complet...", "to_frame(*, axis, union, index, ...) Batch    Exporter             Consolidate store...", "to_hdf5(fp, *, config)               Batch    Exporter             Write the complet...", "to_series(*, dtype, name, index_c... Batch    Exporter             Consolidate store...", "...                                  ...      ...                  ...", "via_hashlib(include_name, include... Batch    Accessor Hashlib", "via_hashlib(include_name, include... Batch    Accessor Hashlib", "via_hashlib(include_name, include... Batch    Accessor Hashlib", "via_hashlib(include_name, include... Batch    Accessor Hashlib", "via_hashlib(include_name, include... Batch    Accessor Hashlib", "via_hashlib(include_name, include... Batch    Accessor Hashlib", "via_hashlib(include_name, include... Batch    Accessor Hashlib", "via_hashlib(include_name, include... Batch    Accessor Hashlib", "via_type_clinic.to_hint()            Batch    Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... Batch    Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... Batch    Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... Batch    Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           Batch    Accessor Type Clinic Return a compact ...", "reduce.from_func(func, *, fill_va... Batch    Accessor Reduce", "reduce.from_map_func(func, *, fil... Batch    Accessor Reduce", "reduce.from_label_map(func_map, *... Batch    Accessor Reduce", "reduce.from_label_pair_map(func_m... Batch    Accessor Reduce", "<<U90>                               <<U5>    <<U27>               <<U83>"], "Batch.__repr__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> repr(bt)", "<Batch max_workers=None>"], "Batch.__str__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> str(bt)", "<Batch max_workers=None>"], "Batch.display()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.display()", "<Batch>", "<Index>", "i       <Frame>", "j       <Frame>", "<<U1>   <object>", ">>> bt.display(sf.DisplayConfig(type_show=False))", "i <Frame>", "j <Frame>"], "Batch.display_tall()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.display_tall()", "<Batch>", "<Index>", "i       <Frame>", "j       <Frame>", "<<U1>   <object>"], "Batch.display_wide()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((23, 83, 19, 87), (True, True, False, False), ('2022-01-01', '2023-04-01', '2022-12-31', '2024-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt.display_wide()", "<Batch>", "<Index>", "i       <Frame>", "j       <Frame>", "<<U1>   <object>"], "Batch.bloc[]": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.bloc[np.arange(6).reshape(3,2) >= 3].to_frame()", "<Frame>", "<Index> ('q', 'b') ('r', 'a') ('r', 'b') <object>", "<Index>", "i       3          4          5", "j       43         44         45", "<<U1>   <int64>    <int64>    <int64>"], "Batch.drop[]": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))", ">>> bt.drop['b'].to_frame()", "<Frame>", "<Index>                  a       c       <<U1>", "<IndexHierarchy>", "i                0       11      0", "i                1       4       1", "i                2       10      0", "i                3       2       1", "j                0       0       0", "j                1       0       0", "j                2       10      0", "j                3       2       1", "<<U1>            <int64> <int64> <int64>", ">>> bt.drop['b':].to_frame()", "<Frame>", "<Index>                  a       <<U1>", "<IndexHierarchy>", "i                0       11", "i                1       4", "i                2       10", "i                3       2", "j                0       0", "j                1       0", "j                2       10", "j                3       2", "<<U1>            <int64> <int64>", ">>> bt.drop[['a', 'c']].to_frame()", "<Frame>", "<Index>                  b       <<U1>", "<IndexHierarchy>", "i                0       0", "i                1       8", "i                2       3", "i                3       8", "j                0       20", "j                1       18", "j                2       -3", "j                3       18", "<<U1>            <int64> <int64>"], "Batch.drop.iloc[]": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))", ">>> bt.drop.iloc[1].to_frame()", "<Frame>", "<Index>                  a       b       c       <<U1>", "<IndexHierarchy>", "i                0       11      0       0", "i                2       10      3       0", "i                3       2       8       1", "j                0       0       20      0", "j                2       10      -3      0", "j                3       2       18      1", "<<U1>            <int64> <int64> <int64> <int64>", ">>> bt.drop.iloc[1:].to_frame()", "<Frame>", "<Index>                  a       b       c       <<U1>", "<IndexHierarchy>", "i                0       11      0       0", "j                0       0       20      0", "<<U1>            <int64> <int64> <int64> <int64>", ">>> bt.drop.iloc[[0, 2]].to_frame()", "<Frame>", "<Index>                  a       b       c       <<U1>", "<IndexHierarchy>", "i                1       4       8       1", "i                3       2       8       1", "j                1       0       18      0", "j                3       2       18      1", "<<U1>            <int64> <int64> <int64> <int64>"], "Batch.drop.loc[]": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.drop.loc['r'].to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "j                p     40      41", "j                q     42      43", "<<U1>            <<U1> <int64> <int64>", ">>> bt.drop.loc['r':].to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "j                p     40      41", "j                q     42      43", "<<U1>            <<U1> <int64> <int64>", ">>> bt.drop.loc[['p', 'q']].to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                r     4       5", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.[]": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))", ">>> bt['b'].to_frame()", "<Frame>", "<Index> 0       1       2       3       <int64>", "<Index>", "i       0       8       3       8", "j       20      18      -3      18", "<<U1>   <int64> <int64> <int64> <int64>", ">>> bt['b':].to_frame()", "<Frame>", "<Index>                  b       c       <<U1>", "<IndexHierarchy>", "i                0       0       0", "i                1       8       1", "i                2       3       0", "i                3       8       1", "j                0       20      0", "j                1       18      0", "j                2       -3      0", "j                3       18      1", "<<U1>            <int64> <int64> <int64>", ">>> bt[['a', 'c']].to_frame()", "<Frame>", "<Index>                  a       c       <<U1>", "<IndexHierarchy>", "i                0       11      0", "i                1       4       1", "i                2       10      0", "i                3       2       1", "j                0       0       0", "j                1       0       0", "j                2       10      0", "j                3       2       1", "<<U1>            <int64> <int64> <int64>"], "Batch.iloc[]": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((11, 4, 10, 2), (0, 8, 3, 8), (0, 1, 0, 1)), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((0, 0, 10, 2), (20, 18, -3, 18), (0, 0, 0, 1)), columns=('a', 'b', 'c'), name='x'))))", ">>> bt.iloc[2].to_frame()", "<Frame>", "<Index> a       b       c       <<U1>", "<Index>", "i       10      3       0", "j       10      -3      0", "<<U1>   <int64> <int64> <int64>", ">>> bt.iloc[2:].to_frame()", "<Frame>", "<Index>                  a       b       c       <<U1>", "<IndexHierarchy>", "i                2       10      3       0", "i                3       2       8       1", "j                2       10      -3      0", "j                3       2       18      1", "<<U1>            <int64> <int64> <int64> <int64>", ">>> bt.iloc[[0, 3]].to_frame()", "<Frame>", "<Index>                  a       b       c       <<U1>", "<IndexHierarchy>", "i                0       11      0       0", "i                3       2       8       1", "j                0       0       20      0", "j                3       2       18      1", "<<U1>            <int64> <int64> <int64> <int64>"], "Batch.loc[]": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt.loc['r'].to_frame()", "<Frame>", "<Index> a       b       <<U1>", "<Index>", "i       4       5", "j       44      45", "<<U1>   <int64> <int64>", ">>> bt.loc['r':].to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                r     4       5", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>", ">>> bt.loc[['p', 'r']].to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                r     4       5", "j                p     40      41", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.__add__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt + 8).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     8       9", "i                q     10      11", "i                r     12      13", "j                p     48      49", "j                q     50      51", "j                r     52      53", "<<U1>            <<U1> <int64> <int64>"], "Batch.__and__()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> (bt & True).to_frame()", "<Frame>", "<Index>                c      d      <<U1>", "<IndexHierarchy>", "i                p     False  True", "i                q     False  True", "i                r     False  True", "j                p     False  True", "j                q     True   False", "j                r     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.__eq__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt == 8).to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     False  False", "i                q     False  False", "i                r     False  False", "j                p     False  False", "j                q     False  False", "j                r     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.__floordiv__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt // 8).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       0", "i                q     0       0", "i                r     0       0", "j                p     5       5", "j                q     5       5", "j                r     5       5", "<<U1>            <<U1> <int64> <int64>"], "Batch.__ge__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt >= 8).to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     False  False", "i                q     False  False", "i                r     False  False", "j                p     True   True", "j                q     True   True", "j                r     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.__gt__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt > 8).to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     False  False", "i                q     False  False", "i                r     False  False", "j                p     True   True", "j                q     True   True", "j                r     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.__le__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt <= 8).to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     True   True", "i                q     True   True", "i                r     True   True", "j                p     False  False", "j                q     False  False", "j                r     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.__lt__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt < 8).to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     True   True", "i                q     True   True", "i                r     True   True", "j                p     False  False", "j                q     False  False", "j                r     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.__matmul__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt @ (1, 0.5)).to_frame()", "<Frame>", "<Index> p         q         r         <<U1>", "<Index>", "i       0.5       3.5       6.5", "j       60.5      63.5      66.5", "<<U1>   <float64> <float64> <float64>"], "Batch.__mod__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt % 8).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       1", "i                q     2       3", "i                r     4       5", "j                p     0       1", "j                q     2       3", "j                r     4       5", "<<U1>            <<U1> <int64> <int64>"], "Batch.__mul__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt * 8).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       8", "i                q     16      24", "i                r     32      40", "j                p     320     328", "j                q     336     344", "j                r     352     360", "<<U1>            <<U1> <int64> <int64>"], "Batch.__ne__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt != 8).to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     True   True", "i                q     True   True", "i                r     True   True", "j                p     True   True", "j                q     True   True", "j                r     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.__or__()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> (bt | True).to_frame()", "<Frame>", "<Index>                c      d      <<U1>", "<IndexHierarchy>", "i                p     True   True", "i                q     True   True", "i                r     True   True", "j                p     True   True", "j                q     True   True", "j                r     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.__pow__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt ** 8).to_frame()", "<Frame>", "<Index>                a              b              <<U1>", "<IndexHierarchy>", "i                p     0              1", "i                q     256            6561", "i                r     65536          390625", "j                p     6553600000000  7984925229121", "j                q     9682651996416  11688200277601", "j                r     14048223625216 16815125390625", "<<U1>            <<U1> <int64>        <int64>"], "Batch.__radd__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (8 + bt).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     8       9", "i                q     10      11", "i                r     12      13", "j                p     48      49", "j                q     50      51", "j                r     52      53", "<<U1>            <<U1> <int64> <int64>"], "Batch.__rfloordiv__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (8 // bt).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       8", "i                q     4       2", "i                r     2       1", "j                p     0       0", "j                q     0       0", "j                r     0       0", "<<U1>            <<U1> <int64> <int64>"], "Batch.__rmatmul__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt @ (1, 0.5)).to_frame()", "<Frame>", "<Index> p         q         r         <<U1>", "<Index>", "i       0.5       3.5       6.5", "j       60.5      63.5      66.5", "<<U1>   <float64> <float64> <float64>"], "Batch.__rmul__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (8 * bt).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       8", "i                q     16      24", "i                r     32      40", "j                p     320     328", "j                q     336     344", "j                r     352     360", "<<U1>            <<U1> <int64> <int64>"], "Batch.__rshift__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt >> 1).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       0", "i                q     1       1", "i                r     2       2", "j                p     20      20", "j                q     21      21", "j                r     22      22", "<<U1>            <<U1> <int64> <int64>"], "Batch.__rsub__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (8 - bt).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     8       7", "i                q     6       5", "i                r     4       3", "j                p     -32     -33", "j                q     -34     -35", "j                r     -36     -37", "<<U1>            <<U1> <int64> <int64>"], "Batch.__rtruediv__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (8 / bt).to_frame()", "<Frame>", "<Index>                a                   b                   <<U1>", "<IndexHierarchy>", "i                p     inf                 8.0", "i                q     4.0                 2.6666666666666665", "i                r     2.0                 1.6", "j                p     0.2                 0.1951219512195122", "j                q     0.19047619047619047 0.18604651162790697", "j                r     0.18181818181818182 0.17777777777777778", "<<U1>            <<U1> <float64>           <float64>"], "Batch.__sub__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt - 8).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     -8      -7", "i                q     -6      -5", "i                r     -4      -3", "j                p     32      33", "j                q     34      35", "j                r     36      37", "<<U1>            <<U1> <int64> <int64>"], "Batch.__truediv__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> (bt / 8).to_frame()", "<Frame>", "<Index>                a         b         <<U1>", "<IndexHierarchy>", "i                p     0.0       0.125", "i                q     0.25      0.375", "i                r     0.5       0.625", "j                p     5.0       5.125", "j                q     5.25      5.375", "j                r     5.5       5.625", "<<U1>            <<U1> <float64> <float64>"], "Batch.__xor__()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> (bt ^ True).to_frame()", "<Frame>", "<Index>                c      d      <<U1>", "<IndexHierarchy>", "i                p     True   False", "i                q     True   False", "i                r     True   False", "j                p     True   False", "j                q     False  True", "j                r     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.__abs__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))", ">>> abs(bt).to_frame()", "<Frame>", "<Index>                a                  b                  <<U1>", "<IndexHierarchy>", "i                p     40.0               41.0", "i                q     42.0               43.0", "i                r     44.0               45.0", "j                p     33.333333333333336 33.666666666666664", "j                q     34.0               34.333333333333336", "j                r     34.666666666666664 35.0", "<<U1>            <<U1> <float64>          <float64>"], "Batch.__invert__()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> ~bt.to_frame()", "<Frame>", "<Index>                c      d      <<U1>", "<IndexHierarchy>", "i                p     True   False", "i                q     True   False", "i                r     True   False", "j                p     True   False", "j                q     False  True", "j                r     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.__neg__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))", ">>> -bt.to_frame()", "<Frame>", "<Index>                a                   b                   <<U1>", "<IndexHierarchy>", "i                p     -40.0               -41.0", "i                q     -42.0               -43.0", "i                r     -44.0               -45.0", "j                p     -33.333333333333336 -33.666666666666664", "j                q     -34.0               -34.333333333333336", "j                r     -34.666666666666664 -35.0", "<<U1>            <<U1> <float64>           <float64>"], "Batch.__pos__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))", ">>> +bt.to_frame()", "<Frame>", "<Index>                a                  b                  <<U1>", "<IndexHierarchy>", "i                p     40.0               41.0", "i                q     42.0               43.0", "i                r     44.0               45.0", "j                p     33.333333333333336 33.666666666666664", "j                q     34.0               34.333333333333336", "j                r     34.666666666666664 35.0", "<<U1>            <<U1> <float64>          <float64>"], "Batch.abs()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), ('j', sf.Frame(np.arange(100, 106).reshape(3,2) / 3, index=('p', 'q', 'r'), columns=('a', 'b'), name='x'))))", ">>> bt.abs().to_frame()", "<Frame>", "<Index>                a                  b                  <<U1>", "<IndexHierarchy>", "i                p     40.0               41.0", "i                q     42.0               43.0", "i                r     44.0               45.0", "j                p     33.333333333333336 33.666666666666664", "j                q     34.0               34.333333333333336", "j                r     34.666666666666664 35.0", "<<U1>            <<U1> <float64>          <float64>"], "Batch.via_dt.__call__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1620-04-01', '', '1620-06-30'), ('1976-04-01', '1954-12-31', '')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt(fill_value=-1).month.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     4       4", "i                q     -1      12", "i                r     6       -1", "j                p     4       4", "j                q     12      12", "j                r     6       6", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_dt.year": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.year.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     1517    2022", "i                q     1517    2021", "i                r     1517    2022", "j                p     1620    1976", "j                q     1620    1954", "j                r     1620    1976", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_dt.year_month": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.year_month.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     1517-04 2022-04", "i                q     1517-12 2021-12", "i                r     1517-06 2022-06", "j                p     1620-04 1976-04", "j                q     1620-12 1954-12", "j                r     1620-06 1976-06", "<<U1>            <<U1> <<U7>   <<U7>"], "Batch.via_dt.year_quarter": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.year_quarter.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     1517-Q2 2022-Q2", "i                q     1517-Q4 2021-Q4", "i                r     1517-Q2 2022-Q2", "j                p     1620-Q2 1976-Q2", "j                q     1620-Q4 1954-Q4", "j                r     1620-Q2 1976-Q2", "<<U1>            <<U1> <<U7>   <<U7>"], "Batch.via_dt.month": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.month.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     4       4", "i                q     12      12", "i                r     6       6", "j                p     4       4", "j                q     12      12", "j                r     6       6", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_dt.day": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.day.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     1       1", "i                q     31      31", "i                r     30      30", "j                p     1       1", "j                q     31      31", "j                r     30      30", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_dt.hour": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.hour.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       0", "i                q     0       0", "i                r     0       0", "j                p     0       0", "j                q     0       0", "j                r     0       0", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_dt.minute": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.minute.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       0", "i                q     0       0", "i                r     0       0", "j                p     0       0", "j                q     0       0", "j                r     0       0", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_dt.second": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.second.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     0       0", "i                q     0       0", "i                r     0       0", "j                p     0       0", "j                q     0       0", "j                r     0       0", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_dt.weekday()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.weekday().to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     6       4", "i                q     0       4", "i                r     5       3", "j                p     2       3", "j                q     3       4", "j                r     1       2", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_dt.quarter()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.quarter().to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                p     2       2", "i                q     4       4", "i                r     2       2", "j                p     2       2", "j                q     4       4", "j                r     2       2", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_dt.is_month_end()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.is_month_end().to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     False  False", "i                q     True   True", "i                r     True   True", "j                p     False  False", "j                q     True   True", "j                r     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_dt.is_month_start()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.is_month_start().to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     True   True", "i                q     False  False", "i                r     False  False", "j                p     True   True", "j                q     False  False", "j                r     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_dt.is_year_end()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.is_year_end().to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     False  False", "i                q     True   True", "i                r     False  False", "j                p     False  False", "j                q     True   True", "j                r     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_dt.is_year_start()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.is_year_start().to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     False  False", "i                q     False  False", "i                r     False  False", "j                p     False  False", "j                q     False  False", "j                r     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_dt.is_quarter_end()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.is_quarter_end().to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     False  False", "i                q     True   True", "i                r     True   True", "j                p     False  False", "j                q     True   True", "j                r     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_dt.is_quarter_start()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.is_quarter_start().to_frame()", "<Frame>", "<Index>                a      b      <<U1>", "<IndexHierarchy>", "i                p     True   True", "i                q     False  False", "i                r     False  False", "j                p     True   True", "j                q     False  False", "j                r     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_dt.timetuple()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.timetuple().to_frame()", "<Frame>", "<Index>                a                    b                    <<U1>", "<IndexHierarchy>", "i                p     time.struct_time(... time.struct_time(...", "i                q     time.struct_time(... time.struct_time(...", "i                r     time.struct_time(... time.struct_time(...", "j                p     time.struct_time(... time.struct_time(...", "j                q     time.struct_time(... time.struct_time(...", "j                r     time.struct_time(... time.struct_time(...", "<<U1>            <<U1> <object>             <object>"], "Batch.via_dt.isoformat()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.isoformat().to_frame()", "<Frame>", "<Index>                a          b          <<U1>", "<IndexHierarchy>", "i                p     1517-04-01 2022-04-01", "i                q     1517-12-31 2021-12-31", "i                r     1517-06-30 2022-06-30", "j                p     1620-04-01 1976-04-01", "j                q     1620-12-31 1954-12-31", "j                r     1620-06-30 1976-06-30", "<<U1>            <<U1> <<U10>     <<U10>"], "Batch.via_dt.fromisoformat()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'))), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b')))))", ">>> bt.via_dt.fromisoformat().to_frame()", "<Frame>", "<Index>                a          b          <<U1>", "<IndexHierarchy>", "i                p     1517-04-01 2022-04-01", "i                q     1517-12-31 2021-12-31", "i                r     1517-06-30 2022-06-30", "j                p     1620-04-01 1976-04-01", "j                q     1620-12-31 1954-12-31", "j                r     1620-06-30 1976-06-30", "<<U1>            <<U1> <object>   <object>"], "Batch.via_dt.strftime()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('1517-04-01', '1517-12-31', '1517-06-30'), ('2022-04-01', '2021-12-31', '2022-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64)), ('j', sf.Frame.from_fields((('1620-04-01', '1620-12-31', '1620-06-30'), ('1976-04-01', '1954-12-31', '1976-06-30')), index=('p', 'q', 'r'), columns=('a', 'b'), dtypes=np.datetime64))))", ">>> bt.via_dt.strftime(\"%A | %B\").to_frame()", "<Frame>", "<Index>                a                   b                 <<U1>", "<IndexHierarchy>", "i                p     Sunday | April      Friday | April", "i                q     Monday | December   Friday | December", "i                r     Saturday | June     Thursday | June", "j                p     Wednesday | April   Thursday | April", "j                q     Thursday | December Friday | December", "j                r     Tuesday | June      Wednesday | June", "<<U1>            <<U1> <<U19>              <<U17>"], "Batch.via_dt.strptime()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))), ('j', sf.Frame.from_fields((('4/1/1620', '12/31/1620', '6/30/1620'), ('4/1/1976', '12/31/1954', '6/30/1976')), index=('p', 'q', 'r'), columns=('a', 'b')))))", ">>> bt.via_dt.strptime(\"%m/%d/%Y\").to_frame()", "<Frame>", "<Index>                a                   b                   <<U1>", "<IndexHierarchy>", "i                p     1517-04-01 00:00:00 2022-04-01 00:00:00", "i                q     1517-12-31 00:00:00 2021-12-31 00:00:00", "i                r     1517-06-30 00:00:00 2022-06-30 00:00:00", "j                p     1620-04-01 00:00:00 1976-04-01 00:00:00", "j                q     1620-12-31 00:00:00 1954-12-31 00:00:00", "j                r     1620-06-30 00:00:00 1976-06-30 00:00:00", "<<U1>            <<U1> <object>            <object>"], "Batch.via_dt.strpdate()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields((('4/1/1517', '12/31/1517', '6/30/1517'), ('4/1/2022', '12/31/2021', '6/30/2022')), index=('p', 'q', 'r'), columns=('a', 'b'))), ('j', sf.Frame.from_fields((('4/1/1620', '12/31/1620', '6/30/1620'), ('4/1/1976', '12/31/1954', '6/30/1976')), index=('p', 'q', 'r'), columns=('a', 'b')))))", ">>> bt.via_dt.strpdate(\"%m/%d/%Y\").to_frame()", "<Frame>", "<Index>                a          b          <<U1>", "<IndexHierarchy>", "i                p     1517-04-01 2022-04-01", "i                q     1517-12-31 2021-12-31", "i                r     1517-06-30 2022-06-30", "j                p     1620-04-01 1976-04-01", "j                q     1620-12-31 1954-12-31", "j                r     1620-06-30 1976-06-30", "<<U1>            <<U1> <object>   <object>"], "Batch.via_str.__getitem__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str[-1].to_frame()", "<Frame>", "<Index>                   a     b     c        <<U1>", "<IndexHierarchy>", "i                0        0           1", "i                1        2     Z     1", "i                2        8     3     1", "i                3        3           0", "j                p        0           nan", "j                q        2     Z     nan", "j                r        8     3     nan", "j                s        3           nan", "<<U1>            <object> <<U1> <<U1> <object>"], "Batch.via_str.capitalize()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.capitalize().to_frame()", "<Frame>", "<Index>                   a      b     c          <<U1>", "<IndexHierarchy>", "i                0        10     Qrs   1517-01-01", "i                1        2      Xyz   1517-04-01", "i                2        8      123   1517-12-31", "i                3        3       wx   1517-06-30", "j                p        10     Qrs   nan", "j                q        2      Xyz   nan", "j                r        8      123   nan", "j                s        3       wx   nan", "<<U1>            <object> <<U21> <<U4> <object>"], "Batch.via_str.center()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.center(8).to_frame()", "<Frame>", "<Index>                   a        b        c        <<U1>", "<IndexHierarchy>", "i                0           10      qrs    1517-01-", "i                1           2       XYZ    1517-04-", "i                2           8       123    1517-12-", "i                3           3        wX    1517-06-", "j                p           10      qrs    nan", "j                q           2       XYZ    nan", "j                r           8       123    nan", "j                s           3        wX    nan", "<<U1>            <object> <<U8>    <<U8>    <object>"], "Batch.via_str.contains()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.contains('X').to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                0        False  False  False", "i                1        False  True   False", "i                2        False  False  False", "i                3        False  True   False", "j                p        False  False  nan", "j                q        False  True   nan", "j                r        False  False  nan", "j                s        False  True   nan", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_str.count()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.count('X').to_frame()", "<Frame>", "<Index>                   a       b       c         <<U1>", "<IndexHierarchy>", "i                0        0       0       0.0", "i                1        0       1       0.0", "i                2        0       0       0.0", "i                3        0       1       0.0", "j                p        0       0       nan", "j                q        0       1       nan", "j                r        0       0       nan", "j                s        0       1       nan", "<<U1>            <object> <int64> <int64> <float64>"], "Batch.via_str.decode()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x')))).astype(bytes)", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.decode().to_frame()", "<Frame>", "<Index>                   a     b     c          <<U1>", "<IndexHierarchy>", "i                0        10    qrs   1517-01-01", "i                1        2     XYZ   1517-04-01", "i                2        8     123   1517-12-31", "i                3        3      wX   1517-06-30", "j                p        10    qrs   nan", "j                q        2     XYZ   nan", "j                r        8     123   nan", "j                s        3      wX   nan", "<<U1>            <object> <<U2> <<U4> <object>"], "Batch.via_str.encode()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.encode().to_frame()", "<Frame>", "<Index>                   a     b       c             <<U1>", "<IndexHierarchy>", "i                0        b'10' b'qrs ' b'1517-01-01'", "i                1        b'2'  b'XYZ'  b'1517-04-01'", "i                2        b'8'  b'123'  b'1517-12-31'", "i                3        b'3'  b' wX ' b'1517-06-30'", "j                p        b'10' b'qrs ' nan", "j                q        b'2'  b'XYZ'  nan", "j                r        b'8'  b'123'  nan", "j                s        b'3'  b' wX ' nan", "<<U1>            <object> <|S2> <|S4>   <object>"], "Batch.via_str.endswith()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.endswith(' ').to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                0        False  True   False", "i                1        False  False  False", "i                2        False  False  False", "i                3        False  True   False", "j                p        False  True   nan", "j                q        False  False  nan", "j                r        False  False  nan", "j                s        False  True   nan", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_str.find()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.find('X').to_frame()", "<Frame>", "<Index>                   a       b       c         <<U1>", "<IndexHierarchy>", "i                0        -1      -1      -1.0", "i                1        -1      0       -1.0", "i                2        -1      -1      -1.0", "i                3        -1      2       -1.0", "j                p        -1      -1      nan", "j                q        -1      0       nan", "j                r        -1      -1      nan", "j                s        -1      2       nan", "<<U1>            <object> <int64> <int64> <float64>"], "Batch.via_str.format()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.format('{:-^10}').to_frame()", "<Frame>", "<Index>                   a          b          c          <<U1>", "<IndexHierarchy>", "i                0        ----10---- ---qrs --- 1517-01-01", "i                1        ----2----- ---XYZ---- 1517-04-01", "i                2        ----8----- ---123---- 1517-12-31", "i                3        ----3----- --- wX --- 1517-06-30", "j                p        ----10---- ---qrs --- nan", "j                q        ----2----- ---XYZ---- nan", "j                r        ----8----- ---123---- nan", "j                s        ----3----- --- wX --- nan", "<<U1>            <object> <<U10>     <<U10>     <object>"], "Batch.via_str.index()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.index('X').to_frame()", "ValueError('substring not found')"], "Batch.via_str.isalnum()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.isalnum().to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                0        True   False  False", "i                1        True   True   False", "i                2        True   True   False", "i                3        True   False  False", "j                p        True   False  nan", "j                q        True   True   nan", "j                r        True   True   nan", "j                s        True   False  nan", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_str.isalpha()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.isalpha().to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                0        False  False  False", "i                1        False  True   False", "i                2        False  False  False", "i                3        False  False  False", "j                p        False  False  nan", "j                q        False  True   nan", "j                r        False  False  nan", "j                s        False  False  nan", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_str.isdecimal()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.isdecimal().to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                0        True   False  False", "i                1        True   False  False", "i                2        True   True   False", "i                3        True   False  False", "j                p        True   False  nan", "j                q        True   False  nan", "j                r        True   True   nan", "j                s        True   False  nan", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_str.isdigit()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.isdigit().to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                0        True   False  False", "i                1        True   False  False", "i                2        True   True   False", "i                3        True   False  False", "j                p        True   False  nan", "j                q        True   False  nan", "j                r        True   True   nan", "j                s        True   False  nan", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_str.islower()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.islower().to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                0        False  True   False", "i                1        False  False  False", "i                2        False  False  False", "i                3        False  False  False", "j                p        False  True   nan", "j                q        False  False  nan", "j                r        False  False  nan", "j                s        False  False  nan", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_str.isnumeric()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.isnumeric().to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                0        True   False  False", "i                1        True   False  False", "i                2        True   True   False", "i                3        True   False  False", "j                p        True   False  nan", "j                q        True   False  nan", "j                r        True   True   nan", "j                s        True   False  nan", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_str.isspace()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.isspace().to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                0        False  False  False", "i                1        False  False  False", "i                2        False  False  False", "i                3        False  False  False", "j                p        False  False  nan", "j                q        False  False  nan", "j                r        False  False  nan", "j                s        False  False  nan", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_str.istitle()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.istitle().to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                0        False  False  False", "i                1        False  False  False", "i                2        False  False  False", "i                3        False  False  False", "j                p        False  False  nan", "j                q        False  False  nan", "j                r        False  False  nan", "j                s        False  False  nan", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_str.isupper()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.isupper().to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                0        False  False  False", "i                1        False  True   False", "i                2        False  False  False", "i                3        False  False  False", "j                p        False  False  nan", "j                q        False  True   nan", "j                r        False  False  nan", "j                s        False  False  nan", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_str.ljust()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.ljust(8).to_frame()", "<Frame>", "<Index>                   a        b        c        <<U1>", "<IndexHierarchy>", "i                0        10       qrs      1517-01-", "i                1        2        XYZ      1517-04-", "i                2        8        123      1517-12-", "i                3        3         wX      1517-06-", "j                p        10       qrs      nan", "j                q        2        XYZ      nan", "j                r        8        123      nan", "j                s        3         wX      nan", "<<U1>            <object> <<U8>    <<U8>    <object>"], "Batch.via_str.len()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.len().to_frame()", "<Frame>", "<Index>                   a       b       c         <<U1>", "<IndexHierarchy>", "i                0        2       4       10.0", "i                1        1       3       10.0", "i                2        1       3       10.0", "i                3        1       4       10.0", "j                p        2       4       nan", "j                q        1       3       nan", "j                r        1       3       nan", "j                s        1       4       nan", "<<U1>            <object> <int64> <int64> <float64>"], "Batch.via_str.lower()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.lower().to_frame()", "<Frame>", "<Index>                   a      b     c          <<U1>", "<IndexHierarchy>", "i                0        10     qrs   1517-01-01", "i                1        2      xyz   1517-04-01", "i                2        8      123   1517-12-31", "i                3        3       wx   1517-06-30", "j                p        10     qrs   nan", "j                q        2      xyz   nan", "j                r        8      123   nan", "j                s        3       wx   nan", "<<U1>            <object> <<U21> <<U4> <object>"], "Batch.via_str.lstrip()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.lstrip().to_frame()", "<Frame>", "<Index>                   a      b     c          <<U1>", "<IndexHierarchy>", "i                0        10     qrs   1517-01-01", "i                1        2      XYZ   1517-04-01", "i                2        8      123   1517-12-31", "i                3        3      wX    1517-06-30", "j                p        10     qrs   nan", "j                q        2      XYZ   nan", "j                r        8      123   nan", "j                s        3      wX    nan", "<<U1>            <object> <<U21> <<U4> <object>"], "Batch.via_str.partition()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.partition('X').to_frame()", "<Frame>", "<Index>                   a              b                c                    <<U1>", "<IndexHierarchy>", "i                0        ('10', '', '') ('qrs ', '', '') ('1517-01-01', ''...", "i                1        ('2', '', '')  ('', 'X', 'YZ')  ('1517-04-01', ''...", "i                2        ('8', '', '')  ('123', '', '')  ('1517-12-31', ''...", "i                3        ('3', '', '')  (' w', 'X', ' ') ('1517-06-30', ''...", "j                p        ('10', '', '') ('qrs ', '', '') nan", "j                q        ('2', '', '')  ('', 'X', 'YZ')  nan", "j                r        ('8', '', '')  ('123', '', '')  nan", "j                s        ('3', '', '')  (' w', 'X', ' ') nan", "<<U1>            <object> <object>       <object>         <object>"], "Batch.via_str.replace()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.replace('X', '*').to_frame()", "<Frame>", "<Index>                   a     b     c          <<U1>", "<IndexHierarchy>", "i                0        10    qrs   1517-01-01", "i                1        2     *YZ   1517-04-01", "i                2        8     123   1517-12-31", "i                3        3      w*   1517-06-30", "j                p        10    qrs   nan", "j                q        2     *YZ   nan", "j                r        8     123   nan", "j                s        3      w*   nan", "<<U1>            <object> <<U2> <<U4> <object>"], "Batch.via_str.rfind()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.rfind('X').to_frame()", "<Frame>", "<Index>                   a       b       c         <<U1>", "<IndexHierarchy>", "i                0        -1      -1      -1.0", "i                1        -1      0       -1.0", "i                2        -1      -1      -1.0", "i                3        -1      2       -1.0", "j                p        -1      -1      nan", "j                q        -1      0       nan", "j                r        -1      -1      nan", "j                s        -1      2       nan", "<<U1>            <object> <int64> <int64> <float64>"], "Batch.via_str.rindex()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.rindex('X').to_frame()", "ValueError('substring not found')"], "Batch.via_str.rjust()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.rjust(8).to_frame()", "<Frame>", "<Index>                   a        b        c        <<U1>", "<IndexHierarchy>", "i                0              10     qrs  1517-01-", "i                1               2      XYZ 1517-04-", "i                2               8      123 1517-12-", "i                3               3      wX  1517-06-", "j                p              10     qrs  nan", "j                q               2      XYZ nan", "j                r               8      123 nan", "j                s               3      wX  nan", "<<U1>            <object> <<U8>    <<U8>    <object>"], "Batch.via_str.rpartition()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.rpartition('X').to_frame()", "<Frame>", "<Index>                   a              b                c                    <<U1>", "<IndexHierarchy>", "i                0        ('', '', '10') ('', '', 'qrs ') ('', '', '1517-01...", "i                1        ('', '', '2')  ('', 'X', 'YZ')  ('', '', '1517-04...", "i                2        ('', '', '8')  ('', '', '123')  ('', '', '1517-12...", "i                3        ('', '', '3')  (' w', 'X', ' ') ('', '', '1517-06...", "j                p        ('', '', '10') ('', '', 'qrs ') nan", "j                q        ('', '', '2')  ('', 'X', 'YZ')  nan", "j                r        ('', '', '8')  ('', '', '123')  nan", "j                s        ('', '', '3')  (' w', 'X', ' ') nan", "<<U1>            <object> <object>       <object>         <object>"], "Batch.via_str.rsplit()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.rsplit('X').to_frame()", "<Frame>", "<Index>                   a        b           c               <<U1>", "<IndexHierarchy>", "i                0        ('10',)  ('qrs ',)   ('1517-01-01',)", "i                1        ('2',)   ('', 'YZ')  ('1517-04-01',)", "i                2        ('8',)   ('123',)    ('1517-12-31',)", "i                3        ('3',)   (' w', ' ') ('1517-06-30',)", "j                p        ('10',)  ('qrs ',)   nan", "j                q        ('2',)   ('', 'YZ')  nan", "j                r        ('8',)   ('123',)    nan", "j                s        ('3',)   (' w', ' ') nan", "<<U1>            <object> <object> <object>    <object>"], "Batch.via_str.rstrip()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.rstrip().to_frame()", "<Frame>", "<Index>                   a      b     c          <<U1>", "<IndexHierarchy>", "i                0        10     qrs   1517-01-01", "i                1        2      XYZ   1517-04-01", "i                2        8      123   1517-12-31", "i                3        3       wX   1517-06-30", "j                p        10     qrs   nan", "j                q        2      XYZ   nan", "j                r        8      123   nan", "j                s        3       wX   nan", "<<U1>            <object> <<U21> <<U4> <object>"], "Batch.via_str.split()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.split('X').to_frame()", "<Frame>", "<Index>                   a        b           c               <<U1>", "<IndexHierarchy>", "i                0        ('10',)  ('qrs ',)   ('1517-01-01',)", "i                1        ('2',)   ('', 'YZ')  ('1517-04-01',)", "i                2        ('8',)   ('123',)    ('1517-12-31',)", "i                3        ('3',)   (' w', ' ') ('1517-06-30',)", "j                p        ('10',)  ('qrs ',)   nan", "j                q        ('2',)   ('', 'YZ')  nan", "j                r        ('8',)   ('123',)    nan", "j                s        ('3',)   (' w', ' ') nan", "<<U1>            <object> <object> <object>    <object>"], "Batch.via_str.startswith()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.startswith('X').to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                0        False  False  False", "i                1        False  True   False", "i                2        False  False  False", "i                3        False  False  False", "j                p        False  False  nan", "j                q        False  True   nan", "j                r        False  False  nan", "j                s        False  False  nan", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_str.strip()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.strip().to_frame()", "<Frame>", "<Index>                   a      b     c          <<U1>", "<IndexHierarchy>", "i                0        10     qrs   1517-01-01", "i                1        2      XYZ   1517-04-01", "i                2        8      123   1517-12-31", "i                3        3      wX    1517-06-30", "j                p        10     qrs   nan", "j                q        2      XYZ   nan", "j                r        8      123   nan", "j                s        3      wX    nan", "<<U1>            <object> <<U21> <<U4> <object>"], "Batch.via_str.swapcase()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.swapcase().to_frame()", "<Frame>", "<Index>                   a      b     c          <<U1>", "<IndexHierarchy>", "i                0        10     QRS   1517-01-01", "i                1        2      xyz   1517-04-01", "i                2        8      123   1517-12-31", "i                3        3       Wx   1517-06-30", "j                p        10     QRS   nan", "j                q        2      xyz   nan", "j                r        8      123   nan", "j                s        3       Wx   nan", "<<U1>            <object> <<U21> <<U4> <object>"], "Batch.via_str.title()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.title().to_frame()", "<Frame>", "<Index>                   a      b     c          <<U1>", "<IndexHierarchy>", "i                0        10     Qrs   1517-01-01", "i                1        2      Xyz   1517-04-01", "i                2        8      123   1517-12-31", "i                3        3       Wx   1517-06-30", "j                p        10     Qrs   nan", "j                q        2      Xyz   nan", "j                r        8      123   nan", "j                s        3       Wx   nan", "<<U1>            <object> <<U21> <<U4> <object>"], "Batch.via_str.upper()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.upper().to_frame()", "<Frame>", "<Index>                   a      b     c          <<U1>", "<IndexHierarchy>", "i                0        10     QRS   1517-01-01", "i                1        2      XYZ   1517-04-01", "i                2        8      123   1517-12-31", "i                3        3       WX   1517-06-30", "j                p        10     QRS   nan", "j                q        2      XYZ   nan", "j                r        8      123   nan", "j                s        3       WX   nan", "<<U1>            <object> <<U21> <<U4> <object>"], "Batch.via_str.zfill()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_str.zfill(8).to_frame()", "<Frame>", "<Index>                   a        b        c        <<U1>", "<IndexHierarchy>", "i                0        00000010 0000qrs  1517-01-", "i                1        00000002 00000XYZ 1517-04-", "i                2        00000008 00000123 1517-12-", "i                3        00000003 0000 wX  1517-06-", "j                p        00000010 0000qrs  nan", "j                q        00000002 00000XYZ nan", "j                r        00000008 00000123 nan", "j                s        00000003 0000 wX  nan", "<<U1>            <object> <<U8>    <<U8>    <object>"], "Batch.via_T.via_fill_value()": [">>> "], "Batch.via_T.__add__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T + s).to_frame()", "<Frame>", "<Index>                a         b         c         <<U1>", "<IndexHierarchy>", "i                p     10.0      8.0       1.0", "i                q     -4.0      -5.0      -2.0", "i                r     0.5       8.5       9.5", "i                s     1.0       1.0       13.0", "j                p     1.0       2.0       1.0", "j                q     0.0       -1.0      -2.0", "j                r     0.5       2.5       2.5", "j                s     1.0       1.0       2.0", "<<U1>            <<U1> <float64> <float64> <float64>"], "Batch.via_T.__sub__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T - s).to_frame()", "<Frame>", "<Index>                a         b         c         <<U1>", "<IndexHierarchy>", "i                p     10.0      8.0       1.0", "i                q     0.0       -1.0      2.0", "i                r     -0.5      7.5       8.5", "i                s     -1.0      -1.0      11.0", "j                p     1.0       2.0       1.0", "j                q     4.0       3.0       2.0", "j                r     -0.5      1.5       1.5", "j                s     -1.0      -1.0      0.0", "<<U1>            <<U1> <float64> <float64> <float64>"], "Batch.via_T.__mul__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T * s).to_frame()", "<Frame>", "<Index>                a         b         c         <<U1>", "<IndexHierarchy>", "i                p     0.0       0.0       0.0", "i                q     4.0       6.0       -0.0", "i                r     0.0       4.0       4.5", "i                s     0.0       0.0       12.0", "j                p     0.0       0.0       0.0", "j                q     -4.0      -2.0      -0.0", "j                r     0.0       1.0       1.0", "j                s     0.0       0.0       1.0", "<<U1>            <<U1> <float64> <float64> <float64>"], "Batch.via_T.__truediv__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T / s).to_frame()", "<Frame>", "<Index>                a         b         c         <<U1>", "<IndexHierarchy>", "i                p     inf       inf       inf", "i                q     1.0       1.5       -0.0", "i                r     0.0       16.0      18.0", "i                s     0.0       0.0       12.0", "j                p     inf       inf       inf", "j                q     -1.0      -0.5      -0.0", "j                r     0.0       4.0       4.0", "j                s     0.0       0.0       1.0", "<<U1>            <<U1> <float64> <float64> <float64>"], "Batch.via_T.__floordiv__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T // s).to_frame()", "<Frame>", "<Index>                a         b         c         <<U1>", "<IndexHierarchy>", "i                p     inf       inf       inf", "i                q     1.0       1.0       -0.0", "i                r     0.0       16.0      18.0", "i                s     0.0       0.0       12.0", "j                p     inf       inf       inf", "j                q     -1.0      -1.0      -0.0", "j                r     0.0       4.0       4.0", "j                s     0.0       0.0       1.0", "<<U1>            <<U1> <float64> <float64> <float64>"], "Batch.via_T.__mod__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T % s).to_frame()", "<Frame>", "<Index>                a         b         c         <<U1>", "<IndexHierarchy>", "i                p     nan       nan       nan", "i                q     -0.0      -1.0      -0.0", "i                r     0.0       0.0       0.0", "i                s     0.0       0.0       0.0", "j                p     nan       nan       nan", "j                q     -0.0      -1.0      -0.0", "j                r     0.0       0.0       0.0", "j                s     0.0       0.0       0.0", "<<U1>            <<U1> <float64> <float64> <float64>"], "Batch.via_T.__pow__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T ** s).to_frame()", "<Frame>", "<Index>                a         b                  c                  <<U1>", "<IndexHierarchy>", "i                p     1.0       1.0                1.0", "i                q     0.25      0.1111111111111111 inf", "i                r     0.0       2.8284271247461903 3.0", "i                s     0.0       0.0                12.0", "j                p     1.0       1.0                1.0", "j                q     0.25      1.0                inf", "j                r     0.0       1.4142135623730951 1.4142135623730951", "j                s     0.0       0.0                1.0", "<<U1>            <<U1> <float64> <float64>          <float64>"], "Batch.via_T.__lshift__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T << s).to_frame()", "<Frame>", "<Index>                a       b       c       <<U1>", "<IndexHierarchy>", "i                p     10      8       1", "i                q     0       0       0", "i                r     0       64      72", "i                s     0       0       24", "j                p     1       2       1", "j                q     0       0       0", "j                r     0       16      16", "j                s     0       0       2", "<<U1>            <<U1> <int64> <int64> <int64>"], "Batch.via_T.__rshift__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 3, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T >> s).to_frame()", "<Frame>", "<Index>                a       b       c       <<U1>", "<IndexHierarchy>", "i                p     10      8       1", "i                q     -1      -1      0", "i                r     0       1       1", "i                s     0       0       6", "j                p     1       2       1", "j                q     0       0       0", "j                r     0       0       0", "j                s     0       0       0", "<<U1>            <<U1> <int64> <int64> <int64>"], "Batch.via_T.__and__()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> (bt.via_T & s).to_frame()", "<Frame>", "<Index>                c      d      <<U1>", "<IndexHierarchy>", "i                p     False  False", "i                q     False  True", "i                r     False  True", "j                p     False  False", "j                q     True   False", "j                r     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_T.__xor__()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> (bt.via_T ^ s).to_frame()", "<Frame>", "<Index>                c      d      <<U1>", "<IndexHierarchy>", "i                p     False  True", "i                q     True   False", "i                r     True   False", "j                p     False  True", "j                q     False  True", "j                r     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_T.__or__()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> s = sf.Series((False, True, True), index=('p', 'q', 'r'))", ">>> (bt.via_T | s).to_frame()", "<Frame>", "<Index>                c      d      <<U1>", "<IndexHierarchy>", "i                p     False  True", "i                q     True   True", "i                r     True   True", "j                p     False  True", "j                q     True   True", "j                r     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_T.__lt__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T < s).to_frame()", "<Frame>", "<Index>                a      b      c      <<U1>", "<IndexHierarchy>", "i                p     False  False  False", "i                q     False  True   False", "i                r     True   False  False", "i                s     True   True   False", "j                p     False  False  False", "j                q     False  False  False", "j                r     True   False  False", "j                s     True   True   False", "<<U1>            <<U1> <bool> <bool> <bool>"], "Batch.via_T.__le__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T <= s).to_frame()", "<Frame>", "<Index>                a      b      c      <<U1>", "<IndexHierarchy>", "i                p     False  False  False", "i                q     True   True   False", "i                r     True   False  False", "i                s     True   True   False", "j                p     False  False  False", "j                q     False  False  False", "j                r     True   False  False", "j                s     True   True   True", "<<U1>            <<U1> <bool> <bool> <bool>"], "Batch.via_T.__eq__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T == s).to_frame()", "<Frame>", "<Index>                a      b      c      <<U1>", "<IndexHierarchy>", "i                p     False  False  False", "i                q     True   False  False", "i                r     False  False  False", "i                s     False  False  False", "j                p     False  False  False", "j                q     False  False  False", "j                r     False  False  False", "j                s     False  False  True", "<<U1>            <<U1> <bool> <bool> <bool>"], "Batch.via_T.__ne__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T != s).to_frame()", "<Frame>", "<Index>                a      b      c      <<U1>", "<IndexHierarchy>", "i                p     True   True   True", "i                q     False  True   True", "i                r     True   True   True", "i                s     True   True   True", "j                p     True   True   True", "j                q     True   True   True", "j                r     True   True   True", "j                s     True   True   False", "<<U1>            <<U1> <bool> <bool> <bool>"], "Batch.via_T.__gt__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T > s).to_frame()", "<Frame>", "<Index>                a      b      c      <<U1>", "<IndexHierarchy>", "i                p     True   True   True", "i                q     False  False  True", "i                r     False  True   True", "i                s     False  False  True", "j                p     True   True   True", "j                q     True   True   True", "j                r     False  True   True", "j                s     False  False  False", "<<U1>            <<U1> <bool> <bool> <bool>"], "Batch.via_T.__ge__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T >= s).to_frame()", "<Frame>", "<Index>                a      b      c      <<U1>", "<IndexHierarchy>", "i                p     True   True   True", "i                q     True   False  True", "i                r     False  True   True", "i                s     False  False  True", "j                p     True   True   True", "j                q     True   True   True", "j                r     False  True   True", "j                s     False  False  True", "<<U1>            <<U1> <bool> <bool> <bool>"], "Batch.via_T.__radd__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T + s).to_frame()", "<Frame>", "<Index>                a         b         c         <<U1>", "<IndexHierarchy>", "i                p     10.0      8.0       1.0", "i                q     -4.0      -5.0      -2.0", "i                r     0.5       8.5       9.5", "i                s     1.0       1.0       13.0", "j                p     1.0       2.0       1.0", "j                q     0.0       -1.0      -2.0", "j                r     0.5       2.5       2.5", "j                s     1.0       1.0       2.0", "<<U1>            <<U1> <float64> <float64> <float64>"], "Batch.via_T.__rsub__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T - s).to_frame()", "<Frame>", "<Index>                a         b         c         <<U1>", "<IndexHierarchy>", "i                p     10.0      8.0       1.0", "i                q     0.0       -1.0      2.0", "i                r     -0.5      7.5       8.5", "i                s     -1.0      -1.0      11.0", "j                p     1.0       2.0       1.0", "j                q     4.0       3.0       2.0", "j                r     -0.5      1.5       1.5", "j                s     -1.0      -1.0      0.0", "<<U1>            <<U1> <float64> <float64> <float64>"], "Batch.via_T.__rmul__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T * s).to_frame()", "<Frame>", "<Index>                a         b         c         <<U1>", "<IndexHierarchy>", "i                p     0.0       0.0       0.0", "i                q     4.0       6.0       -0.0", "i                r     0.0       4.0       4.5", "i                s     0.0       0.0       12.0", "j                p     0.0       0.0       0.0", "j                q     -4.0      -2.0      -0.0", "j                r     0.0       1.0       1.0", "j                s     0.0       0.0       1.0", "<<U1>            <<U1> <float64> <float64> <float64>"], "Batch.via_T.__rtruediv__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T / s).to_frame()", "<Frame>", "<Index>                a         b         c         <<U1>", "<IndexHierarchy>", "i                p     inf       inf       inf", "i                q     1.0       1.5       -0.0", "i                r     0.0       16.0      18.0", "i                s     0.0       0.0       12.0", "j                p     inf       inf       inf", "j                q     -1.0      -0.5      -0.0", "j                r     0.0       4.0       4.0", "j                s     0.0       0.0       1.0", "<<U1>            <<U1> <float64> <float64> <float64>"], "Batch.via_T.__rfloordiv__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, -2, 0, 0), (8, -3, 8, 0), (1, 0, 9, 12)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x')), ('j', sf.Frame.from_fields(((1, 2, 0, 0), (2, 1, 2, 0), (1, 0, 2, 1)), index=('p', 'q', 'r', 's'), columns=('a', 'b', 'c'), name='x'))))", ">>> s = sf.Series((0, -2, 0.5, 1), index=('p', 'q', 'r', 's'))", ">>> (bt.via_T // s).to_frame()", "<Frame>", "<Index>                a         b         c         <<U1>", "<IndexHierarchy>", "i                p     inf       inf       inf", "i                q     1.0       1.0       -0.0", "i                r     0.0       16.0      18.0", "i                s     0.0       0.0       12.0", "j                p     inf       inf       inf", "j                q     -1.0      -1.0      -0.0", "j                r     0.0       4.0       4.0", "j                s     0.0       0.0       1.0", "<<U1>            <<U1> <float64> <float64> <float64>"], "Batch.via_fill_value().loc": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> bt.via_fill_value(-1).loc[['a', 'b', 'd']].to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                a     -1      -1", "i                b     2       3", "i                d     -1      -1", "j                a     -1      -1", "j                b     0       2", "j                d     -1      -1", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().__getitem__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> bt.via_fill_value(-1)[['z', 'x']].to_frame()", "<Frame>", "<Index>                z       x       <<U1>", "<IndexHierarchy>", "i                b     -1      2", "i                c     -1      4", "j                b     -1      0", "j                c     -1      1", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().via_T": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> s = sf.Series((2, 8, 19), index=('b', 'c', 'd'))", ">>> (bt.via_fill_value(-1).via_T * s).to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                b     4       6", "i                c     32      112", "i                d     -19     -19", "j                b     0       4", "j                c     8       8", "j                d     -19     -19", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().__add__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) + f).to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                a     3       2", "i                b     2       3", "i                c     24      26", "j                a     3       2", "j                b     0       2", "j                c     21      13", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().__sub__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) - f).to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                a     -3      -2", "i                b     2       3", "i                c     -16     2", "j                a     -3      -2", "j                b     0       2", "j                c     -19     -11", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().__mul__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) * f).to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                a     0       0", "i                b     0       0", "i                c     80      168", "j                a     0       0", "j                b     0       0", "j                c     20      12", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().__truediv__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) / f).to_frame()", "<Frame>", "<Index>                x         y                   <<U1>", "<IndexHierarchy>", "i                a     0.0       0.0", "i                b     inf       inf", "i                c     0.2       1.1666666666666667", "j                a     0.0       0.0", "j                b     nan       inf", "j                c     0.05      0.08333333333333333", "<<U1>            <<U1> <float64> <float64>"], "Batch.via_fill_value().__floordiv__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) // f).to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                a     0       0", "i                b     0       0", "i                c     0       1", "j                a     0       0", "j                b     0       0", "j                c     0       0", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().__mod__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) % f).to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                a     0       0", "i                b     0       0", "i                c     4       2", "j                a     0       0", "j                b     0       0", "j                c     1       1", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().__pow__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) ** f).to_frame()", "<Frame>", "<Index>                x             y              <<U1>", "<IndexHierarchy>", "i                a     0             0", "i                b     1             1", "i                c     1099511627776 56693912375296", "j                a     0             0", "j                b     1             1", "j                c     1             1", "<<U1>            <<U1> <int64>       <int64>"], "Batch.via_fill_value().__lshift__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) << f).to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                b     2       12", "i                c     8       28", "j                b     0       8", "j                c     2       2", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().__rshift__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) >> f).to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                b     2       0", "i                c     2       7", "j                b     0       0", "j                c     0       0", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().__and__()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> (bt.via_fill_value(False) & f).to_frame()", "<Frame>", "<Index>                a      b      c      d      <<U1>", "<IndexHierarchy>", "i                p     False  False  False  False", "i                q     False  False  False  False", "i                r     False  False  False  False", "j                p     False  False  False  False", "j                q     False  False  False  False", "j                r     False  False  False  False", "<<U1>            <<U1> <bool> <bool> <bool> <bool>"], "Batch.via_fill_value().__xor__()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> (bt.via_fill_value(False) ^ f).to_frame()", "<Frame>", "<Index>                a      b      c      d      <<U1>", "<IndexHierarchy>", "i                p     False  True   False  True", "i                q     True   True   False  True", "i                r     True   False  False  True", "j                p     False  True   False  True", "j                q     True   True   True   False", "j                r     True   False  True   True", "<<U1>            <<U1> <bool> <bool> <bool> <bool>"], "Batch.via_fill_value().__or__()": [">>> bt = sf.Batch((('i', sf.Frame((np.arange(6).reshape(3,2) % 2).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='y')), ('j', sf.Frame((np.arange(6).reshape(3,2) % 3).astype(bool), index=('p', 'q', 'r'), columns=('c', 'd'), name='w'))))", ">>> f = sf.Frame.from_fields(((False, True, True), (True, True, False)), columns=('a', 'b'), index=('p', 'q', 'r'), name='x')", ">>> (bt.via_fill_value(False) | f).to_frame()", "<Frame>", "<Index>                a      b      c      d      <<U1>", "<IndexHierarchy>", "i                p     False  True   False  True", "i                q     True   True   False  True", "i                r     True   False  False  True", "j                p     False  True   False  True", "j                q     True   True   True   False", "j                r     True   False  True   True", "<<U1>            <<U1> <bool> <bool> <bool> <bool>"], "Batch.via_fill_value().__lt__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) < f).to_frame()", "<Frame>", "<Index>                x      y      <<U1>", "<IndexHierarchy>", "i                a     True   True", "i                b     False  False", "i                c     True   False", "j                a     True   True", "j                b     False  False", "j                c     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_fill_value().__le__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) <= f).to_frame()", "<Frame>", "<Index>                x      y      <<U1>", "<IndexHierarchy>", "i                a     True   True", "i                b     False  False", "i                c     True   False", "j                a     True   True", "j                b     True   False", "j                c     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_fill_value().__eq__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) == f).to_frame()", "<Frame>", "<Index>                x      y      <<U1>", "<IndexHierarchy>", "i                a     False  False", "i                b     False  False", "i                c     False  False", "j                a     False  False", "j                b     True   False", "j                c     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_fill_value().__ne__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) != f).to_frame()", "<Frame>", "<Index>                x      y      <<U1>", "<IndexHierarchy>", "i                a     True   True", "i                b     True   True", "i                c     True   True", "j                a     True   True", "j                b     False  True", "j                c     True   True", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_fill_value().__gt__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) > f).to_frame()", "<Frame>", "<Index>                x      y      <<U1>", "<IndexHierarchy>", "i                a     False  False", "i                b     True   True", "i                c     False  True", "j                a     False  False", "j                b     False  True", "j                c     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_fill_value().__ge__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (bt.via_fill_value(0) >= f).to_frame()", "<Frame>", "<Index>                x      y      <<U1>", "<IndexHierarchy>", "i                a     False  False", "i                b     True   True", "i                c     False  True", "j                a     False  False", "j                b     True   True", "j                c     False  False", "<<U1>            <<U1> <bool> <bool>"], "Batch.via_fill_value().__radd__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (f + bt.via_fill_value(0)).to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                a     3       2", "i                b     2       3", "i                c     24      26", "j                a     3       2", "j                b     0       2", "j                c     21      13", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().__rsub__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (f - bt.via_fill_value(0)).to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                a     3       2", "i                b     -2      -3", "i                c     16      -2", "j                a     3       2", "j                b     0       -2", "j                c     19      11", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().__rmul__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (f * bt.via_fill_value(0)).to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                a     0       0", "i                b     0       0", "i                c     80      168", "j                a     0       0", "j                b     0       0", "j                c     20      12", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_fill_value().__rtruediv__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (f / bt.via_fill_value(0)).to_frame()", "<Frame>", "<Index>                x         y                  <<U1>", "<IndexHierarchy>", "i                a     inf       inf", "i                b     0.0       0.0", "i                c     5.0       0.8571428571428571", "j                a     inf       inf", "j                b     nan       0.0", "j                c     20.0      12.0", "<<U1>            <<U1> <float64> <float64>"], "Batch.via_fill_value().__rfloordiv__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((2, 4), (3, 14)), index=('b', 'c'), columns=('x', 'y'), name='y')), ('j', sf.Frame.from_fields(((0, 1), (2, 1)), index=('b', 'c'), columns=('x', 'y'), name='y'))))", ">>> f = sf.Frame.from_fields(((3, 0, 20), (2, 0, 12)), index=('a', 'b', 'c'), columns=('x', 'y'), name='y')", ">>> (f // bt.via_fill_value(0)).to_frame()", "<Frame>", "<Index>                x       y       <<U1>", "<IndexHierarchy>", "i                a     0       0", "i                b     0       0", "i                c     5       0", "j                a     0       0", "j                b     0       0", "j                c     20      12", "<<U1>            <<U1> <int64> <int64>"], "Batch.via_re().search()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_re('[X123]').search().to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                p        False  True   nan", "i                q        True   True   nan", "i                r        False  False  nan", "j                0        True   False  True", "j                1        True   True   True", "j                2        False  False  False", "j                3        True   True   True", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_re().match()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_re('[X123]').match().to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                p        False  True   nan", "i                q        True   True   nan", "i                r        False  False  nan", "j                0        True   False  True", "j                1        True   True   True", "j                2        False  False  False", "j                3        True   True   True", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_re().fullmatch()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_re('123').fullmatch().to_frame()", "<Frame>", "<Index>                   a      b      c        <<U1>", "<IndexHierarchy>", "i                p        False  False  nan", "i                q        False  False  nan", "i                r        False  False  nan", "j                0        False  False  False", "j                1        False  False  False", "j                2        False  False  False", "j                3        False  True   False", "<<U1>            <object> <bool> <bool> <object>"], "Batch.via_re().split()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_re('[X123]').split().to_frame()", "<Frame>", "<Index>                   a           b                c                    <<U1>", "<IndexHierarchy>", "i                p        ('0',)      ('', '')         nan", "i                q        ('', '')    ('', '')         nan", "i                r        ('4',)      ('5',)           nan", "j                0        ('', '0.0') ('qrs ',)        ('', '5', '7-0', ...", "j                1        ('', '.0')  ('', 'YZ')       ('', '5', '7-04-0...", "j                2        ('nan',)    ('',)            ('NaT',)", "j                3        ('', '.0')  ('', '', '', '') ('', '5', '7-04-0...", "<<U1>            <object> <object>    <object>         <object>"], "Batch.via_re().findall()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_re('[X123]').findall().to_frame()", "<Frame>", "<Index>                   a        b               c                    <<U1>", "<IndexHierarchy>", "i                p        ()       ('1',)          nan", "i                q        ('2',)   ('3',)          nan", "i                r        ()       ()              nan", "j                0        ('1',)   ()              ('1', '1', '1', '1')", "j                1        ('2',)   ('X',)          ('1', '1', '1')", "j                2        ()       ()              ()", "j                3        ('2',)   ('1', '2', '3') ('1', '1', '1')", "<<U1>            <object> <object> <object>        <object>"], "Batch.via_re().sub()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_re('[X123]').sub('==').to_frame()", "<Frame>", "<Index>                   a     b      c              <<U1>", "<IndexHierarchy>", "i                p        0     ==     nan", "i                q        ==    ==     nan", "i                r        4     5      nan", "j                0        ==0.0 qrs    ==5==7-0==-0==", "j                1        ==.0  ==YZ   ==5==7-04-0==", "j                2        nan          NaT", "j                3        ==.0  ====== ==5==7-04-0==", "<<U1>            <object> <<U5> <<U6>  <object>"], "Batch.via_re().subn()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_re('[X123]').subn('==', 1).to_frame()", "<Frame>", "<Index>                   a            b           c                  <<U1>", "<IndexHierarchy>", "i                p        ('0', 0)     ('==', 1)   nan", "i                q        ('==', 1)    ('==', 1)   nan", "i                r        ('4', 0)     ('5', 0)    nan", "j                0        ('==0.0', 1) ('qrs ', 0) ('==517-01-01', 1)", "j                1        ('==.0', 1)  ('==YZ', 1) ('==517-04-01', 1)", "j                2        ('nan', 0)   ('', 0)     ('NaT', 0)", "j                3        ('==.0', 1)  ('==23', 1) ('==517-04-01', 1)", "<<U1>            <object> <object>     <object>    <object>"], "Batch.via_hashlib().to_bytes()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_hashlib(include_name=False).to_bytes()", "b'BusIndexi\\x00\\x00\\x00j\\x00\\x00\\x00FrameIndexp\\x00\\x00\\x00q\\x00\\x00\\x00r\\x00\\x00\\x00Indexa\\x00\\x00\\x00b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00FrameIndex\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00Indexa\\x00\\x00\\x00b\\x00\\x00\\x00c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00$@\\x00\\x00\\x00\\x00\\x00\\x00\\x00@\\x00\\x00\\x00\\x00\\x00\\x00\\xf8\\x7f\\x00\\x00\\x00\\x00\\x00\\x00\\x00@q\\x00\\x00\\x00r\\x00\\x00\\x00s\\x00\\x00\\x00 \\x00\\x00\\x00X\\x00\\x00\\x00Y\\x00\\x00\\x00Z\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x001\\x00\\x00\\x002\\x00\\x00\\x003\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xb1y\\xfd\\xff\\xff\\xff\\xff\\xff\\x0bz\\xfd\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x80\\x0bz\\xfd\\xff\\xff\\xff\\xff\\xff'"], "Batch.via_hashlib().md5()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_hashlib(include_name=False).md5().hexdigest()", "7ffd9d64534f2922387fb8269bef6c2d"], "Batch.via_hashlib().sha256()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_hashlib(include_name=False).sha256().hexdigest()", "200ee75f3ff5757f261104c3d6d2f61e7099f197624d10bf3e1c345f680f0f79"], "Batch.via_hashlib().sha512()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_hashlib(include_name=False).sha512().hexdigest()", "a51fcd0e400a660dc7564a288b3e55e8cc630709782f19bd6e0e15449e6168ea74f1e0c0380fd241bbbb276a269329a2c901774832a797e765d00332465aec54"], "Batch.via_hashlib().sha3_256()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_hashlib(include_name=False).sha3_256().hexdigest()", "256f8e85282857b3a4cfbd6f58b1de4aceac8b904cd5e02c171704e84fe7dc35"], "Batch.via_hashlib().sha3_512()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_hashlib(include_name=False).sha3_512().hexdigest()", "2a26bdf5a953fc106d2636e0d10fe61eccae71e24eb15191ea86a8789050e8e3dc4f50e6d938fe28a573b633a70c3be43a657b8b30de9509256c553aa8509f80"], "Batch.via_hashlib().shake_128()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_hashlib(include_name=False).shake_128().hexdigest(8)", "98266cfd62ebf881"], "Batch.via_hashlib().shake_256()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_hashlib(include_name=False).shake_256().hexdigest(8)", "0a27d5402daaa671"], "Batch.via_hashlib().blake2b()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_hashlib(include_name=False).blake2b().hexdigest()", "bd38974d3c87f75d2c52915fabae71da18c6327e0f05b50a81ada90bf08a7be66012f28e9668c5564bd22cbd172a29cad87ad5afcb84fc5f9f3f0445a087ad0a"], "Batch.via_hashlib().blake2s()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_hashlib(include_name=False).blake2s().hexdigest()", "c198734c0be11949dba314a5bc83a6cbbb5d825b0fc6ce792ecca024d9e88bc1"], "Batch.via_values.apply()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_values.apply(np.sin).to_frame()", "<Frame>", "<Index>                a                    b                   <<U1>", "<IndexHierarchy>", "i                p     0.0                  0.8414709848078965", "i                q     0.9092974268256817   0.1411200080598672", "i                r     -0.7568024953079282  -0.9589242746631385", "j                p     0.7451131604793488   -0.158622668804709", "j                q     -0.9165215479156338  -0.8317747426285983", "j                r     0.017701925105413577 0.8509035245341184", "<<U1>            <<U1> <float64>            <float64>"], "Batch.via_values.__array_ufunc__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt", "<Batch max_workers=None>", ">>> np.sin(bt.via_values).to_frame()", "<Frame>", "<Index>                a                    b                   <<U1>", "<IndexHierarchy>", "i                p     0.0                  0.8414709848078965", "i                q     0.9092974268256817   0.1411200080598672", "i                r     -0.7568024953079282  -0.9589242746631385", "j                p     0.7451131604793488   -0.158622668804709", "j                q     -0.9165215479156338  -0.8317747426285983", "j                r     0.017701925105413577 0.8509035245341184", "<<U1>            <<U1> <float64>            <float64>"], "Batch.via_values.__call__()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt", "<Batch max_workers=None>", ">>> np.sin(bt.via_values(unify_blocks=True)).to_frame()", "<Frame>", "<Index>                a                    b                   <<U1>", "<IndexHierarchy>", "i                p     0.0                  0.8414709848078965", "i                q     0.9092974268256817   0.1411200080598672", "i                r     -0.7568024953079282  -0.9589242746631385", "j                p     0.7451131604793488   -0.158622668804709", "j                q     -0.9165215479156338  -0.8317747426285983", "j                r     0.017701925105413577 0.8509035245341184", "<<U1>            <<U1> <float64>            <float64>"], "Batch.via_type_clinic.to_hint()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_type_clinic.to_hint()", "<class 'static_frame.core.batch.Batch'>"], "Batch.via_type_clinic.check()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_type_clinic.check(sf.Frame)", "ClinicError('\\nExpected Frame, provided Batch invalid')"], "Batch.via_type_clinic.__call__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> cr = bt.via_type_clinic(sf.Frame)", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "Expected Frame, provided Batch invalid"], "Batch.via_type_clinic.__repr__()": [">>> bt = sf.Batch((('i', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX '), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')), ('j', sf.Frame.from_fields(((10, 2, 8, 3), ('qrs ', 'XYZ', '123', ' wX ')), columns=('a', 'b'), index=('p', 'q', 'r', 's'), name='x'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.via_type_clinic", "Batch"], "Batch.reduce.from_func()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.reduce.from_func(lambda f: f.iloc[1:]).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                q     2       3", "i                r     4       5", "j                q     42      43", "j                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Batch.reduce.from_map_func()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.reduce.from_map_func(np.min).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "i                x     0       1", "j                v     40      41", "<<U1>            <<U1> <int64> <int64>"], "Batch.reduce.from_label_map()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.reduce.from_label_map({'b': np.min, 'a': np.max}).to_frame()", "<Frame>", "<Index>                b       a       <<U1>", "<IndexHierarchy>", "i                x     1       4", "j                v     41      44", "<<U1>            <<U1> <int64> <int64>"], "Batch.reduce.from_label_pair_map()": [">>> bt = sf.Batch((('i', sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')), ('j', sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v'))))", ">>> bt", "<Batch max_workers=None>", ">>> bt.reduce.from_label_pair_map({('b', 'b-min'): np.min, ('b', 'b-max'): np.max}).to_frame()", "<Frame>", "<Index>                b-min   b-max   <<U5>", "<IndexHierarchy>", "i                x     1       5", "j                v     41      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.__init__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q1 = sf.Quilt(b, retain_labels=True)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q1.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>", ">>> q2 = sf.Quilt(b, retain_labels=True, axis=1)", ">>> q2", "<Quilt: j>", "<Index: Frames>  x v", "<Index: Aligned>", "p                . .", "q                . .", "r                . .", "<<U1>", ">>> q2.to_frame()", "<Frame>", "<IndexHierarchy> x       x       v       v       <<U1>", "                 a       b       a       b       <<U1>", "<Index>", "p                0       1       40      41", "q                2       3       42      43", "r                4       5       44      45", "<<U1>            <int64> <int64> <int64> <int64>"], "Quilt.from_duckdb()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q1 = sf.Quilt(b, retain_labels=True)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q1.to_duckdb('/tmp/q.db')", ">>> q2 = sf.Quilt.from_duckdb('/tmp/q.db', retain_labels=True, config=sf.StoreConfig(index_depth=1))", ">>> q2.to_frame()", "<Frame>", "<Index>                   a       b       <<U1>", "<IndexHierarchy>", "v                p        40      41", "v                q        42      43", "v                r        44      45", "x                p        0       1", "x                q        2       3", "x                r        4       5", "<<U1>            <object> <int64> <int64>"], "Quilt.from_frame()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> q = sf.Quilt.from_frame(f, retain_labels=True, chunksize=2)", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<int64>", ">>> q.to_frame()", "<Frame>", "<Index>                  a       b      c               <<U1>", "<IndexHierarchy>", "0                0       10      False  1517-01-01", "0                1       2       True   1517-04-01", "2                2       8       True   1517-12-31", "2                3       3       False  1517-06-30", "<int64>          <int64> <int64> <bool> <datetime64[D]>"], "Quilt.from_frames()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f2 = sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')", ">>> q = sf.Quilt.from_frames((f1, f2), retain_labels=True)", ">>> q", "<Quilt>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.from_hdf5()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> b", "<Bus: j>", "<Index>", "x        Frame", "v        Frame", "<<U1>    <object>", ">>> q1 = sf.Quilt(b, retain_labels=True)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q1.to_hdf5('/tmp/q.hdf5')", ">>> q2 = sf.Quilt.from_hdf5('/tmp/q.hdf5', retain_labels=True, config=sf.StoreConfig(index_depth=1))", ">>> q2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "v                p     40      41", "v                q     42      43", "v                r     44      45", "x                p     0       1", "x                q     2       3", "x                r     4       5", "<<U1>            <<U1> <int64> <int64>"], "Quilt.from_items()": [">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> f2 = sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')", ">>> f2", "<Frame: v>", "<Index>    a       b       <<U1>", "<Index>", "p          40      41", "q          42      43", "r          44      45", "<<U1>      <int64> <int64>", ">>> q = sf.Quilt.from_items((('A', f1), ('B', f2)), retain_labels=True)", ">>> q", "<Quilt>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "A                . .", "B                . .", "<<U1>", ">>> q.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "A                p     0       1", "A                q     2       3", "A                r     4       5", "B                p     40      41", "B                q     42      43", "B                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.from_sqlite()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q1 = sf.Quilt(b, retain_labels=True)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q1.to_sqlite('/tmp/q.db')", ">>> q2 = sf.Quilt.from_sqlite('/tmp/q.db', retain_labels=True, config=sf.StoreConfig(index_depth=1))", ">>> q2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.from_xlsx()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q1 = sf.Quilt(b, retain_labels=True)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q1.to_xlsx('/tmp/q.xlsx')", ">>> q2 = sf.Quilt.from_xlsx('/tmp/q.xlsx', retain_labels=True, config=sf.StoreConfig(index_depth=1))", ">>> q2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.from_zip_csv()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q1 = sf.Quilt(b, retain_labels=True)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q1.to_zip_csv('/tmp/q.zip')", ">>> q2 = sf.Quilt.from_zip_csv('/tmp/q.zip', retain_labels=True, config=sf.StoreConfig(index_depth=1))", ">>> q2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.from_zip_npy()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q1 = sf.Quilt(b, retain_labels=True)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q1.to_zip_npy('/tmp/q.zip')", ">>> q2 = sf.Quilt.from_zip_npy('/tmp/q.zip', retain_labels=True, config=sf.StoreConfig(index_depth=1))", ">>> q2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.from_zip_npz()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q1 = sf.Quilt(b, retain_labels=True)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q1.to_zip_npz('/tmp/q.zip')", ">>> q2 = sf.Quilt.from_zip_npz('/tmp/q.zip', retain_labels=True, config=sf.StoreConfig(index_depth=1))", ">>> q2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.from_zip_parquet()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q1 = sf.Quilt(b, retain_labels=True)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q1.to_zip_parquet('/tmp/q.zip')", ">>> q2 = sf.Quilt.from_zip_parquet('/tmp/q.zip', retain_labels=True, config=sf.StoreConfig(index_depth=1))", ">>> q2.to_frame()", "<Frame>", "<Index>                   a       b       <<U1>", "<IndexHierarchy>", "x                p        0       1", "x                q        2       3", "x                r        4       5", "v                p        40      41", "v                q        42      43", "v                r        44      45", "<<U1>            <object> <int64> <int64>"], "Quilt.from_zip_pickle()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q1 = sf.Quilt(b, retain_labels=True)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q1.to_zip_pickle('/tmp/q.zip')", ">>> q2 = sf.Quilt.from_zip_pickle('/tmp/q.zip', retain_labels=True, config=sf.StoreConfig(index_depth=1))", ">>> q2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.from_zip_tsv()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q1 = sf.Quilt(b, retain_labels=True)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q1.to_zip_tsv('/tmp/q.zip')", ">>> q2 = sf.Quilt.from_zip_tsv('/tmp/q.zip', retain_labels=True, config=sf.StoreConfig(index_depth=1))", ">>> q2.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.to_duckdb()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.to_duckdb('/tmp/q.db')"], "Quilt.to_frame()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q1 = sf.Quilt(b, retain_labels=True)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q1.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.to_hdf5()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.to_hdf5('/tmp/q.h5')"], "Quilt.to_sqlite()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.to_sqlite('/tmp/q.db')"], "Quilt.to_xlsx()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.to_xlsx('/tmp/q.xlsx')"], "Quilt.to_zip_csv()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.to_zip_csv('/tmp/q.zip')"], "Quilt.to_zip_npy()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.to_zip_npy('/tmp/q.zip')"], "Quilt.to_zip_npz()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.to_zip_npz('/tmp/q.zip')"], "Quilt.to_zip_parquet()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.to_zip_parquet('/tmp/q.zip')"], "Quilt.to_zip_pickle()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.to_zip_pickle('/tmp/q.zip')"], "Quilt.to_zip_tsv()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.to_zip_tsv('/tmp/q.zip')"], "Quilt.STATIC": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.STATIC", "True"], "Quilt.bus": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.bus", "<Bus: x>", "<Index>", "0        Frame", "2        Frame", "<<U1>    <object>"], "Quilt.columns": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.columns", "<Index>", "a", "b", "c", "<<U1>"], "Quilt.index": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.index", "<IndexHierarchy>", "0                0", "0                1", "2                2", "2                3", "<<U1>            <int64>"], "Quilt.inventory": [">>> q1 = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q1.to_zip_npz(\"/tmp/q.zip\")", ">>> q2 = sf.Quilt.from_zip_npz(\"/tmp/q.zip\", retain_labels=True)", ">>> q2.inventory", "<Frame>", "<Index>  path       last_modified        size    <<U13>", "<Index>", "None     /tmp/q.zip 2025-03-25T20:55:... 1.06 KB", "<object> <<U10>     <<U32>               <<U7>"], "Quilt.memory": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.memory", "      L    Lu    LM   LMu   LMD LMDu  R     Ru    RM   RMu   RMD  RMDu", "Total 8.94 KB    6.05 KB    4.3 KB    17.45 KB    6.13 KB    4.38 KB"], "Quilt.name": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.name", "x"], "Quilt.nbytes": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.nbytes", "68"], "Quilt.ndim": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.ndim", "2"], "Quilt.shape": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.shape", "(4, 3)"], "Quilt.size": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.size", "12"], "Quilt.status": [">>> q1 = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q1.to_zip_npz(\"/tmp/q.zip\")", ">>> q2 = sf.Quilt.from_zip_npz(\"/tmp/q.zip\", retain_labels=True)", ">>> q2.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "0       False  nan       nan       None", "2       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>"], "Quilt.__bool__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> bool(b)", "ErrorNotTruthy('The truth value of a container is ambiguous. For a truthy indicator of non-empty status, use the `size` attribute.')"], "Quilt.equals()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q1 = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q1", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q2 = sf.Quilt(b, retain_labels=True, axis=1)", ">>> q2", "<Quilt: j>", "<Index: Frames>  x v", "<Index: Aligned>", "p                . .", "q                . .", "r                . .", "<<U1>", ">>> q1.equals(q2)", "False"], "Quilt.head()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.head(2)", "<Frame: x>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "<<U1>            <<U1> <int64> <int64>"], "Quilt.rename()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.rename('y')", "<Quilt: y>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>"], "Quilt.sample()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.sample(2, 2, seed=0).to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                r     4       5", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.tail()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.tail(2)", "<Frame: v>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.unpersist()": [">>> b1 = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> b1.to_zip_npz('/tmp/b.zip')", ">>> b2 = sf.Bus.from_zip_npz('/tmp/b.zip')", ">>> q = sf.Quilt(b2, retain_labels=True, axis=0)", ">>> q", "<Quilt>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.to_frame()", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>", ">>> q.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       True   6.0       48.0      (3, 2)", "v       True   6.0       48.0      (3, 2)", "<<U1>   <bool> <float64> <float64> <object>", ">>> q.unpersist()", ">>> q.status", "<Frame>", "<Index> loaded size      nbytes    shape    <<U6>", "<Index>", "x       False  nan       nan       None", "v       False  nan       nan       None", "<<U1>   <bool> <float64> <float64> <object>"], "Quilt.__contains__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.__contains__('a')", "True"], "Quilt.__iter__()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.__iter__())", "('a', 'b')"], "Quilt.get()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.get('a')", "<Series: a>", "<IndexHierarchy>", "x                p     0", "x                q     2", "x                r     4", "v                p     40", "v                q     42", "v                r     44", "<<U1>            <<U1> <int64>", ">>> q.get('z', -1)", "-1"], "Quilt.items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.items())", "NotImplementedAxis('Iteration along this axis is too inefficient; create a consolidated Frame with Quilt.to_frame()')"], "Quilt.keys()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.keys())", "('a', 'b')"], "Quilt.values": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.values", "[[ 0  1]", " [ 2  3]", " [ 4  5]", " [40 41]", " [42 43]", " [44 45]]"], "Quilt.interface": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.interface", "<Frame>", "<Index>                              cls_name group                doc                  <<U18>", "<Index: signature>", "__init__(bus, *, axis, retain_lab... Quilt    Constructor          Args: bus: Bus of...", "from_duckdb(fp, *, config, axis, ... Quilt    Constructor          Given a file path...", "from_frame(frame, *, chunksize, r... Quilt    Constructor          Given a Frame, cr...", "from_frames(frames, *, axis, name... Quilt    Constructor          Return a Quilt fr...", "from_hdf5(fp, *, config, axis, ...)  Quilt    Constructor          Given a file path...", "from_items(items, *, axis, name, ... Quilt    Constructor          Given an iterable...", "from_sqlite(fp, *, config, axis, ... Quilt    Constructor          Given a file path...", "from_xlsx(fp, *, config, axis, ...)  Quilt    Constructor          Given a file path...", "from_zip_csv(fp, *, config, axis,... Quilt    Constructor          Given a file path...", "from_zip_npy(fp, *, config, axis,... Quilt    Constructor          Given a file path...", "from_zip_npz(fp, *, config, axis,... Quilt    Constructor          Given a file path...", "from_zip_parquet(fp, *, config, a... Quilt    Constructor          Given a file path...", "from_zip_pickle(fp, *, config, ax... Quilt    Constructor          Given a file path...", "from_zip_tsv(fp, *, config, axis,... Quilt    Constructor          Given a file path...", "to_duckdb(fp, *, config)             Quilt    Exporter             Write the complet...", "to_frame()                           Quilt    Exporter             Return a consolid...", "to_hdf5(fp, *, config)               Quilt    Exporter             Write the complet...", "...                                  ...      ...                  ...", "iter_window_items(*, size, axis, ... Quilt    Iterator             Apply a function ...", "iter_window_items(*, size, axis, ... Quilt    Iterator             Apply a function ...", "via_hashlib(include_name, include... Quilt    Accessor Hashlib     Return the byte s...", "via_hashlib(include_name, include... Quilt    Accessor Hashlib", "via_hashlib(include_name, include... Quilt    Accessor Hashlib", "via_hashlib(include_name, include... Quilt    Accessor Hashlib", "via_hashlib(include_name, include... Quilt    Accessor Hashlib", "via_hashlib(include_name, include... Quilt    Accessor Hashlib", "via_hashlib(include_name, include... Quilt    Accessor Hashlib", "via_hashlib(include_name, include... Quilt    Accessor Hashlib", "via_hashlib(include_name, include... Quilt    Accessor Hashlib", "via_hashlib(include_name, include... Quilt    Accessor Hashlib", "via_type_clinic.to_hint()            Quilt    Accessor Type Clinic Return the type h...", "via_type_clinic.check(hint, *, fa... Quilt    Accessor Type Clinic Given a hint (a t...", "via_type_clinic.warn(hint, *, fai... Quilt    Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__call__(hint, *,... Quilt    Accessor Type Clinic Given a hint (a t...", "via_type_clinic.__repr__()           Quilt    Accessor Type Clinic Return a compact ...", "<<U90>                               <<U5>    <<U20>               <<U83>"], "Quilt.__repr__()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> repr(q)", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>"], "Quilt.__str__()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> str(q)", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>"], "Quilt.display()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.display()", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.display(sf.DisplayConfig(type_show=False))", "  a b c", "0 . . .", "2 . . ."], "Quilt.display_tall()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.display_tall()", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>"], "Quilt.display_wide()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q.display_wide()", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>"], "Quilt.[]": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q['b']", "<Series: b>", "<IndexHierarchy>", "x                p     1", "x                q     3", "x                r     5", "v                p     41", "v                q     43", "v                r     45", "<<U1>            <<U1> <int64>", ">>> q['a':]", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.iloc[]": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iloc[3, 0]", "40", ">>> q.iloc[2:, 1]", "<Series: b>", "<IndexHierarchy>", "x                r     5", "v                p     41", "v                q     43", "v                r     45", "<<U1>            <<U1> <int64>", ">>> q.iloc[[0, 3, 5]]", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "v                p     40      41", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.loc[]": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.loc[sf.HLoc['x', 'r']]", "<Series: ('x', 'r')>", "<Index>", "a                    4", "b                    5", "<<U1>                <int64>", ">>> q.loc[('x', 'r'):]", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                r     4       5", "v                p     40      41", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>", ">>> q.loc[sf.HLoc[:, 'r']]", "<Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                r     4       5", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>"], "Quilt.iter_array()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_array(axis=1))", "(array([0, 1]), array([2, 3]), array([4, 5]), array([40, 41]), array([42, 43]), array([44, 45]))"], "Quilt.iter_array().apply()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_array(axis=1).apply(lambda v: v.sum())", "<Series>", "<IndexHierarchy>", "x                p     1", "x                q     5", "x                r     9", "v                p     81", "v                q     85", "v                r     89", "<<U1>            <<U1> <int64>"], "Quilt.iter_array().apply_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_array(axis=1).apply_iter(lambda v: v.sum()))", "(1, 5, 9, 81, 85, 89)"], "Quilt.iter_array().apply_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_array(axis=1).apply_iter_items(lambda v: v.sum()))", "((('x', 'p'), 1), (('x', 'q'), 5), (('x', 'r'), 9), (('v', 'p'), 81), (('v', 'q'), 85), (('v', 'r'), 89))"], "Quilt.iter_array().apply_pool()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_array(axis=1).apply_pool(lambda v: v.sum(), use_threads=True)", "<Series>", "<IndexHierarchy>", "x                p     1", "x                q     5", "x                r     9", "v                p     81", "v                q     85", "v                r     89", "<<U1>            <<U1> <int64>"], "Quilt.iter_array_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_array_items(axis=1))", "((('x', 'p'), array([0, 1])), (('x', 'q'), array([2, 3])), (('x', 'r'), array([4, 5])), (('v', 'p'), array([40, 41])), (('v', 'q'), array([42, 43])), (('v', 'r'), array([44, 45])))"], "Quilt.iter_array_items().apply()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_array_items(axis=1).apply(lambda k, v: v.sum() if 'q' in k else -1)", "<Series>", "<IndexHierarchy>", "x                p     -1", "x                q     5", "x                r     -1", "v                p     -1", "v                q     85", "v                r     -1", "<<U1>            <<U1> <int64>"], "Quilt.iter_array_items().apply_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_array_items(axis=1).apply_iter(lambda k, v: v.sum() if 'q' in k else -1))", "(-1, 5, -1, -1, 85, -1)"], "Quilt.iter_array_items().apply_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_array_items(axis=1).apply_iter_items(lambda k, v: v.sum() if 'q' in k else -1))", "((('x', 'p'), -1), (('x', 'q'), 5), (('x', 'r'), -1), (('v', 'p'), -1), (('v', 'q'), 85), (('v', 'r'), -1))"], "Quilt.iter_array_items().apply_pool()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_array_items(axis=1).apply_pool(lambda pair: pair[1].sum() if pair[0][1] != 'p' else -1, use_threads=True)", "<Series>", "<IndexHierarchy>", "x                p     -1", "x                q     5", "x                r     9", "v                p     -1", "v                q     85", "v                r     89", "<<U1>            <<U1> <int64>"], "Quilt.iter_series()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_series(axis=1))", "(<Series: ('x', 'p')>", "<Index>", "a                    0", "b                    1", "<<U1>                <int64>, <Series: ('x', 'q')>", "<Index>", "a                    2", "b                    3", "<<U1>                <int64>, <Series: ('x', 'r')>", "<Index>", "a                    4", "b                    5", "<<U1>                <int64>, <Series: ('v', 'p')>", "<Index>", "a                    40", "b                    41", "<<U1>                <int64>, <Series: ('v', 'q')>", "<Index>", "a                    42", "b                    43", "<<U1>                <int64>, <Series: ('v', 'r')>", "<Index>", "a                    44", "b                    45", "<<U1>                <int64>)"], "Quilt.iter_series().apply()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_series(axis=1).apply(lambda v: v.sum())", "<Series>", "<IndexHierarchy>", "x                p     1", "x                q     5", "x                r     9", "v                p     81", "v                q     85", "v                r     89", "<<U1>            <<U1> <int64>"], "Quilt.iter_series().apply_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_series(axis=1).apply_iter(lambda v: v.sum()))", "(1, 5, 9, 81, 85, 89)"], "Quilt.iter_series().apply_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_series(axis=1).apply_iter_items(lambda v: v.sum()))", "((('x', 'p'), 1), (('x', 'q'), 5), (('x', 'r'), 9), (('v', 'p'), 81), (('v', 'q'), 85), (('v', 'r'), 89))"], "Quilt.iter_series().apply_pool()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_series(axis=1).apply_pool(lambda v: v.sum(), use_threads=True)", "<Series>", "<IndexHierarchy>", "x                p     1", "x                q     5", "x                r     9", "v                p     81", "v                q     85", "v                r     89", "<<U1>            <<U1> <int64>"], "Quilt.iter_series_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_series_items(axis=1))", "((('x', 'p'), <Series: ('x', 'p')>", "<Index>", "a                    0", "b                    1", "<<U1>                <int64>), (('x', 'q'), <Series: ('x', 'q')>", "<Index>", "a                    2", "b                    3", "<<U1>                <int64>), (('x', 'r'), <Series: ('x', 'r')>", "<Index>", "a                    4", "b                    5", "<<U1>                <int64>), (('v', 'p'), <Series: ('v', 'p')>", "<Index>", "a                    40", "b                    41", "<<U1>                <int64>), (('v', 'q'), <Series: ('v', 'q')>", "<Index>", "a                    42", "b                    43", "<<U1>                <int64>), (('v', 'r'), <Series: ('v', 'r')>", "<Index>", "a                    44", "b                    45", "<<U1>                <int64>))"], "Quilt.iter_series_items().apply()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_series_items(axis=1).apply(lambda k, v: v.sum() if 'q' in k else -1)", "<Series>", "<IndexHierarchy>", "x                p     -1", "x                q     5", "x                r     -1", "v                p     -1", "v                q     85", "v                r     -1", "<<U1>            <<U1> <int64>"], "Quilt.iter_series_items().apply_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_series_items(axis=1).apply_iter(lambda k, v: v.sum() if 'q' in k else -1))", "(-1, 5, -1, -1, 85, -1)"], "Quilt.iter_series_items().apply_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_series_items(axis=1).apply_iter_items(lambda k, v: v.sum() if 'q' in k else -1))", "((('x', 'p'), -1), (('x', 'q'), 5), (('x', 'r'), -1), (('v', 'p'), -1), (('v', 'q'), 85), (('v', 'r'), -1))"], "Quilt.iter_series_items().apply_pool()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_series_items(axis=1).apply_pool(lambda pair: pair[1].sum() if pair[0][1] != 'p' else -1, use_threads=True)", "<Series>", "<IndexHierarchy>", "x                p     -1", "x                q     5", "x                r     9", "v                p     -1", "v                q     85", "v                r     89", "<<U1>            <<U1> <int64>"], "Quilt.iter_tuple()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple(axis=1))", "(Axis(a=0, b=1), Axis(a=2, b=3), Axis(a=4, b=5), Axis(a=40, b=41), Axis(a=42, b=43), Axis(a=44, b=45))"], "Quilt.iter_tuple().apply()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_tuple(axis=1).apply(lambda v: v.a + v.b)", "<Series>", "<IndexHierarchy>", "x                p     1", "x                q     5", "x                r     9", "v                p     81", "v                q     85", "v                r     89", "<<U1>            <<U1> <int64>"], "Quilt.iter_tuple().apply_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple(axis=1).apply_iter(lambda v: v.a + v.b))", "(1, 5, 9, 81, 85, 89)"], "Quilt.iter_tuple().apply_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple(axis=1).apply_iter_items(lambda v: v.a + v.b))", "((('x', 'p'), 1), (('x', 'q'), 5), (('x', 'r'), 9), (('v', 'p'), 81), (('v', 'q'), 85), (('v', 'r'), 89))"], "Quilt.iter_tuple().map_all()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iloc[:2].iter_tuple(axis=1).map_all({(0, 1): -1, (2, 3): -2})", "<Series>", "<IndexHierarchy>", "x                p     -1", "x                q     -2", "<<U1>            <<U1> <int64>"], "Quilt.iter_tuple().map_all_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iloc[:2].iter_tuple(axis=1).map_all_iter({(0, 1): -1, (2, 3): -2}))", "(-1, -2)"], "Quilt.iter_tuple().map_all_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iloc[:2].iter_tuple(axis=1).map_all_iter_items({(0, 1): -1, (2, 3): -2}))", "((('x', 'p'), -1), (('x', 'q'), -2))"], "Quilt.iter_tuple().map_any()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_tuple(axis=1).map_any({(0, 1): -1, (42, 43): -2})", "<Series>", "<IndexHierarchy>", "x                p     -1", "x                q     Axis(a=2, b=3)", "x                r     Axis(a=4, b=5)", "v                p     Axis(a=40, b=41)", "v                q     -2", "v                r     Axis(a=44, b=45)", "<<U1>            <<U1> <object>"], "Quilt.iter_tuple().map_any_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple(axis=1).map_any_iter({(0, 1): -1, (42, 43): -2}))", "(-1, Axis(a=2, b=3), Axis(a=4, b=5), Axis(a=40, b=41), -2, Axis(a=44, b=45))"], "Quilt.iter_tuple().map_any_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple(axis=1).map_any_iter_items({(0, 1): -1, (42, 43): -2}))", "((('x', 'p'), -1), (('x', 'q'), Axis(a=2, b=3)), (('x', 'r'), Axis(a=4, b=5)), (('v', 'p'), Axis(a=40, b=41)), (('v', 'q'), -2), (('v', 'r'), Axis(a=44, b=45)))"], "Quilt.iter_tuple().map_fill()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_tuple(axis=1).map_fill({(0, 1): -1, (42, 43): -2}, fill_value=np.nan)", "<Series>", "<IndexHierarchy>", "x                p     -1.0", "x                q     nan", "x                r     nan", "v                p     nan", "v                q     -2.0", "v                r     nan", "<<U1>            <<U1> <float64>"], "Quilt.iter_tuple().map_fill_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple(axis=1).map_fill_iter({(0, 1): -1, (42, 43): -2}, fill_value=np.nan))", "(-1, nan, nan, nan, -2, nan)"], "Quilt.iter_tuple().map_fill_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple(axis=1).map_fill_iter_items({(0, 1): -1, (42, 43): -2}, fill_value=np.nan))", "((('x', 'p'), -1), (('x', 'q'), nan), (('x', 'r'), nan), (('v', 'p'), nan), (('v', 'q'), -2), (('v', 'r'), nan))"], "Quilt.iter_tuple_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple_items(axis=1))", "((('x', 'p'), Axis(a=0, b=1)), (('x', 'q'), Axis(a=2, b=3)), (('x', 'r'), Axis(a=4, b=5)), (('v', 'p'), Axis(a=40, b=41)), (('v', 'q'), Axis(a=42, b=43)), (('v', 'r'), Axis(a=44, b=45)))"], "Quilt.iter_tuple_items().apply()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_tuple_items(axis=1).apply(lambda k, v: v.a + v.b if 'r' in k else -1)", "<Series>", "<IndexHierarchy>", "x                p     -1", "x                q     -1", "x                r     9", "v                p     -1", "v                q     -1", "v                r     89", "<<U1>            <<U1> <int64>"], "Quilt.iter_tuple_items().apply_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple_items(axis=1).apply_iter(lambda k, v: v.a + v.b if 'r' in k else -1))", "(-1, -1, 9, -1, -1, 89)"], "Quilt.iter_tuple_items().apply_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple_items(axis=1).apply_iter_items(lambda k, v: v.a + v.b if 'r' in k else -1))", "((('x', 'p'), -1), (('x', 'q'), -1), (('x', 'r'), 9), (('v', 'p'), -1), (('v', 'q'), -1), (('v', 'r'), 89))"], "Quilt.iter_tuple_items().map_all()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iloc[:2].iter_tuple_items(axis=1).map_all({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2})", "<Series>", "<IndexHierarchy>", "x                p     -1", "x                q     -2", "<<U1>            <<U1> <int64>"], "Quilt.iter_tuple_items().map_all_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iloc[:2].iter_tuple_items(axis=1).map_all_iter({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}))", "(-1, -2)"], "Quilt.iter_tuple_items().map_all_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iloc[:2].iter_tuple_items(axis=1).map_all_iter_items({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}))", "((('x', 'p'), -1), (('x', 'q'), -2))"], "Quilt.iter_tuple_items().map_any()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_tuple_items(axis=1).map_any({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2})", "<Series>", "<IndexHierarchy>", "x                p     -1", "x                q     -2", "x                r     Axis(a=4, b=5)", "v                p     Axis(a=40, b=41)", "v                q     Axis(a=42, b=43)", "v                r     Axis(a=44, b=45)", "<<U1>            <<U1> <object>"], "Quilt.iter_tuple_items().map_any_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple_items(axis=1).map_any_iter({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}))", "(-1, -2, Axis(a=4, b=5), Axis(a=40, b=41), Axis(a=42, b=43), Axis(a=44, b=45))"], "Quilt.iter_tuple_items().map_any_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple_items(axis=1).map_any_iter_items({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}))", "((('x', 'p'), -1), (('x', 'q'), -2), (('x', 'r'), Axis(a=4, b=5)), (('v', 'p'), Axis(a=40, b=41)), (('v', 'q'), Axis(a=42, b=43)), (('v', 'r'), Axis(a=44, b=45)))"], "Quilt.iter_tuple_items().map_fill()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_tuple_items(axis=1).map_fill({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}, fill_value=np.nan)", "<Series>", "<IndexHierarchy>", "x                p     -1.0", "x                q     -2.0", "x                r     nan", "v                p     nan", "v                q     nan", "v                r     nan", "<<U1>            <<U1> <float64>"], "Quilt.iter_tuple_items().map_fill_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple_items(axis=1).map_fill_iter({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}, fill_value=np.nan))", "(-1, -2, nan, nan, nan, nan)"], "Quilt.iter_tuple_items().map_fill_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_tuple_items(axis=1).map_fill_iter_items({(('x', 'p'), (0, 1)): -1, (('x', 'q'), (2, 3)): -2}, fill_value=np.nan))", "((('x', 'p'), -1), (('x', 'q'), -2), (('x', 'r'), nan), (('v', 'p'), nan), (('v', 'q'), nan), (('v', 'r'), nan))"], "Quilt.iter_window()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_window(size=2, step=2, axis=0))", "(<Frame: x>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "<<U1>            <<U1> <int64> <int64>, <Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                r     4       5", "v                p     40      41", "<<U1>            <<U1> <int64> <int64>, <Frame: v>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>)"], "Quilt.iter_window().apply()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_window(size=2, step=2, axis=0).apply(lambda f: f.max().max())", "<Series>", "<IndexHierarchy>", "x                q     3", "v                p     41", "v                r     45", "<<U1>            <<U1> <int64>"], "Quilt.iter_window().apply_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_window(size=2, step=2, axis=0).apply_iter(lambda f: f.max().max()))", "(3, 41, 45)"], "Quilt.iter_window().apply_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_window(size=2, step=2, axis=0).apply_iter_items(lambda f: f.max().max()))", "((('x', 'q'), 3), (('v', 'p'), 41), (('v', 'r'), 45))"], "Quilt.iter_window_array()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_window_array(size=2, step=2, axis=0))", "(array([[0, 1],", "       [2, 3]]), array([[ 4,  5],", "       [40, 41]]), array([[42, 43],", "       [44, 45]]))"], "Quilt.iter_window_array().apply()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_window_array(size=2, step=2, axis=0).apply(lambda a: np.max(a))", "<Series>", "<IndexHierarchy>", "x                q     3", "v                p     41", "v                r     45", "<<U1>            <<U1> <int64>"], "Quilt.iter_window_array().apply_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_window_array(size=2, step=2, axis=0).apply_iter(lambda a: np.max(a)))", "(3, 41, 45)"], "Quilt.iter_window_array().apply_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_window_array(size=2, step=2, axis=0).apply_iter_items(lambda a: np.max(a)))", "((('x', 'q'), 3), (('v', 'p'), 41), (('v', 'r'), 45))"], "Quilt.iter_window_array_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_window_array_items(size=2, step=2, axis=0))", "((('x', 'q'), array([[0, 1],", "       [2, 3]])), (('v', 'p'), array([[ 4,  5],", "       [40, 41]])), (('v', 'r'), array([[42, 43],", "       [44, 45]])))"], "Quilt.iter_window_array_items().apply()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_window_array_items(size=2, step=2, axis=0).apply(lambda k, v: np.max(v) if k == ('v', 'p') else np.min(v))", "<Series>", "<IndexHierarchy>", "x                q     0", "v                p     41", "v                r     42", "<<U1>            <<U1> <int64>"], "Quilt.iter_window_array_items().apply_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_window_array_items(size=2, step=2, axis=0).apply_iter(lambda k, v: np.max(v) if k == ('v', 'p') else np.min(v)))", "(0, 41, 42)"], "Quilt.iter_window_array_items().apply_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_window_array_items(size=2, step=2, axis=0).apply_iter_items(lambda k, v: np.max(v) if k == ('v', 'p') else np.min(v)))", "((('x', 'q'), 0), (('v', 'p'), 41), (('v', 'r'), 42))"], "Quilt.iter_window_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_window_items(size=2, step=2, axis=0))", "((('x', 'q'), <Frame: x>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                p     0       1", "x                q     2       3", "<<U1>            <<U1> <int64> <int64>), (('v', 'p'), <Frame>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "x                r     4       5", "v                p     40      41", "<<U1>            <<U1> <int64> <int64>), (('v', 'r'), <Frame: v>", "<Index>                a       b       <<U1>", "<IndexHierarchy>", "v                q     42      43", "v                r     44      45", "<<U1>            <<U1> <int64> <int64>))"], "Quilt.iter_window_items().apply()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> q.iter_window_items(size=2, step=2, axis=0).apply(lambda k, v: v.max().max() if k == ('v', 'p') else v.min().min())", "<Series>", "<IndexHierarchy>", "x                q     0", "v                p     41", "v                r     42", "<<U1>            <<U1> <int64>"], "Quilt.iter_window_items().apply_iter()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_window_items(size=2, step=2, axis=0).apply_iter(lambda k, v: v.max().max() if k == ('v', 'p') else v.min().min()))", "(0, 41, 42)"], "Quilt.iter_window_items().apply_iter_items()": [">>> b = sf.Bus.from_frames((sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x'), sf.Frame(np.arange(40, 46).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='v')), name='j')", ">>> q = sf.Quilt(b, retain_labels=True, axis=0)", ">>> q", "<Quilt: j>", "<Index: Aligned> a b <<U1>", "<Index: Frames>", "x                . .", "v                . .", "<<U1>", ">>> tuple(q.iter_window_items(size=2, step=2, axis=0).apply_iter_items(lambda k, v: v.max().max() if k == ('v', 'p') else v.min().min()))", "((('x', 'q'), 0), (('v', 'p'), 41), (('v', 'r'), 42))"], "Quilt.via_hashlib().to_bytes()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_hashlib(include_name=False).to_bytes()", "b'QuiltIndexHierarchy0\\x00\\x00\\x000\\x00\\x00\\x002\\x00\\x00\\x002\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00Indexa\\x00\\x00\\x00b\\x00\\x00\\x00c\\x00\\x00\\x00BusIndex0\\x00\\x00\\x002\\x00\\x00\\x00FrameIndex\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00Indexa\\x00\\x00\\x00b\\x00\\x00\\x00c\\x00\\x00\\x00\\n\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\xb1y\\xfd\\xff\\xff\\xff\\xff\\xff\\x0bz\\xfd\\xff\\xff\\xff\\xff\\xffFrameIndex\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00Indexa\\x00\\x00\\x00b\\x00\\x00\\x00c\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x1d{\\xfd\\xff\\xff\\xff\\xff\\xffez\\xfd\\xff\\xff\\xff\\xff\\xff'"], "Quilt.via_hashlib().md5()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_hashlib(include_name=False).md5().hexdigest()", "c0ca678d708cce27405db82d2bee4950"], "Quilt.via_hashlib().sha256()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_hashlib(include_name=False).sha256().hexdigest()", "9703241466374f7e66f5ec3ceb4857e097dfd8343d0f15d2b8ce80beb0f78711"], "Quilt.via_hashlib().sha512()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_hashlib(include_name=False).sha512().hexdigest()", "c31d8f54e37e88848421c510e265d237c444d5b88df37dd947ae7bdbac50cbdb8165ebd8134a0773fdd29cdb4dceb7dc133de3edb7097023f95d4bd09686060a"], "Quilt.via_hashlib().sha3_256()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_hashlib(include_name=False).sha3_256().hexdigest()", "5be80b11568f6b745463b8e1a9a97c5456e8f0f15108987fbc4718ef442185f0"], "Quilt.via_hashlib().sha3_512()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_hashlib(include_name=False).sha3_512().hexdigest()", "5260c8e4f33724812637a8d4007991ccc17f50b61be3312eed0b12524660161c01b0fcdf82c0ea405b6ce246f366f1705e99fe24afd3e9a38449631a0e29a264"], "Quilt.via_hashlib().shake_128()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_hashlib(include_name=False).shake_128().hexdigest(8)", "61452ae38bc2c36b"], "Quilt.via_hashlib().shake_256()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_hashlib(include_name=False).shake_256().hexdigest(8)", "84078ff61bbf0590"], "Quilt.via_hashlib().blake2b()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_hashlib(include_name=False).blake2b().hexdigest()", "5d9831aefda53cb48c101b7fe4a3cb2370813748d9641c614048e6e82d99393dc8a762653dc7c7a947ea19d65753e8b097b7f1cd15db3daca0a1494b93342861"], "Quilt.via_hashlib().blake2s()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_hashlib(include_name=False).blake2s().hexdigest()", "28bb86ca63168ca5b2d99b2f0a2acc9f6a403b9ecffc10bc386da6d38fc7814a"], "Quilt.via_type_clinic.to_hint()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_type_clinic.to_hint()", "<class 'static_frame.core.quilt.Quilt'>"], "Quilt.via_type_clinic.check()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_type_clinic.check(sf.Frame)", "ClinicError('\\nExpected Frame, provided Quilt invalid')"], "Quilt.via_type_clinic.__call__()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> cr = q.via_type_clinic(sf.Frame)", ">>> cr", "<ClinicResult: 1 error>", ">>> cr.validated", "False", ">>> cr.to_str()", "", "Expected Frame, provided Quilt invalid"], "Quilt.via_type_clinic.__repr__()": [">>> q = sf.Quilt.from_frame(sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x'), retain_labels=True, chunksize=2, label_extractor=lambda x: str(x.iloc[0]))", ">>> q", "<Quilt: x>", "<Index: Aligned> a b c <<U1>", "<Index: Frames>", "0                . . .", "2                . . .", "<<U1>", ">>> q.via_type_clinic", "Quilt"], "HLoc.__init__()": [">>> ih = sf.IndexHierarchy.from_product(('a', 'b', 'c'), (1024, 4096, 2048), name='x')", ">>> ih", "<IndexHierarchy: x>", "a                   1024", "a                   4096", "a                   2048", "b                   1024", "b                   4096", "b                   2048", "c                   1024", "c                   4096", "c                   2048", "<<U1>               <int64>", ">>> ih.loc[sf.HLoc[:, 4096]]", "<IndexHierarchy: x>", "a                   4096", "b                   4096", "c                   4096", "<<U1>               <int64>", ">>> ih.loc[sf.HLoc[['a', 'c'], [1024, 2048]]]", "<IndexHierarchy: x>", "a                   1024", "a                   2048", "c                   1024", "c                   2048", "<<U1>               <int64>", ">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.loc[sf.HLoc[:, 'q']]", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                q     2       True   1517-04-01", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>"], "HLoc.STATIC": [">>> sf.HLoc[:, ['a', 'b']].STATIC", "True"], "HLoc.key": [">>> sf.HLoc[:, ['a', 'b']].key", "(slice(None, None, None), ['a', 'b'])"], "HLoc.__len__()": [">>> len(sf.HLoc[:, ['a', 'b'], 2048:])", "3"], "HLoc.__iter__()": [">>> hl = sf.HLoc[:, ['a', 'b'], 2048:]", ">>> hl", "<HLoc[:,['a', 'b'],2048:]>", ">>> tuple(iter(hl))", "(slice(None, None, None), ['a', 'b'], slice(2048, None, None))"], "HLoc.__repr__()": [">>> hl = sf.HLoc[:, ['a', 'b'], 2048:]", ">>> repr(hl)", "<HLoc[:,['a', 'b'],2048:]>"], "HLoc.__str__()": [">>> hl = sf.HLoc[:, ['a', 'b'], 2048:]", ">>> str(hl)", "<HLoc[:,['a', 'b'],2048:]>"], "ILoc.__init__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), index=sf.IndexHierarchy.from_product((0, 1), ('p', 'q')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>                a       b      c               <<U1>", "<IndexHierarchy>", "0                p     10      False  1517-01-01", "0                q     2       True   1517-04-01", "1                p     8       True   1517-12-31", "1                q     3       False  1517-06-30", "<int64>          <<U1> <int64> <bool> <datetime64[D]>", ">>> f.loc[sf.ILoc[-2:], ['a', 'c']]", "<Frame: x>", "<Index>                a       c               <<U1>", "<IndexHierarchy>", "1                p     8       1517-12-31", "1                q     3       1517-06-30", "<int64>          <<U1> <int64> <datetime64[D]>", ">>> f.loc[sf.ILoc[-1], 'b':]", "<Series: (1, 'q')>", "<Index>", "b                  False", "c                  1517-06-30", "<<U1>              <object>"], "ILoc.STATIC": [">>> sf.ILoc[-2:].STATIC", "True"], "ILoc.key": [">>> sf.ILoc[-2:].key", "slice(-2, None, None)"], "ILoc.__repr__()": [">>> il = sf.ILoc[-2:]", ">>> repr(il)", "<ILoc[-2:]>"], "ILoc.__str__()": [">>> il = sf.ILoc[-2:]", ">>> str(il)", "<ILoc[-2:]>"], "FillValueAuto.__init__()": [">>> f = sf.Frame.from_fields(((10, 2, np.nan, 2), ('qrs ', 'XYZ', '', '123'), ('1517-01-01', '1517-04-01', 'NaT', '1517-04-01')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a         b     c               <<U1>", "<Index>", "0          10.0      qrs   1517-01-01", "1          2.0       XYZ   1517-04-01", "2          nan             NaT", "3          2.0       123   1517-04-01", "<int64>    <float64> <<U4> <datetime64[D]>", ">>> f.fillfalsy(sf.FillValueAuto(f=-1, U='na', M=np.datetime64('2021-01-01')))", "<Frame: x>", "<Index>    a         b     c               <<U1>", "<Index>", "0          10.0      qrs   1517-01-01", "1          2.0       XYZ   1517-04-01", "2          -1.0      na    2021-01-01", "3          2.0       123   1517-04-01", "<int64>    <float64> <<U4> <datetime64[D]>", ">>> f.shift(index=2, fill_value=sf.FillValueAuto)", "<Frame: x>", "<Index>    a         b     c               <<U1>", "<Index>", "0          nan             NaT", "1          nan             NaT", "2          10.0      qrs   1517-01-01", "3          2.0       XYZ   1517-04-01", "<int64>    <float64> <<U4> <datetime64[D]>"], "FillValueAuto.from_default()": [">>> sf.FillValueAuto.from_default()", "<static_frame.core.fill_value_auto.FillValueAuto object at 0x7fe8dc5ba8c0>"], "FillValueAuto.M": [">>> sf.FillValueAuto.from_default().M", "NaT"], "FillValueAuto.O": [">>> sf.FillValueAuto.from_default().O"], "FillValueAuto.S": [">>> sf.FillValueAuto.from_default().S", "b''"], "FillValueAuto.U": [">>> sf.FillValueAuto.from_default().U", ""], "FillValueAuto.V": [">>> sf.FillValueAuto.from_default().V", "b'\\x00'"], "FillValueAuto.b": [">>> sf.FillValueAuto.from_default().b", "False"], "FillValueAuto.c": [">>> sf.FillValueAuto.from_default().c", "(nan+nanj)"], "FillValueAuto.f": [">>> sf.FillValueAuto.from_default().f", "nan"], "FillValueAuto.i": [">>> sf.FillValueAuto.from_default().i", "0"], "FillValueAuto.m": [">>> sf.FillValueAuto.from_default().m", "NaT"], "FillValueAuto.u": [">>> sf.FillValueAuto.from_default().u", "0"], "FillValueAuto.__repr__()": [">>> fva = sf.FillValueAuto.from_default()", ">>> repr(fva)", "<static_frame.core.fill_value_auto.FillValueAuto object at 0x7fe8dc515e40>"], "FillValueAuto.__str__()": [">>> fva = sf.FillValueAuto.from_default()", ">>> str(fva)", "<static_frame.core.fill_value_auto.FillValueAuto object at 0x7fe8dc5163c0>"], "FillValueAuto.[]": [">>> fva = sf.FillValueAuto.from_default()", ">>> fva[np.dtype(int)]", "0", ">>> fva[np.dtype(float)]", "nan", ">>> fva[np.dtype(bool)]", "False"], "MemoryDisplay.__init__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.memory", "        L    Lu    LM   LMu   LMD  LMDu  R    Ru    RM   RMu   RMD  RMDu", "Name    50   B     50   B     50   B     50   B     50   B     50   B", "Index   236  B     252  B     124  B     8.34 KB    284  B     156  B", "Columns 800  B     832  B     576  B     8.89 KB    856  B     600  B", "Blocks  748  B     796  B     412  B     748  B     796  B     412  B", "Total   1.82 KB    1.91 KB    1.16 KB    9.93 KB    1.97 KB    1.22 KB"], "MemoryDisplay.from_any()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> sf.MemoryDisplay.from_any(f.index)", "      L   Lu    LM  LMu   LMD LMDu  R    Ru    RM  RMu   RMD RMDu", "Total 236 B     252 B     124 B     8.34 KB    284 B     156 B"], "MemoryDisplay.to_frame()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> f.memory.to_frame()", "<Frame: <Frame: x>>", "<Index>             L       LM      LMD     R       RM      RMD     <<U3>", "<Index>", "Name                50      50      50      50      50      50", "Index               236     252     124     8540    284     156", "Columns             800     832     576     9104    856     600", "Blocks              748     796     412     748     796     412", "Total               1862    1958    1190    10166   2014    1246", "<<U7>               <int64> <int64> <int64> <int64> <int64> <int64>"], "MemoryDisplay.__repr__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> md = f.memory", ">>> repr(md)", "        L    Lu    LM   LMu   LMD  LMDu  R    Ru    RM   RMu   RMD  RMDu", "Name    50   B     50   B     50   B     50   B     50   B     50   B", "Index   236  B     252  B     124  B     8.34 KB    284  B     156  B", "Columns 800  B     832  B     576  B     8.89 KB    856  B     600  B", "Blocks  748  B     796  B     412  B     748  B     796  B     412  B", "Total   1.82 KB    1.91 KB    1.16 KB    9.93 KB    1.97 KB    1.22 KB"], "MemoryDisplay.__str__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> md = f.memory", ">>> str(md)", "        L    Lu    LM   LMu   LMD  LMDu  R    Ru    RM   RMu   RMD  RMDu", "Name    50   B     50   B     50   B     50   B     50   B     50   B", "Index   236  B     252  B     124  B     8.34 KB    284  B     156  B", "Columns 800  B     832  B     576  B     8.89 KB    856  B     600  B", "Blocks  748  B     796  B     412  B     748  B     796  B     412  B", "Total   1.82 KB    1.91 KB    1.16 KB    9.93 KB    1.97 KB    1.22 KB"], "TypeClinic.__init__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> tc", "tuple[Frame[Index[int64], Index[str_], int64, bool_, datetime64], bool]"], "TypeClinic.to_hint()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> tc.to_hint()", "tuple[static_frame.core.frame.Frame[static_frame.core.index.Index[numpy.int64], static_frame.core.index.Index[numpy.str_], numpy.int64, numpy.bool_, numpy.datetime64], bool]"], "TypeClinic.__call__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> tc(tuple[bool, bool])", "<ClinicResult: 1 error>", ">>> tc(tuple[bool, bool]).to_str()", "", "In tuple[bool, bool]", "\u2514\u2500\u2500 Expected bool, provided Frame invalid"], "TypeClinic.check()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> tc.check(tuple[bool, bool])", "ClinicError('\\nIn tuple[bool, bool]\\n\u2514\u2500\u2500 Expected bool, provided Frame invalid')"], "TypeClinic.__repr__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> tc", "tuple[Frame[Index[int64], Index[str_], int64, bool_, datetime64], bool]"], "TypeClinic.__str__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> tc", "tuple[Frame[Index[int64], Index[str_], int64, bool_, datetime64], bool]"], "ClinicResult.__init__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> cr = tc(tuple[str, int])", ">>> cr", "<ClinicResult: 2 errors>"], "ClinicResult.to_str()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> cr = tc(tuple[str, int])", ">>> cr.to_str()", "", "In tuple[str, int]", "\u2514\u2500\u2500 Expected str, provided Frame invalid", "In tuple[str, int]", "\u2514\u2500\u2500 Expected int, provided bool invalid"], "ClinicResult.validated": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> cr = tc(tuple[str, int])", ">>> cr.validated", "False"], "ClinicResult.__bool__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> cr = tc(tuple[str, int])", ">>> bool(cr)", "True"], "ClinicResult.__len__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> cr = tc(tuple[str, int])", ">>> len(cr)", "2"], "ClinicResult.__iter__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> cr = tc(tuple[str, int])", ">>> [l for l in cr]", "[(<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>, <class 'str'>, (tuple[str, int],), ((<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>, True),)), (True, <class 'int'>, (tuple[str, int],), ((<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>, True),))]"], "ClinicResult.__repr__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> cr = tc(tuple[str, int])", ">>> cr", "<ClinicResult: 2 errors>"], "ClinicResult.__str__()": [">>> f = sf.Frame.from_fields(((10, 2, 8, 3), (False, True, True, False), ('1517-01-01', '1517-04-01', '1517-12-31', '1517-06-30')), columns=('a', 'b', 'c'), dtypes=dict(c=np.datetime64), name='x')", ">>> f", "<Frame: x>", "<Index>    a       b      c               <<U1>", "<Index>", "0          10      False  1517-01-01", "1          2       True   1517-04-01", "2          8       True   1517-12-31", "3          3       False  1517-06-30", "<int64>    <int64> <bool> <datetime64[D]>", ">>> tc = sf.TypeClinic((f, True))", ">>> cr = tc(tuple[str, int])", ">>> cr", "<ClinicResult: 2 errors>"], "CallGuard.check()": [">>> def func1(ix: sf.Index[np.int64]): return len(ix)", ">>> func2 = sf.CallGuard.check(func1)", ">>> func2", "<function func1 at 0x7fe8dc5ddee0>", ">>> ix1 = sf.Index(('a', 'b', 'c', 'd', 'e'), name='x')", ">>> func2(ix1)", "ClinicError('\\nIn args of (ix: Index[int64]) -> Any\\n\u2514\u2500\u2500 In arg ix\\n    \u2514\u2500\u2500 Index[int64]\\n        \u2514\u2500\u2500 Expected int64, provided str_ invalid')", ">>> ix2 = sf.Index((1024, 2048, 4096), name='y')", ">>> func2(ix2)", "3", ">>> import typing as tp", ">>> def func3(ix: tp.Annotated[sf.Index[np.int64], sf.Require.Len(4)]): return len(ix)", ">>> func4 = sf.CallGuard.check(func3)", ">>> func4(ix1)", "ClinicError('\\nIn args of (ix: Annotated[Index[int64], Len(4)]) -> Any\\n\u2514\u2500\u2500 In arg ix\\n    \u2514\u2500\u2500 Annotated[Index[int64], Len(4)]\\n        \u2514\u2500\u2500 Len(4)\\n            \u2514\u2500\u2500 Expected length 4, provided length 5\\nIn args of (ix: Annotated[Index[int64], Len(4)]) -> Any\\n\u2514\u2500\u2500 In arg ix\\n    \u2514\u2500\u2500 Annotated[Index[int64], Len(4)]\\n        \u2514\u2500\u2500 Index[int64]\\n            \u2514\u2500\u2500 Expected int64, provided str_ invalid')", ">>> func4(ix2)", "ClinicError('\\nIn args of (ix: Annotated[Index[int64], Len(4)]) -> Any\\n\u2514\u2500\u2500 In arg ix\\n    \u2514\u2500\u2500 Annotated[Index[int64], Len(4)]\\n        \u2514\u2500\u2500 Len(4)\\n            \u2514\u2500\u2500 Expected length 4, provided length 3')", ">>> ix3 = sf.Index((0, 1024, -2048, 4096))", ">>> func4(ix3)", "4"], "Require.Apply()": [">>> import typing as tp", ">>> def func1(ix: tp.Annotated[sf.Index[np.int64], sf.Require.Apply(lambda ix: (ix > 0).all())]): return ix.max()", ">>> func2 = sf.CallGuard.check(func1)", ">>> ix1 = sf.Index((1024, 2048, 4096), name='y')", ">>> ix1", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> func2(ix1)", "4096", ">>> ix2 = sf.Index((0, 1024, -2048, 4096))", ">>> ix2", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> func2(ix2)", "ClinicError('\\nIn args of (ix: Annotated[Index[int64], Apply(<lambda>)]) -> Any\\n\u2514\u2500\u2500 In arg ix\\n    \u2514\u2500\u2500 Annotated[Index[int64], Apply(<lambda>)]\\n        \u2514\u2500\u2500 Apply(<lambda>)\\n            \u2514\u2500\u2500 Index failed validation with <lambda>')"], "Require.LabelsMatch()": [">>> import re", ">>> import typing as tp", ">>> def func1(ix: tp.Annotated[sf.Index[np.object_], sf.Require.LabelsMatch(True, None, {1024, 2048}, re.compile(\"^A\"))]): return len(ix)", ">>> func2 = sf.CallGuard.check(func1)", ">>> ix1 = sf.Index((None, 'A', 1024, True), name='x')", ">>> ix1", "<Index: x>", "None", "A", "1024", "True", "<object>", ">>> func2(ix1)", "4", ">>> ix2 = sf.Index((None, 'b', False, True, 2048), name='x')", ">>> ix2", "<Index: x>", "None", "b", "False", "True", "2048", "<object>", ">>> func2(ix2)", "ClinicError(\"\\nIn args of (ix: Annotated[Index[object_], LabelsMatch(True, None, {1024, 2048}, re.compile('^A'))]) -> Any\\n\u2514\u2500\u2500 In arg ix\\n    \u2514\u2500\u2500 Annotated[Index[object_], LabelsMatch(True, None, {1024, 2048}, re.compile('^A'))]\\n        \u2514\u2500\u2500 LabelsMatch(True, None, {1024, 2048}, re.compile('^A'))\\n            \u2514\u2500\u2500 Expected label to match re.compile('^A'), no provided match\")"], "Require.LabelsOrder()": [">>> import typing as tp", ">>> def func1(ix: tp.Annotated[sf.Index[np.int64], sf.Require.LabelsOrder(1024, ..., 4096)]): return ix.max()", ">>> func2 = sf.CallGuard.check(func1)", ">>> ix1 = sf.Index((1024, 2048, 4096), name='y')", ">>> ix1", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> func2(ix1)", "4096", ">>> ix2 = sf.Index((0, 1024, -2048, 4096))", ">>> ix2", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> func2(ix2)", "ClinicError('\\nIn args of (ix: Annotated[Index[int64], LabelsOrder(1024, ..., 4096)]) -> Any\\n\u2514\u2500\u2500 In arg ix\\n    \u2514\u2500\u2500 Annotated[Index[int64], LabelsOrder(1024, ..., 4096)]\\n        \u2514\u2500\u2500 LabelsOrder(1024, ..., 4096)\\n            \u2514\u2500\u2500 Expected 1024, provided 0')"], "Require.Len()": [">>> import typing as tp", ">>> def func1(ix: tp.Annotated[sf.Index[np.int64], sf.Require.Len(3)]): return ix.max()", ">>> func2 = sf.CallGuard.check(func1)", ">>> ix1 = sf.Index((1024, 2048, 4096), name='y')", ">>> ix1", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> func2(ix1)", "4096", ">>> ix2 = sf.Index((0, 1024, -2048, 4096))", ">>> ix2", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> func2(ix2)", "ClinicError('\\nIn args of (ix: Annotated[Index[int64], Len(3)]) -> Any\\n\u2514\u2500\u2500 In arg ix\\n    \u2514\u2500\u2500 Annotated[Index[int64], Len(3)]\\n        \u2514\u2500\u2500 Len(3)\\n            \u2514\u2500\u2500 Expected length 3, provided length 4')"], "Require.Name()": [">>> import typing as tp", ">>> def func1(ix: tp.Annotated[sf.Index[np.int64], sf.Require.Name(\"y\")]): return ix.max()", ">>> func2 = sf.CallGuard.check(func1)", ">>> ix1 = sf.Index((1024, 2048, 4096), name='y')", ">>> ix1", "<Index: y>", "1024", "2048", "4096", "<int64>", ">>> func2(ix1)", "4096", ">>> ix2 = sf.Index((0, 1024, -2048, 4096))", ">>> ix2", "<Index>", "0", "1024", "-2048", "4096", "<int64>", ">>> func2(ix2)", "ClinicError(\"\\nIn args of (ix: Annotated[Index[int64], Name(y)]) -> Any\\n\u2514\u2500\u2500 In arg ix\\n    \u2514\u2500\u2500 Annotated[Index[int64], Name(y)]\\n        \u2514\u2500\u2500 Name(y)\\n            \u2514\u2500\u2500 Expected name 'y', provided name None\")"], "Require.Shape()": [">>> import typing as tp", ">>> def func1(f: tp.Annotated[sf.TFrameAny, sf.Require.Shape(3, 2)]): return f.sum().sum()", ">>> func2 = sf.CallGuard.check(func1)", ">>> f1 = sf.Frame(np.arange(6).reshape(3,2), index=('p', 'q', 'r'), columns=('a', 'b'), name='x')", ">>> f1", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          0       1", "q          2       3", "r          4       5", "<<U1>      <int64> <int64>", ">>> func2(f1)", "15", ">>> f2 = sf.Frame.from_fields(((2, 9), (3, 8)), columns=('a', 'b'), index=('p', 'q'), name='x')", ">>> f2", "<Frame: x>", "<Index>    a       b       <<U1>", "<Index>", "p          2       3", "q          9       8", "<<U1>      <int64> <int64>", ">>> func2(f2)", "ClinicError('\\nIn args of (f: Annotated[Frame[Any, Any, Unpack[Tuple[Any, ...]]], Shape((3, 2))]) -> Any\\n\u2514\u2500\u2500 In arg f\\n    \u2514\u2500\u2500 Annotated[Frame[Any, Any, Unpack[Tuple[Any, ...]]], Shape((3, 2))]\\n        \u2514\u2500\u2500 Shape((3, 2))\\n            \u2514\u2500\u2500 Expected shape ((3, 2)), provided shape (2, 2)')"]}